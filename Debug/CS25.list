
CS25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015df8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  08015fd8  08015fd8  00016fd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080166f8  080166f8  000182c0  2**0
                  CONTENTS
  4 .ARM          00000008  080166f8  080166f8  000176f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016700  08016700  000182c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016700  08016700  00017700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016704  08016704  00017704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c0  20000000  08016708  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001468  200002c0  080169c8  000182c0  2**3
                  ALLOC
 10 ._user_heap_stack 00001500  20001728  080169c8  00018728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000182c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000344ff  00000000  00000000  000182f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f91  00000000  00000000  0004c7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b98  00000000  00000000  00053780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002194  00000000  00000000  00056318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b2d8  00000000  00000000  000584ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037582  00000000  00000000  00083784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010067f  00000000  00000000  000bad06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bb385  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cd98  00000000  00000000  001bb3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001c8160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002c0 	.word	0x200002c0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015fc0 	.word	0x08015fc0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002c4 	.word	0x200002c4
 800021c:	08015fc0 	.word	0x08015fc0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <get_current_token>:
//
//
//	return CMD_OK;
//}

static void get_current_token(const uint8_t token_size, char* token, char** cmd_ptr){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	73fb      	strb	r3, [r7, #15]
	uint8_t char_cnt = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 0; i < token_size; i++){
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75bb      	strb	r3, [r7, #22]
 8000f9e:	e023      	b.n	8000fe8 <get_current_token+0x60>
		token[i] = **cmd_ptr;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	7dbb      	ldrb	r3, [r7, #22]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	440b      	add	r3, r1
 8000faa:	7812      	ldrb	r2, [r2, #0]
 8000fac:	701a      	strb	r2, [r3, #0]
		(*cmd_ptr)++;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	601a      	str	r2, [r3, #0]
		if(token[i] == ',' || token[i] == '\0'){
 8000fb8:	7dbb      	ldrb	r3, [r7, #22]
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b2c      	cmp	r3, #44	@ 0x2c
 8000fc2:	d005      	beq.n	8000fd0 <get_current_token+0x48>
 8000fc4:	7dbb      	ldrb	r3, [r7, #22]
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d105      	bne.n	8000fdc <get_current_token+0x54>
			token[i] = '\0';
 8000fd0:	7dbb      	ldrb	r3, [r7, #22]
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
			break;
 8000fda:	e009      	b.n	8000ff0 <get_current_token+0x68>
		}else{
			char_cnt++;
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 0; i < token_size; i++){
 8000fe2:	7dbb      	ldrb	r3, [r7, #22]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	75bb      	strb	r3, [r7, #22]
 8000fe8:	7dba      	ldrb	r2, [r7, #22]
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d3d7      	bcc.n	8000fa0 <get_current_token+0x18>
		}
	}

	// Assign CMD_ECHO to the current command
	memset(global_mission_data.CMD_ECHO, 0, 10);
 8000ff0:	220a      	movs	r2, #10
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4806      	ldr	r0, [pc, #24]	@ (8001010 <get_current_token+0x88>)
 8000ff6:	f012 f835 	bl	8013064 <memset>
	strncat(global_mission_data.CMD_ECHO, token, char_cnt);
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	4803      	ldr	r0, [pc, #12]	@ (8001010 <get_current_token+0x88>)
 8001002:	f011 ff9b 	bl	8012f3c <strncat>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000351 	.word	0x20000351

08001014 <verify_time_format>:

static uint8_t verify_time_format(const char* time){
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	if (time == NULL || strlen(time) != 8)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d005      	beq.n	800102e <verify_time_format+0x1a>
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff f94c 	bl	80002c0 <strlen>
 8001028:	4603      	mov	r3, r0
 800102a:	2b08      	cmp	r3, #8
 800102c:	d001      	beq.n	8001032 <verify_time_format+0x1e>
		return 0;
 800102e:	2300      	movs	r3, #0
 8001030:	e053      	b.n	80010da <verify_time_format+0xc6>
	
	uint8_t numTokens = 1;
 8001032:	2301      	movs	r3, #1
 8001034:	75fb      	strb	r3, [r7, #23]
	char* endptr;
	int val;

    // Keep printing tokens while one of the
    // delimiters present in str[].
	char* token = strtok(time, ":");
 8001036:	492b      	ldr	r1, [pc, #172]	@ (80010e4 <verify_time_format+0xd0>)
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f011 ffb7 	bl	8012fac <strtok>
 800103e:	6138      	str	r0, [r7, #16]
    while (token != NULL) {
 8001040:	e042      	b.n	80010c8 <verify_time_format+0xb4>
		// Ensure that the time integer is valid
		val = strtol(token, &endptr, 10);
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	220a      	movs	r2, #10
 8001048:	4619      	mov	r1, r3
 800104a:	6938      	ldr	r0, [r7, #16]
 800104c:	f011 ff4e 	bl	8012eec <strtol>
 8001050:	60f8      	str	r0, [r7, #12]
		if (endptr == token || *endptr != '\0')
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	429a      	cmp	r2, r3
 8001058:	d003      	beq.n	8001062 <verify_time_format+0x4e>
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <verify_time_format+0x52>
			return 0;
 8001062:	2300      	movs	r3, #0
 8001064:	e039      	b.n	80010da <verify_time_format+0xc6>

		switch (numTokens) {
 8001066:	7dfb      	ldrb	r3, [r7, #23]
 8001068:	2b03      	cmp	r3, #3
 800106a:	d016      	beq.n	800109a <verify_time_format+0x86>
 800106c:	2b03      	cmp	r3, #3
 800106e:	dc1c      	bgt.n	80010aa <verify_time_format+0x96>
 8001070:	2b01      	cmp	r3, #1
 8001072:	d002      	beq.n	800107a <verify_time_format+0x66>
 8001074:	2b02      	cmp	r3, #2
 8001076:	d008      	beq.n	800108a <verify_time_format+0x76>
			case 3:
				if (val > 60 || val < 0)
					return 0;
				break;
			default:
				break;
 8001078:	e017      	b.n	80010aa <verify_time_format+0x96>
				if (val > 23 || val < 0)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b17      	cmp	r3, #23
 800107e:	dc02      	bgt.n	8001086 <verify_time_format+0x72>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	da13      	bge.n	80010ae <verify_time_format+0x9a>
					return 0;
 8001086:	2300      	movs	r3, #0
 8001088:	e027      	b.n	80010da <verify_time_format+0xc6>
				if (val > 60 || val < 0)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2b3c      	cmp	r3, #60	@ 0x3c
 800108e:	dc02      	bgt.n	8001096 <verify_time_format+0x82>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	da0d      	bge.n	80010b2 <verify_time_format+0x9e>
					return 0;
 8001096:	2300      	movs	r3, #0
 8001098:	e01f      	b.n	80010da <verify_time_format+0xc6>
				if (val > 60 || val < 0)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2b3c      	cmp	r3, #60	@ 0x3c
 800109e:	dc02      	bgt.n	80010a6 <verify_time_format+0x92>
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	da07      	bge.n	80010b6 <verify_time_format+0xa2>
					return 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e017      	b.n	80010da <verify_time_format+0xc6>
				break;
 80010aa:	bf00      	nop
 80010ac:	e004      	b.n	80010b8 <verify_time_format+0xa4>
				break;
 80010ae:	bf00      	nop
 80010b0:	e002      	b.n	80010b8 <verify_time_format+0xa4>
				break;
 80010b2:	bf00      	nop
 80010b4:	e000      	b.n	80010b8 <verify_time_format+0xa4>
				break;
 80010b6:	bf00      	nop
		}
		token = strtok(NULL, ":");
 80010b8:	490a      	ldr	r1, [pc, #40]	@ (80010e4 <verify_time_format+0xd0>)
 80010ba:	2000      	movs	r0, #0
 80010bc:	f011 ff76 	bl	8012fac <strtok>
 80010c0:	6138      	str	r0, [r7, #16]
		numTokens++;
 80010c2:	7dfb      	ldrb	r3, [r7, #23]
 80010c4:	3301      	adds	r3, #1
 80010c6:	75fb      	strb	r3, [r7, #23]
    while (token != NULL) {
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1b9      	bne.n	8001042 <verify_time_format+0x2e>
    }

	return numTokens == 3;
 80010ce:	7dfb      	ldrb	r3, [r7, #23]
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	bf0c      	ite	eq
 80010d4:	2301      	moveq	r3, #1
 80010d6:	2300      	movne	r3, #0
 80010d8:	b2db      	uxtb	r3, r3
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	08015fd8 	.word	0x08015fd8

080010e8 <verify_cmd_header>:

static CMD_STATUS verify_cmd_header(const char* incoming){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	if(strncmp(incoming, "CMD,3174,", CMD_HEADER_SIZE) != 0){
 80010f0:	2209      	movs	r2, #9
 80010f2:	4907      	ldr	r1, [pc, #28]	@ (8001110 <verify_cmd_header+0x28>)
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f011 ff34 	bl	8012f62 <strncmp>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <verify_cmd_header+0x1c>
		return CMD_HEADER_INVLD;
 8001100:	2302      	movs	r3, #2
 8001102:	e000      	b.n	8001106 <verify_cmd_header+0x1e>
	}
	return CMD_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	08015fdc 	.word	0x08015fdc

08001114 <perform_CX>:

static CMD_STATUS perform_CX(const char* incoming, char* cmd_ptr){
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
	char on_off[MAX_CX_SIZE];
	get_current_token(MAX_CX_SIZE, on_off, &cmd_ptr);
 800111e:	463a      	mov	r2, r7
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	4619      	mov	r1, r3
 8001126:	2004      	movs	r0, #4
 8001128:	f7ff ff2e 	bl	8000f88 <get_current_token>

	if(!strncmp(on_off, "ON", 2)){
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2202      	movs	r2, #2
 8001132:	4910      	ldr	r1, [pc, #64]	@ (8001174 <perform_CX+0x60>)
 8001134:	4618      	mov	r0, r3
 8001136:	f011 ff14 	bl	8012f62 <strncmp>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d104      	bne.n	800114a <perform_CX+0x36>
	    // Set global flag
		telemetry_enable = 1;
 8001140:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <perform_CX+0x64>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
		return CMD_CX_ON;
 8001146:	2303      	movs	r3, #3
 8001148:	e00f      	b.n	800116a <perform_CX+0x56>
	}else if(!strncmp(on_off, "OFF", 3)){
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	2203      	movs	r2, #3
 8001150:	490a      	ldr	r1, [pc, #40]	@ (800117c <perform_CX+0x68>)
 8001152:	4618      	mov	r0, r3
 8001154:	f011 ff05 	bl	8012f62 <strncmp>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d104      	bne.n	8001168 <perform_CX+0x54>
		telemetry_enable = 0;
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <perform_CX+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
		return CMD_CX_OFF;
 8001164:	2304      	movs	r3, #4
 8001166:	e000      	b.n	800116a <perform_CX+0x56>
	}else{
	    //invalid, do nothing, or set error code somehow?
		return CMD_CX_INVLD;
 8001168:	2305      	movs	r3, #5
	}
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	08015fe8 	.word	0x08015fe8
 8001178:	20000000 	.word	0x20000000
 800117c:	08015fec 	.word	0x08015fec

08001180 <perform_ST>:

static CMD_STATUS perform_ST(const char* incoming, char* cmd_ptr){
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	char time[MAX_ST_SIZE];
	get_current_token(MAX_ST_SIZE, time, &cmd_ptr);
 800118a:	463a      	mov	r2, r7
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	4619      	mov	r1, r3
 8001192:	2009      	movs	r0, #9
 8001194:	f7ff fef8 	bl	8000f88 <get_current_token>

	if(!strncmp(time, "GPS", 3)){
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	2203      	movs	r2, #3
 800119e:	4912      	ldr	r1, [pc, #72]	@ (80011e8 <perform_ST+0x68>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f011 fede 	bl	8012f62 <strncmp>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d104      	bne.n	80011b6 <perform_ST+0x36>
		gps_time_enable = 1;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <perform_ST+0x6c>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
		return CMD_ST_GPS;
 80011b2:	2306      	movs	r3, #6
 80011b4:	e014      	b.n	80011e0 <perform_ST+0x60>
	}else{
	  //first verify if in right format (not null pointer, colons in right place, all digits)
	  //then use macro, or helper func another file kinda needs to be made for that (including verifying above)
	  if(verify_time_format(time)){
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ff2a 	bl	8001014 <verify_time_format>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <perform_ST+0x5e>
		  gps_time_enable = 0;
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <perform_ST+0x6c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
		  strncpy(global_mission_data.MISSION_TIME, cmd_ptr + 3, 8);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	3303      	adds	r3, #3
 80011d0:	2208      	movs	r2, #8
 80011d2:	4619      	mov	r1, r3
 80011d4:	4806      	ldr	r0, [pc, #24]	@ (80011f0 <perform_ST+0x70>)
 80011d6:	f011 fed6 	bl	8012f86 <strncpy>
		  return CMD_ST_UTC;
 80011da:	2307      	movs	r3, #7
 80011dc:	e000      	b.n	80011e0 <perform_ST+0x60>
	  }else{
		  return CMD_ST_INVLD;
 80011de:	2308      	movs	r3, #8
	  }
	}
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	08015ff0 	.word	0x08015ff0
 80011ec:	20000001 	.word	0x20000001
 80011f0:	200002f2 	.word	0x200002f2

080011f4 <perform_SIM>:

static CMD_STATUS perform_SIM(const char* incoming, char* cmd_ptr){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	char sim[MAX_SIM_SIZE];
	get_current_token(MAX_SIM_SIZE, sim, &cmd_ptr);
 80011fe:	463a      	mov	r2, r7
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4619      	mov	r1, r3
 8001206:	2009      	movs	r0, #9
 8001208:	f7ff febe 	bl	8000f88 <get_current_token>

	if(!strncmp(sim, "ENABLE", 6)){
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2206      	movs	r2, #6
 8001212:	491c      	ldr	r1, [pc, #112]	@ (8001284 <perform_SIM+0x90>)
 8001214:	4618      	mov	r0, r3
 8001216:	f011 fea4 	bl	8012f62 <strncmp>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d104      	bne.n	800122a <perform_SIM+0x36>
		sim_enabled = 1;
 8001220:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <perform_SIM+0x94>)
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
		return CMD_SIM_E;
 8001226:	2309      	movs	r3, #9
 8001228:	e027      	b.n	800127a <perform_SIM+0x86>
	}else if(!strncmp(sim, "ACTIVATE", 8)){
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	2208      	movs	r2, #8
 8001230:	4916      	ldr	r1, [pc, #88]	@ (800128c <perform_SIM+0x98>)
 8001232:	4618      	mov	r0, r3
 8001234:	f011 fe95 	bl	8012f62 <strncmp>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10a      	bne.n	8001254 <perform_SIM+0x60>
		if(sim_enabled){
 800123e:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <perform_SIM+0x94>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d004      	beq.n	8001250 <perform_SIM+0x5c>
			global_mission_data.MODE = 'S';
 8001246:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <perform_SIM+0x9c>)
 8001248:	2253      	movs	r2, #83	@ 0x53
 800124a:	741a      	strb	r2, [r3, #16]
			return CMD_SIM_S;
 800124c:	230a      	movs	r3, #10
 800124e:	e014      	b.n	800127a <perform_SIM+0x86>
		}
		return CMD_SIM_NE;
 8001250:	230b      	movs	r3, #11
 8001252:	e012      	b.n	800127a <perform_SIM+0x86>
	}else if(!strncmp(sim, "DISABLE", 7)){
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2207      	movs	r2, #7
 800125a:	490e      	ldr	r1, [pc, #56]	@ (8001294 <perform_SIM+0xa0>)
 800125c:	4618      	mov	r0, r3
 800125e:	f011 fe80 	bl	8012f62 <strncmp>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d107      	bne.n	8001278 <perform_SIM+0x84>
		sim_enabled = 0;
 8001268:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <perform_SIM+0x94>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
		global_mission_data.MODE = 'F';
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <perform_SIM+0x9c>)
 8001270:	2246      	movs	r2, #70	@ 0x46
 8001272:	741a      	strb	r2, [r3, #16]
		return CMD_SIM_F;
 8001274:	230c      	movs	r3, #12
 8001276:	e000      	b.n	800127a <perform_SIM+0x86>
	}else{
		return CMD_SIM_INVLD;
 8001278:	230d      	movs	r3, #13
	}
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	08015ff4 	.word	0x08015ff4
 8001288:	200002dc 	.word	0x200002dc
 800128c:	08015ffc 	.word	0x08015ffc
 8001290:	200002f0 	.word	0x200002f0
 8001294:	08016008 	.word	0x08016008

08001298 <perform_SIMP>:

static CMD_STATUS perform_SIMP(const char* incoming, char* cmd_ptr){
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
	char simp[MAX_SIMP_SIZE];
	get_current_token(MAX_SIMP_SIZE, simp, &cmd_ptr);
 80012a2:	463a      	mov	r2, r7
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4619      	mov	r1, r3
 80012aa:	2007      	movs	r0, #7
 80012ac:	f7ff fe6c 	bl	8000f88 <get_current_token>

	// Verify that the pressure parameter is an integer
	char* endptr;
	int pressure = strtol(simp, &endptr, 10);
 80012b0:	f107 0108 	add.w	r1, r7, #8
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	220a      	movs	r2, #10
 80012ba:	4618      	mov	r0, r3
 80012bc:	f011 fe16 	bl	8012eec <strtol>
 80012c0:	6178      	str	r0, [r7, #20]
	if (endptr == simp || *endptr != '\0')
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d003      	beq.n	80012d4 <perform_SIMP+0x3c>
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <perform_SIMP+0x40>
		return CMD_SIMP_INVLD;
 80012d4:	230f      	movs	r3, #15
 80012d6:	e00d      	b.n	80012f4 <perform_SIMP+0x5c>

	// Convert from Pa to kPa
	simulated_pressure = (double)pressure / 1000;
 80012d8:	6978      	ldr	r0, [r7, #20]
 80012da:	f7ff f94b 	bl	8000574 <__aeabi_i2d>
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <perform_SIMP+0x64>)
 80012e4:	f7ff fada 	bl	800089c <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4904      	ldr	r1, [pc, #16]	@ (8001300 <perform_SIMP+0x68>)
 80012ee:	e9c1 2300 	strd	r2, r3, [r1]
	return CMD_SIMP_RX;
 80012f2:	230e      	movs	r3, #14
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	408f4000 	.word	0x408f4000
 8001300:	200002e8 	.word	0x200002e8

08001304 <perform_CAL>:

static CMD_STATUS perform_CAL(){
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	if (!strncmp(global_mission_data.STATE, "LAUNCH_PAD", 10))
 8001308:	220a      	movs	r2, #10
 800130a:	490c      	ldr	r1, [pc, #48]	@ (800133c <perform_CAL+0x38>)
 800130c:	480c      	ldr	r0, [pc, #48]	@ (8001340 <perform_CAL+0x3c>)
 800130e:	f011 fe28 	bl	8012f62 <strncmp>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <perform_CAL+0x18>
		return CMD_CAL_INVLD;
 8001318:	2311      	movs	r3, #17
 800131a:	e00d      	b.n	8001338 <perform_CAL+0x34>

	altitude_offset = global_mission_data.ALTITUDE;
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <perform_CAL+0x40>)
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f939 	bl	8000598 <__aeabi_f2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4907      	ldr	r1, [pc, #28]	@ (8001348 <perform_CAL+0x44>)
 800132c:	e9c1 2300 	strd	r2, r3, [r1]
	is_calibrated = 1;
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <perform_CAL+0x48>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
	return CMD_CAL_RX;
 8001336:	2310      	movs	r3, #16
}
 8001338:	4618      	mov	r0, r3
 800133a:	bd80      	pop	{r7, pc}
 800133c:	08016010 	.word	0x08016010
 8001340:	20000301 	.word	0x20000301
 8001344:	200002f0 	.word	0x200002f0
 8001348:	200002e0 	.word	0x200002e0
 800134c:	200002dd 	.word	0x200002dd

08001350 <perform_MEC>:

static CMD_STATUS perform_MEC(const char* incoming, char* cmd_ptr){
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	char mec[MAX_MEC_SIZE];
	get_current_token(MAX_MEC_SIZE, mec, &cmd_ptr);
 800135a:	463a      	mov	r2, r7
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	4619      	mov	r1, r3
 8001362:	2009      	movs	r0, #9
 8001364:	f7ff fe10 	bl	8000f88 <get_current_token>

	if(!strncmp(mec, "WIRE", 4)){
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2204      	movs	r2, #4
 800136e:	4916      	ldr	r1, [pc, #88]	@ (80013c8 <perform_MEC+0x78>)
 8001370:	4618      	mov	r0, r3
 8001372:	f011 fdf6 	bl	8012f62 <strncmp>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d11f      	bne.n	80013bc <perform_MEC+0x6c>
		if (!strncmp(mec + 5, "ON", 2)) {
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	3305      	adds	r3, #5
 8001382:	2202      	movs	r2, #2
 8001384:	4911      	ldr	r1, [pc, #68]	@ (80013cc <perform_MEC+0x7c>)
 8001386:	4618      	mov	r0, r3
 8001388:	f011 fdeb 	bl	8012f62 <strncmp>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d104      	bne.n	800139c <perform_MEC+0x4c>
			mec_wire_enable = 1;
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <perform_MEC+0x80>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
			return CMD_MEC_WIRE;
 8001398:	2312      	movs	r3, #18
 800139a:	e011      	b.n	80013c0 <perform_MEC+0x70>
		} else if (!strncmp(mec + 5, "OFF", 3)) {
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	3305      	adds	r3, #5
 80013a2:	2203      	movs	r2, #3
 80013a4:	490b      	ldr	r1, [pc, #44]	@ (80013d4 <perform_MEC+0x84>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f011 fddb 	bl	8012f62 <strncmp>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <perform_MEC+0x70>
			mec_wire_enable = 0;
 80013b2:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <perform_MEC+0x80>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
			return CMD_MEC_WIRE;
 80013b8:	2312      	movs	r3, #18
 80013ba:	e001      	b.n	80013c0 <perform_MEC+0x70>
		}
	}else{
		return CMD_MEC_INVLD; //add the rest of status codes as more mechanisms added
 80013bc:	2313      	movs	r3, #19
 80013be:	e7ff      	b.n	80013c0 <perform_MEC+0x70>
	}
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	0801601c 	.word	0x0801601c
 80013cc:	08015fe8 	.word	0x08015fe8
 80013d0:	200002de 	.word	0x200002de
 80013d4:	08015fec 	.word	0x08015fec

080013d8 <process_command>:

CMD_STATUS process_command(char* incoming){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
//		if(cmd_status != CMD_OK){
//			return cmd_status;
//		}

	//make sure the beginning is CMD,3174,
	cmd_status = verify_cmd_header(incoming);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fe81 	bl	80010e8 <verify_cmd_header>
 80013e6:	4603      	mov	r3, r0
 80013e8:	75fb      	strb	r3, [r7, #23]

	if(cmd_status != CMD_OK){
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <process_command+0x1c>
		//uart print error/status?
		return cmd_status;
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	e076      	b.n	80014e2 <process_command+0x10a>
	}

	char cmd[MAX_CMD_SIZE];
	char* cmd_ptr = incoming + CMD_HEADER_SIZE; //magic numbers, define later todo
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3309      	adds	r3, #9
 80013f8:	60fb      	str	r3, [r7, #12]

	get_current_token(MAX_CMD_SIZE, cmd, &cmd_ptr);
 80013fa:	f107 020c 	add.w	r2, r7, #12
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4619      	mov	r1, r3
 8001404:	2005      	movs	r0, #5
 8001406:	f7ff fdbf 	bl	8000f88 <get_current_token>

	if(!strncmp(cmd, "CX", 2)){ //Payload Telemetry On/Off Command
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	2202      	movs	r2, #2
 8001410:	4936      	ldr	r1, [pc, #216]	@ (80014ec <process_command+0x114>)
 8001412:	4618      	mov	r0, r3
 8001414:	f011 fda5 	bl	8012f62 <strncmp>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d107      	bne.n	800142e <process_command+0x56>
		cmd_status = perform_CX(incoming, cmd_ptr);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4619      	mov	r1, r3
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff fe76 	bl	8001114 <perform_CX>
 8001428:	4603      	mov	r3, r0
 800142a:	75fb      	strb	r3, [r7, #23]
 800142c:	e058      	b.n	80014e0 <process_command+0x108>
	}else if(!strncmp(cmd, "ST", 2)){ //Set Time
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	2202      	movs	r2, #2
 8001434:	492e      	ldr	r1, [pc, #184]	@ (80014f0 <process_command+0x118>)
 8001436:	4618      	mov	r0, r3
 8001438:	f011 fd93 	bl	8012f62 <strncmp>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d107      	bne.n	8001452 <process_command+0x7a>
		cmd_status = perform_ST(incoming, cmd_ptr);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4619      	mov	r1, r3
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fe9a 	bl	8001180 <perform_ST>
 800144c:	4603      	mov	r3, r0
 800144e:	75fb      	strb	r3, [r7, #23]
 8001450:	e046      	b.n	80014e0 <process_command+0x108>
	}else if(!strncmp(cmd, "SIM", 3)){ //Simulation Mode Control Command
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	2203      	movs	r2, #3
 8001458:	4926      	ldr	r1, [pc, #152]	@ (80014f4 <process_command+0x11c>)
 800145a:	4618      	mov	r0, r3
 800145c:	f011 fd81 	bl	8012f62 <strncmp>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d107      	bne.n	8001476 <process_command+0x9e>
		cmd_status = perform_SIM(incoming, cmd_ptr);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4619      	mov	r1, r3
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fec2 	bl	80011f4 <perform_SIM>
 8001470:	4603      	mov	r3, r0
 8001472:	75fb      	strb	r3, [r7, #23]
 8001474:	e034      	b.n	80014e0 <process_command+0x108>
	}else if(!strncmp(cmd, "SIMP", 4)){ //Simulated Pressure Data (to be used in Simulation Mode only)
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	2204      	movs	r2, #4
 800147c:	491e      	ldr	r1, [pc, #120]	@ (80014f8 <process_command+0x120>)
 800147e:	4618      	mov	r0, r3
 8001480:	f011 fd6f 	bl	8012f62 <strncmp>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d107      	bne.n	800149a <process_command+0xc2>
		cmd_status = perform_SIMP(incoming, cmd_ptr);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4619      	mov	r1, r3
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ff02 	bl	8001298 <perform_SIMP>
 8001494:	4603      	mov	r3, r0
 8001496:	75fb      	strb	r3, [r7, #23]
 8001498:	e022      	b.n	80014e0 <process_command+0x108>
	}else if(!strncmp(cmd, "CAL", 3)){ //Calibrate Altitude to Zero
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	2203      	movs	r2, #3
 80014a0:	4916      	ldr	r1, [pc, #88]	@ (80014fc <process_command+0x124>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f011 fd5d 	bl	8012f62 <strncmp>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d104      	bne.n	80014b8 <process_command+0xe0>
		cmd_status = perform_CAL();
 80014ae:	f7ff ff29 	bl	8001304 <perform_CAL>
 80014b2:	4603      	mov	r3, r0
 80014b4:	75fb      	strb	r3, [r7, #23]
 80014b6:	e013      	b.n	80014e0 <process_command+0x108>
	}else if(!strncmp(cmd, "MEC", 3)){ //Mechanism actuation command
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	2203      	movs	r2, #3
 80014be:	4910      	ldr	r1, [pc, #64]	@ (8001500 <process_command+0x128>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f011 fd4e 	bl	8012f62 <strncmp>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d107      	bne.n	80014dc <process_command+0x104>
		cmd_status = perform_MEC(incoming, cmd_ptr);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4619      	mov	r1, r3
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff3d 	bl	8001350 <perform_MEC>
 80014d6:	4603      	mov	r3, r0
 80014d8:	75fb      	strb	r3, [r7, #23]
 80014da:	e001      	b.n	80014e0 <process_command+0x108>
	}else{
		return CMD_INVLD;
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <process_command+0x10a>
	}

	return cmd_status;
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	08016024 	.word	0x08016024
 80014f0:	08016028 	.word	0x08016028
 80014f4:	0801602c 	.word	0x0801602c
 80014f8:	08016030 	.word	0x08016030
 80014fc:	08016038 	.word	0x08016038
 8001500:	0801603c 	.word	0x0801603c

08001504 <init_mission_data>:
volatile double simulated_pressure = 0.0;

Mission_Data global_mission_data = {0};

void init_mission_data(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	memset(&global_mission_data, 0, sizeof(global_mission_data));
 8001508:	226c      	movs	r2, #108	@ 0x6c
 800150a:	2100      	movs	r1, #0
 800150c:	4829      	ldr	r0, [pc, #164]	@ (80015b4 <init_mission_data+0xb0>)
 800150e:	f011 fda9 	bl	8013064 <memset>

	global_mission_data.TEAM_ID = 3174;
 8001512:	4b28      	ldr	r3, [pc, #160]	@ (80015b4 <init_mission_data+0xb0>)
 8001514:	f640 4266 	movw	r2, #3174	@ 0xc66
 8001518:	801a      	strh	r2, [r3, #0]
	strcpy(global_mission_data.MISSION_TIME, "XX:XX:XX"); // TEMP
 800151a:	4b26      	ldr	r3, [pc, #152]	@ (80015b4 <init_mission_data+0xb0>)
 800151c:	4926      	ldr	r1, [pc, #152]	@ (80015b8 <init_mission_data+0xb4>)
 800151e:	1c9a      	adds	r2, r3, #2
 8001520:	460b      	mov	r3, r1
 8001522:	cb03      	ldmia	r3!, {r0, r1}
 8001524:	6010      	str	r0, [r2, #0]
 8001526:	6051      	str	r1, [r2, #4]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	7213      	strb	r3, [r2, #8]
	global_mission_data.PACKET_COUNT = 0;				  // TEMP
 800152c:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <init_mission_data+0xb0>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
	global_mission_data.MODE = 'F';
 8001532:	4b20      	ldr	r3, [pc, #128]	@ (80015b4 <init_mission_data+0xb0>)
 8001534:	2246      	movs	r2, #70	@ 0x46
 8001536:	741a      	strb	r2, [r3, #16]
	strcpy(global_mission_data.STATE, "LAUNCH_PAD");
 8001538:	4a20      	ldr	r2, [pc, #128]	@ (80015bc <init_mission_data+0xb8>)
 800153a:	4b21      	ldr	r3, [pc, #132]	@ (80015c0 <init_mission_data+0xbc>)
 800153c:	cb03      	ldmia	r3!, {r0, r1}
 800153e:	6010      	str	r0, [r2, #0]
 8001540:	6051      	str	r1, [r2, #4]
 8001542:	8819      	ldrh	r1, [r3, #0]
 8001544:	789b      	ldrb	r3, [r3, #2]
 8001546:	8111      	strh	r1, [r2, #8]
 8001548:	7293      	strb	r3, [r2, #10]
	global_mission_data.ALTITUDE = 0.0;				  // temp
 800154a:	4b1a      	ldr	r3, [pc, #104]	@ (80015b4 <init_mission_data+0xb0>)
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	621a      	str	r2, [r3, #32]
	global_mission_data.MAG_R = 0.0;				  // TEMP
 8001552:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <init_mission_data+0xb0>)
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	63da      	str	r2, [r3, #60]	@ 0x3c
	global_mission_data.MAG_P = 0.0;				  // TEMP
 800155a:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <init_mission_data+0xb0>)
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	641a      	str	r2, [r3, #64]	@ 0x40
	global_mission_data.MAG_Y = 0.0;				  // TEMP
 8001562:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <init_mission_data+0xb0>)
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	645a      	str	r2, [r3, #68]	@ 0x44
	global_mission_data.AUTO_GYRO_ROTATION_RATE = 0;  // TEMP
 800156a:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <init_mission_data+0xb0>)
 800156c:	2200      	movs	r2, #0
 800156e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	strcpy(global_mission_data.GPS_TIME, "XX:XX:XX"); // TEMP
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <init_mission_data+0xb0>)
 8001574:	4910      	ldr	r1, [pc, #64]	@ (80015b8 <init_mission_data+0xb4>)
 8001576:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 800157a:	460b      	mov	r3, r1
 800157c:	cb03      	ldmia	r3!, {r0, r1}
 800157e:	6010      	str	r0, [r2, #0]
 8001580:	6051      	str	r1, [r2, #4]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	7213      	strb	r3, [r2, #8]
	global_mission_data.GPS_ALTITUDE = 0.0;			  // TEMP
 8001586:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <init_mission_data+0xb0>)
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	655a      	str	r2, [r3, #84]	@ 0x54
	global_mission_data.GPS_LATITUDE = 0.0;			  // TEMP
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <init_mission_data+0xb0>)
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	659a      	str	r2, [r3, #88]	@ 0x58
	global_mission_data.GPS_LONGITUDE = 0.0;		  // TEMP
 8001596:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <init_mission_data+0xb0>)
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	65da      	str	r2, [r3, #92]	@ 0x5c
	global_mission_data.GPS_SATS = 0;				  // TEMP
 800159e:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <init_mission_data+0xb0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	strcpy(global_mission_data.CMD_ECHO, "CMD");	  // TEMP
 80015a6:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <init_mission_data+0xc0>)
 80015a8:	4a07      	ldr	r2, [pc, #28]	@ (80015c8 <init_mission_data+0xc4>)
 80015aa:	6810      	ldr	r0, [r2, #0]
 80015ac:	6018      	str	r0, [r3, #0]
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200002f0 	.word	0x200002f0
 80015b8:	080160a8 	.word	0x080160a8
 80015bc:	20000301 	.word	0x20000301
 80015c0:	080160b4 	.word	0x080160b4
 80015c4:	20000351 	.word	0x20000351
 80015c8:	080160c0 	.word	0x080160c0

080015cc <_write>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int fd, char *ptr, int len)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  // ignore fd, just send to UART3
  HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	4804      	ldr	r0, [pc, #16]	@ (80015f4 <_write+0x28>)
 80015e4:	f00b f9dd 	bl	800c9a2 <HAL_UART_Transmit>
  return len;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000778 	.word	0x20000778

080015f8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80015f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015fc:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8001600:	af12      	add	r7, sp, #72	@ 0x48

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8001602:	f003 f94b 	bl	800489c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001606:	f000 fa7b 	bl	8001b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160a:	f001 f83b 	bl	8002684 <MX_GPIO_Init>
  MX_DMA_Init();
 800160e:	f001 f80f 	bl	8002630 <MX_DMA_Init>
  MX_ADC1_Init();
 8001612:	f000 fb07 	bl	8001c24 <MX_ADC1_Init>
  MX_I2C3_Init();
 8001616:	f000 fba5 	bl	8001d64 <MX_I2C3_Init>
  MX_IRTIM_Init();
 800161a:	f000 fbe3 	bl	8001de4 <MX_IRTIM_Init>
  MX_RTC_Init();
 800161e:	f000 fbff 	bl	8001e20 <MX_RTC_Init>
  MX_SPI2_Init();
 8001622:	f000 fc31 	bl	8001e88 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001626:	f000 fc6d 	bl	8001f04 <MX_TIM1_Init>
  MX_TIM3_Init();
 800162a:	f000 fce5 	bl	8001ff8 <MX_TIM3_Init>
  MX_TIM8_Init();
 800162e:	f000 fd7b 	bl	8002128 <MX_TIM8_Init>
  MX_TIM15_Init();
 8001632:	f000 fdf3 	bl	800221c <MX_TIM15_Init>
  MX_TIM16_Init();
 8001636:	f000 fe77 	bl	8002328 <MX_TIM16_Init>
  MX_TIM17_Init();
 800163a:	f000 feeb 	bl	8002414 <MX_TIM17_Init>
  MX_UART5_Init();
 800163e:	f000 ff5f 	bl	8002500 <MX_UART5_Init>
  MX_RNG_Init();
 8001642:	f000 fbd7 	bl	8001df4 <MX_RNG_Init>
  MX_USB_Device_Init();
 8001646:	f010 f941 	bl	80118cc <MX_USB_Device_Init>
  MX_USART3_UART_Init();
 800164a:	f000 ffa5 	bl	8002598 <MX_USART3_UART_Init>
  MX_CORDIC_Init();
 800164e:	f000 fb61 	bl	8001d14 <MX_CORDIC_Init>
  MX_FMAC_Init();
 8001652:	f000 fb73 	bl	8001d3c <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */
  // Feedback LED
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 8001656:	2201      	movs	r2, #1
 8001658:	2180      	movs	r1, #128	@ 0x80
 800165a:	4848      	ldr	r0, [pc, #288]	@ (800177c <main+0x184>)
 800165c:	f005 f82a 	bl	80066b4 <HAL_GPIO_WritePin>

  // Enable GPS and XBEE
  HAL_GPIO_WritePin(XBEE_RST_GPIO_Port, XBEE_RST_Pin, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800166a:	f005 f823 	bl	80066b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2120      	movs	r1, #32
 8001672:	4842      	ldr	r0, [pc, #264]	@ (800177c <main+0x184>)
 8001674:	f005 f81e 	bl	80066b4 <HAL_GPIO_WritePin>
  HAL_Delay(3000); // wait for the Xbee to get brought back up again
 8001678:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800167c:	f003 f944 	bl	8004908 <HAL_Delay>

  // Disable ALL chip selects
  HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_SET);
 8001680:	2201      	movs	r2, #1
 8001682:	2104      	movs	r1, #4
 8001684:	483d      	ldr	r0, [pc, #244]	@ (800177c <main+0x184>)
 8001686:	f005 f815 	bl	80066b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BMP_nCS_GPIO_Port, BMP_nCS_Pin, GPIO_PIN_SET);
 800168a:	2201      	movs	r2, #1
 800168c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001690:	483a      	ldr	r0, [pc, #232]	@ (800177c <main+0x184>)
 8001692:	f005 f80f 	bl	80066b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MAG_nCS_GPIO_Port, MAG_nCS_Pin, GPIO_PIN_SET);
 8001696:	2201      	movs	r2, #1
 8001698:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800169c:	4837      	ldr	r0, [pc, #220]	@ (800177c <main+0x184>)
 800169e:	f005 f809 	bl	80066b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MAGEXT_nCS_GPIO_Port, MAGEXT_nCS_Pin, GPIO_PIN_SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016a8:	4834      	ldr	r0, [pc, #208]	@ (800177c <main+0x184>)
 80016aa:	f005 f803 	bl	80066b4 <HAL_GPIO_WritePin>

  // Initialize IMU
  ICM42688P_init(&hspi2, IMU_nCS_GPIO_Port, IMU_nCS_Pin);
 80016ae:	2204      	movs	r2, #4
 80016b0:	4932      	ldr	r1, [pc, #200]	@ (800177c <main+0x184>)
 80016b2:	4833      	ldr	r0, [pc, #204]	@ (8001780 <main+0x188>)
 80016b4:	f002 fb0a 	bl	8003ccc <ICM42688P_init>

  // Initialize MS5607
  MS5607_Init(&hspi2, BMP_nCS_GPIO_Port, BMP_nCS_Pin);
 80016b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016bc:	492f      	ldr	r1, [pc, #188]	@ (800177c <main+0x184>)
 80016be:	4830      	ldr	r0, [pc, #192]	@ (8001780 <main+0x188>)
 80016c0:	f002 fc2c 	bl	8003f1c <MS5607_Init>

  // Initialize BMM150
  struct bmm150_dev bmm150 = BMM150_spi_init(&hspi2, MAG_nCS_GPIO_Port, MAG_nCS_Pin);
 80016c4:	f507 70ce 	add.w	r0, r7, #412	@ 0x19c
 80016c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016cc:	4a2b      	ldr	r2, [pc, #172]	@ (800177c <main+0x184>)
 80016ce:	492c      	ldr	r1, [pc, #176]	@ (8001780 <main+0x188>)
 80016d0:	f002 f88c 	bl	80037ec <BMM150_spi_init>

  // Initialize LC76G
  LC76G_init();
 80016d4:	f002 fbc8 	bl	8003e68 <LC76G_init>

  // Initializing AMT10E2
  QENC_Init_Encoder0();
 80016d8:	f001 ffb2 	bl	8003640 <QENC_Init_Encoder0>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  int strlen = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  MS5607Readings bmp_data;
  ICM42688P_AccelData imu_data;
  BMM150_mag_data mag_data;
  LC76G_gps_data gps_data;

  uint8_t super_hot_resistor_cycle_limit = 3;
 80016e8:	2303      	movs	r3, #3
 80016ea:	f887 31cb 	strb.w	r3, [r7, #459]	@ 0x1cb
  uint8_t super_hot_resistor_cycles = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
  char command[64] = {0};
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80016fa:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80016fe:	223c      	movs	r2, #60	@ 0x3c
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f011 fcae 	bl	8013064 <memset>

  init_mission_data();
 8001708:	f7ff fefc 	bl	8001504 <init_mission_data>

  while (1)
  {
    // Receive command from ground station
    HAL_UART_Receive(&huart3, command, 64, 10);
 800170c:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8001710:	230a      	movs	r3, #10
 8001712:	2240      	movs	r2, #64	@ 0x40
 8001714:	481b      	ldr	r0, [pc, #108]	@ (8001784 <main+0x18c>)
 8001716:	f00b f9d2 	bl	800cabe <HAL_UART_Receive>
    process_command(command);
 800171a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fe5a 	bl	80013d8 <process_command>

    bmp_data = MS5607ReadValues();
 8001724:	f002 ffda 	bl	80046dc <MS5607ReadValues>
 8001728:	eeb0 6a40 	vmov.f32	s12, s0
 800172c:	eef0 6a60 	vmov.f32	s13, s1
 8001730:	eeb0 7a41 	vmov.f32	s14, s2
 8001734:	eef0 7a61 	vmov.f32	s15, s3
 8001738:	ed87 6b62 	vstr	d6, [r7, #392]	@ 0x188
 800173c:	ed87 7b64 	vstr	d7, [r7, #400]	@ 0x190
    imu_data = ICM42688P_read_data();
 8001740:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001744:	4618      	mov	r0, r3
 8001746:	f002 fb2d 	bl	8003da4 <ICM42688P_read_data>
    //gps_data = LC76G_read_data();

    // update mission struct
    global_mission_data.TEMPERATURE = bmp_data.temperature_C;
 800174a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	f7ff fa51 	bl	8000bf8 <__aeabi_d2f>
 8001756:	4603      	mov	r3, r0
 8001758:	4a0b      	ldr	r2, [pc, #44]	@ (8001788 <main+0x190>)
 800175a:	6253      	str	r3, [r2, #36]	@ 0x24

    // in simulation mode, update pressure to match what is parsed from command
    if (simulation_enable == 1)
 800175c:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <main+0x194>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b01      	cmp	r3, #1
 8001764:	d116      	bne.n	8001794 <main+0x19c>
    {
      global_mission_data.PRESSURE = simulated_pressure;
 8001766:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <main+0x198>)
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f7ff fa42 	bl	8000bf8 <__aeabi_d2f>
 8001774:	4603      	mov	r3, r0
 8001776:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <main+0x190>)
 8001778:	6293      	str	r3, [r2, #40]	@ 0x28
 800177a:	e014      	b.n	80017a6 <main+0x1ae>
 800177c:	48000400 	.word	0x48000400
 8001780:	200004b8 	.word	0x200004b8
 8001784:	20000778 	.word	0x20000778
 8001788:	200002f0 	.word	0x200002f0
 800178c:	200002df 	.word	0x200002df
 8001790:	200002e8 	.word	0x200002e8
    }
    // otherwise, update pressure to match data read from sensor
    else
    {
      global_mission_data.PRESSURE = bmp_data.pressure_kPa;
 8001794:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff fa2c 	bl	8000bf8 <__aeabi_d2f>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4ab2      	ldr	r2, [pc, #712]	@ (8001a6c <main+0x474>)
 80017a4:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    // if the calibrating flag is true, calibrate the altitude
    global_mission_data.ALTITUDE = calculateAltitude(global_mission_data.PRESSURE, is_calibrated);
 80017a6:	4bb1      	ldr	r3, [pc, #708]	@ (8001a6c <main+0x474>)
 80017a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fef4 	bl	8000598 <__aeabi_f2d>
 80017b0:	4604      	mov	r4, r0
 80017b2:	460d      	mov	r5, r1
 80017b4:	4bae      	ldr	r3, [pc, #696]	@ (8001a70 <main+0x478>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	ec45 4b10 	vmov	d0, r4, r5
 80017c0:	f002 ffea 	bl	8004798 <calculateAltitude>
 80017c4:	eef0 7a40 	vmov.f32	s15, s0
 80017c8:	4ba8      	ldr	r3, [pc, #672]	@ (8001a6c <main+0x474>)
 80017ca:	edc3 7a08 	vstr	s15, [r3, #32]
    is_calibrated = 0; // reset the flag
 80017ce:	4ba8      	ldr	r3, [pc, #672]	@ (8001a70 <main+0x478>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]

    // update battery voltage
    uint16_t battery_mV = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
    BQ28Z610_ReadVoltage(&hi2c3, &battery_mV);
 80017da:	f507 7383 	add.w	r3, r7, #262	@ 0x106
 80017de:	4619      	mov	r1, r3
 80017e0:	48a4      	ldr	r0, [pc, #656]	@ (8001a74 <main+0x47c>)
 80017e2:	f002 f9d4 	bl	8003b8e <BQ28Z610_ReadVoltage>
    global_mission_data.VOLTAGE = (float)(battery_mV) / 1000.0; // convert from mV to V
 80017e6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80017ea:	ee07 3a90 	vmov	s15, r3
 80017ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017f2:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8001a78 <main+0x480>
 80017f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017fa:	4b9c      	ldr	r3, [pc, #624]	@ (8001a6c <main+0x474>)
 80017fc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // gyro broken?
    global_mission_data.GYRO_R = imu_data.gyro_r;
 8001800:	f9b7 2184 	ldrsh.w	r2, [r7, #388]	@ 0x184
 8001804:	4b99      	ldr	r3, [pc, #612]	@ (8001a6c <main+0x474>)
 8001806:	861a      	strh	r2, [r3, #48]	@ 0x30
    global_mission_data.GYRO_P = imu_data.gyro_p;
 8001808:	f9b7 2180 	ldrsh.w	r2, [r7, #384]	@ 0x180
 800180c:	4b97      	ldr	r3, [pc, #604]	@ (8001a6c <main+0x474>)
 800180e:	865a      	strh	r2, [r3, #50]	@ 0x32
    global_mission_data.GYRO_Y = imu_data.gyro_y;
 8001810:	f9b7 2182 	ldrsh.w	r2, [r7, #386]	@ 0x182
 8001814:	4b95      	ldr	r3, [pc, #596]	@ (8001a6c <main+0x474>)
 8001816:	869a      	strh	r2, [r3, #52]	@ 0x34
    global_mission_data.AUTO_GYRO_ROTATION_RATE = QENC_Get_Encoder0_Count(); // encoder broken?
 8001818:	f001 ff4e 	bl	80036b8 <QENC_Get_Encoder0_Count>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	4b92      	ldr	r3, [pc, #584]	@ (8001a6c <main+0x474>)
 8001822:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

    // needs to be updated
    global_mission_data.ACCEL_R = imu_data.accel_r;
 8001826:	f9b7 217e 	ldrsh.w	r2, [r7, #382]	@ 0x17e
 800182a:	4b90      	ldr	r3, [pc, #576]	@ (8001a6c <main+0x474>)
 800182c:	86da      	strh	r2, [r3, #54]	@ 0x36
    global_mission_data.ACCEL_P = imu_data.accel_p;
 800182e:	f9b7 217a 	ldrsh.w	r2, [r7, #378]	@ 0x17a
 8001832:	4b8e      	ldr	r3, [pc, #568]	@ (8001a6c <main+0x474>)
 8001834:	871a      	strh	r2, [r3, #56]	@ 0x38
    global_mission_data.ACCEL_Y = imu_data.accel_y;
 8001836:	f9b7 217c 	ldrsh.w	r2, [r7, #380]	@ 0x17c
 800183a:	4b8c      	ldr	r3, [pc, #560]	@ (8001a6c <main+0x474>)
 800183c:	875a      	strh	r2, [r3, #58]	@ 0x3a
                     gps_data.time_S);
    global_mission_data.GPS_ALTITUDE = gps_data.altitude;
    global_mission_data.GPS_LATITUDE = gps_data.lat;
    global_mission_data.GPS_LONGITUDE = gps_data.lon;
    global_mission_data.GPS_SATS = gps_data.num_sat_used;*/
    strcpy(global_mission_data.GPS_TIME, "XX:XX:XX");
 800183e:	4b8b      	ldr	r3, [pc, #556]	@ (8001a6c <main+0x474>)
 8001840:	498e      	ldr	r1, [pc, #568]	@ (8001a7c <main+0x484>)
 8001842:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 8001846:	460b      	mov	r3, r1
 8001848:	cb03      	ldmia	r3!, {r0, r1}
 800184a:	6010      	str	r0, [r2, #0]
 800184c:	6051      	str	r1, [r2, #4]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	7213      	strb	r3, [r2, #8]
    global_mission_data.GPS_ALTITUDE = 0.0;
 8001852:	4b86      	ldr	r3, [pc, #536]	@ (8001a6c <main+0x474>)
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	655a      	str	r2, [r3, #84]	@ 0x54
    global_mission_data.GPS_LATITUDE = 0.0;
 800185a:	4b84      	ldr	r3, [pc, #528]	@ (8001a6c <main+0x474>)
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	659a      	str	r2, [r3, #88]	@ 0x58
    global_mission_data.GPS_LONGITUDE = 0.0;
 8001862:	4b82      	ldr	r3, [pc, #520]	@ (8001a6c <main+0x474>)
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	65da      	str	r2, [r3, #92]	@ 0x5c
    global_mission_data.GPS_SATS = 0;
 800186a:	4b80      	ldr	r3, [pc, #512]	@ (8001a6c <main+0x474>)
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

    // send the packet if telemetry is enabled
    if (telemetry_enable)
 8001872:	4b83      	ldr	r3, [pc, #524]	@ (8001a80 <main+0x488>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 80df 	beq.w	8001a3c <main+0x444>
    {
      char telemetry_string[200];
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
                       global_mission_data.TEAM_ID,      // team id
 800187e:	4b7b      	ldr	r3, [pc, #492]	@ (8001a6c <main+0x474>)
 8001880:	f9b3 3000 	ldrsh.w	r3, [r3]
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	4b79      	ldr	r3, [pc, #484]	@ (8001a6c <main+0x474>)
 8001888:	68de      	ldr	r6, [r3, #12]
                       global_mission_data.MISSION_TIME, // temp; mission time
                       global_mission_data.PACKET_COUNT, // temp; packet count
                       global_mission_data.MODE,         // mode
 800188a:	4b78      	ldr	r3, [pc, #480]	@ (8001a6c <main+0x474>)
 800188c:	7c1b      	ldrb	r3, [r3, #16]
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 800188e:	61bb      	str	r3, [r7, #24]
                       global_mission_data.STATE,        // state
                       global_mission_data.ALTITUDE,     // temp; altitude
 8001890:	4b76      	ldr	r3, [pc, #472]	@ (8001a6c <main+0x474>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe7f 	bl	8000598 <__aeabi_f2d>
 800189a:	4604      	mov	r4, r0
 800189c:	460d      	mov	r5, r1
                       global_mission_data.TEMPERATURE,  // temperature
 800189e:	4b73      	ldr	r3, [pc, #460]	@ (8001a6c <main+0x474>)
 80018a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fe78 	bl	8000598 <__aeabi_f2d>
 80018a8:	4680      	mov	r8, r0
 80018aa:	4689      	mov	r9, r1
                       global_mission_data.PRESSURE,     // pressure
 80018ac:	4b6f      	ldr	r3, [pc, #444]	@ (8001a6c <main+0x474>)
 80018ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fe71 	bl	8000598 <__aeabi_f2d>
 80018b6:	4682      	mov	sl, r0
 80018b8:	468b      	mov	fp, r1
                       global_mission_data.VOLTAGE,
 80018ba:	4b6c      	ldr	r3, [pc, #432]	@ (8001a6c <main+0x474>)
 80018bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fe6a 	bl	8000598 <__aeabi_f2d>
 80018c4:	460a      	mov	r2, r1
 80018c6:	4601      	mov	r1, r0
                       global_mission_data.GYRO_R, // gyro_r
 80018c8:	4b68      	ldr	r3, [pc, #416]	@ (8001a6c <main+0x474>)
 80018ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80018ce:	617b      	str	r3, [r7, #20]
                       global_mission_data.GYRO_P, // gyro_p
 80018d0:	4b66      	ldr	r3, [pc, #408]	@ (8001a6c <main+0x474>)
 80018d2:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80018d6:	60bb      	str	r3, [r7, #8]
                       global_mission_data.GYRO_Y
 80018d8:	4b64      	ldr	r3, [pc, #400]	@ (8001a6c <main+0x474>)
 80018da:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
      strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%3.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80018de:	f107 0020 	add.w	r0, r7, #32
 80018e2:	930e      	str	r3, [sp, #56]	@ 0x38
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80018ec:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80018f0:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80018f4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80018f8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80018fc:	4b61      	ldr	r3, [pc, #388]	@ (8001a84 <main+0x48c>)
 80018fe:	9302      	str	r3, [sp, #8]
 8001900:	69b9      	ldr	r1, [r7, #24]
 8001902:	9101      	str	r1, [sp, #4]
 8001904:	9600      	str	r6, [sp, #0]
 8001906:	4b60      	ldr	r3, [pc, #384]	@ (8001a88 <main+0x490>)
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	4960      	ldr	r1, [pc, #384]	@ (8001a8c <main+0x494>)
 800190c:	f011 f9b0 	bl	8012c70 <siprintf>
 8001910:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
                       // gyro_y
      );
      // strlen = sizeof(telemetry_string);
      HAL_UART_Transmit(&huart3, telemetry_string, strlen, HAL_MAX_DELAY);
 8001914:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001918:	b29a      	uxth	r2, r3
 800191a:	f107 0120 	add.w	r1, r7, #32
 800191e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001922:	485b      	ldr	r0, [pc, #364]	@ (8001a90 <main+0x498>)
 8001924:	f00b f83d 	bl	800c9a2 <HAL_UART_Transmit>
      memset(telemetry_string, 0, sizeof(telemetry_string)); // flush array
 8001928:	f107 0320 	add.w	r3, r7, #32
 800192c:	22c8      	movs	r2, #200	@ 0xc8
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f011 fb97 	bl	8013064 <memset>
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
                       global_mission_data.ACCEL_R, // accel_r
 8001936:	4b4d      	ldr	r3, [pc, #308]	@ (8001a6c <main+0x474>)
 8001938:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 800193c:	61fb      	str	r3, [r7, #28]
                       global_mission_data.ACCEL_P, // accel_p
 800193e:	4b4b      	ldr	r3, [pc, #300]	@ (8001a6c <main+0x474>)
 8001940:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001944:	61bb      	str	r3, [r7, #24]
                       global_mission_data.ACCEL_Y,
 8001946:	4b49      	ldr	r3, [pc, #292]	@ (8001a6c <main+0x474>)
 8001948:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	@ 0x3a
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 800194c:	617b      	str	r3, [r7, #20]
                       global_mission_data.MAG_R,                   // temp; mag_r
 800194e:	4b47      	ldr	r3, [pc, #284]	@ (8001a6c <main+0x474>)
 8001950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe20 	bl	8000598 <__aeabi_f2d>
 8001958:	4605      	mov	r5, r0
 800195a:	460e      	mov	r6, r1
                       global_mission_data.MAG_P,                   // temp; mag_p
 800195c:	4b43      	ldr	r3, [pc, #268]	@ (8001a6c <main+0x474>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fe19 	bl	8000598 <__aeabi_f2d>
 8001966:	e9c7 0102 	strd	r0, r1, [r7, #8]
                       global_mission_data.MAG_Y,                   // temp; mag_y
 800196a:	4b40      	ldr	r3, [pc, #256]	@ (8001a6c <main+0x474>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fe12 	bl	8000598 <__aeabi_f2d>
 8001974:	e9c7 0100 	strd	r0, r1, [r7]
                       global_mission_data.AUTO_GYRO_ROTATION_RATE, // temp; auto-gyro rotation rate
 8001978:	4b3c      	ldr	r3, [pc, #240]	@ (8001a6c <main+0x474>)
 800197a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 800197e:	613b      	str	r3, [r7, #16]
                       global_mission_data.GPS_TIME,                // temp; gps time
                       global_mission_data.GPS_ALTITUDE,            // temp; gps altitude
 8001980:	4b3a      	ldr	r3, [pc, #232]	@ (8001a6c <main+0x474>)
 8001982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fe07 	bl	8000598 <__aeabi_f2d>
 800198a:	4682      	mov	sl, r0
 800198c:	468b      	mov	fp, r1
                       global_mission_data.GPS_LATITUDE,            // temp; gps latitude
 800198e:	4b37      	ldr	r3, [pc, #220]	@ (8001a6c <main+0x474>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fe00 	bl	8000598 <__aeabi_f2d>
 8001998:	4680      	mov	r8, r0
 800199a:	4689      	mov	r9, r1
                       global_mission_data.GPS_LONGITUDE,           // temp; gps longitude
 800199c:	4b33      	ldr	r3, [pc, #204]	@ (8001a6c <main+0x474>)
 800199e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fdf9 	bl	8000598 <__aeabi_f2d>
                       global_mission_data.GPS_SATS,                // temp; # of gps satellites
 80019a6:	4b31      	ldr	r3, [pc, #196]	@ (8001a6c <main+0x474>)
 80019a8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
      strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80019ac:	461a      	mov	r2, r3
 80019ae:	f107 0420 	add.w	r4, r7, #32
 80019b2:	4b38      	ldr	r3, [pc, #224]	@ (8001a94 <main+0x49c>)
 80019b4:	9311      	str	r3, [sp, #68]	@ 0x44
 80019b6:	9210      	str	r2, [sp, #64]	@ 0x40
 80019b8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80019bc:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 80019c0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 80019c4:	4b34      	ldr	r3, [pc, #208]	@ (8001a98 <main+0x4a0>)
 80019c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80019c8:	6939      	ldr	r1, [r7, #16]
 80019ca:	9108      	str	r1, [sp, #32]
 80019cc:	ed97 7b00 	vldr	d7, [r7]
 80019d0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80019d4:	ed97 7b02 	vldr	d7, [r7, #8]
 80019d8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80019dc:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80019e0:	6979      	ldr	r1, [r7, #20]
 80019e2:	9100      	str	r1, [sp, #0]
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	492c      	ldr	r1, [pc, #176]	@ (8001a9c <main+0x4a4>)
 80019ea:	4620      	mov	r0, r4
 80019ec:	f011 f940 	bl	8012c70 <siprintf>
 80019f0:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
                       global_mission_data.CMD_ECHO);
      HAL_UART_Transmit(&huart3, telemetry_string, strlen, HAL_MAX_DELAY);
 80019f4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	f107 0120 	add.w	r1, r7, #32
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a02:	4823      	ldr	r0, [pc, #140]	@ (8001a90 <main+0x498>)
 8001a04:	f00a ffcd 	bl	800c9a2 <HAL_UART_Transmit>

      char test_string[30];
      strlen = sprintf(test_string, "accel_z: %d", imu_data.accel_z);
 8001a08:	f9b7 3178 	ldrsh.w	r3, [r7, #376]	@ 0x178
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001a12:	4923      	ldr	r1, [pc, #140]	@ (8001aa0 <main+0x4a8>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f011 f92b 	bl	8012c70 <siprintf>
 8001a1a:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
      HAL_UART_Transmit(&huart3, test_string, strlen, HAL_MAX_DELAY);
 8001a1e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a2c:	4818      	ldr	r0, [pc, #96]	@ (8001a90 <main+0x498>)
 8001a2e:	f00a ffb8 	bl	800c9a2 <HAL_UART_Transmit>

      global_mission_data.PACKET_COUNT = global_mission_data.PACKET_COUNT + 1;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <main+0x474>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	3301      	adds	r3, #1
 8001a38:	4a0c      	ldr	r2, [pc, #48]	@ (8001a6c <main+0x474>)
 8001a3a:	60d3      	str	r3, [r2, #12]
    }

    // activate resistor
    if (mec_wire_enable == 1)
 8001a3c:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <main+0x4ac>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d13d      	bne.n	8001ac2 <main+0x4ca>
    {
      // actuate resistor
      HAL_GPIO_WritePin(DRV_PWM_GPIO_Port, DRV_PWM_Pin, GPIO_PIN_SET);
 8001a46:	2201      	movs	r2, #1
 8001a48:	2108      	movs	r1, #8
 8001a4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a4e:	f004 fe31 	bl	80066b4 <HAL_GPIO_WritePin>
      super_hot_resistor_cycles += 1;
 8001a52:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8001a56:	3301      	adds	r3, #1
 8001a58:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
      if (super_hot_resistor_cycles >= super_hot_resistor_cycle_limit)
 8001a5c:	f897 21d7 	ldrb.w	r2, [r7, #471]	@ 0x1d7
 8001a60:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d335      	bcc.n	8001ad4 <main+0x4dc>
 8001a68:	e01e      	b.n	8001aa8 <main+0x4b0>
 8001a6a:	bf00      	nop
 8001a6c:	200002f0 	.word	0x200002f0
 8001a70:	200002dd 	.word	0x200002dd
 8001a74:	20000428 	.word	0x20000428
 8001a78:	447a0000 	.word	0x447a0000
 8001a7c:	080160c4 	.word	0x080160c4
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000301 	.word	0x20000301
 8001a88:	200002f2 	.word	0x200002f2
 8001a8c:	080160d0 	.word	0x080160d0
 8001a90:	20000778 	.word	0x20000778
 8001a94:	20000351 	.word	0x20000351
 8001a98:	2000033a 	.word	0x2000033a
 8001a9c:	08016100 	.word	0x08016100
 8001aa0:	08016134 	.word	0x08016134
 8001aa4:	200002de 	.word	0x200002de
      {
        HAL_GPIO_WritePin(DRV_PWM_GPIO_Port, DRV_PWM_Pin, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2108      	movs	r1, #8
 8001aac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ab0:	f004 fe00 	bl	80066b4 <HAL_GPIO_WritePin>
        super_hot_resistor_cycles = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
        mec_wire_enable = 0;
 8001aba:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <main+0x500>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
 8001ac0:	e008      	b.n	8001ad4 <main+0x4dc>
      }
    }
    else
    {
      // turn resistor off
      HAL_GPIO_WritePin(DRV_PWM_GPIO_Port, DRV_PWM_Pin, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2108      	movs	r1, #8
 8001ac6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aca:	f004 fdf3 	bl	80066b4 <HAL_GPIO_WritePin>
      super_hot_resistor_cycles = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
    }

    HAL_Delay(1000);
 8001ad4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ad8:	f002 ff16 	bl	8004908 <HAL_Delay>

    HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2180      	movs	r1, #128	@ 0x80
 8001ae0:	4806      	ldr	r0, [pc, #24]	@ (8001afc <main+0x504>)
 8001ae2:	f004 fde7 	bl	80066b4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001ae6:	2064      	movs	r0, #100	@ 0x64
 8001ae8:	f002 ff0e 	bl	8004908 <HAL_Delay>
    HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	2180      	movs	r1, #128	@ 0x80
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <main+0x504>)
 8001af2:	f004 fddf 	bl	80066b4 <HAL_GPIO_WritePin>
  {
 8001af6:	e609      	b.n	800170c <main+0x114>
 8001af8:	200002de 	.word	0x200002de
 8001afc:	48000400 	.word	0x48000400

08001b00 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b09a      	sub	sp, #104	@ 0x68
 8001b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b0a:	2238      	movs	r2, #56	@ 0x38
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f011 faa8 	bl	8013064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  RCC_CRSInitTypeDef pInit = {0};
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b34:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b38:	f007 f8bc 	bl	8008cb4 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 8001b3c:	f007 f82a 	bl	8008b94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b40:	4b37      	ldr	r3, [pc, #220]	@ (8001c20 <SystemClock_Config+0x120>)
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b46:	4a36      	ldr	r2, [pc, #216]	@ (8001c20 <SystemClock_Config+0x120>)
 8001b48:	f023 0318 	bic.w	r3, r3, #24
 8001b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 8001b50:	232e      	movs	r3, #46	@ 0x2e
 8001b52:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b54:	2301      	movs	r3, #1
 8001b56:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b5e:	2340      	movs	r3, #64	@ 0x40
 8001b60:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b62:	2301      	movs	r3, #1
 8001b64:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001b66:	2301      	movs	r3, #1
 8001b68:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001b76:	2308      	movs	r3, #8
 8001b78:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b82:	2302      	movs	r3, #2
 8001b84:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f007 f946 	bl	8008e1c <HAL_RCC_OscConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b96:	f000 fe79 	bl	800288c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b9a:	230f      	movs	r3, #15
 8001b9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001baa:	2300      	movs	r3, #0
 8001bac:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f007 fc43 	bl	8009440 <HAL_RCC_ClockConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001bc0:	f000 fe64 	bl	800288c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 8001bca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001bce:	f007 fd73 	bl	80096b8 <HAL_RCC_MCOConfig>
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSE);
 8001bd2:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8001bd6:	f008 f903 	bl	8009de0 <HAL_RCCEx_EnableLSCO>

  /** Enable the SYSCFG APB clock
   */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001bda:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <SystemClock_Config+0x120>)
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bde:	4a10      	ldr	r2, [pc, #64]	@ (8001c20 <SystemClock_Config+0x120>)
 8001be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <SystemClock_Config+0x120>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]

  /** Configures CRS
   */
  pInit.Prescaler = RCC_CRS_SYNC_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
  pInit.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8001bf6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001bfa:	60bb      	str	r3, [r7, #8]
  pInit.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
  pInit.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 32768);
 8001c00:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 8001c04:	613b      	str	r3, [r7, #16]
  pInit.ErrorLimitValue = 34;
 8001c06:	2322      	movs	r3, #34	@ 0x22
 8001c08:	617b      	str	r3, [r7, #20]
  pInit.HSI48CalibrationValue = 32;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&pInit);
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	4618      	mov	r0, r3
 8001c12:	f008 f94f 	bl	8009eb4 <HAL_RCCEx_CRSConfig>
}
 8001c16:	bf00      	nop
 8001c18:	3768      	adds	r7, #104	@ 0x68
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000

08001c24 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08c      	sub	sp, #48	@ 0x30
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2220      	movs	r2, #32
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f011 fa11 	bl	8013064 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 8001c42:	4b32      	ldr	r3, [pc, #200]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001c44:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001c48:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c4a:	4b30      	ldr	r3, [pc, #192]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001c4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c52:	4b2e      	ldr	r3, [pc, #184]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c58:	4b2c      	ldr	r3, [pc, #176]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c64:	4b29      	ldr	r3, [pc, #164]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c6a:	4b28      	ldr	r3, [pc, #160]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c70:	4b26      	ldr	r3, [pc, #152]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c76:	4b25      	ldr	r3, [pc, #148]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001c7c:	4b23      	ldr	r3, [pc, #140]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c82:	4b22      	ldr	r3, [pc, #136]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c8a:	4b20      	ldr	r3, [pc, #128]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c90:	4b1e      	ldr	r3, [pc, #120]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c96:	4b1d      	ldr	r3, [pc, #116]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001ca4:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cac:	4817      	ldr	r0, [pc, #92]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001cae:	f003 f847 	bl	8004d40 <HAL_ADC_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001cb8:	f000 fde8 	bl	800288c <Error_Handler>
  }

  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4811      	ldr	r0, [pc, #68]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001cc8:	f003 fe3a 	bl	8005940 <HAL_ADCEx_MultiModeConfigChannel>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001cd2:	f000 fddb 	bl	800288c <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001cd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cda:	2306      	movs	r3, #6
 8001cdc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ce2:	237f      	movs	r3, #127	@ 0x7f
 8001ce4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4806      	ldr	r0, [pc, #24]	@ (8001d0c <MX_ADC1_Init+0xe8>)
 8001cf4:	f003 f9d2 	bl	800509c <HAL_ADC_ConfigChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001cfe:	f000 fdc5 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8001d02:	bf00      	nop
 8001d04:	3730      	adds	r7, #48	@ 0x30
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000035c 	.word	0x2000035c
 8001d10:	25b00200 	.word	0x25b00200

08001d14 <MX_CORDIC_Init>:
 * @brief CORDIC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CORDIC_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <MX_CORDIC_Init+0x20>)
 8001d1a:	4a07      	ldr	r2, [pc, #28]	@ (8001d38 <MX_CORDIC_Init+0x24>)
 8001d1c:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001d1e:	4805      	ldr	r0, [pc, #20]	@ (8001d34 <MX_CORDIC_Init+0x20>)
 8001d20:	f003 fef6 	bl	8005b10 <HAL_CORDIC_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001d2a:	f000 fdaf 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200003c8 	.word	0x200003c8
 8001d38:	40020c00 	.word	0x40020c00

08001d3c <MX_FMAC_Init>:
 * @brief FMAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_FMAC_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <MX_FMAC_Init+0x20>)
 8001d42:	4a07      	ldr	r2, [pc, #28]	@ (8001d60 <MX_FMAC_Init+0x24>)
 8001d44:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8001d46:	4805      	ldr	r0, [pc, #20]	@ (8001d5c <MX_FMAC_Init+0x20>)
 8001d48:	f004 fa6e 	bl	8006228 <HAL_FMAC_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8001d52:	f000 fd9b 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200003f0 	.word	0x200003f0
 8001d60:	40021400 	.word	0x40021400

08001d64 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <MX_I2C3_Init+0x74>)
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001ddc <MX_I2C3_Init+0x78>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <MX_I2C3_Init+0x74>)
 8001d70:	4a1b      	ldr	r2, [pc, #108]	@ (8001de0 <MX_I2C3_Init+0x7c>)
 8001d72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001d74:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <MX_I2C3_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d7a:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <MX_I2C3_Init+0x74>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d80:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <MX_I2C3_Init+0x74>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001d86:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <MX_I2C3_Init+0x74>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <MX_I2C3_Init+0x74>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d92:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <MX_I2C3_Init+0x74>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <MX_I2C3_Init+0x74>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001d9e:	480e      	ldr	r0, [pc, #56]	@ (8001dd8 <MX_I2C3_Init+0x74>)
 8001da0:	f004 fca0 	bl	80066e4 <HAL_I2C_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001daa:	f000 fd6f 	bl	800288c <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dae:	2100      	movs	r1, #0
 8001db0:	4809      	ldr	r0, [pc, #36]	@ (8001dd8 <MX_I2C3_Init+0x74>)
 8001db2:	f005 f8bb 	bl	8006f2c <HAL_I2CEx_ConfigAnalogFilter>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001dbc:	f000 fd66 	bl	800288c <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4805      	ldr	r0, [pc, #20]	@ (8001dd8 <MX_I2C3_Init+0x74>)
 8001dc4:	f005 f8fd 	bl	8006fc2 <HAL_I2CEx_ConfigDigitalFilter>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001dce:	f000 fd5d 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000428 	.word	0x20000428
 8001ddc:	40007800 	.word	0x40007800
 8001de0:	10b17db5 	.word	0x10b17db5

08001de4 <MX_IRTIM_Init>:
 * @brief IRTIM Initialization Function
 * @param None
 * @retval None
 */
static void MX_IRTIM_Init(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END IRTIM_Init 1 */
  /* USER CODE BEGIN IRTIM_Init 2 */

  /* USER CODE END IRTIM_Init 2 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <MX_RNG_Init>:
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001df8:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <MX_RNG_Init+0x24>)
 8001dfa:	4a08      	ldr	r2, [pc, #32]	@ (8001e1c <MX_RNG_Init+0x28>)
 8001dfc:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <MX_RNG_Init+0x24>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001e04:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <MX_RNG_Init+0x24>)
 8001e06:	f008 f897 	bl	8009f38 <HAL_RNG_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001e10:	f000 fd3c 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	2000047c 	.word	0x2000047c
 8001e1c:	50060800 	.word	0x50060800

08001e20 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 8001e24:	4b16      	ldr	r3, [pc, #88]	@ (8001e80 <MX_RTC_Init+0x60>)
 8001e26:	4a17      	ldr	r2, [pc, #92]	@ (8001e84 <MX_RTC_Init+0x64>)
 8001e28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e2a:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <MX_RTC_Init+0x60>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e30:	4b13      	ldr	r3, [pc, #76]	@ (8001e80 <MX_RTC_Init+0x60>)
 8001e32:	227f      	movs	r2, #127	@ 0x7f
 8001e34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e36:	4b12      	ldr	r3, [pc, #72]	@ (8001e80 <MX_RTC_Init+0x60>)
 8001e38:	22ff      	movs	r2, #255	@ 0xff
 8001e3a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e3c:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <MX_RTC_Init+0x60>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e42:	4b0f      	ldr	r3, [pc, #60]	@ (8001e80 <MX_RTC_Init+0x60>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e48:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <MX_RTC_Init+0x60>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <MX_RTC_Init+0x60>)
 8001e50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e54:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001e56:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <MX_RTC_Init+0x60>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e5c:	4808      	ldr	r0, [pc, #32]	@ (8001e80 <MX_RTC_Init+0x60>)
 8001e5e:	f008 f8a0 	bl	8009fa2 <HAL_RTC_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8001e68:	f000 fd10 	bl	800288c <Error_Handler>
  }

  /** Enable the reference Clock input
   */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8001e6c:	4804      	ldr	r0, [pc, #16]	@ (8001e80 <MX_RTC_Init+0x60>)
 8001e6e:	f008 f9b4 	bl	800a1da <HAL_RTCEx_SetRefClock>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001e78:	f000 fd08 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000490 	.word	0x20000490
 8001e84:	40002800 	.word	0x40002800

08001e88 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <MX_SPI2_Init+0x74>)
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001f00 <MX_SPI2_Init+0x78>)
 8001e90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <MX_SPI2_Init+0x74>)
 8001e94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <MX_SPI2_Init+0x74>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ea0:	4b16      	ldr	r3, [pc, #88]	@ (8001efc <MX_SPI2_Init+0x74>)
 8001ea2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001ea6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea8:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <MX_SPI2_Init+0x74>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eae:	4b13      	ldr	r3, [pc, #76]	@ (8001efc <MX_SPI2_Init+0x74>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <MX_SPI2_Init+0x74>)
 8001eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <MX_SPI2_Init+0x74>)
 8001ebe:	2210      	movs	r2, #16
 8001ec0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <MX_SPI2_Init+0x74>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <MX_SPI2_Init+0x74>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ece:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <MX_SPI2_Init+0x74>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <MX_SPI2_Init+0x74>)
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001eda:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <MX_SPI2_Init+0x74>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <MX_SPI2_Init+0x74>)
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ee6:	4805      	ldr	r0, [pc, #20]	@ (8001efc <MX_SPI2_Init+0x74>)
 8001ee8:	f008 f9bb 	bl	800a262 <HAL_SPI_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001ef2:	f000 fccb 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200004b8 	.word	0x200004b8
 8001f00:	40003800 	.word	0x40003800

08001f04 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b092      	sub	sp, #72	@ 0x48
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f0e:	2224      	movs	r2, #36	@ 0x24
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f011 f8a6 	bl	8013064 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f18:	f107 0318 	add.w	r3, r7, #24
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 8001f24:	463b      	mov	r3, r7
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
 8001f30:	611a      	str	r2, [r3, #16]
 8001f32:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f34:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff0 <MX_TIM1_Init+0xec>)
 8001f36:	4a2f      	ldr	r2, [pc, #188]	@ (8001ff4 <MX_TIM1_Init+0xf0>)
 8001f38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff0 <MX_TIM1_Init+0xec>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f40:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff0 <MX_TIM1_Init+0xec>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f46:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff0 <MX_TIM1_Init+0xec>)
 8001f48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4e:	4b28      	ldr	r3, [pc, #160]	@ (8001ff0 <MX_TIM1_Init+0xec>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f54:	4b26      	ldr	r3, [pc, #152]	@ (8001ff0 <MX_TIM1_Init+0xec>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5a:	4b25      	ldr	r3, [pc, #148]	@ (8001ff0 <MX_TIM1_Init+0xec>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f60:	2301      	movs	r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f74:	2300      	movs	r3, #0
 8001f76:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4819      	ldr	r0, [pc, #100]	@ (8001ff0 <MX_TIM1_Init+0xec>)
 8001f8c:	f009 f9bd 	bl	800b30a <HAL_TIM_Encoder_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f96:	f000 fc79 	bl	800288c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fa6:	f107 0318 	add.w	r3, r7, #24
 8001faa:	4619      	mov	r1, r3
 8001fac:	4810      	ldr	r0, [pc, #64]	@ (8001ff0 <MX_TIM1_Init+0xec>)
 8001fae:	f00a fb05 	bl	800c5bc <HAL_TIMEx_MasterConfigSynchronization>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001fb8:	f000 fc68 	bl	800288c <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim1, &sEncoderIndexConfig) != HAL_OK)
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4805      	ldr	r0, [pc, #20]	@ (8001ff0 <MX_TIM1_Init+0xec>)
 8001fda:	f00a fc11 	bl	800c800 <HAL_TIMEx_ConfigEncoderIndex>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001fe4:	f000 fc52 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 8001fe8:	bf00      	nop
 8001fea:	3748      	adds	r7, #72	@ 0x48
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	2000051c 	.word	0x2000051c
 8001ff4:	40012c00 	.word	0x40012c00

08001ff8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08e      	sub	sp, #56	@ 0x38
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200c:	f107 031c 	add.w	r3, r7, #28
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002018:	463b      	mov	r3, r7
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	611a      	str	r2, [r3, #16]
 8002026:	615a      	str	r2, [r3, #20]
 8002028:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800202a:	4b3d      	ldr	r3, [pc, #244]	@ (8002120 <MX_TIM3_Init+0x128>)
 800202c:	4a3d      	ldr	r2, [pc, #244]	@ (8002124 <MX_TIM3_Init+0x12c>)
 800202e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002030:	4b3b      	ldr	r3, [pc, #236]	@ (8002120 <MX_TIM3_Init+0x128>)
 8002032:	2200      	movs	r2, #0
 8002034:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002036:	4b3a      	ldr	r3, [pc, #232]	@ (8002120 <MX_TIM3_Init+0x128>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800203c:	4b38      	ldr	r3, [pc, #224]	@ (8002120 <MX_TIM3_Init+0x128>)
 800203e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002042:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002044:	4b36      	ldr	r3, [pc, #216]	@ (8002120 <MX_TIM3_Init+0x128>)
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204a:	4b35      	ldr	r3, [pc, #212]	@ (8002120 <MX_TIM3_Init+0x128>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002050:	4833      	ldr	r0, [pc, #204]	@ (8002120 <MX_TIM3_Init+0x128>)
 8002052:	f009 f83b 	bl	800b0cc <HAL_TIM_Base_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800205c:	f000 fc16 	bl	800288c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002060:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002064:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002066:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800206a:	4619      	mov	r1, r3
 800206c:	482c      	ldr	r0, [pc, #176]	@ (8002120 <MX_TIM3_Init+0x128>)
 800206e:	f009 fce3 	bl	800ba38 <HAL_TIM_ConfigClockSource>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002078:	f000 fc08 	bl	800288c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800207c:	4828      	ldr	r0, [pc, #160]	@ (8002120 <MX_TIM3_Init+0x128>)
 800207e:	f009 f8ed 	bl	800b25c <HAL_TIM_PWM_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002088:	f000 fc00 	bl	800288c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002094:	f107 031c 	add.w	r3, r7, #28
 8002098:	4619      	mov	r1, r3
 800209a:	4821      	ldr	r0, [pc, #132]	@ (8002120 <MX_TIM3_Init+0x128>)
 800209c:	f00a fa8e 	bl	800c5bc <HAL_TIMEx_MasterConfigSynchronization>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80020a6:	f000 fbf1 	bl	800288c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020aa:	2360      	movs	r3, #96	@ 0x60
 80020ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ba:	463b      	mov	r3, r7
 80020bc:	2200      	movs	r2, #0
 80020be:	4619      	mov	r1, r3
 80020c0:	4817      	ldr	r0, [pc, #92]	@ (8002120 <MX_TIM3_Init+0x128>)
 80020c2:	f009 fba5 	bl	800b810 <HAL_TIM_PWM_ConfigChannel>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80020cc:	f000 fbde 	bl	800288c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020d0:	463b      	mov	r3, r7
 80020d2:	2204      	movs	r2, #4
 80020d4:	4619      	mov	r1, r3
 80020d6:	4812      	ldr	r0, [pc, #72]	@ (8002120 <MX_TIM3_Init+0x128>)
 80020d8:	f009 fb9a 	bl	800b810 <HAL_TIM_PWM_ConfigChannel>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80020e2:	f000 fbd3 	bl	800288c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020e6:	463b      	mov	r3, r7
 80020e8:	2208      	movs	r2, #8
 80020ea:	4619      	mov	r1, r3
 80020ec:	480c      	ldr	r0, [pc, #48]	@ (8002120 <MX_TIM3_Init+0x128>)
 80020ee:	f009 fb8f 	bl	800b810 <HAL_TIM_PWM_ConfigChannel>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80020f8:	f000 fbc8 	bl	800288c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020fc:	463b      	mov	r3, r7
 80020fe:	220c      	movs	r2, #12
 8002100:	4619      	mov	r1, r3
 8002102:	4807      	ldr	r0, [pc, #28]	@ (8002120 <MX_TIM3_Init+0x128>)
 8002104:	f009 fb84 	bl	800b810 <HAL_TIM_PWM_ConfigChannel>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800210e:	f000 fbbd 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002112:	4803      	ldr	r0, [pc, #12]	@ (8002120 <MX_TIM3_Init+0x128>)
 8002114:	f000 feb8 	bl	8002e88 <HAL_TIM_MspPostInit>
}
 8002118:	bf00      	nop
 800211a:	3738      	adds	r7, #56	@ 0x38
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000568 	.word	0x20000568
 8002124:	40000400 	.word	0x40000400

08002128 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b092      	sub	sp, #72	@ 0x48
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800212e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002132:	2224      	movs	r2, #36	@ 0x24
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f010 ff94 	bl	8013064 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800213c:	f107 0318 	add.w	r3, r7, #24
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 8002148:	463b      	mov	r3, r7
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	60da      	str	r2, [r3, #12]
 8002154:	611a      	str	r2, [r3, #16]
 8002156:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002158:	4b2e      	ldr	r3, [pc, #184]	@ (8002214 <MX_TIM8_Init+0xec>)
 800215a:	4a2f      	ldr	r2, [pc, #188]	@ (8002218 <MX_TIM8_Init+0xf0>)
 800215c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800215e:	4b2d      	ldr	r3, [pc, #180]	@ (8002214 <MX_TIM8_Init+0xec>)
 8002160:	2200      	movs	r2, #0
 8002162:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002164:	4b2b      	ldr	r3, [pc, #172]	@ (8002214 <MX_TIM8_Init+0xec>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800216a:	4b2a      	ldr	r3, [pc, #168]	@ (8002214 <MX_TIM8_Init+0xec>)
 800216c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002170:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002172:	4b28      	ldr	r3, [pc, #160]	@ (8002214 <MX_TIM8_Init+0xec>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002178:	4b26      	ldr	r3, [pc, #152]	@ (8002214 <MX_TIM8_Init+0xec>)
 800217a:	2200      	movs	r2, #0
 800217c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217e:	4b25      	ldr	r3, [pc, #148]	@ (8002214 <MX_TIM8_Init+0xec>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002184:	2301      	movs	r3, #1
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002188:	2300      	movs	r3, #0
 800218a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800218c:	2301      	movs	r3, #1
 800218e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002190:	2300      	movs	r3, #0
 8002192:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002198:	2300      	movs	r3, #0
 800219a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800219c:	2301      	movs	r3, #1
 800219e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021a0:	2300      	movs	r3, #0
 80021a2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80021a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021ac:	4619      	mov	r1, r3
 80021ae:	4819      	ldr	r0, [pc, #100]	@ (8002214 <MX_TIM8_Init+0xec>)
 80021b0:	f009 f8ab 	bl	800b30a <HAL_TIM_Encoder_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80021ba:	f000 fb67 	bl	800288c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021ca:	f107 0318 	add.w	r3, r7, #24
 80021ce:	4619      	mov	r1, r3
 80021d0:	4810      	ldr	r0, [pc, #64]	@ (8002214 <MX_TIM8_Init+0xec>)
 80021d2:	f00a f9f3 	bl	800c5bc <HAL_TIMEx_MasterConfigSynchronization>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 80021dc:	f000 fb56 	bl	800288c <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 80021e0:	2300      	movs	r3, #0
 80021e2:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 80021f0:	2300      	movs	r3, #0
 80021f2:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim8, &sEncoderIndexConfig) != HAL_OK)
 80021f8:	463b      	mov	r3, r7
 80021fa:	4619      	mov	r1, r3
 80021fc:	4805      	ldr	r0, [pc, #20]	@ (8002214 <MX_TIM8_Init+0xec>)
 80021fe:	f00a faff 	bl	800c800 <HAL_TIMEx_ConfigEncoderIndex>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM8_Init+0xe4>
  {
    Error_Handler();
 8002208:	f000 fb40 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
}
 800220c:	bf00      	nop
 800220e:	3748      	adds	r7, #72	@ 0x48
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	200005b4 	.word	0x200005b4
 8002218:	40013400 	.word	0x40013400

0800221c <MX_TIM15_Init>:
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b098      	sub	sp, #96	@ 0x60
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002222:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800222e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]
 800223c:	611a      	str	r2, [r3, #16]
 800223e:	615a      	str	r2, [r3, #20]
 8002240:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	2234      	movs	r2, #52	@ 0x34
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f010 ff0b 	bl	8013064 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800224e:	4b34      	ldr	r3, [pc, #208]	@ (8002320 <MX_TIM15_Init+0x104>)
 8002250:	4a34      	ldr	r2, [pc, #208]	@ (8002324 <MX_TIM15_Init+0x108>)
 8002252:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002254:	4b32      	ldr	r3, [pc, #200]	@ (8002320 <MX_TIM15_Init+0x104>)
 8002256:	2200      	movs	r2, #0
 8002258:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225a:	4b31      	ldr	r3, [pc, #196]	@ (8002320 <MX_TIM15_Init+0x104>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002260:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <MX_TIM15_Init+0x104>)
 8002262:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002266:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002268:	4b2d      	ldr	r3, [pc, #180]	@ (8002320 <MX_TIM15_Init+0x104>)
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800226e:	4b2c      	ldr	r3, [pc, #176]	@ (8002320 <MX_TIM15_Init+0x104>)
 8002270:	2200      	movs	r2, #0
 8002272:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002274:	4b2a      	ldr	r3, [pc, #168]	@ (8002320 <MX_TIM15_Init+0x104>)
 8002276:	2200      	movs	r2, #0
 8002278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800227a:	4829      	ldr	r0, [pc, #164]	@ (8002320 <MX_TIM15_Init+0x104>)
 800227c:	f008 ffee 	bl	800b25c <HAL_TIM_PWM_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002286:	f000 fb01 	bl	800288c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002292:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002296:	4619      	mov	r1, r3
 8002298:	4821      	ldr	r0, [pc, #132]	@ (8002320 <MX_TIM15_Init+0x104>)
 800229a:	f00a f98f 	bl	800c5bc <HAL_TIMEx_MasterConfigSynchronization>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80022a4:	f000 faf2 	bl	800288c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022a8:	2360      	movs	r3, #96	@ 0x60
 80022aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022b0:	2300      	movs	r3, #0
 80022b2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022b4:	2300      	movs	r3, #0
 80022b6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022bc:	2300      	movs	r3, #0
 80022be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022c0:	2300      	movs	r3, #0
 80022c2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022c8:	2204      	movs	r2, #4
 80022ca:	4619      	mov	r1, r3
 80022cc:	4814      	ldr	r0, [pc, #80]	@ (8002320 <MX_TIM15_Init+0x104>)
 80022ce:	f009 fa9f 	bl	800b810 <HAL_TIM_PWM_ConfigChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80022d8:	f000 fad8 	bl	800288c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	4619      	mov	r1, r3
 8002302:	4807      	ldr	r0, [pc, #28]	@ (8002320 <MX_TIM15_Init+0x104>)
 8002304:	f00a f9e8 	bl	800c6d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 800230e:	f000 fabd 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002312:	4803      	ldr	r0, [pc, #12]	@ (8002320 <MX_TIM15_Init+0x104>)
 8002314:	f000 fdb8 	bl	8002e88 <HAL_TIM_MspPostInit>
}
 8002318:	bf00      	nop
 800231a:	3760      	adds	r7, #96	@ 0x60
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000600 	.word	0x20000600
 8002324:	40014000 	.word	0x40014000

08002328 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b094      	sub	sp, #80	@ 0x50
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800232e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]
 800233c:	611a      	str	r2, [r3, #16]
 800233e:	615a      	str	r2, [r3, #20]
 8002340:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002342:	463b      	mov	r3, r7
 8002344:	2234      	movs	r2, #52	@ 0x34
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f010 fe8b 	bl	8013064 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800234e:	4b2f      	ldr	r3, [pc, #188]	@ (800240c <MX_TIM16_Init+0xe4>)
 8002350:	4a2f      	ldr	r2, [pc, #188]	@ (8002410 <MX_TIM16_Init+0xe8>)
 8002352:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002354:	4b2d      	ldr	r3, [pc, #180]	@ (800240c <MX_TIM16_Init+0xe4>)
 8002356:	2200      	movs	r2, #0
 8002358:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235a:	4b2c      	ldr	r3, [pc, #176]	@ (800240c <MX_TIM16_Init+0xe4>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002360:	4b2a      	ldr	r3, [pc, #168]	@ (800240c <MX_TIM16_Init+0xe4>)
 8002362:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002366:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002368:	4b28      	ldr	r3, [pc, #160]	@ (800240c <MX_TIM16_Init+0xe4>)
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800236e:	4b27      	ldr	r3, [pc, #156]	@ (800240c <MX_TIM16_Init+0xe4>)
 8002370:	2200      	movs	r2, #0
 8002372:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002374:	4b25      	ldr	r3, [pc, #148]	@ (800240c <MX_TIM16_Init+0xe4>)
 8002376:	2200      	movs	r2, #0
 8002378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800237a:	4824      	ldr	r0, [pc, #144]	@ (800240c <MX_TIM16_Init+0xe4>)
 800237c:	f008 fea6 	bl	800b0cc <HAL_TIM_Base_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002386:	f000 fa81 	bl	800288c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800238a:	4820      	ldr	r0, [pc, #128]	@ (800240c <MX_TIM16_Init+0xe4>)
 800238c:	f008 ff66 	bl	800b25c <HAL_TIM_PWM_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002396:	f000 fa79 	bl	800288c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800239a:	2360      	movs	r3, #96	@ 0x60
 800239c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023a2:	2300      	movs	r3, #0
 80023a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023a6:	2300      	movs	r3, #0
 80023a8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023ba:	2200      	movs	r2, #0
 80023bc:	4619      	mov	r1, r3
 80023be:	4813      	ldr	r0, [pc, #76]	@ (800240c <MX_TIM16_Init+0xe4>)
 80023c0:	f009 fa26 	bl	800b810 <HAL_TIM_PWM_ConfigChannel>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80023ca:	f000 fa5f 	bl	800288c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80023f0:	463b      	mov	r3, r7
 80023f2:	4619      	mov	r1, r3
 80023f4:	4805      	ldr	r0, [pc, #20]	@ (800240c <MX_TIM16_Init+0xe4>)
 80023f6:	f00a f96f 	bl	800c6d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8002400:	f000 fa44 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 8002404:	bf00      	nop
 8002406:	3750      	adds	r7, #80	@ 0x50
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	2000064c 	.word	0x2000064c
 8002410:	40014400 	.word	0x40014400

08002414 <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b094      	sub	sp, #80	@ 0x50
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800241a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	60da      	str	r2, [r3, #12]
 8002428:	611a      	str	r2, [r3, #16]
 800242a:	615a      	str	r2, [r3, #20]
 800242c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800242e:	463b      	mov	r3, r7
 8002430:	2234      	movs	r2, #52	@ 0x34
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f010 fe15 	bl	8013064 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800243a:	4b2f      	ldr	r3, [pc, #188]	@ (80024f8 <MX_TIM17_Init+0xe4>)
 800243c:	4a2f      	ldr	r2, [pc, #188]	@ (80024fc <MX_TIM17_Init+0xe8>)
 800243e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002440:	4b2d      	ldr	r3, [pc, #180]	@ (80024f8 <MX_TIM17_Init+0xe4>)
 8002442:	2200      	movs	r2, #0
 8002444:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002446:	4b2c      	ldr	r3, [pc, #176]	@ (80024f8 <MX_TIM17_Init+0xe4>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800244c:	4b2a      	ldr	r3, [pc, #168]	@ (80024f8 <MX_TIM17_Init+0xe4>)
 800244e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002452:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002454:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <MX_TIM17_Init+0xe4>)
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800245a:	4b27      	ldr	r3, [pc, #156]	@ (80024f8 <MX_TIM17_Init+0xe4>)
 800245c:	2200      	movs	r2, #0
 800245e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002460:	4b25      	ldr	r3, [pc, #148]	@ (80024f8 <MX_TIM17_Init+0xe4>)
 8002462:	2200      	movs	r2, #0
 8002464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002466:	4824      	ldr	r0, [pc, #144]	@ (80024f8 <MX_TIM17_Init+0xe4>)
 8002468:	f008 fe30 	bl	800b0cc <HAL_TIM_Base_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002472:	f000 fa0b 	bl	800288c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002476:	4820      	ldr	r0, [pc, #128]	@ (80024f8 <MX_TIM17_Init+0xe4>)
 8002478:	f008 fef0 	bl	800b25c <HAL_TIM_PWM_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002482:	f000 fa03 	bl	800288c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002486:	2360      	movs	r3, #96	@ 0x60
 8002488:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800248e:	2300      	movs	r3, #0
 8002490:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002492:	2300      	movs	r3, #0
 8002494:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024a6:	2200      	movs	r2, #0
 80024a8:	4619      	mov	r1, r3
 80024aa:	4813      	ldr	r0, [pc, #76]	@ (80024f8 <MX_TIM17_Init+0xe4>)
 80024ac:	f009 f9b0 	bl	800b810 <HAL_TIM_PWM_ConfigChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80024b6:	f000 f9e9 	bl	800288c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80024dc:	463b      	mov	r3, r7
 80024de:	4619      	mov	r1, r3
 80024e0:	4805      	ldr	r0, [pc, #20]	@ (80024f8 <MX_TIM17_Init+0xe4>)
 80024e2:	f00a f8f9 	bl	800c6d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80024ec:	f000 f9ce 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
}
 80024f0:	bf00      	nop
 80024f2:	3750      	adds	r7, #80	@ 0x50
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000698 	.word	0x20000698
 80024fc:	40014800 	.word	0x40014800

08002500 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002504:	4b22      	ldr	r3, [pc, #136]	@ (8002590 <MX_UART5_Init+0x90>)
 8002506:	4a23      	ldr	r2, [pc, #140]	@ (8002594 <MX_UART5_Init+0x94>)
 8002508:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800250a:	4b21      	ldr	r3, [pc, #132]	@ (8002590 <MX_UART5_Init+0x90>)
 800250c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002510:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002512:	4b1f      	ldr	r3, [pc, #124]	@ (8002590 <MX_UART5_Init+0x90>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002518:	4b1d      	ldr	r3, [pc, #116]	@ (8002590 <MX_UART5_Init+0x90>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800251e:	4b1c      	ldr	r3, [pc, #112]	@ (8002590 <MX_UART5_Init+0x90>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002524:	4b1a      	ldr	r3, [pc, #104]	@ (8002590 <MX_UART5_Init+0x90>)
 8002526:	220c      	movs	r2, #12
 8002528:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252a:	4b19      	ldr	r3, [pc, #100]	@ (8002590 <MX_UART5_Init+0x90>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002530:	4b17      	ldr	r3, [pc, #92]	@ (8002590 <MX_UART5_Init+0x90>)
 8002532:	2200      	movs	r2, #0
 8002534:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002536:	4b16      	ldr	r3, [pc, #88]	@ (8002590 <MX_UART5_Init+0x90>)
 8002538:	2200      	movs	r2, #0
 800253a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800253c:	4b14      	ldr	r3, [pc, #80]	@ (8002590 <MX_UART5_Init+0x90>)
 800253e:	2200      	movs	r2, #0
 8002540:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002542:	4b13      	ldr	r3, [pc, #76]	@ (8002590 <MX_UART5_Init+0x90>)
 8002544:	2200      	movs	r2, #0
 8002546:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002548:	4811      	ldr	r0, [pc, #68]	@ (8002590 <MX_UART5_Init+0x90>)
 800254a:	f00a f9da 	bl	800c902 <HAL_UART_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002554:	f000 f99a 	bl	800288c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002558:	2100      	movs	r1, #0
 800255a:	480d      	ldr	r0, [pc, #52]	@ (8002590 <MX_UART5_Init+0x90>)
 800255c:	f00b fc89 	bl	800de72 <HAL_UARTEx_SetTxFifoThreshold>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8002566:	f000 f991 	bl	800288c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800256a:	2100      	movs	r1, #0
 800256c:	4808      	ldr	r0, [pc, #32]	@ (8002590 <MX_UART5_Init+0x90>)
 800256e:	f00b fcbe 	bl	800deee <HAL_UARTEx_SetRxFifoThreshold>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002578:	f000 f988 	bl	800288c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800257c:	4804      	ldr	r0, [pc, #16]	@ (8002590 <MX_UART5_Init+0x90>)
 800257e:	f00b fc3f 	bl	800de00 <HAL_UARTEx_DisableFifoMode>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002588:	f000 f980 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}
 8002590:	200006e4 	.word	0x200006e4
 8002594:	40005000 	.word	0x40005000

08002598 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800259c:	4b22      	ldr	r3, [pc, #136]	@ (8002628 <MX_USART3_UART_Init+0x90>)
 800259e:	4a23      	ldr	r2, [pc, #140]	@ (800262c <MX_USART3_UART_Init+0x94>)
 80025a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80025a2:	4b21      	ldr	r3, [pc, #132]	@ (8002628 <MX_USART3_UART_Init+0x90>)
 80025a4:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80025a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002628 <MX_USART3_UART_Init+0x90>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002628 <MX_USART3_UART_Init+0x90>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002628 <MX_USART3_UART_Init+0x90>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002628 <MX_USART3_UART_Init+0x90>)
 80025be:	220c      	movs	r2, #12
 80025c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c2:	4b19      	ldr	r3, [pc, #100]	@ (8002628 <MX_USART3_UART_Init+0x90>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c8:	4b17      	ldr	r3, [pc, #92]	@ (8002628 <MX_USART3_UART_Init+0x90>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ce:	4b16      	ldr	r3, [pc, #88]	@ (8002628 <MX_USART3_UART_Init+0x90>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025d4:	4b14      	ldr	r3, [pc, #80]	@ (8002628 <MX_USART3_UART_Init+0x90>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025da:	4b13      	ldr	r3, [pc, #76]	@ (8002628 <MX_USART3_UART_Init+0x90>)
 80025dc:	2200      	movs	r2, #0
 80025de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025e0:	4811      	ldr	r0, [pc, #68]	@ (8002628 <MX_USART3_UART_Init+0x90>)
 80025e2:	f00a f98e 	bl	800c902 <HAL_UART_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80025ec:	f000 f94e 	bl	800288c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025f0:	2100      	movs	r1, #0
 80025f2:	480d      	ldr	r0, [pc, #52]	@ (8002628 <MX_USART3_UART_Init+0x90>)
 80025f4:	f00b fc3d 	bl	800de72 <HAL_UARTEx_SetTxFifoThreshold>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80025fe:	f000 f945 	bl	800288c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002602:	2100      	movs	r1, #0
 8002604:	4808      	ldr	r0, [pc, #32]	@ (8002628 <MX_USART3_UART_Init+0x90>)
 8002606:	f00b fc72 	bl	800deee <HAL_UARTEx_SetRxFifoThreshold>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002610:	f000 f93c 	bl	800288c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002614:	4804      	ldr	r0, [pc, #16]	@ (8002628 <MX_USART3_UART_Init+0x90>)
 8002616:	f00b fbf3 	bl	800de00 <HAL_UARTEx_DisableFifoMode>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002620:	f000 f934 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000778 	.word	0x20000778
 800262c:	40004800 	.word	0x40004800

08002630 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002636:	4b12      	ldr	r3, [pc, #72]	@ (8002680 <MX_DMA_Init+0x50>)
 8002638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800263a:	4a11      	ldr	r2, [pc, #68]	@ (8002680 <MX_DMA_Init+0x50>)
 800263c:	f043 0304 	orr.w	r3, r3, #4
 8002640:	6493      	str	r3, [r2, #72]	@ 0x48
 8002642:	4b0f      	ldr	r3, [pc, #60]	@ (8002680 <MX_DMA_Init+0x50>)
 8002644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800264e:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <MX_DMA_Init+0x50>)
 8002650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002652:	4a0b      	ldr	r2, [pc, #44]	@ (8002680 <MX_DMA_Init+0x50>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6493      	str	r3, [r2, #72]	@ 0x48
 800265a:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <MX_DMA_Init+0x50>)
 800265c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	200d      	movs	r0, #13
 800266c:	f003 fb3a 	bl	8005ce4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002670:	200d      	movs	r0, #13
 8002672:	f003 fb51 	bl	8005d18 <HAL_NVIC_EnableIRQ>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000

08002684 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	@ 0x28
 8002688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]
 8002698:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800269a:	4b6e      	ldr	r3, [pc, #440]	@ (8002854 <MX_GPIO_Init+0x1d0>)
 800269c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269e:	4a6d      	ldr	r2, [pc, #436]	@ (8002854 <MX_GPIO_Init+0x1d0>)
 80026a0:	f043 0304 	orr.w	r3, r3, #4
 80026a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026a6:	4b6b      	ldr	r3, [pc, #428]	@ (8002854 <MX_GPIO_Init+0x1d0>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026b2:	4b68      	ldr	r3, [pc, #416]	@ (8002854 <MX_GPIO_Init+0x1d0>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b6:	4a67      	ldr	r2, [pc, #412]	@ (8002854 <MX_GPIO_Init+0x1d0>)
 80026b8:	f043 0320 	orr.w	r3, r3, #32
 80026bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026be:	4b65      	ldr	r3, [pc, #404]	@ (8002854 <MX_GPIO_Init+0x1d0>)
 80026c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	4b62      	ldr	r3, [pc, #392]	@ (8002854 <MX_GPIO_Init+0x1d0>)
 80026cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ce:	4a61      	ldr	r2, [pc, #388]	@ (8002854 <MX_GPIO_Init+0x1d0>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002854 <MX_GPIO_Init+0x1d0>)
 80026d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002854 <MX_GPIO_Init+0x1d0>)
 80026e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002854 <MX_GPIO_Init+0x1d0>)
 80026e8:	f043 0302 	orr.w	r3, r3, #2
 80026ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ee:	4b59      	ldr	r3, [pc, #356]	@ (8002854 <MX_GPIO_Init+0x1d0>)
 80026f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026fa:	4b56      	ldr	r3, [pc, #344]	@ (8002854 <MX_GPIO_Init+0x1d0>)
 80026fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fe:	4a55      	ldr	r2, [pc, #340]	@ (8002854 <MX_GPIO_Init+0x1d0>)
 8002700:	f043 0308 	orr.w	r3, r3, #8
 8002704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002706:	4b53      	ldr	r3, [pc, #332]	@ (8002854 <MX_GPIO_Init+0x1d0>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STAT_BKUP_Pin | EN_5V_Pin | CAM1_CTRL_Pin, GPIO_PIN_RESET);
 8002712:	2200      	movs	r2, #0
 8002714:	f242 0124 	movw	r1, #8228	@ 0x2024
 8002718:	484f      	ldr	r0, [pc, #316]	@ (8002858 <MX_GPIO_Init+0x1d4>)
 800271a:	f003 ffcb 	bl	80066b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRV_DIR_Pin | CAM0_CTRL_Pin | XBEE_RST_Pin, GPIO_PIN_RESET);
 800271e:	2200      	movs	r2, #0
 8002720:	f248 0130 	movw	r1, #32816	@ 0x8030
 8002724:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002728:	f003 ffc4 	bl	80066b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_nCS_Pin | MAGEXT_nCS_Pin | MAG_nCS_Pin | BMP_nCS_Pin | GPS_RST_Pin | USR_LED_Pin, GPIO_PIN_RESET);
 800272c:	2200      	movs	r2, #0
 800272e:	f641 41a4 	movw	r1, #7332	@ 0x1ca4
 8002732:	484a      	ldr	r0, [pc, #296]	@ (800285c <MX_GPIO_Init+0x1d8>)
 8002734:	f003 ffbe 	bl	80066b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STAT_BKUP_Pin EN_5V_Pin CAM1_CTRL_Pin */
  GPIO_InitStruct.Pin = STAT_BKUP_Pin | EN_5V_Pin | CAM1_CTRL_Pin;
 8002738:	f242 0324 	movw	r3, #8228	@ 0x2024
 800273c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273e:	2301      	movs	r3, #1
 8002740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	4619      	mov	r1, r3
 8002750:	4841      	ldr	r0, [pc, #260]	@ (8002858 <MX_GPIO_Init+0x1d4>)
 8002752:	f003 fe15 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_STAT2_Pin CHG_STAT1_Pin */
  GPIO_InitStruct.Pin = CHG_STAT2_Pin | CHG_STAT1_Pin;
 8002756:	2303      	movs	r3, #3
 8002758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002762:	f107 0314 	add.w	r3, r7, #20
 8002766:	4619      	mov	r1, r3
 8002768:	483d      	ldr	r0, [pc, #244]	@ (8002860 <MX_GPIO_Init+0x1dc>)
 800276a:	f003 fe09 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_32K_Pin */
  GPIO_InitStruct.Pin = CLK_32K_Pin;
 800276e:	2304      	movs	r3, #4
 8002770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002772:	2303      	movs	r3, #3
 8002774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLK_32K_GPIO_Port, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002784:	f003 fdfc 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRV_DIR_Pin CAM0_CTRL_Pin XBEE_RST_Pin */
  GPIO_InitStruct.Pin = DRV_DIR_Pin | CAM0_CTRL_Pin | XBEE_RST_Pin;
 8002788:	f248 0330 	movw	r3, #32816	@ 0x8030
 800278c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278e:	2301      	movs	r3, #1
 8002790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	2300      	movs	r3, #0
 8002798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	4619      	mov	r1, r3
 80027a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027a4:	f003 fdec 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_nCS_Pin MAGEXT_nCS_Pin MAG_nCS_Pin BMP_nCS_Pin
                           USR_LED_Pin */
  GPIO_InitStruct.Pin = IMU_nCS_Pin | MAGEXT_nCS_Pin | MAG_nCS_Pin | BMP_nCS_Pin | USR_LED_Pin;
 80027a8:	f641 4384 	movw	r3, #7300	@ 0x1c84
 80027ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ae:	2301      	movs	r3, #1
 80027b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2300      	movs	r3, #0
 80027b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4619      	mov	r1, r3
 80027c0:	4826      	ldr	r0, [pc, #152]	@ (800285c <MX_GPIO_Init+0x1d8>)
 80027c2:	f003 fddd 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d4:	2300      	movs	r3, #0
 80027d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80027d8:	2300      	movs	r3, #0
 80027da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	4619      	mov	r1, r3
 80027e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027e6:	f003 fdcb 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
 80027ea:	2350      	movs	r3, #80	@ 0x50
 80027ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ee:	2303      	movs	r3, #3
 80027f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4619      	mov	r1, r3
 80027fc:	4817      	ldr	r0, [pc, #92]	@ (800285c <MX_GPIO_Init+0x1d8>)
 80027fe:	f003 fdbf 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8002802:	2320      	movs	r3, #32
 8002804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002806:	2311      	movs	r3, #17
 8002808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280e:	2300      	movs	r3, #0
 8002810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	4619      	mov	r1, r3
 8002818:	4810      	ldr	r0, [pc, #64]	@ (800285c <MX_GPIO_Init+0x1d8>)
 800281a:	f003 fdb1 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 800281e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_IR;
 8002830:	2306      	movs	r3, #6
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4619      	mov	r1, r3
 800283a:	4808      	ldr	r0, [pc, #32]	@ (800285c <MX_GPIO_Init+0x1d8>)
 800283c:	f003 fda0 	bl	8006380 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8002840:	4b08      	ldr	r3, [pc, #32]	@ (8002864 <MX_GPIO_Init+0x1e0>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4a07      	ldr	r2, [pc, #28]	@ (8002864 <MX_GPIO_Init+0x1e0>)
 8002846:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800284a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800284c:	bf00      	nop
 800284e:	3728      	adds	r7, #40	@ 0x28
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	48000800 	.word	0x48000800
 800285c:	48000400 	.word	0x48000400
 8002860:	48001400 	.word	0x48001400
 8002864:	40010000 	.word	0x40010000

08002868 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a04      	ldr	r2, [pc, #16]	@ (8002888 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d101      	bne.n	800287e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800287a:	f002 f827 	bl	80048cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40001000 	.word	0x40001000

0800288c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002890:	b672      	cpsid	i
}
 8002892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <Error_Handler+0x8>

08002898 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800289e:	f107 0308 	add.w	r3, r7, #8
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a8:	4b16      	ldr	r3, [pc, #88]	@ (8002904 <HAL_MspInit+0x6c>)
 80028aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ac:	4a15      	ldr	r2, [pc, #84]	@ (8002904 <HAL_MspInit+0x6c>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80028b4:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <HAL_MspInit+0x6c>)
 80028b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028c0:	4b10      	ldr	r3, [pc, #64]	@ (8002904 <HAL_MspInit+0x6c>)
 80028c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002904 <HAL_MspInit+0x6c>)
 80028c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80028cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002904 <HAL_MspInit+0x6c>)
 80028ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80028d8:	2300      	movs	r3, #0
 80028da:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80028e0:	f107 0308 	add.w	r3, r7, #8
 80028e4:	4618      	mov	r0, r3
 80028e6:	f006 f975 	bl	8008bd4 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80028ea:	f006 f9d3 	bl	8008c94 <HAL_PWR_EnablePVD>

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80028ee:	f002 f841 	bl	8004974 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80028f2:	2002      	movs	r0, #2
 80028f4:	f002 f82a 	bl	800494c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80028f8:	f006 fa80 	bl	8008dfc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000

08002908 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b09e      	sub	sp, #120	@ 0x78
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	2250      	movs	r2, #80	@ 0x50
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f010 fb9b 	bl	8013064 <memset>
  if(hadc->Instance==ADC1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002936:	d133      	bne.n	80029a0 <HAL_ADC_MspInit+0x98>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002938:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800293c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800293e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002942:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	4618      	mov	r0, r3
 800294a:	f007 f80d 	bl	8009968 <HAL_RCCEx_PeriphCLKConfig>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002954:	f7ff ff9a 	bl	800288c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002958:	4b13      	ldr	r3, [pc, #76]	@ (80029a8 <HAL_ADC_MspInit+0xa0>)
 800295a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295c:	4a12      	ldr	r2, [pc, #72]	@ (80029a8 <HAL_ADC_MspInit+0xa0>)
 800295e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002962:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002964:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <HAL_ADC_MspInit+0xa0>)
 8002966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002970:	4b0d      	ldr	r3, [pc, #52]	@ (80029a8 <HAL_ADC_MspInit+0xa0>)
 8002972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002974:	4a0c      	ldr	r2, [pc, #48]	@ (80029a8 <HAL_ADC_MspInit+0xa0>)
 8002976:	f043 0304 	orr.w	r3, r3, #4
 800297a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800297c:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <HAL_ADC_MspInit+0xa0>)
 800297e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VUSB_Pin;
 8002988:	2308      	movs	r3, #8
 800298a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800298c:	2303      	movs	r3, #3
 800298e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(VUSB_GPIO_Port, &GPIO_InitStruct);
 8002994:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002998:	4619      	mov	r1, r3
 800299a:	4804      	ldr	r0, [pc, #16]	@ (80029ac <HAL_ADC_MspInit+0xa4>)
 800299c:	f003 fcf0 	bl	8006380 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80029a0:	bf00      	nop
 80029a2:	3778      	adds	r7, #120	@ 0x78
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40021000 	.word	0x40021000
 80029ac:	48000800 	.word	0x48000800

080029b0 <HAL_CORDIC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcordic: CORDIC handle pointer
  * @retval None
  */
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0a      	ldr	r2, [pc, #40]	@ (80029e8 <HAL_CORDIC_MspInit+0x38>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d10b      	bne.n	80029da <HAL_CORDIC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CORDIC_MspInit 0 */

    /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80029c2:	4b0a      	ldr	r3, [pc, #40]	@ (80029ec <HAL_CORDIC_MspInit+0x3c>)
 80029c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c6:	4a09      	ldr	r2, [pc, #36]	@ (80029ec <HAL_CORDIC_MspInit+0x3c>)
 80029c8:	f043 0308 	orr.w	r3, r3, #8
 80029cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80029ce:	4b07      	ldr	r3, [pc, #28]	@ (80029ec <HAL_CORDIC_MspInit+0x3c>)
 80029d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CORDIC_MspInit 1 */

  }

}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40020c00 	.word	0x40020c00
 80029ec:	40021000 	.word	0x40021000

080029f0 <HAL_FMAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfmac: FMAC handle pointer
  * @retval None
  */
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <HAL_FMAC_MspInit+0x38>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10b      	bne.n	8002a1a <HAL_FMAC_MspInit+0x2a>
  {
    /* USER CODE BEGIN FMAC_MspInit 0 */

    /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8002a02:	4b0a      	ldr	r3, [pc, #40]	@ (8002a2c <HAL_FMAC_MspInit+0x3c>)
 8002a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a06:	4a09      	ldr	r2, [pc, #36]	@ (8002a2c <HAL_FMAC_MspInit+0x3c>)
 8002a08:	f043 0310 	orr.w	r3, r3, #16
 8002a0c:	6493      	str	r3, [r2, #72]	@ 0x48
 8002a0e:	4b07      	ldr	r3, [pc, #28]	@ (8002a2c <HAL_FMAC_MspInit+0x3c>)
 8002a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END FMAC_MspInit 1 */

  }

}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40021400 	.word	0x40021400
 8002a2c:	40021000 	.word	0x40021000

08002a30 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b09e      	sub	sp, #120	@ 0x78
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	2250      	movs	r2, #80	@ 0x50
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f010 fb07 	bl	8013064 <memset>
  if(hi2c->Instance==I2C3)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ad8 <HAL_I2C_MspInit+0xa8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d137      	bne.n	8002ad0 <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002a60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a64:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002a66:	2300      	movs	r3, #0
 8002a68:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f006 ff7a 	bl	8009968 <HAL_RCCEx_PeriphCLKConfig>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002a7a:	f7ff ff07 	bl	800288c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7e:	4b17      	ldr	r3, [pc, #92]	@ (8002adc <HAL_I2C_MspInit+0xac>)
 8002a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a82:	4a16      	ldr	r2, [pc, #88]	@ (8002adc <HAL_I2C_MspInit+0xac>)
 8002a84:	f043 0304 	orr.w	r3, r3, #4
 8002a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a8a:	4b14      	ldr	r3, [pc, #80]	@ (8002adc <HAL_I2C_MspInit+0xac>)
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a9a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a9c:	2312      	movs	r3, #18
 8002a9e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	480b      	ldr	r0, [pc, #44]	@ (8002ae0 <HAL_I2C_MspInit+0xb0>)
 8002ab4:	f003 fc64 	bl	8006380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ab8:	4b08      	ldr	r3, [pc, #32]	@ (8002adc <HAL_I2C_MspInit+0xac>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abc:	4a07      	ldr	r2, [pc, #28]	@ (8002adc <HAL_I2C_MspInit+0xac>)
 8002abe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ac2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ac4:	4b05      	ldr	r3, [pc, #20]	@ (8002adc <HAL_I2C_MspInit+0xac>)
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002ad0:	bf00      	nop
 8002ad2:	3778      	adds	r7, #120	@ 0x78
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40007800 	.word	0x40007800
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	48000800 	.word	0x48000800

08002ae4 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b098      	sub	sp, #96	@ 0x60
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002aec:	f107 0310 	add.w	r3, r7, #16
 8002af0:	2250      	movs	r2, #80	@ 0x50
 8002af2:	2100      	movs	r1, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	f010 fab5 	bl	8013064 <memset>
  if(hrng->Instance==RNG)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a11      	ldr	r2, [pc, #68]	@ (8002b44 <HAL_RNG_MspInit+0x60>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d11a      	bne.n	8002b3a <HAL_RNG_MspInit+0x56>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002b04:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b08:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b0e:	f107 0310 	add.w	r3, r7, #16
 8002b12:	4618      	mov	r0, r3
 8002b14:	f006 ff28 	bl	8009968 <HAL_RCCEx_PeriphCLKConfig>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_RNG_MspInit+0x3e>
    {
      Error_Handler();
 8002b1e:	f7ff feb5 	bl	800288c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002b22:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <HAL_RNG_MspInit+0x64>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b26:	4a08      	ldr	r2, [pc, #32]	@ (8002b48 <HAL_RNG_MspInit+0x64>)
 8002b28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b2e:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <HAL_RNG_MspInit+0x64>)
 8002b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8002b3a:	bf00      	nop
 8002b3c:	3760      	adds	r7, #96	@ 0x60
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	50060800 	.word	0x50060800
 8002b48:	40021000 	.word	0x40021000

08002b4c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b09e      	sub	sp, #120	@ 0x78
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b54:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	2250      	movs	r2, #80	@ 0x50
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f010 fa79 	bl	8013064 <memset>
  if(hrtc->Instance==RTC)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a24      	ldr	r2, [pc, #144]	@ (8002c08 <HAL_RTC_MspInit+0xbc>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d140      	bne.n	8002bfe <HAL_RTC_MspInit+0xb2>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b7c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002b80:	617b      	str	r3, [r7, #20]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002b82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b86:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f006 feeb 	bl	8009968 <HAL_RCCEx_PeriphCLKConfig>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8002b98:	f7ff fe78 	bl	800288c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <HAL_RTC_MspInit+0xc0>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c0c <HAL_RTC_MspInit+0xc0>)
 8002ba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002bac:	4b17      	ldr	r3, [pc, #92]	@ (8002c0c <HAL_RTC_MspInit+0xc0>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb0:	4a16      	ldr	r2, [pc, #88]	@ (8002c0c <HAL_RTC_MspInit+0xc0>)
 8002bb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bb8:	4b14      	ldr	r3, [pc, #80]	@ (8002c0c <HAL_RTC_MspInit+0xc0>)
 8002bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc4:	4b11      	ldr	r3, [pc, #68]	@ (8002c0c <HAL_RTC_MspInit+0xc0>)
 8002bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc8:	4a10      	ldr	r2, [pc, #64]	@ (8002c0c <HAL_RTC_MspInit+0xc0>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8002c0c <HAL_RTC_MspInit+0xc0>)
 8002bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PA1     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be8:	2300      	movs	r3, #0
 8002bea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 8002bec:	2300      	movs	r3, #0
 8002bee:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 8002bf0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bfa:	f003 fbc1 	bl	8006380 <HAL_GPIO_Init>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002bfe:	bf00      	nop
 8002c00:	3778      	adds	r7, #120	@ 0x78
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40002800 	.word	0x40002800
 8002c0c:	40021000 	.word	0x40021000

08002c10 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	@ 0x28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a17      	ldr	r2, [pc, #92]	@ (8002c8c <HAL_SPI_MspInit+0x7c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d128      	bne.n	8002c84 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c32:	4b17      	ldr	r3, [pc, #92]	@ (8002c90 <HAL_SPI_MspInit+0x80>)
 8002c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c36:	4a16      	ldr	r2, [pc, #88]	@ (8002c90 <HAL_SPI_MspInit+0x80>)
 8002c38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c3e:	4b14      	ldr	r3, [pc, #80]	@ (8002c90 <HAL_SPI_MspInit+0x80>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4a:	4b11      	ldr	r3, [pc, #68]	@ (8002c90 <HAL_SPI_MspInit+0x80>)
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4e:	4a10      	ldr	r2, [pc, #64]	@ (8002c90 <HAL_SPI_MspInit+0x80>)
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c56:	4b0e      	ldr	r3, [pc, #56]	@ (8002c90 <HAL_SPI_MspInit+0x80>)
 8002c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c62:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	2300      	movs	r3, #0
 8002c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c74:	2305      	movs	r3, #5
 8002c76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4805      	ldr	r0, [pc, #20]	@ (8002c94 <HAL_SPI_MspInit+0x84>)
 8002c80:	f003 fb7e 	bl	8006380 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002c84:	bf00      	nop
 8002c86:	3728      	adds	r7, #40	@ 0x28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40003800 	.word	0x40003800
 8002c90:	40021000 	.word	0x40021000
 8002c94:	48000400 	.word	0x48000400

08002c98 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08c      	sub	sp, #48	@ 0x30
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 031c 	add.w	r3, r7, #28
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a3c      	ldr	r2, [pc, #240]	@ (8002da8 <HAL_TIM_Encoder_MspInit+0x110>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d128      	bne.n	8002d0c <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cba:	4b3c      	ldr	r3, [pc, #240]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x114>)
 8002cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cbe:	4a3b      	ldr	r2, [pc, #236]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x114>)
 8002cc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002cc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cc6:	4b39      	ldr	r3, [pc, #228]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x114>)
 8002cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cd2:	4b36      	ldr	r3, [pc, #216]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x114>)
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd6:	4a35      	ldr	r2, [pc, #212]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x114>)
 8002cd8:	f043 0304 	orr.w	r3, r3, #4
 8002cdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cde:	4b33      	ldr	r3, [pc, #204]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x114>)
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC4     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = ENC0_A_Pin|ENC0_B_Pin|ENC0_Z_Pin;
 8002cea:	2313      	movs	r3, #19
 8002cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cfe:	f107 031c 	add.w	r3, r7, #28
 8002d02:	4619      	mov	r1, r3
 8002d04:	482a      	ldr	r0, [pc, #168]	@ (8002db0 <HAL_TIM_Encoder_MspInit+0x118>)
 8002d06:	f003 fb3b 	bl	8006380 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002d0a:	e049      	b.n	8002da0 <HAL_TIM_Encoder_MspInit+0x108>
  else if(htim_encoder->Instance==TIM8)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a28      	ldr	r2, [pc, #160]	@ (8002db4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d144      	bne.n	8002da0 <HAL_TIM_Encoder_MspInit+0x108>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d16:	4b25      	ldr	r3, [pc, #148]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x114>)
 8002d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d1a:	4a24      	ldr	r2, [pc, #144]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x114>)
 8002d1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d20:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d22:	4b22      	ldr	r3, [pc, #136]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x114>)
 8002d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x114>)
 8002d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d32:	4a1e      	ldr	r2, [pc, #120]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x114>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x114>)
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d46:	4b19      	ldr	r3, [pc, #100]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x114>)
 8002d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4a:	4a18      	ldr	r2, [pc, #96]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x114>)
 8002d4c:	f043 0304 	orr.w	r3, r3, #4
 8002d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d52:	4b16      	ldr	r3, [pc, #88]	@ (8002dac <HAL_TIM_Encoder_MspInit+0x114>)
 8002d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC1_Z_Pin;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	2302      	movs	r3, #2
 8002d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002d6e:	230a      	movs	r3, #10
 8002d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ENC1_Z_GPIO_Port, &GPIO_InitStruct);
 8002d72:	f107 031c 	add.w	r3, r7, #28
 8002d76:	4619      	mov	r1, r3
 8002d78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d7c:	f003 fb00 	bl	8006380 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 8002d80:	23c0      	movs	r3, #192	@ 0xc0
 8002d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002d90:	2304      	movs	r3, #4
 8002d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d94:	f107 031c 	add.w	r3, r7, #28
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4805      	ldr	r0, [pc, #20]	@ (8002db0 <HAL_TIM_Encoder_MspInit+0x118>)
 8002d9c:	f003 faf0 	bl	8006380 <HAL_GPIO_Init>
}
 8002da0:	bf00      	nop
 8002da2:	3730      	adds	r7, #48	@ 0x30
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40012c00 	.word	0x40012c00
 8002dac:	40021000 	.word	0x40021000
 8002db0:	48000800 	.word	0x48000800
 8002db4:	40013400 	.word	0x40013400

08002db8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e38 <HAL_TIM_Base_MspInit+0x80>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d10c      	bne.n	8002de4 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dca:	4b1c      	ldr	r3, [pc, #112]	@ (8002e3c <HAL_TIM_Base_MspInit+0x84>)
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dce:	4a1b      	ldr	r2, [pc, #108]	@ (8002e3c <HAL_TIM_Base_MspInit+0x84>)
 8002dd0:	f043 0302 	orr.w	r3, r3, #2
 8002dd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dd6:	4b19      	ldr	r3, [pc, #100]	@ (8002e3c <HAL_TIM_Base_MspInit+0x84>)
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002de2:	e022      	b.n	8002e2a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a15      	ldr	r2, [pc, #84]	@ (8002e40 <HAL_TIM_Base_MspInit+0x88>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d10c      	bne.n	8002e08 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002dee:	4b13      	ldr	r3, [pc, #76]	@ (8002e3c <HAL_TIM_Base_MspInit+0x84>)
 8002df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002df2:	4a12      	ldr	r2, [pc, #72]	@ (8002e3c <HAL_TIM_Base_MspInit+0x84>)
 8002df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002df8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dfa:	4b10      	ldr	r3, [pc, #64]	@ (8002e3c <HAL_TIM_Base_MspInit+0x84>)
 8002dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	693b      	ldr	r3, [r7, #16]
}
 8002e06:	e010      	b.n	8002e2a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM17)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e44 <HAL_TIM_Base_MspInit+0x8c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d10b      	bne.n	8002e2a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002e12:	4b0a      	ldr	r3, [pc, #40]	@ (8002e3c <HAL_TIM_Base_MspInit+0x84>)
 8002e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e16:	4a09      	ldr	r2, [pc, #36]	@ (8002e3c <HAL_TIM_Base_MspInit+0x84>)
 8002e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e1e:	4b07      	ldr	r3, [pc, #28]	@ (8002e3c <HAL_TIM_Base_MspInit+0x84>)
 8002e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40014400 	.word	0x40014400
 8002e44:	40014800 	.word	0x40014800

08002e48 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a0a      	ldr	r2, [pc, #40]	@ (8002e80 <HAL_TIM_PWM_MspInit+0x38>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d10b      	bne.n	8002e72 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM15_MspInit 0 */

    /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e5e:	4a09      	ldr	r2, [pc, #36]	@ (8002e84 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e64:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e66:	4b07      	ldr	r3, [pc, #28]	@ (8002e84 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM15_MspInit 1 */

  }

}
 8002e72:	bf00      	nop
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40014000 	.word	0x40014000
 8002e84:	40021000 	.word	0x40021000

08002e88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	@ 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a31      	ldr	r2, [pc, #196]	@ (8002f6c <HAL_TIM_MspPostInit+0xe4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d139      	bne.n	8002f1e <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eaa:	4b31      	ldr	r3, [pc, #196]	@ (8002f70 <HAL_TIM_MspPostInit+0xe8>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eae:	4a30      	ldr	r2, [pc, #192]	@ (8002f70 <HAL_TIM_MspPostInit+0xe8>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8002f70 <HAL_TIM_MspPostInit+0xe8>)
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8002f70 <HAL_TIM_MspPostInit+0xe8>)
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8002f70 <HAL_TIM_MspPostInit+0xe8>)
 8002ec8:	f043 0302 	orr.w	r3, r3, #2
 8002ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ece:	4b28      	ldr	r3, [pc, #160]	@ (8002f70 <HAL_TIM_MspPostInit+0xe8>)
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = SERVO_PWM0_Pin|SERVO_PWM1_Pin;
 8002eda:	23c0      	movs	r3, #192	@ 0xc0
 8002edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002eea:	2302      	movs	r3, #2
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eee:	f107 0314 	add.w	r3, r7, #20
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ef8:	f003 fa42 	bl	8006380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO_PWM2_Pin|SERVO_PWM3_Pin;
 8002efc:	2303      	movs	r3, #3
 8002efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f00:	2302      	movs	r3, #2
 8002f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f10:	f107 0314 	add.w	r3, r7, #20
 8002f14:	4619      	mov	r1, r3
 8002f16:	4817      	ldr	r0, [pc, #92]	@ (8002f74 <HAL_TIM_MspPostInit+0xec>)
 8002f18:	f003 fa32 	bl	8006380 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002f1c:	e021      	b.n	8002f62 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM15)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a15      	ldr	r2, [pc, #84]	@ (8002f78 <HAL_TIM_MspPostInit+0xf0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d11c      	bne.n	8002f62 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f28:	4b11      	ldr	r3, [pc, #68]	@ (8002f70 <HAL_TIM_MspPostInit+0xe8>)
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2c:	4a10      	ldr	r2, [pc, #64]	@ (8002f70 <HAL_TIM_MspPostInit+0xe8>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f34:	4b0e      	ldr	r3, [pc, #56]	@ (8002f70 <HAL_TIM_MspPostInit+0xe8>)
 8002f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DRV_PWM_Pin;
 8002f40:	2308      	movs	r3, #8
 8002f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002f50:	2309      	movs	r3, #9
 8002f52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DRV_PWM_GPIO_Port, &GPIO_InitStruct);
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f5e:	f003 fa0f 	bl	8006380 <HAL_GPIO_Init>
}
 8002f62:	bf00      	nop
 8002f64:	3728      	adds	r7, #40	@ 0x28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40000400 	.word	0x40000400
 8002f70:	40021000 	.word	0x40021000
 8002f74:	48000400 	.word	0x48000400
 8002f78:	40014000 	.word	0x40014000

08002f7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b0a0      	sub	sp, #128	@ 0x80
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f94:	f107 031c 	add.w	r3, r7, #28
 8002f98:	2250      	movs	r2, #80	@ 0x50
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f010 f861 	bl	8013064 <memset>
  if(huart->Instance==UART5)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a64      	ldr	r2, [pc, #400]	@ (8003138 <HAL_UART_MspInit+0x1bc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d153      	bne.n	8003054 <HAL_UART_MspInit+0xd8>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002fac:	2310      	movs	r3, #16
 8002fae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f006 fcd5 	bl	8009968 <HAL_RCCEx_PeriphCLKConfig>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002fc4:	f7ff fc62 	bl	800288c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002fc8:	4b5c      	ldr	r3, [pc, #368]	@ (800313c <HAL_UART_MspInit+0x1c0>)
 8002fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fcc:	4a5b      	ldr	r2, [pc, #364]	@ (800313c <HAL_UART_MspInit+0x1c0>)
 8002fce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fd4:	4b59      	ldr	r3, [pc, #356]	@ (800313c <HAL_UART_MspInit+0x1c0>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe0:	4b56      	ldr	r3, [pc, #344]	@ (800313c <HAL_UART_MspInit+0x1c0>)
 8002fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe4:	4a55      	ldr	r2, [pc, #340]	@ (800313c <HAL_UART_MspInit+0x1c0>)
 8002fe6:	f043 0304 	orr.w	r3, r3, #4
 8002fea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fec:	4b53      	ldr	r3, [pc, #332]	@ (800313c <HAL_UART_MspInit+0x1c0>)
 8002fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ff8:	4b50      	ldr	r3, [pc, #320]	@ (800313c <HAL_UART_MspInit+0x1c0>)
 8002ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ffc:	4a4f      	ldr	r2, [pc, #316]	@ (800313c <HAL_UART_MspInit+0x1c0>)
 8002ffe:	f043 0308 	orr.w	r3, r3, #8
 8003002:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003004:	4b4d      	ldr	r3, [pc, #308]	@ (800313c <HAL_UART_MspInit+0x1c0>)
 8003006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8003010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003014:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003016:	2302      	movs	r3, #2
 8003018:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	2300      	movs	r3, #0
 800301c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301e:	2300      	movs	r3, #0
 8003020:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003022:	2305      	movs	r3, #5
 8003024:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 8003026:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800302a:	4619      	mov	r1, r3
 800302c:	4844      	ldr	r0, [pc, #272]	@ (8003140 <HAL_UART_MspInit+0x1c4>)
 800302e:	f003 f9a7 	bl	8006380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8003032:	2304      	movs	r3, #4
 8003034:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303e:	2300      	movs	r3, #0
 8003040:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003042:	2305      	movs	r3, #5
 8003044:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8003046:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800304a:	4619      	mov	r1, r3
 800304c:	483d      	ldr	r0, [pc, #244]	@ (8003144 <HAL_UART_MspInit+0x1c8>)
 800304e:	f003 f997 	bl	8006380 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8003052:	e06c      	b.n	800312e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a3b      	ldr	r2, [pc, #236]	@ (8003148 <HAL_UART_MspInit+0x1cc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d167      	bne.n	800312e <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800305e:	2304      	movs	r3, #4
 8003060:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003062:	2300      	movs	r3, #0
 8003064:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003066:	f107 031c 	add.w	r3, r7, #28
 800306a:	4618      	mov	r0, r3
 800306c:	f006 fc7c 	bl	8009968 <HAL_RCCEx_PeriphCLKConfig>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8003076:	f7ff fc09 	bl	800288c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800307a:	4b30      	ldr	r3, [pc, #192]	@ (800313c <HAL_UART_MspInit+0x1c0>)
 800307c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307e:	4a2f      	ldr	r2, [pc, #188]	@ (800313c <HAL_UART_MspInit+0x1c0>)
 8003080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003084:	6593      	str	r3, [r2, #88]	@ 0x58
 8003086:	4b2d      	ldr	r3, [pc, #180]	@ (800313c <HAL_UART_MspInit+0x1c0>)
 8003088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003092:	4b2a      	ldr	r3, [pc, #168]	@ (800313c <HAL_UART_MspInit+0x1c0>)
 8003094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003096:	4a29      	ldr	r2, [pc, #164]	@ (800313c <HAL_UART_MspInit+0x1c0>)
 8003098:	f043 0304 	orr.w	r3, r3, #4
 800309c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800309e:	4b27      	ldr	r3, [pc, #156]	@ (800313c <HAL_UART_MspInit+0x1c0>)
 80030a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	60bb      	str	r3, [r7, #8]
 80030a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80030aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80030ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b0:	2302      	movs	r3, #2
 80030b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b8:	2300      	movs	r3, #0
 80030ba:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030bc:	2307      	movs	r3, #7
 80030be:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80030c4:	4619      	mov	r1, r3
 80030c6:	481e      	ldr	r0, [pc, #120]	@ (8003140 <HAL_UART_MspInit+0x1c4>)
 80030c8:	f003 f95a 	bl	8006380 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel3;
 80030cc:	4b1f      	ldr	r3, [pc, #124]	@ (800314c <HAL_UART_MspInit+0x1d0>)
 80030ce:	4a20      	ldr	r2, [pc, #128]	@ (8003150 <HAL_UART_MspInit+0x1d4>)
 80030d0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80030d2:	4b1e      	ldr	r3, [pc, #120]	@ (800314c <HAL_UART_MspInit+0x1d0>)
 80030d4:	221d      	movs	r2, #29
 80030d6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030d8:	4b1c      	ldr	r3, [pc, #112]	@ (800314c <HAL_UART_MspInit+0x1d0>)
 80030da:	2210      	movs	r2, #16
 80030dc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030de:	4b1b      	ldr	r3, [pc, #108]	@ (800314c <HAL_UART_MspInit+0x1d0>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030e4:	4b19      	ldr	r3, [pc, #100]	@ (800314c <HAL_UART_MspInit+0x1d0>)
 80030e6:	2280      	movs	r2, #128	@ 0x80
 80030e8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030ea:	4b18      	ldr	r3, [pc, #96]	@ (800314c <HAL_UART_MspInit+0x1d0>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030f0:	4b16      	ldr	r3, [pc, #88]	@ (800314c <HAL_UART_MspInit+0x1d0>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80030f6:	4b15      	ldr	r3, [pc, #84]	@ (800314c <HAL_UART_MspInit+0x1d0>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030fc:	4b13      	ldr	r3, [pc, #76]	@ (800314c <HAL_UART_MspInit+0x1d0>)
 80030fe:	2200      	movs	r2, #0
 8003100:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003102:	4812      	ldr	r0, [pc, #72]	@ (800314c <HAL_UART_MspInit+0x1d0>)
 8003104:	f002 fe16 	bl	8005d34 <HAL_DMA_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_UART_MspInit+0x196>
      Error_Handler();
 800310e:	f7ff fbbd 	bl	800288c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a0d      	ldr	r2, [pc, #52]	@ (800314c <HAL_UART_MspInit+0x1d0>)
 8003116:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003118:	4a0c      	ldr	r2, [pc, #48]	@ (800314c <HAL_UART_MspInit+0x1d0>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 800311e:	2200      	movs	r2, #0
 8003120:	210e      	movs	r1, #14
 8003122:	2027      	movs	r0, #39	@ 0x27
 8003124:	f002 fdde 	bl	8005ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003128:	2027      	movs	r0, #39	@ 0x27
 800312a:	f002 fdf5 	bl	8005d18 <HAL_NVIC_EnableIRQ>
}
 800312e:	bf00      	nop
 8003130:	3780      	adds	r7, #128	@ 0x80
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40005000 	.word	0x40005000
 800313c:	40021000 	.word	0x40021000
 8003140:	48000800 	.word	0x48000800
 8003144:	48000c00 	.word	0x48000c00
 8003148:	40004800 	.word	0x40004800
 800314c:	2000080c 	.word	0x2000080c
 8003150:	40020030 	.word	0x40020030

08003154 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08c      	sub	sp, #48	@ 0x30
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003164:	4b2c      	ldr	r3, [pc, #176]	@ (8003218 <HAL_InitTick+0xc4>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003168:	4a2b      	ldr	r2, [pc, #172]	@ (8003218 <HAL_InitTick+0xc4>)
 800316a:	f043 0310 	orr.w	r3, r3, #16
 800316e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003170:	4b29      	ldr	r3, [pc, #164]	@ (8003218 <HAL_InitTick+0xc4>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800317c:	f107 020c 	add.w	r2, r7, #12
 8003180:	f107 0310 	add.w	r3, r7, #16
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f006 fb76 	bl	8009878 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800318c:	f006 fb48 	bl	8009820 <HAL_RCC_GetPCLK1Freq>
 8003190:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003194:	4a21      	ldr	r2, [pc, #132]	@ (800321c <HAL_InitTick+0xc8>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	0c9b      	lsrs	r3, r3, #18
 800319c:	3b01      	subs	r3, #1
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80031a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003220 <HAL_InitTick+0xcc>)
 80031a2:	4a20      	ldr	r2, [pc, #128]	@ (8003224 <HAL_InitTick+0xd0>)
 80031a4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80031a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003220 <HAL_InitTick+0xcc>)
 80031a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80031ac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80031ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003220 <HAL_InitTick+0xcc>)
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80031b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003220 <HAL_InitTick+0xcc>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ba:	4b19      	ldr	r3, [pc, #100]	@ (8003220 <HAL_InitTick+0xcc>)
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80031c0:	4817      	ldr	r0, [pc, #92]	@ (8003220 <HAL_InitTick+0xcc>)
 80031c2:	f007 ff83 	bl	800b0cc <HAL_TIM_Base_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80031cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d11b      	bne.n	800320c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80031d4:	4812      	ldr	r0, [pc, #72]	@ (8003220 <HAL_InitTick+0xcc>)
 80031d6:	f007 ffd1 	bl	800b17c <HAL_TIM_Base_Start_IT>
 80031da:	4603      	mov	r3, r0
 80031dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80031e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d111      	bne.n	800320c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031e8:	2036      	movs	r0, #54	@ 0x36
 80031ea:	f002 fd95 	bl	8005d18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b0f      	cmp	r3, #15
 80031f2:	d808      	bhi.n	8003206 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80031f4:	2200      	movs	r2, #0
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	2036      	movs	r0, #54	@ 0x36
 80031fa:	f002 fd73 	bl	8005ce4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003228 <HAL_InitTick+0xd4>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	e002      	b.n	800320c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800320c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003210:	4618      	mov	r0, r3
 8003212:	3730      	adds	r7, #48	@ 0x30
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000
 800321c:	431bde83 	.word	0x431bde83
 8003220:	2000086c 	.word	0x2000086c
 8003224:	40001000 	.word	0x40001000
 8003228:	20000008 	.word	0x20000008

0800322c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003230:	bf00      	nop
 8003232:	e7fd      	b.n	8003230 <NMI_Handler+0x4>

08003234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003238:	bf00      	nop
 800323a:	e7fd      	b.n	8003238 <HardFault_Handler+0x4>

0800323c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003240:	bf00      	nop
 8003242:	e7fd      	b.n	8003240 <MemManage_Handler+0x4>

08003244 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003248:	bf00      	nop
 800324a:	e7fd      	b.n	8003248 <BusFault_Handler+0x4>

0800324c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003250:	bf00      	nop
 8003252:	e7fd      	b.n	8003250 <UsageFault_Handler+0x4>

08003254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800327e:	b480      	push	{r7}
 8003280:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003290:	4802      	ldr	r0, [pc, #8]	@ (800329c <DMA1_Channel3_IRQHandler+0x10>)
 8003292:	f002 feb7 	bl	8006004 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	2000080c 	.word	0x2000080c

080032a0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80032a4:	4802      	ldr	r0, [pc, #8]	@ (80032b0 <USB_LP_IRQHandler+0x10>)
 80032a6:	f003 ffea 	bl	800727e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000ee4 	.word	0x20000ee4

080032b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80032b8:	4802      	ldr	r0, [pc, #8]	@ (80032c4 <USART3_IRQHandler+0x10>)
 80032ba:	f009 fcc9 	bl	800cc50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000778 	.word	0x20000778

080032c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80032cc:	4802      	ldr	r0, [pc, #8]	@ (80032d8 <TIM6_DAC_IRQHandler+0x10>)
 80032ce:	f008 f950 	bl	800b572 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	2000086c 	.word	0x2000086c

080032dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return 1;
 80032e0:	2301      	movs	r3, #1
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <_kill>:

int _kill(int pid, int sig)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032f6:	f00f fed1 	bl	801309c <__errno>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2216      	movs	r2, #22
 80032fe:	601a      	str	r2, [r3, #0]
  return -1;
 8003300:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <_exit>:

void _exit (int status)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003314:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ffe7 	bl	80032ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800331e:	bf00      	nop
 8003320:	e7fd      	b.n	800331e <_exit+0x12>

08003322 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	e00a      	b.n	800334a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003334:	f3af 8000 	nop.w
 8003338:	4601      	mov	r1, r0
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	60ba      	str	r2, [r7, #8]
 8003340:	b2ca      	uxtb	r2, r1
 8003342:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	3301      	adds	r3, #1
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	429a      	cmp	r2, r3
 8003350:	dbf0      	blt.n	8003334 <_read+0x12>
  }

  return len;
 8003352:	687b      	ldr	r3, [r7, #4]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <_close>:
  }
  return len;
}

int _close(int file)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003364:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003384:	605a      	str	r2, [r3, #4]
  return 0;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <_isatty>:

int _isatty(int file)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800339c:	2301      	movs	r3, #1
}
 800339e:	4618      	mov	r0, r3
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b085      	sub	sp, #20
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033cc:	4a14      	ldr	r2, [pc, #80]	@ (8003420 <_sbrk+0x5c>)
 80033ce:	4b15      	ldr	r3, [pc, #84]	@ (8003424 <_sbrk+0x60>)
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033d8:	4b13      	ldr	r3, [pc, #76]	@ (8003428 <_sbrk+0x64>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033e0:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <_sbrk+0x64>)
 80033e2:	4a12      	ldr	r2, [pc, #72]	@ (800342c <_sbrk+0x68>)
 80033e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033e6:	4b10      	ldr	r3, [pc, #64]	@ (8003428 <_sbrk+0x64>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d207      	bcs.n	8003404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033f4:	f00f fe52 	bl	801309c <__errno>
 80033f8:	4603      	mov	r3, r0
 80033fa:	220c      	movs	r2, #12
 80033fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003402:	e009      	b.n	8003418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003404:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <_sbrk+0x64>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800340a:	4b07      	ldr	r3, [pc, #28]	@ (8003428 <_sbrk+0x64>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	4a05      	ldr	r2, [pc, #20]	@ (8003428 <_sbrk+0x64>)
 8003414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003416:	68fb      	ldr	r3, [r7, #12]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	2001c000 	.word	0x2001c000
 8003424:	00000600 	.word	0x00000600
 8003428:	200008b8 	.word	0x200008b8
 800342c:	20001728 	.word	0x20001728

08003430 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003434:	4b06      	ldr	r3, [pc, #24]	@ (8003450 <SystemInit+0x20>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343a:	4a05      	ldr	r2, [pc, #20]	@ (8003450 <SystemInit+0x20>)
 800343c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003440:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003454:	480d      	ldr	r0, [pc, #52]	@ (800348c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003456:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003458:	f7ff ffea 	bl	8003430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800345c:	480c      	ldr	r0, [pc, #48]	@ (8003490 <LoopForever+0x6>)
  ldr r1, =_edata
 800345e:	490d      	ldr	r1, [pc, #52]	@ (8003494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003460:	4a0d      	ldr	r2, [pc, #52]	@ (8003498 <LoopForever+0xe>)
  movs r3, #0
 8003462:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003464:	e002      	b.n	800346c <LoopCopyDataInit>

08003466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800346a:	3304      	adds	r3, #4

0800346c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800346c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800346e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003470:	d3f9      	bcc.n	8003466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003472:	4a0a      	ldr	r2, [pc, #40]	@ (800349c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003474:	4c0a      	ldr	r4, [pc, #40]	@ (80034a0 <LoopForever+0x16>)
  movs r3, #0
 8003476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003478:	e001      	b.n	800347e <LoopFillZerobss>

0800347a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800347a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800347c:	3204      	adds	r2, #4

0800347e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800347e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003480:	d3fb      	bcc.n	800347a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003482:	f00f fe11 	bl	80130a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003486:	f7fe f8b7 	bl	80015f8 <main>

0800348a <LoopForever>:

LoopForever:
    b LoopForever
 800348a:	e7fe      	b.n	800348a <LoopForever>
  ldr   r0, =_estack
 800348c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003494:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8003498:	08016708 	.word	0x08016708
  ldr r2, =_sbss
 800349c:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 80034a0:	20001728 	.word	0x20001728

080034a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034a4:	e7fe      	b.n	80034a4 <ADC1_2_IRQHandler>

080034a6 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d105      	bne.n	80034c0 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80034b4:	b672      	cpsid	i
}
 80034b6:	bf00      	nop
 80034b8:	f7ff f9e8 	bl	800288c <Error_Handler>
 80034bc:	bf00      	nop
 80034be:	e7fd      	b.n	80034bc <stm32_lock_init+0x16>
  lock->flag = 0;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	705a      	strb	r2, [r3, #1]
}
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034dc:	f3ef 8310 	mrs	r3, PRIMASK
 80034e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80034e2:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 80034ec:	b672      	cpsid	i
}
 80034ee:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034f0:	f3bf 8f4f 	dsb	sy
}
 80034f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034f6:	f3bf 8f6f 	isb	sy
}
 80034fa:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d105      	bne.n	800350e <stm32_lock_acquire+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003502:	b672      	cpsid	i
}
 8003504:	bf00      	nop
 8003506:	f7ff f9c1 	bl	800288c <Error_Handler>
 800350a:	bf00      	nop
 800350c:	e7fd      	b.n	800350a <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	785b      	ldrb	r3, [r3, #1]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <stm32_lock_acquire+0x4a>
  {
    lock->flag = flag;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	701a      	strb	r2, [r3, #0]
 800351c:	e009      	b.n	8003532 <stm32_lock_acquire+0x5e>
  }
  else if (lock->counter == UINT8_MAX)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	785b      	ldrb	r3, [r3, #1]
 8003522:	2bff      	cmp	r3, #255	@ 0xff
 8003524:	d105      	bne.n	8003532 <stm32_lock_acquire+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 8003526:	b672      	cpsid	i
}
 8003528:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 800352a:	f7ff f9af 	bl	800288c <Error_Handler>
 800352e:	bf00      	nop
 8003530:	e7fd      	b.n	800352e <stm32_lock_acquire+0x5a>
  }
  lock->counter++;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	785b      	ldrb	r3, [r3, #1]
 8003536:	3301      	adds	r3, #1
 8003538:	b2da      	uxtb	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	705a      	strb	r2, [r3, #1]
}
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d105      	bne.n	8003560 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003554:	b672      	cpsid	i
}
 8003556:	bf00      	nop
 8003558:	f7ff f998 	bl	800288c <Error_Handler>
 800355c:	bf00      	nop
 800355e:	e7fd      	b.n	800355c <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	785b      	ldrb	r3, [r3, #1]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d105      	bne.n	8003574 <stm32_lock_release+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8003568:	b672      	cpsid	i
}
 800356a:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 800356c:	f7ff f98e 	bl	800288c <Error_Handler>
 8003570:	bf00      	nop
 8003572:	e7fd      	b.n	8003570 <stm32_lock_release+0x2a>
  }
  lock->counter--;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	785b      	ldrb	r3, [r3, #1]
 8003578:	3b01      	subs	r3, #1
 800357a:	b2da      	uxtb	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	785b      	ldrb	r3, [r3, #1]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d105      	bne.n	8003594 <stm32_lock_release+0x4e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <stm32_lock_release+0x4e>
  __ASM volatile ("cpsie i" : : : "memory");
 8003590:	b662      	cpsie	i
}
 8003592:	bf00      	nop
  {
    __enable_irq();
  }
}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d105      	bne.n	80035b6 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80035aa:	f00f fd77 	bl	801309c <__errno>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2216      	movs	r2, #22
 80035b2:	601a      	str	r2, [r3, #0]
    return;
 80035b4:	e016      	b.n	80035e4 <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80035b6:	2002      	movs	r0, #2
 80035b8:	f00f f916 	bl	80127e8 <malloc>
 80035bc:	4603      	mov	r3, r0
 80035be:	461a      	mov	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff68 	bl	80034a6 <stm32_lock_init>
    return;
 80035d6:	e005      	b.n	80035e4 <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 80035d8:	b672      	cpsid	i
}
 80035da:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 80035dc:	f7ff f956 	bl	800288c <Error_Handler>
 80035e0:	bf00      	nop
 80035e2:	e7fd      	b.n	80035e0 <__retarget_lock_init_recursive+0x44>
}
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d105      	bne.n	8003604 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80035f8:	b672      	cpsid	i
}
 80035fa:	bf00      	nop
 80035fc:	f7ff f946 	bl	800288c <Error_Handler>
 8003600:	bf00      	nop
 8003602:	e7fd      	b.n	8003600 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ff64 	bl	80034d4 <stm32_lock_acquire>
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d105      	bne.n	800362e <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003622:	b672      	cpsid	i
}
 8003624:	bf00      	nop
 8003626:	f7ff f931 	bl	800288c <Error_Handler>
 800362a:	bf00      	nop
 800362c:	e7fd      	b.n	800362a <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff88 	bl	8003546 <stm32_lock_release>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <QENC_Init_Encoder0>:
#include "AMT10E2.h"

// Initialize encoder interface on TIM1
void QENC_Init_Encoder0(void) {
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	@ 0x28
 8003644:	af00      	add	r7, sp, #0
    TIM_Encoder_InitTypeDef encoderConfig = {0};
 8003646:	1d3b      	adds	r3, r7, #4
 8003648:	2224      	movs	r2, #36	@ 0x24
 800364a:	2100      	movs	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f00f fd09 	bl	8013064 <memset>

    encoderConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003652:	2303      	movs	r3, #3
 8003654:	607b      	str	r3, [r7, #4]
    encoderConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003656:	2300      	movs	r3, #0
 8003658:	60bb      	str	r3, [r7, #8]
    encoderConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800365a:	2301      	movs	r3, #1
 800365c:	60fb      	str	r3, [r7, #12]
    encoderConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
    encoderConfig.IC1Filter = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]

    encoderConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
    encoderConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800366a:	2301      	movs	r3, #1
 800366c:	61fb      	str	r3, [r7, #28]
    encoderConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800366e:	2300      	movs	r3, #0
 8003670:	623b      	str	r3, [r7, #32]
    encoderConfig.IC2Filter = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24

    htim1.Instance = TIM1;
 8003676:	4b0e      	ldr	r3, [pc, #56]	@ (80036b0 <QENC_Init_Encoder0+0x70>)
 8003678:	4a0e      	ldr	r2, [pc, #56]	@ (80036b4 <QENC_Init_Encoder0+0x74>)
 800367a:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 0;
 800367c:	4b0c      	ldr	r3, [pc, #48]	@ (80036b0 <QENC_Init_Encoder0+0x70>)
 800367e:	2200      	movs	r2, #0
 8003680:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003682:	4b0b      	ldr	r3, [pc, #44]	@ (80036b0 <QENC_Init_Encoder0+0x70>)
 8003684:	2200      	movs	r2, #0
 8003686:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 0xFFFF;
 8003688:	4b09      	ldr	r3, [pc, #36]	@ (80036b0 <QENC_Init_Encoder0+0x70>)
 800368a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800368e:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003690:	4b07      	ldr	r3, [pc, #28]	@ (80036b0 <QENC_Init_Encoder0+0x70>)
 8003692:	2200      	movs	r2, #0
 8003694:	611a      	str	r2, [r3, #16]

    HAL_TIM_Encoder_Init(&htim1, &encoderConfig);
 8003696:	1d3b      	adds	r3, r7, #4
 8003698:	4619      	mov	r1, r3
 800369a:	4805      	ldr	r0, [pc, #20]	@ (80036b0 <QENC_Init_Encoder0+0x70>)
 800369c:	f007 fe35 	bl	800b30a <HAL_TIM_Encoder_Init>
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80036a0:	213c      	movs	r1, #60	@ 0x3c
 80036a2:	4803      	ldr	r0, [pc, #12]	@ (80036b0 <QENC_Init_Encoder0+0x70>)
 80036a4:	f007 fed7 	bl	800b456 <HAL_TIM_Encoder_Start>
}
 80036a8:	bf00      	nop
 80036aa:	3728      	adds	r7, #40	@ 0x28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	2000051c 	.word	0x2000051c
 80036b4:	40012c00 	.word	0x40012c00

080036b8 <QENC_Get_Encoder0_Count>:
    HAL_TIM_Encoder_Init(&htim8, &encoderConfig);
    HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
}

// Get signed count from Encoder 0
int16_t QENC_Get_Encoder0_Count(void) {
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
    return (int16_t)__HAL_TIM_GET_COUNTER(&htim1);
 80036bc:	4b04      	ldr	r3, [pc, #16]	@ (80036d0 <QENC_Get_Encoder0_Count+0x18>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	b21b      	sxth	r3, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	2000051c 	.word	0x2000051c

080036d4 <BMM150_enable_chip_select>:
	GPIO_TypeDef* chip_select_port;
	uint16_t chip_select_pin;
};

void BMM150_enable_chip_select(GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(cs_port, cs_gpio_pin, GPIO_PIN_RESET);
 80036e0:	887b      	ldrh	r3, [r7, #2]
 80036e2:	2200      	movs	r2, #0
 80036e4:	4619      	mov	r1, r3
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f002 ffe4 	bl	80066b4 <HAL_GPIO_WritePin>
}
 80036ec:	bf00      	nop
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <BMM150_disable_chip_select>:

void BMM150_disable_chip_select(GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(cs_port, cs_gpio_pin, GPIO_PIN_SET);
 8003700:	887b      	ldrh	r3, [r7, #2]
 8003702:	2201      	movs	r2, #1
 8003704:	4619      	mov	r1, r3
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f002 ffd4 	bl	80066b4 <HAL_GPIO_WritePin>
}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <BMM150_SPI_read>:
	osDelay(period_in_micro_s / tick_amount);
}
*/

BMM150_INTF_RET_TYPE BMM150_SPI_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	4603      	mov	r3, r0
 8003722:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	75fb      	strb	r3, [r7, #23]
	struct spi_interface *spi = (struct spi_interface *)intf_ptr;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	613b      	str	r3, [r7, #16]

	BMM150_enable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	891b      	ldrh	r3, [r3, #8]
 8003734:	4619      	mov	r1, r3
 8003736:	4610      	mov	r0, r2
 8003738:	f7ff ffcc 	bl	80036d4 <BMM150_enable_chip_select>

	status = HAL_SPI_Transmit(spi->spi_handle, reg_addr, sizeof(reg_addr), BMM150_TIMEOUT_DURATION);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	4619      	mov	r1, r3
 8003744:	230a      	movs	r3, #10
 8003746:	2201      	movs	r2, #1
 8003748:	f006 fe36 	bl	800a3b8 <HAL_SPI_Transmit>
 800374c:	4603      	mov	r3, r0
 800374e:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(spi->spi_handle, reg_data, length, BMM150_TIMEOUT_DURATION);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	b29a      	uxth	r2, r3
 8003758:	230a      	movs	r3, #10
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	f006 ffa2 	bl	800a6a4 <HAL_SPI_Receive>
 8003760:	4603      	mov	r3, r0
 8003762:	75fb      	strb	r3, [r7, #23]

	BMM150_disable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	891b      	ldrh	r3, [r3, #8]
 800376c:	4619      	mov	r1, r3
 800376e:	4610      	mov	r0, r2
 8003770:	f7ff ffc0 	bl	80036f4 <BMM150_disable_chip_select>


	return (BMM150_INTF_RET_TYPE)status;
 8003774:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <BMM150_SPI_write>:

BMM150_INTF_RET_TYPE BMM150_SPI_write(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	4603      	mov	r3, r0
 800378e:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	75fb      	strb	r3, [r7, #23]
	struct spi_interface *spi = (struct spi_interface *)intf_ptr;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	613b      	str	r3, [r7, #16]

	BMM150_enable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	891b      	ldrh	r3, [r3, #8]
 80037a0:	4619      	mov	r1, r3
 80037a2:	4610      	mov	r0, r2
 80037a4:	f7ff ff96 	bl	80036d4 <BMM150_enable_chip_select>

	status = HAL_SPI_Transmit(spi->spi_handle, reg_addr, sizeof(reg_addr), BMM150_TIMEOUT_DURATION);
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	4619      	mov	r1, r3
 80037b0:	230a      	movs	r3, #10
 80037b2:	2201      	movs	r2, #1
 80037b4:	f006 fe00 	bl	800a3b8 <HAL_SPI_Transmit>
 80037b8:	4603      	mov	r3, r0
 80037ba:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Transmit(spi->spi_handle, reg_data, length, BMM150_TIMEOUT_DURATION);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	230a      	movs	r3, #10
 80037c6:	68b9      	ldr	r1, [r7, #8]
 80037c8:	f006 fdf6 	bl	800a3b8 <HAL_SPI_Transmit>
 80037cc:	4603      	mov	r3, r0
 80037ce:	75fb      	strb	r3, [r7, #23]

	BMM150_disable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	891b      	ldrh	r3, [r3, #8]
 80037d8:	4619      	mov	r1, r3
 80037da:	4610      	mov	r0, r2
 80037dc:	f7ff ff8a 	bl	80036f4 <BMM150_disable_chip_select>

	return (BMM150_INTF_RET_TYPE)status;
 80037e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <BMM150_spi_init>:

struct bmm150_dev BMM150_spi_init(SPI_HandleTypeDef *spi_handle, GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 80037ec:	b5b0      	push	{r4, r5, r7, lr}
 80037ee:	b09e      	sub	sp, #120	@ 0x78
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	807b      	strh	r3, [r7, #2]
	struct bmm150_dev bmm150 = (struct bmm150_dev){ 0 };
 80037fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80037fe:	222c      	movs	r2, #44	@ 0x2c
 8003800:	2100      	movs	r1, #0
 8003802:	4618      	mov	r0, r3
 8003804:	f00f fc2e 	bl	8013064 <memset>

	if (spi_handle == NULL)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10f      	bne.n	800382e <BMM150_spi_init+0x42>
	{
		bmm150.intf_rslt = BMM150_E_NULL_PTR;
 800380e:	23ff      	movs	r3, #255	@ 0xff
 8003810:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		return bmm150;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	461d      	mov	r5, r3
 8003818:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 800381c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800381e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003824:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003828:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800382c:	e026      	b.n	800387c <BMM150_spi_init+0x90>
	}

	struct spi_interface my_spi = {
 800382e:	f107 0308 	add.w	r3, r7, #8
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	1d3b      	adds	r3, r7, #4
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	887b      	ldrh	r3, [r7, #2]
 800383a:	83bb      	strh	r3, [r7, #28]
		.spi_handle = &spi_handle,
		.chip_select_port = &cs_port,
		.chip_select_pin = cs_gpio_pin
	};

	bmm150.intf = BMM150_SPI_INTF;
 800383c:	2300      	movs	r3, #0
 800383e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	bmm150.read = BMM150_SPI_read;
 8003842:	4b10      	ldr	r3, [pc, #64]	@ (8003884 <BMM150_spi_init+0x98>)
 8003844:	65bb      	str	r3, [r7, #88]	@ 0x58
	bmm150.write = BMM150_SPI_write;
 8003846:	4b10      	ldr	r3, [pc, #64]	@ (8003888 <BMM150_spi_init+0x9c>)
 8003848:	65fb      	str	r3, [r7, #92]	@ 0x5c
	bmm150.delay_us = HAL_Delay;
 800384a:	4b10      	ldr	r3, [pc, #64]	@ (800388c <BMM150_spi_init+0xa0>)
 800384c:	663b      	str	r3, [r7, #96]	@ 0x60
	bmm150.intf_ptr = &my_spi;
 800384e:	f107 0314 	add.w	r3, r7, #20
 8003852:	653b      	str	r3, [r7, #80]	@ 0x50

	//NOTE: Potential error: is chip id initialized properly?
	bmm150.intf_rslt = bmm150_init(&bmm150);
 8003854:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003858:	4618      	mov	r0, r3
 800385a:	f000 f819 	bl	8003890 <bmm150_init>
 800385e:	4603      	mov	r3, r0
 8003860:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	return bmm150;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	461d      	mov	r5, r3
 8003868:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 800386c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800386e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003874:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003878:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	3778      	adds	r7, #120	@ 0x78
 8003880:	46bd      	mov	sp, r7
 8003882:	bdb0      	pop	{r4, r5, r7, pc}
 8003884:	08003715 	.word	0x08003715
 8003888:	08003781 	.word	0x08003781
 800388c:	08004909 	.word	0x08004909

08003890 <bmm150_init>:
 *  @brief This API is the entry point, Call this API before using other APIs.
 *  This API reads the chip-id of the sensor which is the first step to
 *  verify the sensor and updates the trim parameters of the sensor.
 */
int8_t bmm150_init(struct bmm150_dev *dev)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	73bb      	strb	r3, [r7, #14]

    /* Power up the sensor from suspend to sleep mode */
    rslt = set_power_control_bit(BMM150_POWER_CNTRL_ENABLE, dev);
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	2001      	movs	r0, #1
 80038a0:	f000 f8ac 	bl	80039fc <set_power_control_bit>
 80038a4:	4603      	mov	r3, r0
 80038a6:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 80038a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d11e      	bne.n	80038ee <bmm150_init+0x5e>
    {
        /* Start-up time delay of 3ms */
        dev->delay_us(BMM150_START_UP_TIME, dev->intf_ptr);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6852      	ldr	r2, [r2, #4]
 80038b8:	4611      	mov	r1, r2
 80038ba:	2003      	movs	r0, #3
 80038bc:	4798      	blx	r3

        /* Chip ID of the sensor is read */
        rslt = bmm150_get_regs(BMM150_REG_CHIP_ID, &chip_id, 1, dev);
 80038be:	f107 010e 	add.w	r1, r7, #14
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	2040      	movs	r0, #64	@ 0x40
 80038c8:	f000 f843 	bl	8003952 <bmm150_get_regs>
 80038cc:	4603      	mov	r3, r0
 80038ce:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMM150_OK)
 80038d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <bmm150_init+0x5e>
        {
            /* Check for chip id validity */
            if (chip_id == BMM150_CHIP_ID)
 80038d8:	7bbb      	ldrb	r3, [r7, #14]
 80038da:	2b32      	cmp	r3, #50	@ 0x32
 80038dc:	d107      	bne.n	80038ee <bmm150_init+0x5e>
            {
                dev->chip_id = chip_id;
 80038de:	7bba      	ldrb	r2, [r7, #14]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	701a      	strb	r2, [r3, #0]

                /* Function to update trim values */
                rslt = read_trim_registers(dev);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f8c3 	bl	8003a70 <read_trim_registers>
 80038ea:	4603      	mov	r3, r0
 80038ec:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80038ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <bmm150_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmm150_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 80038fa:	b590      	push	{r4, r7, lr}
 80038fc:	b087      	sub	sp, #28
 80038fe:	af00      	add	r7, sp, #0
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
 8003906:	4603      	mov	r3, r0
 8003908:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800390a:	6838      	ldr	r0, [r7, #0]
 800390c:	f000 f852 	bl	80039b4 <null_ptr_check>
 8003910:	4603      	mov	r3, r0
 8003912:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL) && (len != 0))
 8003914:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d112      	bne.n	8003942 <bmm150_set_regs+0x48>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00f      	beq.n	8003942 <bmm150_set_regs+0x48>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00c      	beq.n	8003942 <bmm150_set_regs+0x48>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691c      	ldr	r4, [r3, #16]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	7bf8      	ldrb	r0, [r7, #15]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	47a0      	blx	r4
 8003938:	4603      	mov	r3, r0
 800393a:	461a      	mov	r2, r3
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	721a      	strb	r2, [r3, #8]
 8003940:	e001      	b.n	8003946 <bmm150_set_regs+0x4c>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 8003942:	23ff      	movs	r3, #255	@ 0xff
 8003944:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003946:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800394a:	4618      	mov	r0, r3
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	bd90      	pop	{r4, r7, pc}

08003952 <bmm150_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmm150_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 8003952:	b590      	push	{r4, r7, lr}
 8003954:	b087      	sub	sp, #28
 8003956:	af00      	add	r7, sp, #0
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
 800395e:	4603      	mov	r3, r0
 8003960:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8003962:	6838      	ldr	r0, [r7, #0]
 8003964:	f000 f826 	bl	80039b4 <null_ptr_check>
 8003968:	4603      	mov	r3, r0
 800396a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL))
 800396c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d117      	bne.n	80039a4 <bmm150_get_regs+0x52>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d014      	beq.n	80039a4 <bmm150_get_regs+0x52>
    {
        if (dev->intf != BMM150_I2C_INTF)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	785b      	ldrb	r3, [r3, #1]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d003      	beq.n	800398a <bmm150_get_regs+0x38>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | 0x80;
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003988:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68dc      	ldr	r4, [r3, #12]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	7bf8      	ldrb	r0, [r7, #15]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	47a0      	blx	r4
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	721a      	strb	r2, [r3, #8]
 80039a2:	e001      	b.n	80039a8 <bmm150_get_regs+0x56>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 80039a4:	23ff      	movs	r3, #255	@ 0xff
 80039a6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80039a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd90      	pop	{r4, r7, pc}

080039b4 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmm150_dev *dev)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00f      	beq.n	80039e2 <null_ptr_check+0x2e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00b      	beq.n	80039e2 <null_ptr_check+0x2e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <null_ptr_check+0x2e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d102      	bne.n	80039e8 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMM150_E_NULL_PTR;
 80039e2:	23ff      	movs	r3, #255	@ 0xff
 80039e4:	73fb      	strb	r3, [r7, #15]
 80039e6:	e001      	b.n	80039ec <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMM150_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80039ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <set_power_control_bit>:

/*!
 * @brief This internal API sets/resets the power control bit of 0x4B register.
 */
static int8_t set_power_control_bit(uint8_t pwrcntrl_bit, struct bmm150_dev *dev)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	6039      	str	r1, [r7, #0]
 8003a06:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	73bb      	strb	r3, [r7, #14]

    /* Power control register 0x4B is read */
    rslt = bmm150_get_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 8003a0c:	f107 010e 	add.w	r1, r7, #14
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2201      	movs	r2, #1
 8003a14:	204b      	movs	r0, #75	@ 0x4b
 8003a16:	f7ff ff9c 	bl	8003952 <bmm150_get_regs>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if everything is fine until now */
    if (rslt == BMM150_OK)
 8003a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d11e      	bne.n	8003a64 <set_power_control_bit+0x68>
    {
        /* Sets the value of power control bit */
        reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_PWR_CNTRL, pwrcntrl_bit);
 8003a26:	7bbb      	ldrb	r3, [r7, #14]
 8003a28:	b25b      	sxtb	r3, r3
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	b25a      	sxtb	r2, r3
 8003a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	b25b      	sxtb	r3, r3
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	b25b      	sxtb	r3, r3
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 8003a42:	f107 010e 	add.w	r1, r7, #14
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	204b      	movs	r0, #75	@ 0x4b
 8003a4c:	f7ff ff55 	bl	80038fa <bmm150_set_regs>
 8003a50:	4603      	mov	r3, r0
 8003a52:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 8003a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <set_power_control_bit+0x68>
        {
            /* Store the power control bit
             * value in dev structure
             */
            dev->pwr_cntrl_bit = pwrcntrl_bit;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	79fa      	ldrb	r2, [r7, #7]
 8003a60:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        }
    }

    return rslt;
 8003a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <read_trim_registers>:
/*!
 * @brief This internal API reads the trim registers of the sensor and stores
 * the trim values in the "trim_data" of device structure.
 */
static int8_t read_trim_registers(struct bmm150_dev *dev)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t trim_x1y1[2] = { 0 };
 8003a78:	2300      	movs	r3, #0
 8003a7a:	833b      	strh	r3, [r7, #24]
    uint8_t trim_xyz_data[4] = { 0 };
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
    uint8_t trim_xy1xy2[10] = { 0 };
 8003a80:	2300      	movs	r3, #0
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	f107 030c 	add.w	r3, r7, #12
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	809a      	strh	r2, [r3, #4]
    uint16_t temp_msb = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	83bb      	strh	r3, [r7, #28]

    /* Trim register value is read */
    rslt = bmm150_get_regs(BMM150_DIG_X1, trim_x1y1, 2, dev);
 8003a92:	f107 0118 	add.w	r1, r7, #24
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	205d      	movs	r0, #93	@ 0x5d
 8003a9c:	f7ff ff59 	bl	8003952 <bmm150_get_regs>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 8003aa4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d16a      	bne.n	8003b82 <read_trim_registers+0x112>
    {
        rslt = bmm150_get_regs(BMM150_DIG_Z4_LSB, trim_xyz_data, 4, dev);
 8003aac:	f107 0114 	add.w	r1, r7, #20
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	2062      	movs	r0, #98	@ 0x62
 8003ab6:	f7ff ff4c 	bl	8003952 <bmm150_get_regs>
 8003aba:	4603      	mov	r3, r0
 8003abc:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMM150_OK)
 8003abe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d15d      	bne.n	8003b82 <read_trim_registers+0x112>
        {
            rslt = bmm150_get_regs(BMM150_DIG_Z2_LSB, trim_xy1xy2, 10, dev);
 8003ac6:	f107 0108 	add.w	r1, r7, #8
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	220a      	movs	r2, #10
 8003ace:	2068      	movs	r0, #104	@ 0x68
 8003ad0:	f7ff ff3f 	bl	8003952 <bmm150_get_regs>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMM150_OK)
 8003ad8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d150      	bne.n	8003b82 <read_trim_registers+0x112>
            {
                /* Trim data which is read is updated
                 * in the device structure
                 */
                dev->trim_data.dig_x1 = (int8_t)trim_x1y1[0];
 8003ae0:	7e3b      	ldrb	r3, [r7, #24]
 8003ae2:	b25a      	sxtb	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	761a      	strb	r2, [r3, #24]
                dev->trim_data.dig_y1 = (int8_t)trim_x1y1[1];
 8003ae8:	7e7b      	ldrb	r3, [r7, #25]
 8003aea:	b25a      	sxtb	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	765a      	strb	r2, [r3, #25]
                dev->trim_data.dig_x2 = (int8_t)trim_xyz_data[2];
 8003af0:	7dbb      	ldrb	r3, [r7, #22]
 8003af2:	b25a      	sxtb	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	769a      	strb	r2, [r3, #26]
                dev->trim_data.dig_y2 = (int8_t)trim_xyz_data[3];
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
 8003afa:	b25a      	sxtb	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	76da      	strb	r2, [r3, #27]
                temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
 8003b00:	7afb      	ldrb	r3, [r7, #11]
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);
 8003b06:	7abb      	ldrb	r3, [r7, #10]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	8bbb      	ldrh	r3, [r7, #28]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	839a      	strh	r2, [r3, #28]
                temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
 8003b14:	7a7b      	ldrb	r3, [r7, #9]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);
 8003b1a:	7a3b      	ldrb	r3, [r7, #8]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	8bbb      	ldrh	r3, [r7, #28]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	b21a      	sxth	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	83da      	strh	r2, [r3, #30]
                temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);
 8003b30:	7bbb      	ldrb	r3, [r7, #14]
 8003b32:	461a      	mov	r2, r3
 8003b34:	8bbb      	ldrh	r3, [r7, #28]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	b21a      	sxth	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	841a      	strh	r2, [r3, #32]
                temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
 8003b40:	7d7b      	ldrb	r3, [r7, #21]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);
 8003b46:	7d3b      	ldrb	r3, [r7, #20]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	8bbb      	ldrh	r3, [r7, #28]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	b21a      	sxth	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	845a      	strh	r2, [r3, #34]	@ 0x22
                dev->trim_data.dig_xy1 = trim_xy1xy2[9];
 8003b56:	7c7a      	ldrb	r2, [r7, #17]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                dev->trim_data.dig_xy2 = (int8_t)trim_xy1xy2[8];
 8003b5e:	7c3b      	ldrb	r3, [r7, #16]
 8003b60:	b25a      	sxtb	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
 8003b68:	7b7b      	ldrb	r3, [r7, #13]
 8003b6a:	021b      	lsls	r3, r3, #8
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8003b72:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
 8003b74:	7b3b      	ldrb	r3, [r7, #12]
 8003b76:	461a      	mov	r2, r3
 8003b78:	8bbb      	ldrh	r3, [r7, #28]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	84da      	strh	r2, [r3, #38]	@ 0x26
            }
        }
    }

    return rslt;
 8003b82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <BQ28Z610_ReadVoltage>:

#define CMD_VOLTAGE 0x08
#define BQ28Z610_I2C_ADDR (0x55 << 1)

HAL_StatusTypeDef BQ28Z610_ReadVoltage(I2C_HandleTypeDef *hi2c, uint16_t *voltage)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b088      	sub	sp, #32
 8003b92:	af04      	add	r7, sp, #16
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	6039      	str	r1, [r7, #0]
	uint8_t rx[2];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, BQ28Z610_I2C_ADDR, CMD_VOLTAGE, I2C_MEMADD_SIZE_8BIT, rx, 2, HAL_MAX_DELAY);
 8003b98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b9c:	9302      	str	r3, [sp, #8]
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	f107 0308 	add.w	r3, r7, #8
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	2301      	movs	r3, #1
 8003baa:	2208      	movs	r2, #8
 8003bac:	21aa      	movs	r1, #170	@ 0xaa
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f002 fe34 	bl	800681c <HAL_I2C_Mem_Read>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	73fb      	strb	r3, [r7, #15]

	if (status == HAL_OK)
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <BQ28Z610_ReadVoltage+0x46>
	{
		uint16_t shifted = rx[1] << 8;
 8003bbe:	7a7b      	ldrb	r3, [r7, #9]
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	81bb      	strh	r3, [r7, #12]
		uint16_t lower = rx[0];
 8003bc4:	7a3b      	ldrb	r3, [r7, #8]
 8003bc6:	817b      	strh	r3, [r7, #10]
		*voltage = shifted | lower;
 8003bc8:	89ba      	ldrh	r2, [r7, #12]
 8003bca:	897b      	ldrh	r3, [r7, #10]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	801a      	strh	r2, [r3, #0]
	}
	return status;
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
};
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <ICM42688P_disable_chip_select>:
volatile static int16_t gyro_old_y = 0;
volatile static int16_t gyro_old_p = 0;
volatile static uint32_t old_time = 0;

static void ICM42688P_disable_chip_select()
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_RESET);
 8003be4:	4b04      	ldr	r3, [pc, #16]	@ (8003bf8 <ICM42688P_disable_chip_select+0x18>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a04      	ldr	r2, [pc, #16]	@ (8003bfc <ICM42688P_disable_chip_select+0x1c>)
 8003bea:	8811      	ldrh	r1, [r2, #0]
 8003bec:	2200      	movs	r2, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f002 fd60 	bl	80066b4 <HAL_GPIO_WritePin>
}
 8003bf4:	bf00      	nop
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	200008c8 	.word	0x200008c8
 8003bfc:	200008cc 	.word	0x200008cc

08003c00 <ICM42688P_enable_chip_select>:

static void ICM42688P_enable_chip_select()
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 8003c04:	4b04      	ldr	r3, [pc, #16]	@ (8003c18 <ICM42688P_enable_chip_select+0x18>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a04      	ldr	r2, [pc, #16]	@ (8003c1c <ICM42688P_enable_chip_select+0x1c>)
 8003c0a:	8811      	ldrh	r1, [r2, #0]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f002 fd50 	bl	80066b4 <HAL_GPIO_WritePin>
}
 8003c14:	bf00      	nop
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	200008c8 	.word	0x200008c8
 8003c1c:	200008cc 	.word	0x200008cc

08003c20 <ICM42688P_write_reg>:

static HAL_StatusTypeDef ICM42688P_write_reg(uint8_t reg, uint8_t data)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	460a      	mov	r2, r1
 8003c2a:	71fb      	strb	r3, [r7, #7]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	71bb      	strb	r3, [r7, #6]
    uint8_t tx[2] = {reg, data};
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	733b      	strb	r3, [r7, #12]
 8003c34:	79bb      	ldrb	r3, [r7, #6]
 8003c36:	737b      	strb	r3, [r7, #13]
    ICM42688P_disable_chip_select();
 8003c38:	f7ff ffd2 	bl	8003be0 <ICM42688P_disable_chip_select>
    HAL_SPI_Transmit(hspi, tx, 2, HAL_MAX_DELAY);
 8003c3c:	4b07      	ldr	r3, [pc, #28]	@ (8003c5c <ICM42688P_write_reg+0x3c>)
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	f107 010c 	add.w	r1, r7, #12
 8003c44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c48:	2202      	movs	r2, #2
 8003c4a:	f006 fbb5 	bl	800a3b8 <HAL_SPI_Transmit>
    ICM42688P_enable_chip_select();
 8003c4e:	f7ff ffd7 	bl	8003c00 <ICM42688P_enable_chip_select>
    return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	200008c4 	.word	0x200008c4

08003c60 <ICM42688P_read_reg>:

int16_t ICM42688P_read_reg(uint8_t reg)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = reg | (1 << 7);
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	747b      	strb	r3, [r7, #17]
    int8_t rx[2] = {0};
 8003c74:	2300      	movs	r3, #0
 8003c76:	81bb      	strh	r3, [r7, #12]
    ICM42688P_disable_chip_select();
 8003c78:	f7ff ffb2 	bl	8003be0 <ICM42688P_disable_chip_select>
    HAL_SPI_Transmit(hspi, &tx, 1, HAL_MAX_DELAY);
 8003c7c:	4b12      	ldr	r3, [pc, #72]	@ (8003cc8 <ICM42688P_read_reg+0x68>)
 8003c7e:	6818      	ldr	r0, [r3, #0]
 8003c80:	f107 0111 	add.w	r1, r7, #17
 8003c84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f006 fb95 	bl	800a3b8 <HAL_SPI_Transmit>

    HAL_SPI_Receive(hspi, &rx, 1, HAL_MAX_DELAY);
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc8 <ICM42688P_read_reg+0x68>)
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	f107 010c 	add.w	r1, r7, #12
 8003c96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f006 fd02 	bl	800a6a4 <HAL_SPI_Receive>
    ICM42688P_enable_chip_select();
 8003ca0:	f7ff ffae 	bl	8003c00 <ICM42688P_enable_chip_select>

    int16_t shifted = rx[0] << 8;
 8003ca4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	82fb      	strh	r3, [r7, #22]
    int16_t lower = rx[1];
 8003cac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003cb0:	82bb      	strh	r3, [r7, #20]
    int16_t value = shifted | lower;
 8003cb2:	8afa      	ldrh	r2, [r7, #22]
 8003cb4:	8abb      	ldrh	r3, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	827b      	strh	r3, [r7, #18]
    return value;
 8003cba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	200008c4 	.word	0x200008c4

08003ccc <ICM42688P_init>:

uint8_t ICM42688P_init(SPI_TypeDef *spi_handle, GPIO_TypeDef *chip_select_port, uint16_t chip_select_gpio_pin)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	80fb      	strh	r3, [r7, #6]
    hspi = spi_handle;
 8003cda:	4a0e      	ldr	r2, [pc, #56]	@ (8003d14 <ICM42688P_init+0x48>)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6013      	str	r3, [r2, #0]
    ChipSelect_GPIO_Port = chip_select_port;
 8003ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8003d18 <ICM42688P_init+0x4c>)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	6013      	str	r3, [r2, #0]
    ChipSelect_Pin = chip_select_gpio_pin;
 8003ce6:	4a0d      	ldr	r2, [pc, #52]	@ (8003d1c <ICM42688P_init+0x50>)
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	8013      	strh	r3, [r2, #0]
    HAL_Delay(100);
    ICM42688P_write_reg(0x11, 0x00);  // Power management
    ICM42688P_write_reg(0x10, 0x0F);  // Gyro and accel config
    */

    ICM42688P_write_reg(0x11, 0x01); // Reset Device
 8003cec:	2101      	movs	r1, #1
 8003cee:	2011      	movs	r0, #17
 8003cf0:	f7ff ff96 	bl	8003c20 <ICM42688P_write_reg>
    HAL_Delay(100);
 8003cf4:	2064      	movs	r0, #100	@ 0x64
 8003cf6:	f000 fe07 	bl	8004908 <HAL_Delay>
    ICM42688P_write_reg(0x4E, (0b11 << 2) | (0b11 << 0)); // Enable gyro & accelerometer
 8003cfa:	210f      	movs	r1, #15
 8003cfc:	204e      	movs	r0, #78	@ 0x4e
 8003cfe:	f7ff ff8f 	bl	8003c20 <ICM42688P_write_reg>
    ICM42688P_write_reg(0x7B, (0b10 << 1));               // Enable CLKIN
 8003d02:	2104      	movs	r1, #4
 8003d04:	207b      	movs	r0, #123	@ 0x7b
 8003d06:	f7ff ff8b 	bl	8003c20 <ICM42688P_write_reg>

    return 0;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	200008c4 	.word	0x200008c4
 8003d18:	200008c8 	.word	0x200008c8
 8003d1c:	200008cc 	.word	0x200008cc

08003d20 <Get_Accel_P>:

int16_t Get_Accel_P(int16_t gyro_p, uint32_t time)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	6039      	str	r1, [r7, #0]
 8003d2a:	80fb      	strh	r3, [r7, #6]
    return (gyro_old_p - gyro_p); // add timer later / (old_time - time);
 8003d2c:	4b06      	ldr	r3, [pc, #24]	@ (8003d48 <Get_Accel_P+0x28>)
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	b21b      	sxth	r3, r3
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	b21b      	sxth	r3, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	200008d2 	.word	0x200008d2

08003d4c <Get_Accel_Y>:

int16_t Get_Accel_Y(int16_t gyro_y, uint32_t time)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	6039      	str	r1, [r7, #0]
 8003d56:	80fb      	strh	r3, [r7, #6]
    return (gyro_old_y - gyro_y); // add timer later / (old_time - time);
 8003d58:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <Get_Accel_Y+0x28>)
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b21b      	sxth	r3, r3
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	88fb      	ldrh	r3, [r7, #6]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	b21b      	sxth	r3, r3
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	200008d0 	.word	0x200008d0

08003d78 <Get_Accel_R>:

int16_t Get_Accel_R(int16_t gyro_r, uint32_t time)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	6039      	str	r1, [r7, #0]
 8003d82:	80fb      	strh	r3, [r7, #6]
    return (gyro_old_r - gyro_r); // add timer later / (old_time - time);
 8003d84:	4b06      	ldr	r3, [pc, #24]	@ (8003da0 <Get_Accel_R+0x28>)
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	b21b      	sxth	r3, r3
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	b21b      	sxth	r3, r3
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	200008ce 	.word	0x200008ce

08003da4 <ICM42688P_read_data>:

ICM42688P_AccelData ICM42688P_read_data()
{
 8003da4:	b590      	push	{r4, r7, lr}
 8003da6:	b089      	sub	sp, #36	@ 0x24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
    ICM42688P_AccelData data = {0};
 8003dac:	f107 030c 	add.w	r3, r7, #12
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	819a      	strh	r2, [r3, #12]

    data.accel_z = ICM42688P_read_reg(0x23);
 8003dba:	2023      	movs	r0, #35	@ 0x23
 8003dbc:	f7ff ff50 	bl	8003c60 <ICM42688P_read_reg>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	81bb      	strh	r3, [r7, #12]

    data.gyro_p = ICM42688P_read_reg(0x25);
 8003dc4:	2025      	movs	r0, #37	@ 0x25
 8003dc6:	f7ff ff4b 	bl	8003c60 <ICM42688P_read_reg>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	82bb      	strh	r3, [r7, #20]
    data.gyro_y = ICM42688P_read_reg(0x27);
 8003dce:	2027      	movs	r0, #39	@ 0x27
 8003dd0:	f7ff ff46 	bl	8003c60 <ICM42688P_read_reg>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	82fb      	strh	r3, [r7, #22]
    data.gyro_r = ICM42688P_read_reg(0x29);
 8003dd8:	2029      	movs	r0, #41	@ 0x29
 8003dda:	f7ff ff41 	bl	8003c60 <ICM42688P_read_reg>
 8003dde:	4603      	mov	r3, r0
 8003de0:	833b      	strh	r3, [r7, #24]

    uint32_t time = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]

    data.accel_p = Get_Accel_P(data.gyro_p, time);
 8003de6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003dea:	69f9      	ldr	r1, [r7, #28]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ff97 	bl	8003d20 <Get_Accel_P>
 8003df2:	4603      	mov	r3, r0
 8003df4:	81fb      	strh	r3, [r7, #14]
    data.accel_y = Get_Accel_Y(data.gyro_y, time);
 8003df6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003dfa:	69f9      	ldr	r1, [r7, #28]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ffa5 	bl	8003d4c <Get_Accel_Y>
 8003e02:	4603      	mov	r3, r0
 8003e04:	823b      	strh	r3, [r7, #16]
    data.accel_r = -Get_Accel_R(data.gyro_r, time);
 8003e06:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003e0a:	69f9      	ldr	r1, [r7, #28]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ffb3 	bl	8003d78 <Get_Accel_R>
 8003e12:	4603      	mov	r3, r0
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	425b      	negs	r3, r3
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	b21b      	sxth	r3, r3
 8003e1c:	827b      	strh	r3, [r7, #18]

    gyro_old_p = data.gyro_p;
 8003e1e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003e22:	4b0d      	ldr	r3, [pc, #52]	@ (8003e58 <ICM42688P_read_data+0xb4>)
 8003e24:	801a      	strh	r2, [r3, #0]
    gyro_old_y = data.gyro_y;
 8003e26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e5c <ICM42688P_read_data+0xb8>)
 8003e2c:	801a      	strh	r2, [r3, #0]
    gyro_old_r = data.gyro_r;
 8003e2e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003e32:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <ICM42688P_read_data+0xbc>)
 8003e34:	801a      	strh	r2, [r3, #0]
    old_time = time;
 8003e36:	4a0b      	ldr	r2, [pc, #44]	@ (8003e64 <ICM42688P_read_data+0xc0>)
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	6013      	str	r3, [r2, #0]

    return data;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	461c      	mov	r4, r3
 8003e40:	f107 030c 	add.w	r3, r7, #12
 8003e44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003e46:	6020      	str	r0, [r4, #0]
 8003e48:	6061      	str	r1, [r4, #4]
 8003e4a:	60a2      	str	r2, [r4, #8]
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	81a3      	strh	r3, [r4, #12]
}
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	3724      	adds	r7, #36	@ 0x24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd90      	pop	{r4, r7, pc}
 8003e58:	200008d2 	.word	0x200008d2
 8003e5c:	200008d0 	.word	0x200008d0
 8003e60:	200008ce 	.word	0x200008ce
 8003e64:	200008d4 	.word	0x200008d4

08003e68 <LC76G_init>:
#include "LC76G.h"
#include <string.h>
#include <math.h>

void LC76G_init()
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
    // Disable all other types of NEMA sentences
    HAL_UART_Transmit(&huart5, LC76_DISABLE_GGL, strlen(LC76_DISABLE_GGL), TIMEOUT);
 8003e6c:	2305      	movs	r3, #5
 8003e6e:	220f      	movs	r2, #15
 8003e70:	4923      	ldr	r1, [pc, #140]	@ (8003f00 <LC76G_init+0x98>)
 8003e72:	4824      	ldr	r0, [pc, #144]	@ (8003f04 <LC76G_init+0x9c>)
 8003e74:	f008 fd95 	bl	800c9a2 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart5, NULL, 32, TIMEOUT);
 8003e78:	2305      	movs	r3, #5
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4821      	ldr	r0, [pc, #132]	@ (8003f04 <LC76G_init+0x9c>)
 8003e80:	f008 fe1d 	bl	800cabe <HAL_UART_Receive>

    HAL_UART_Transmit(&huart5, LC76_DISABLE_GSA, strlen(LC76_DISABLE_GSA), TIMEOUT);
 8003e84:	2305      	movs	r3, #5
 8003e86:	220f      	movs	r2, #15
 8003e88:	491f      	ldr	r1, [pc, #124]	@ (8003f08 <LC76G_init+0xa0>)
 8003e8a:	481e      	ldr	r0, [pc, #120]	@ (8003f04 <LC76G_init+0x9c>)
 8003e8c:	f008 fd89 	bl	800c9a2 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart5, NULL, 32, TIMEOUT);
 8003e90:	2305      	movs	r3, #5
 8003e92:	2220      	movs	r2, #32
 8003e94:	2100      	movs	r1, #0
 8003e96:	481b      	ldr	r0, [pc, #108]	@ (8003f04 <LC76G_init+0x9c>)
 8003e98:	f008 fe11 	bl	800cabe <HAL_UART_Receive>

    HAL_UART_Transmit(&huart5, LC76_DISABLE_GSV, strlen(LC76_DISABLE_GSV), TIMEOUT);
 8003e9c:	2305      	movs	r3, #5
 8003e9e:	220f      	movs	r2, #15
 8003ea0:	491a      	ldr	r1, [pc, #104]	@ (8003f0c <LC76G_init+0xa4>)
 8003ea2:	4818      	ldr	r0, [pc, #96]	@ (8003f04 <LC76G_init+0x9c>)
 8003ea4:	f008 fd7d 	bl	800c9a2 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart5, NULL, 32, TIMEOUT);
 8003ea8:	2305      	movs	r3, #5
 8003eaa:	2220      	movs	r2, #32
 8003eac:	2100      	movs	r1, #0
 8003eae:	4815      	ldr	r0, [pc, #84]	@ (8003f04 <LC76G_init+0x9c>)
 8003eb0:	f008 fe05 	bl	800cabe <HAL_UART_Receive>

    HAL_UART_Transmit(&huart5, LC76_DISABLE_RMC, strlen(LC76_DISABLE_RMC), TIMEOUT);
 8003eb4:	2305      	movs	r3, #5
 8003eb6:	220f      	movs	r2, #15
 8003eb8:	4915      	ldr	r1, [pc, #84]	@ (8003f10 <LC76G_init+0xa8>)
 8003eba:	4812      	ldr	r0, [pc, #72]	@ (8003f04 <LC76G_init+0x9c>)
 8003ebc:	f008 fd71 	bl	800c9a2 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart5, NULL, 32, TIMEOUT);
 8003ec0:	2305      	movs	r3, #5
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	480f      	ldr	r0, [pc, #60]	@ (8003f04 <LC76G_init+0x9c>)
 8003ec8:	f008 fdf9 	bl	800cabe <HAL_UART_Receive>

    HAL_UART_Transmit(&huart5, LC76_DISABLE_VTG8, strlen(LC76_DISABLE_VTG8), TIMEOUT);
 8003ecc:	2305      	movs	r3, #5
 8003ece:	220f      	movs	r2, #15
 8003ed0:	4910      	ldr	r1, [pc, #64]	@ (8003f14 <LC76G_init+0xac>)
 8003ed2:	480c      	ldr	r0, [pc, #48]	@ (8003f04 <LC76G_init+0x9c>)
 8003ed4:	f008 fd65 	bl	800c9a2 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart5, NULL, 32, TIMEOUT);
 8003ed8:	2305      	movs	r3, #5
 8003eda:	2220      	movs	r2, #32
 8003edc:	2100      	movs	r1, #0
 8003ede:	4809      	ldr	r0, [pc, #36]	@ (8003f04 <LC76G_init+0x9c>)
 8003ee0:	f008 fded 	bl	800cabe <HAL_UART_Receive>

    // Enable GGA sentences
    HAL_UART_Transmit(&huart5, LC76_ENABLE_GGA, strlen(LC76_ENABLE_GGA), TIMEOUT);
 8003ee4:	2305      	movs	r3, #5
 8003ee6:	220f      	movs	r2, #15
 8003ee8:	490b      	ldr	r1, [pc, #44]	@ (8003f18 <LC76G_init+0xb0>)
 8003eea:	4806      	ldr	r0, [pc, #24]	@ (8003f04 <LC76G_init+0x9c>)
 8003eec:	f008 fd59 	bl	800c9a2 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart5, NULL, 32, TIMEOUT);
 8003ef0:	2305      	movs	r3, #5
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4803      	ldr	r0, [pc, #12]	@ (8003f04 <LC76G_init+0x9c>)
 8003ef8:	f008 fde1 	bl	800cabe <HAL_UART_Receive>
}
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	0801627c 	.word	0x0801627c
 8003f04:	200006e4 	.word	0x200006e4
 8003f08:	0801628c 	.word	0x0801628c
 8003f0c:	0801629c 	.word	0x0801629c
 8003f10:	080162ac 	.word	0x080162ac
 8003f14:	080162bc 	.word	0x080162bc
 8003f18:	0801626c 	.word	0x0801626c

08003f1c <MS5607_Init>:
/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
MS5607StateTypeDef MS5607_Init(SPI_HandleTypeDef *spi_handle, GPIO_TypeDef *chip_select_port, uint16_t chip_select_gpio_pin)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	4613      	mov	r3, r2
 8003f28:	80fb      	strh	r3, [r7, #6]
  hspi = spi_handle;
 8003f2a:	4a16      	ldr	r2, [pc, #88]	@ (8003f84 <MS5607_Init+0x68>)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6013      	str	r3, [r2, #0]
  ChipSelect_GPIO_Port = chip_select_port;
 8003f30:	4a15      	ldr	r2, [pc, #84]	@ (8003f88 <MS5607_Init+0x6c>)
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	6013      	str	r3, [r2, #0]
  ChipSelect_Pin = chip_select_gpio_pin;
 8003f36:	4a15      	ldr	r2, [pc, #84]	@ (8003f8c <MS5607_Init+0x70>)
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	8013      	strh	r3, [r2, #0]

  enableCSB();
 8003f3c:	f000 fc0a 	bl	8004754 <enableCSB>
  SPITransmitData = RESET_COMMAND;
 8003f40:	4b13      	ldr	r3, [pc, #76]	@ (8003f90 <MS5607_Init+0x74>)
 8003f42:	221e      	movs	r2, #30
 8003f44:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003f46:	4b0f      	ldr	r3, [pc, #60]	@ (8003f84 <MS5607_Init+0x68>)
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	230a      	movs	r3, #10
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	4910      	ldr	r1, [pc, #64]	@ (8003f90 <MS5607_Init+0x74>)
 8003f50:	f006 fa32 	bl	800a3b8 <HAL_SPI_Transmit>
  HAL_Delay(3);
 8003f54:	2003      	movs	r0, #3
 8003f56:	f000 fcd7 	bl	8004908 <HAL_Delay>
  disableCSB();
 8003f5a:	f000 fc0b 	bl	8004774 <disableCSB>

  MS5607PromRead(&promData);
 8003f5e:	480d      	ldr	r0, [pc, #52]	@ (8003f94 <MS5607_Init+0x78>)
 8003f60:	f000 f81a 	bl	8003f98 <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff)
 8003f64:	4b0b      	ldr	r3, [pc, #44]	@ (8003f94 <MS5607_Init+0x78>)
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <MS5607_Init+0x58>
 8003f6c:	4b09      	ldr	r3, [pc, #36]	@ (8003f94 <MS5607_Init+0x78>)
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	2bff      	cmp	r3, #255	@ 0xff
 8003f72:	d101      	bne.n	8003f78 <MS5607_Init+0x5c>
    return MS5607_STATE_FAILED;
 8003f74:	2300      	movs	r3, #0
 8003f76:	e000      	b.n	8003f7a <MS5607_Init+0x5e>
  else
    return MS5607_STATE_READY;
 8003f78:	2301      	movs	r3, #1
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	200008d8 	.word	0x200008d8
 8003f88:	200008dc 	.word	0x200008dc
 8003f8c:	200008e0 	.word	0x200008e0
 8003f90:	200008e2 	.word	0x200008e2
 8003f94:	200008e8 	.word	0x200008e8

08003f98 <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint8_t address;
  uint16_t *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for accessing the data structure */
  structPointer = (uint16_t *)prom;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++)
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	75fb      	strb	r3, [r7, #23]
 8003fa8:	e020      	b.n	8003fec <MS5607PromRead+0x54>
  {
    SPITransmitData = PROM_READ(address);
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	b25b      	sxtb	r3, r3
 8003fb0:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8003fb4:	b25b      	sxtb	r3, r3
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8004034 <MS5607PromRead+0x9c>)
 8003fba:	701a      	strb	r2, [r3, #0]
    enableCSB();
 8003fbc:	f000 fbca 	bl	8004754 <enableCSB>
    HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8004038 <MS5607PromRead+0xa0>)
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	230a      	movs	r3, #10
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	491a      	ldr	r1, [pc, #104]	@ (8004034 <MS5607PromRead+0x9c>)
 8003fca:	f006 f9f5 	bl	800a3b8 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(hspi, structPointer, 2, 10);
 8003fce:	4b1a      	ldr	r3, [pc, #104]	@ (8004038 <MS5607PromRead+0xa0>)
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	230a      	movs	r3, #10
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	6939      	ldr	r1, [r7, #16]
 8003fd8:	f006 fb64 	bl	800a6a4 <HAL_SPI_Receive>
    disableCSB();
 8003fdc:	f000 fbca 	bl	8004774 <disableCSB>
    structPointer++;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	3302      	adds	r3, #2
 8003fe4:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	75fb      	strb	r3, [r7, #23]
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b07      	cmp	r3, #7
 8003ff0:	d9db      	bls.n	8003faa <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *)prom;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	75fb      	strb	r3, [r7, #23]
 8003ffa:	e012      	b.n	8004022 <MS5607PromRead+0x8a>
  {
    uint8_t *toSwap = (uint8_t *)structPointer;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	785a      	ldrb	r2, [r3, #1]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3301      	adds	r3, #1
 8004012:	7afa      	ldrb	r2, [r7, #11]
 8004014:	701a      	strb	r2, [r3, #0]
    structPointer++;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	3302      	adds	r3, #2
 800401a:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 800401c:	7dfb      	ldrb	r3, [r7, #23]
 800401e:	3301      	adds	r3, #1
 8004020:	75fb      	strb	r3, [r7, #23]
 8004022:	7dfb      	ldrb	r3, [r7, #23]
 8004024:	2b07      	cmp	r3, #7
 8004026:	d9e9      	bls.n	8003ffc <MS5607PromRead+0x64>
  }
}
 8004028:	bf00      	nop
 800402a:	bf00      	nop
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	200008e2 	.word	0x200008e2
 8004038:	200008d8 	.word	0x200008d8

0800403c <MS5607UncompensatedRead>:

/* Performs a reading on the devices PROM. */
void MS5607UncompensatedRead(struct MS5607UncompensatedValues *uncompValues)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]

  /*Sensor reply data buffer*/
  uint8_t reply[3];

  enableCSB();
 8004044:	f000 fb86 	bl	8004754 <enableCSB>
  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D1_COMMAND | Pressure_OSR;
 8004048:	4b54      	ldr	r3, [pc, #336]	@ (800419c <MS5607UncompensatedRead+0x160>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004050:	b2da      	uxtb	r2, r3
 8004052:	4b53      	ldr	r3, [pc, #332]	@ (80041a0 <MS5607UncompensatedRead+0x164>)
 8004054:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8004056:	4b53      	ldr	r3, [pc, #332]	@ (80041a4 <MS5607UncompensatedRead+0x168>)
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	230a      	movs	r3, #10
 800405c:	2201      	movs	r2, #1
 800405e:	4950      	ldr	r1, [pc, #320]	@ (80041a0 <MS5607UncompensatedRead+0x164>)
 8004060:	f006 f9aa 	bl	800a3b8 <HAL_SPI_Transmit>

  if (Pressure_OSR == 0x00)
 8004064:	4b4d      	ldr	r3, [pc, #308]	@ (800419c <MS5607UncompensatedRead+0x160>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d103      	bne.n	8004074 <MS5607UncompensatedRead+0x38>
    HAL_Delay(1);
 800406c:	2001      	movs	r0, #1
 800406e:	f000 fc4b 	bl	8004908 <HAL_Delay>
 8004072:	e01a      	b.n	80040aa <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x02)
 8004074:	4b49      	ldr	r3, [pc, #292]	@ (800419c <MS5607UncompensatedRead+0x160>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b02      	cmp	r3, #2
 800407a:	d103      	bne.n	8004084 <MS5607UncompensatedRead+0x48>
    HAL_Delay(2);
 800407c:	2002      	movs	r0, #2
 800407e:	f000 fc43 	bl	8004908 <HAL_Delay>
 8004082:	e012      	b.n	80040aa <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x04)
 8004084:	4b45      	ldr	r3, [pc, #276]	@ (800419c <MS5607UncompensatedRead+0x160>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b04      	cmp	r3, #4
 800408a:	d103      	bne.n	8004094 <MS5607UncompensatedRead+0x58>
    HAL_Delay(3);
 800408c:	2003      	movs	r0, #3
 800408e:	f000 fc3b 	bl	8004908 <HAL_Delay>
 8004092:	e00a      	b.n	80040aa <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x06)
 8004094:	4b41      	ldr	r3, [pc, #260]	@ (800419c <MS5607UncompensatedRead+0x160>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b06      	cmp	r3, #6
 800409a:	d103      	bne.n	80040a4 <MS5607UncompensatedRead+0x68>
    HAL_Delay(5);
 800409c:	2005      	movs	r0, #5
 800409e:	f000 fc33 	bl	8004908 <HAL_Delay>
 80040a2:	e002      	b.n	80040aa <MS5607UncompensatedRead+0x6e>
  else
    HAL_Delay(10);
 80040a4:	200a      	movs	r0, #10
 80040a6:	f000 fc2f 	bl	8004908 <HAL_Delay>

  disableCSB();
 80040aa:	f000 fb63 	bl	8004774 <disableCSB>

  /* Performs the reading of the 24 bits from the ADC */

  enableCSB();
 80040ae:	f000 fb51 	bl	8004754 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 80040b2:	4b3b      	ldr	r3, [pc, #236]	@ (80041a0 <MS5607UncompensatedRead+0x164>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 80040b8:	4b3a      	ldr	r3, [pc, #232]	@ (80041a4 <MS5607UncompensatedRead+0x168>)
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	230a      	movs	r3, #10
 80040be:	2201      	movs	r2, #1
 80040c0:	4937      	ldr	r1, [pc, #220]	@ (80041a0 <MS5607UncompensatedRead+0x164>)
 80040c2:	f006 f979 	bl	800a3b8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, 10);
 80040c6:	4b37      	ldr	r3, [pc, #220]	@ (80041a4 <MS5607UncompensatedRead+0x168>)
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	f107 010c 	add.w	r1, r7, #12
 80040ce:	230a      	movs	r3, #10
 80040d0:	2203      	movs	r2, #3
 80040d2:	f006 fae7 	bl	800a6a4 <HAL_SPI_Receive>

  disableCSB();
 80040d6:	f000 fb4d 	bl	8004774 <disableCSB>

  /* Tranfer the 24bits read into a 32bit int */
  uncompValues->pressure = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | (uint32_t)reply[2];
 80040da:	7b3b      	ldrb	r3, [r7, #12]
 80040dc:	041a      	lsls	r2, r3, #16
 80040de:	7b7b      	ldrb	r3, [r7, #13]
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	4313      	orrs	r3, r2
 80040e4:	7bba      	ldrb	r2, [r7, #14]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	601a      	str	r2, [r3, #0]

  enableCSB();
 80040ec:	f000 fb32 	bl	8004754 <enableCSB>

  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D2_COMMAND | Temperature_OSR;
 80040f0:	4b2d      	ldr	r3, [pc, #180]	@ (80041a8 <MS5607UncompensatedRead+0x16c>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	4b29      	ldr	r3, [pc, #164]	@ (80041a0 <MS5607UncompensatedRead+0x164>)
 80040fc:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 80040fe:	4b29      	ldr	r3, [pc, #164]	@ (80041a4 <MS5607UncompensatedRead+0x168>)
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	230a      	movs	r3, #10
 8004104:	2201      	movs	r2, #1
 8004106:	4926      	ldr	r1, [pc, #152]	@ (80041a0 <MS5607UncompensatedRead+0x164>)
 8004108:	f006 f956 	bl	800a3b8 <HAL_SPI_Transmit>

  if (Temperature_OSR == 0x00)
 800410c:	4b26      	ldr	r3, [pc, #152]	@ (80041a8 <MS5607UncompensatedRead+0x16c>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d103      	bne.n	800411c <MS5607UncompensatedRead+0xe0>
    HAL_Delay(1);
 8004114:	2001      	movs	r0, #1
 8004116:	f000 fbf7 	bl	8004908 <HAL_Delay>
 800411a:	e01a      	b.n	8004152 <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x02)
 800411c:	4b22      	ldr	r3, [pc, #136]	@ (80041a8 <MS5607UncompensatedRead+0x16c>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d103      	bne.n	800412c <MS5607UncompensatedRead+0xf0>
    HAL_Delay(2);
 8004124:	2002      	movs	r0, #2
 8004126:	f000 fbef 	bl	8004908 <HAL_Delay>
 800412a:	e012      	b.n	8004152 <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x04)
 800412c:	4b1e      	ldr	r3, [pc, #120]	@ (80041a8 <MS5607UncompensatedRead+0x16c>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b04      	cmp	r3, #4
 8004132:	d103      	bne.n	800413c <MS5607UncompensatedRead+0x100>
    HAL_Delay(3);
 8004134:	2003      	movs	r0, #3
 8004136:	f000 fbe7 	bl	8004908 <HAL_Delay>
 800413a:	e00a      	b.n	8004152 <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x06)
 800413c:	4b1a      	ldr	r3, [pc, #104]	@ (80041a8 <MS5607UncompensatedRead+0x16c>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b06      	cmp	r3, #6
 8004142:	d103      	bne.n	800414c <MS5607UncompensatedRead+0x110>
    HAL_Delay(5);
 8004144:	2005      	movs	r0, #5
 8004146:	f000 fbdf 	bl	8004908 <HAL_Delay>
 800414a:	e002      	b.n	8004152 <MS5607UncompensatedRead+0x116>
  else
    HAL_Delay(10);
 800414c:	200a      	movs	r0, #10
 800414e:	f000 fbdb 	bl	8004908 <HAL_Delay>

  disableCSB();
 8004152:	f000 fb0f 	bl	8004774 <disableCSB>

  enableCSB();
 8004156:	f000 fafd 	bl	8004754 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 800415a:	4b11      	ldr	r3, [pc, #68]	@ (80041a0 <MS5607UncompensatedRead+0x164>)
 800415c:	2200      	movs	r2, #0
 800415e:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8004160:	4b10      	ldr	r3, [pc, #64]	@ (80041a4 <MS5607UncompensatedRead+0x168>)
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	230a      	movs	r3, #10
 8004166:	2201      	movs	r2, #1
 8004168:	490d      	ldr	r1, [pc, #52]	@ (80041a0 <MS5607UncompensatedRead+0x164>)
 800416a:	f006 f925 	bl	800a3b8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, 10);
 800416e:	4b0d      	ldr	r3, [pc, #52]	@ (80041a4 <MS5607UncompensatedRead+0x168>)
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	f107 010c 	add.w	r1, r7, #12
 8004176:	230a      	movs	r3, #10
 8004178:	2203      	movs	r2, #3
 800417a:	f006 fa93 	bl	800a6a4 <HAL_SPI_Receive>

  disableCSB();
 800417e:	f000 faf9 	bl	8004774 <disableCSB>

  /* Assemble the conversion command based on previously set OSR */
  uncompValues->temperature = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | (uint32_t)reply[2];
 8004182:	7b3b      	ldrb	r3, [r7, #12]
 8004184:	041a      	lsls	r2, r3, #16
 8004186:	7b7b      	ldrb	r3, [r7, #13]
 8004188:	021b      	lsls	r3, r3, #8
 800418a:	4313      	orrs	r3, r2
 800418c:	7bba      	ldrb	r2, [r7, #14]
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	605a      	str	r2, [r3, #4]
}
 8004194:	bf00      	nop
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	200008e3 	.word	0x200008e3
 80041a0:	200008e2 	.word	0x200008e2
 80041a4:	200008d8 	.word	0x200008d8
 80041a8:	200008e4 	.word	0x200008e4

080041ac <MS5607Convert>:

/* Performs the data conversion according to the MS5607 datasheet */
void MS5607Convert(struct MS5607UncompensatedValues *sample, struct MS5607IntReadings *value)
{
 80041ac:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80041b0:	b0d7      	sub	sp, #348	@ 0x15c
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 80041b8:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
  int32_t dT;
  int32_t TEMP;
  int64_t OFF;
  int64_t SENS;

  dT = sample->temperature - ((int32_t)(promData.tref << 8));
 80041bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	4bda      	ldr	r3, [pc, #872]	@ (800452c <MS5607Convert+0x380>)
 80041c4:	895b      	ldrh	r3, [r3, #10]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

  TEMP = 2000 + (((int64_t)dT * promData.tempsens) >> 23);
 80041ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80041d2:	17da      	asrs	r2, r3, #31
 80041d4:	469a      	mov	sl, r3
 80041d6:	4693      	mov	fp, r2
 80041d8:	4bd4      	ldr	r3, [pc, #848]	@ (800452c <MS5607Convert+0x380>)
 80041da:	899b      	ldrh	r3, [r3, #12]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2200      	movs	r2, #0
 80041e0:	4698      	mov	r8, r3
 80041e2:	4691      	mov	r9, r2
 80041e4:	fb08 f20b 	mul.w	r2, r8, fp
 80041e8:	fb0a f309 	mul.w	r3, sl, r9
 80041ec:	4413      	add	r3, r2
 80041ee:	fbaa 4508 	umull	r4, r5, sl, r8
 80041f2:	442b      	add	r3, r5
 80041f4:	461d      	mov	r5, r3
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	0de2      	lsrs	r2, r4, #23
 8004200:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8004204:	15eb      	asrs	r3, r5, #23
 8004206:	4613      	mov	r3, r2
 8004208:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800420c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

  OFF = ((int64_t)promData.off << 17) + (((int64_t)promData.tco * dT) >> 6);
 8004210:	4bc6      	ldr	r3, [pc, #792]	@ (800452c <MS5607Convert+0x380>)
 8004212:	889b      	ldrh	r3, [r3, #4]
 8004214:	b29b      	uxth	r3, r3
 8004216:	2200      	movs	r2, #0
 8004218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800421c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004220:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004224:	460b      	mov	r3, r1
 8004226:	0bdb      	lsrs	r3, r3, #15
 8004228:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800422c:	460b      	mov	r3, r1
 800422e:	045b      	lsls	r3, r3, #17
 8004230:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004234:	4bbd      	ldr	r3, [pc, #756]	@ (800452c <MS5607Convert+0x380>)
 8004236:	891b      	ldrh	r3, [r3, #8]
 8004238:	b29b      	uxth	r3, r3
 800423a:	2200      	movs	r2, #0
 800423c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004240:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8004244:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004248:	17da      	asrs	r2, r3, #31
 800424a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800424e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004252:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8004256:	462b      	mov	r3, r5
 8004258:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800425c:	4642      	mov	r2, r8
 800425e:	fb02 f203 	mul.w	r2, r2, r3
 8004262:	464b      	mov	r3, r9
 8004264:	4621      	mov	r1, r4
 8004266:	fb01 f303 	mul.w	r3, r1, r3
 800426a:	4413      	add	r3, r2
 800426c:	4622      	mov	r2, r4
 800426e:	4641      	mov	r1, r8
 8004270:	fba2 1201 	umull	r1, r2, r2, r1
 8004274:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8004278:	460a      	mov	r2, r1
 800427a:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 800427e:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8004282:	4413      	add	r3, r2
 8004284:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8004294:	4621      	mov	r1, r4
 8004296:	098a      	lsrs	r2, r1, #6
 8004298:	4629      	mov	r1, r5
 800429a:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 800429e:	4629      	mov	r1, r5
 80042a0:	118b      	asrs	r3, r1, #6
 80042a2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80042a6:	4621      	mov	r1, r4
 80042a8:	1889      	adds	r1, r1, r2
 80042aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042ac:	4629      	mov	r1, r5
 80042ae:	eb43 0101 	adc.w	r1, r3, r1
 80042b2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80042b4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80042b8:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
  SENS = ((int64_t)promData.sens << 16) + (((int64_t)promData.tcs * dT) >> 7);
 80042bc:	4b9b      	ldr	r3, [pc, #620]	@ (800452c <MS5607Convert+0x380>)
 80042be:	885b      	ldrh	r3, [r3, #2]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042cc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80042d0:	460b      	mov	r3, r1
 80042d2:	0c1b      	lsrs	r3, r3, #16
 80042d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042d8:	460b      	mov	r3, r1
 80042da:	041b      	lsls	r3, r3, #16
 80042dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042e0:	4b92      	ldr	r3, [pc, #584]	@ (800452c <MS5607Convert+0x380>)
 80042e2:	88db      	ldrh	r3, [r3, #6]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80042f4:	17da      	asrs	r2, r3, #31
 80042f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042fe:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8004302:	462b      	mov	r3, r5
 8004304:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004308:	4642      	mov	r2, r8
 800430a:	fb02 f203 	mul.w	r2, r2, r3
 800430e:	464b      	mov	r3, r9
 8004310:	4621      	mov	r1, r4
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4413      	add	r3, r2
 8004318:	4622      	mov	r2, r4
 800431a:	4641      	mov	r1, r8
 800431c:	fba2 1201 	umull	r1, r2, r2, r1
 8004320:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8004324:	460a      	mov	r2, r1
 8004326:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 800432a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800432e:	4413      	add	r3, r2
 8004330:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8004340:	4621      	mov	r1, r4
 8004342:	09ca      	lsrs	r2, r1, #7
 8004344:	4629      	mov	r1, r5
 8004346:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 800434a:	4629      	mov	r1, r5
 800434c:	11cb      	asrs	r3, r1, #7
 800434e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8004352:	4621      	mov	r1, r4
 8004354:	1889      	adds	r1, r1, r2
 8004356:	6339      	str	r1, [r7, #48]	@ 0x30
 8004358:	4629      	mov	r1, r5
 800435a:	eb43 0101 	adc.w	r1, r3, r1
 800435e:	6379      	str	r1, [r7, #52]	@ 0x34
 8004360:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8004364:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140

  /**/
  if (TEMP < 2000)
 8004368:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800436c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004370:	f280 8152 	bge.w	8004618 <MS5607Convert+0x46c>
  {
    int32_t T2 = ((int64_t)dT * (int64_t)dT) >> 31;
 8004374:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004378:	17da      	asrs	r2, r3, #31
 800437a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800437e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004382:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004386:	17da      	asrs	r2, r3, #31
 8004388:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800438c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004390:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8004394:	462b      	mov	r3, r5
 8004396:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800439a:	4642      	mov	r2, r8
 800439c:	fb02 f203 	mul.w	r2, r2, r3
 80043a0:	464b      	mov	r3, r9
 80043a2:	4621      	mov	r1, r4
 80043a4:	fb01 f303 	mul.w	r3, r1, r3
 80043a8:	4413      	add	r3, r2
 80043aa:	4622      	mov	r2, r4
 80043ac:	4641      	mov	r1, r8
 80043ae:	fba2 1201 	umull	r1, r2, r2, r1
 80043b2:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80043b6:	460a      	mov	r2, r1
 80043b8:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80043bc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80043c0:	4413      	add	r3, r2
 80043c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80043d2:	4621      	mov	r1, r4
 80043d4:	0fca      	lsrs	r2, r1, #31
 80043d6:	4629      	mov	r1, r5
 80043d8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80043dc:	4629      	mov	r1, r5
 80043de:	17cb      	asrs	r3, r1, #31
 80043e0:	4613      	mov	r3, r2
 80043e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int32_t TEMPM = TEMP - 2000;
 80043e6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80043ea:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80043ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    int64_t OFF2 = (61 * (int64_t)TEMPM * (int64_t)TEMPM) >> 4;
 80043f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80043f6:	17da      	asrs	r2, r3, #31
 80043f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004400:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004404:	17da      	asrs	r2, r3, #31
 8004406:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800440a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800440e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8004412:	462b      	mov	r3, r5
 8004414:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8004418:	4642      	mov	r2, r8
 800441a:	fb02 f203 	mul.w	r2, r2, r3
 800441e:	464b      	mov	r3, r9
 8004420:	4621      	mov	r1, r4
 8004422:	fb01 f303 	mul.w	r3, r1, r3
 8004426:	4413      	add	r3, r2
 8004428:	4622      	mov	r2, r4
 800442a:	4641      	mov	r1, r8
 800442c:	fba2 1201 	umull	r1, r2, r2, r1
 8004430:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8004434:	460a      	mov	r2, r1
 8004436:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800443a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800443e:	4413      	add	r3, r2
 8004440:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004444:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8004448:	4622      	mov	r2, r4
 800444a:	462b      	mov	r3, r5
 800444c:	f04f 0000 	mov.w	r0, #0
 8004450:	f04f 0100 	mov.w	r1, #0
 8004454:	0119      	lsls	r1, r3, #4
 8004456:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800445a:	0110      	lsls	r0, r2, #4
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4621      	mov	r1, r4
 8004462:	1a51      	subs	r1, r2, r1
 8004464:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004466:	4629      	mov	r1, r5
 8004468:	eb63 0301 	sbc.w	r3, r3, r1
 800446c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800447a:	4649      	mov	r1, r9
 800447c:	008b      	lsls	r3, r1, #2
 800447e:	4641      	mov	r1, r8
 8004480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004484:	4641      	mov	r1, r8
 8004486:	008a      	lsls	r2, r1, #2
 8004488:	4610      	mov	r0, r2
 800448a:	4619      	mov	r1, r3
 800448c:	4603      	mov	r3, r0
 800448e:	4622      	mov	r2, r4
 8004490:	189b      	adds	r3, r3, r2
 8004492:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004494:	462b      	mov	r3, r5
 8004496:	460a      	mov	r2, r1
 8004498:	eb42 0303 	adc.w	r3, r2, r3
 800449c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80044aa:	4621      	mov	r1, r4
 80044ac:	090a      	lsrs	r2, r1, #4
 80044ae:	4629      	mov	r1, r5
 80044b0:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80044b4:	4629      	mov	r1, r5
 80044b6:	110b      	asrs	r3, r1, #4
 80044b8:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    int64_t SENS2 = 2 * (int64_t)TEMPM * (int64_t)TEMPM;
 80044bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80044c0:	17da      	asrs	r2, r3, #31
 80044c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80044c4:	677a      	str	r2, [r7, #116]	@ 0x74
 80044c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80044ca:	17da      	asrs	r2, r3, #31
 80044cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044d0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80044d4:	462b      	mov	r3, r5
 80044d6:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80044da:	4642      	mov	r2, r8
 80044dc:	fb02 f203 	mul.w	r2, r2, r3
 80044e0:	464b      	mov	r3, r9
 80044e2:	4621      	mov	r1, r4
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	4413      	add	r3, r2
 80044ea:	4622      	mov	r2, r4
 80044ec:	4641      	mov	r1, r8
 80044ee:	fba2 1201 	umull	r1, r2, r2, r1
 80044f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044f6:	460a      	mov	r2, r1
 80044f8:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80044fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004500:	4413      	add	r3, r2
 8004502:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004506:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800450a:	460b      	mov	r3, r1
 800450c:	18db      	adds	r3, r3, r3
 800450e:	623b      	str	r3, [r7, #32]
 8004510:	4613      	mov	r3, r2
 8004512:	eb42 0303 	adc.w	r3, r2, r3
 8004516:	627b      	str	r3, [r7, #36]	@ 0x24
 8004518:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800451c:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    if (TEMP < -1500)
 8004520:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8004524:	4b02      	ldr	r3, [pc, #8]	@ (8004530 <MS5607Convert+0x384>)
 8004526:	429a      	cmp	r2, r3
 8004528:	da55      	bge.n	80045d6 <MS5607Convert+0x42a>
 800452a:	e003      	b.n	8004534 <MS5607Convert+0x388>
 800452c:	200008e8 	.word	0x200008e8
 8004530:	fffffa24 	.word	0xfffffa24
    {
      int32_t TEMPP = TEMP + 1500;
 8004534:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004538:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800453c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      int32_t TEMPP2 = TEMPP * TEMPP;
 8004540:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004544:	fb03 f303 	mul.w	r3, r3, r3
 8004548:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
      OFF2 = OFF2 + (int64_t)15 * TEMPP2;
 800454c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004550:	17da      	asrs	r2, r3, #31
 8004552:	663b      	str	r3, [r7, #96]	@ 0x60
 8004554:	667a      	str	r2, [r7, #100]	@ 0x64
 8004556:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800455a:	4622      	mov	r2, r4
 800455c:	462b      	mov	r3, r5
 800455e:	f04f 0000 	mov.w	r0, #0
 8004562:	f04f 0100 	mov.w	r1, #0
 8004566:	0119      	lsls	r1, r3, #4
 8004568:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800456c:	0110      	lsls	r0, r2, #4
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4621      	mov	r1, r4
 8004574:	1a51      	subs	r1, r2, r1
 8004576:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004578:	4629      	mov	r1, r5
 800457a:	eb63 0301 	sbc.w	r3, r3, r1
 800457e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004580:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8004584:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8004588:	4621      	mov	r1, r4
 800458a:	1851      	adds	r1, r2, r1
 800458c:	61b9      	str	r1, [r7, #24]
 800458e:	4629      	mov	r1, r5
 8004590:	eb43 0101 	adc.w	r1, r3, r1
 8004594:	61f9      	str	r1, [r7, #28]
 8004596:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800459a:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
      SENS2 = SENS2 + (int64_t)8 * TEMPP2;
 800459e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045a2:	17da      	asrs	r2, r3, #31
 80045a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80045a6:	657a      	str	r2, [r7, #84]	@ 0x54
 80045a8:	f04f 0000 	mov.w	r0, #0
 80045ac:	f04f 0100 	mov.w	r1, #0
 80045b0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80045b4:	462b      	mov	r3, r5
 80045b6:	00d9      	lsls	r1, r3, #3
 80045b8:	4623      	mov	r3, r4
 80045ba:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80045be:	4623      	mov	r3, r4
 80045c0:	00d8      	lsls	r0, r3, #3
 80045c2:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80045c6:	1814      	adds	r4, r2, r0
 80045c8:	613c      	str	r4, [r7, #16]
 80045ca:	414b      	adcs	r3, r1
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80045d2:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    }
    TEMP -= T2;
 80045d6:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80045da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    OFF -= OFF2;
 80045e4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80045e8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80045ec:	1a84      	subs	r4, r0, r2
 80045ee:	60bc      	str	r4, [r7, #8]
 80045f0:	eb61 0303 	sbc.w	r3, r1, r3
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80045fa:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
    SENS -= SENS2;
 80045fe:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8004602:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8004606:	1a84      	subs	r4, r0, r2
 8004608:	603c      	str	r4, [r7, #0]
 800460a:	eb61 0303 	sbc.w	r3, r1, r3
 800460e:	607b      	str	r3, [r7, #4]
 8004610:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004614:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
  }

  value->pressure = ((((int64_t)sample->pressure * SENS) >> 21) - OFF) >> 15;
 8004618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2200      	movs	r2, #0
 8004620:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004622:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004624:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004628:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800462c:	462a      	mov	r2, r5
 800462e:	fb02 f203 	mul.w	r2, r2, r3
 8004632:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004636:	4621      	mov	r1, r4
 8004638:	fb01 f303 	mul.w	r3, r1, r3
 800463c:	4413      	add	r3, r2
 800463e:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8004642:	4621      	mov	r1, r4
 8004644:	fba2 1201 	umull	r1, r2, r2, r1
 8004648:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800464c:	460a      	mov	r2, r1
 800464e:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8004652:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004656:	4413      	add	r3, r2
 8004658:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8004668:	4621      	mov	r1, r4
 800466a:	0d4a      	lsrs	r2, r1, #21
 800466c:	4629      	mov	r1, r5
 800466e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8004672:	4629      	mov	r1, r5
 8004674:	154b      	asrs	r3, r1, #21
 8004676:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800467a:	1a14      	subs	r4, r2, r0
 800467c:	643c      	str	r4, [r7, #64]	@ 0x40
 800467e:	eb63 0301 	sbc.w	r3, r3, r1
 8004682:	647b      	str	r3, [r7, #68]	@ 0x44
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8004690:	4621      	mov	r1, r4
 8004692:	0bca      	lsrs	r2, r1, #15
 8004694:	4629      	mov	r1, r5
 8004696:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800469a:	4629      	mov	r1, r5
 800469c:	13cb      	asrs	r3, r1, #15
 800469e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80046a2:	601a      	str	r2, [r3, #0]
  value->temperature = TEMP;
 80046a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80046a8:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80046ac:	605a      	str	r2, [r3, #4]
}
 80046ae:	bf00      	nop
 80046b0:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 80046b4:	46bd      	mov	sp, r7
 80046b6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80046ba:	4770      	bx	lr

080046bc <MS5607Update>:

/* Performs the sensor reading updating the data structures */
void MS5607Update(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  MS5607UncompensatedRead(&uncompValues);
 80046c0:	4804      	ldr	r0, [pc, #16]	@ (80046d4 <MS5607Update+0x18>)
 80046c2:	f7ff fcbb 	bl	800403c <MS5607UncompensatedRead>
  MS5607Convert(&uncompValues, &readings);
 80046c6:	4904      	ldr	r1, [pc, #16]	@ (80046d8 <MS5607Update+0x1c>)
 80046c8:	4802      	ldr	r0, [pc, #8]	@ (80046d4 <MS5607Update+0x18>)
 80046ca:	f7ff fd6f 	bl	80041ac <MS5607Convert>
}
 80046ce:	bf00      	nop
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	200008f8 	.word	0x200008f8
 80046d8:	20000900 	.word	0x20000900

080046dc <MS5607ReadValues>:

MS5607Readings MS5607ReadValues(void)
{
 80046dc:	b5b0      	push	{r4, r5, r7, lr}
 80046de:	b08c      	sub	sp, #48	@ 0x30
 80046e0:	af00      	add	r7, sp, #0
  MS5607Update();
 80046e2:	f7ff ffeb 	bl	80046bc <MS5607Update>
  return (MS5607Readings){.pressure_kPa = readings.pressure / 1000.0, .temperature_C = readings.temperature / 100.0};
 80046e6:	4b18      	ldr	r3, [pc, #96]	@ (8004748 <MS5607ReadValues+0x6c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fb ff42 	bl	8000574 <__aeabi_i2d>
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	4b15      	ldr	r3, [pc, #84]	@ (800474c <MS5607ReadValues+0x70>)
 80046f6:	f7fc f8d1 	bl	800089c <__aeabi_ddiv>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4614      	mov	r4, r2
 8004700:	461d      	mov	r5, r3
 8004702:	4b11      	ldr	r3, [pc, #68]	@ (8004748 <MS5607ReadValues+0x6c>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4618      	mov	r0, r3
 8004708:	f7fb ff34 	bl	8000574 <__aeabi_i2d>
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	4b0f      	ldr	r3, [pc, #60]	@ (8004750 <MS5607ReadValues+0x74>)
 8004712:	f7fc f8c3 	bl	800089c <__aeabi_ddiv>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	e9c7 4508 	strd	r4, r5, [r7, #32]
 800471e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8004722:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004726:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800472a:	ec41 0b16 	vmov	d6, r0, r1
 800472e:	ec43 2b17 	vmov	d7, r2, r3
}
 8004732:	eeb0 0a46 	vmov.f32	s0, s12
 8004736:	eef0 0a66 	vmov.f32	s1, s13
 800473a:	eeb0 1a47 	vmov.f32	s2, s14
 800473e:	eef0 1a67 	vmov.f32	s3, s15
 8004742:	3730      	adds	r7, #48	@ 0x30
 8004744:	46bd      	mov	sp, r7
 8004746:	bdb0      	pop	{r4, r5, r7, pc}
 8004748:	20000900 	.word	0x20000900
 800474c:	408f4000 	.word	0x408f4000
 8004750:	40590000 	.word	0x40590000

08004754 <enableCSB>:
  return readings.pressure / 1000.0;
}

/* Sets the CS pin */
void enableCSB(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_RESET);
 8004758:	4b04      	ldr	r3, [pc, #16]	@ (800476c <enableCSB+0x18>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a04      	ldr	r2, [pc, #16]	@ (8004770 <enableCSB+0x1c>)
 800475e:	8811      	ldrh	r1, [r2, #0]
 8004760:	2200      	movs	r2, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f001 ffa6 	bl	80066b4 <HAL_GPIO_WritePin>
}
 8004768:	bf00      	nop
 800476a:	bd80      	pop	{r7, pc}
 800476c:	200008dc 	.word	0x200008dc
 8004770:	200008e0 	.word	0x200008e0

08004774 <disableCSB>:

/* Sets the CS pin */
void disableCSB(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 8004778:	4b04      	ldr	r3, [pc, #16]	@ (800478c <disableCSB+0x18>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a04      	ldr	r2, [pc, #16]	@ (8004790 <disableCSB+0x1c>)
 800477e:	8811      	ldrh	r1, [r2, #0]
 8004780:	2201      	movs	r2, #1
 8004782:	4618      	mov	r0, r3
 8004784:	f001 ff96 	bl	80066b4 <HAL_GPIO_WritePin>
}
 8004788:	bf00      	nop
 800478a:	bd80      	pop	{r7, pc}
 800478c:	200008dc 	.word	0x200008dc
 8004790:	200008e0 	.word	0x200008e0
 8004794:	00000000 	.word	0x00000000

08004798 <calculateAltitude>:
float const alt_offset_height = 20.00;
float const accel_tolerance = 0.1;

float calibrated_altitude = 0.00;

float calculateAltitude(double pressure, int calibrating) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	ed87 0b02 	vstr	d0, [r7, #8]
 80047a2:	6078      	str	r0, [r7, #4]
	double pressure_mb = 33.8639 * (0.2953 * pressure);
 80047a4:	a337      	add	r3, pc, #220	@ (adr r3, 8004884 <calculateAltitude+0xec>)
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047ae:	f7fb ff4b 	bl	8000648 <__aeabi_dmul>
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	4610      	mov	r0, r2
 80047b8:	4619      	mov	r1, r3
 80047ba:	a334      	add	r3, pc, #208	@ (adr r3, 800488c <calculateAltitude+0xf4>)
 80047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c0:	f7fb ff42 	bl	8000648 <__aeabi_dmul>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	float h_meter = 0.3048 * (1 - pow((pressure_mb / 1013.25), 0.190284)) * 145366.54;
 80047cc:	a331      	add	r3, pc, #196	@ (adr r3, 8004894 <calculateAltitude+0xfc>)
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80047d6:	f7fc f861 	bl	800089c <__aeabi_ddiv>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	ec43 2b17 	vmov	d7, r2, r3
 80047e2:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 8004860 <calculateAltitude+0xc8>
 80047e6:	eeb0 0a47 	vmov.f32	s0, s14
 80047ea:	eef0 0a67 	vmov.f32	s1, s15
 80047ee:	f010 fc8b 	bl	8015108 <pow>
 80047f2:	ec53 2b10 	vmov	r2, r3, d0
 80047f6:	f04f 0000 	mov.w	r0, #0
 80047fa:	491f      	ldr	r1, [pc, #124]	@ (8004878 <calculateAltitude+0xe0>)
 80047fc:	f7fb fd6c 	bl	80002d8 <__aeabi_dsub>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4610      	mov	r0, r2
 8004806:	4619      	mov	r1, r3
 8004808:	a317      	add	r3, pc, #92	@ (adr r3, 8004868 <calculateAltitude+0xd0>)
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	f7fb ff1b 	bl	8000648 <__aeabi_dmul>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	a315      	add	r3, pc, #84	@ (adr r3, 8004870 <calculateAltitude+0xd8>)
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	f7fb ff12 	bl	8000648 <__aeabi_dmul>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4610      	mov	r0, r2
 800482a:	4619      	mov	r1, r3
 800482c:	f7fc f9e4 	bl	8000bf8 <__aeabi_d2f>
 8004830:	4603      	mov	r3, r0
 8004832:	617b      	str	r3, [r7, #20]
	if (calibrating == 1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d105      	bne.n	8004846 <calculateAltitude+0xae>
	{
		// Absolute Altitude of the ground station
	    calibrated_altitude = h_meter;
 800483a:	4a10      	ldr	r2, [pc, #64]	@ (800487c <calculateAltitude+0xe4>)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	6013      	str	r3, [r2, #0]
	    // Relative Altitude of GCS
	    return 0;
 8004840:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8004880 <calculateAltitude+0xe8>
 8004844:	e006      	b.n	8004854 <calculateAltitude+0xbc>
	}
	else
	{
	      // Relative Altitude of CanSat
	   return h_meter - calibrated_altitude;
 8004846:	4b0d      	ldr	r3, [pc, #52]	@ (800487c <calculateAltitude+0xe4>)
 8004848:	edd3 7a00 	vldr	s15, [r3]
 800484c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004850:	ee77 7a67 	vsub.f32	s15, s14, s15
	}
	//return 100.0;
}
 8004854:	eeb0 0a67 	vmov.f32	s0, s15
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	e279dd3c 	.word	0xe279dd3c
 8004864:	3fc85b39 	.word	0x3fc85b39
 8004868:	dbf487fd 	.word	0xdbf487fd
 800486c:	3fd381d7 	.word	0x3fd381d7
 8004870:	51eb851f 	.word	0x51eb851f
 8004874:	4101beb4 	.word	0x4101beb4
 8004878:	3ff00000 	.word	0x3ff00000
 800487c:	20000908 	.word	0x20000908
 8004880:	00000000 	.word	0x00000000
 8004884:	f8a0902e 	.word	0xf8a0902e
 8004888:	3fd2e631 	.word	0x3fd2e631
 800488c:	467381d8 	.word	0x467381d8
 8004890:	4040ee94 	.word	0x4040ee94
 8004894:	00000000 	.word	0x00000000
 8004898:	408faa00 	.word	0x408faa00

0800489c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048a6:	2003      	movs	r0, #3
 80048a8:	f001 fa11 	bl	8005cce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048ac:	200f      	movs	r0, #15
 80048ae:	f7fe fc51 	bl	8003154 <HAL_InitTick>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	71fb      	strb	r3, [r7, #7]
 80048bc:	e001      	b.n	80048c2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80048be:	f7fd ffeb 	bl	8002898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048c2:	79fb      	ldrb	r3, [r7, #7]

}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048d0:	4b05      	ldr	r3, [pc, #20]	@ (80048e8 <HAL_IncTick+0x1c>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	4b05      	ldr	r3, [pc, #20]	@ (80048ec <HAL_IncTick+0x20>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4413      	add	r3, r2
 80048da:	4a03      	ldr	r2, [pc, #12]	@ (80048e8 <HAL_IncTick+0x1c>)
 80048dc:	6013      	str	r3, [r2, #0]
}
 80048de:	bf00      	nop
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	2000090c 	.word	0x2000090c
 80048ec:	2000000c 	.word	0x2000000c

080048f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return uwTick;
 80048f4:	4b03      	ldr	r3, [pc, #12]	@ (8004904 <HAL_GetTick+0x14>)
 80048f6:	681b      	ldr	r3, [r3, #0]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	2000090c 	.word	0x2000090c

08004908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004910:	f7ff ffee 	bl	80048f0 <HAL_GetTick>
 8004914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004920:	d004      	beq.n	800492c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004922:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <HAL_Delay+0x40>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800492c:	bf00      	nop
 800492e:	f7ff ffdf 	bl	80048f0 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	429a      	cmp	r2, r3
 800493c:	d8f7      	bhi.n	800492e <HAL_Delay+0x26>
  {
  }
}
 800493e:	bf00      	nop
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	2000000c 	.word	0x2000000c

0800494c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8004954:	4b06      	ldr	r3, [pc, #24]	@ (8004970 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f023 0202 	bic.w	r2, r3, #2
 800495c:	4904      	ldr	r1, [pc, #16]	@ (8004970 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4313      	orrs	r3, r2
 8004962:	600b      	str	r3, [r1, #0]
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	40010030 	.word	0x40010030

08004974 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8004978:	4b05      	ldr	r3, [pc, #20]	@ (8004990 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a04      	ldr	r2, [pc, #16]	@ (8004990 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800497e:	f023 0301 	bic.w	r3, r3, #1
 8004982:	6013      	str	r3, [r2, #0]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40010030 	.word	0x40010030

08004994 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	609a      	str	r2, [r3, #8]
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	609a      	str	r2, [r3, #8]
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	3360      	adds	r3, #96	@ 0x60
 8004a0e:	461a      	mov	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4b08      	ldr	r3, [pc, #32]	@ (8004a40 <LL_ADC_SetOffset+0x44>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004a34:	bf00      	nop
 8004a36:	371c      	adds	r7, #28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	03fff000 	.word	0x03fff000

08004a44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3360      	adds	r3, #96	@ 0x60
 8004a52:	461a      	mov	r2, r3
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3360      	adds	r3, #96	@ 0x60
 8004a80:	461a      	mov	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	431a      	orrs	r2, r3
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b087      	sub	sp, #28
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3360      	adds	r3, #96	@ 0x60
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	431a      	orrs	r2, r3
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004ad0:	bf00      	nop
 8004ad2:	371c      	adds	r7, #28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3360      	adds	r3, #96	@ 0x60
 8004aec:	461a      	mov	r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	431a      	orrs	r2, r3
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	615a      	str	r2, [r3, #20]
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3330      	adds	r3, #48	@ 0x30
 8004b48:	461a      	mov	r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	0a1b      	lsrs	r3, r3, #8
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	f003 030c 	and.w	r3, r3, #12
 8004b54:	4413      	add	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f003 031f 	and.w	r3, r3, #31
 8004b62:	211f      	movs	r1, #31
 8004b64:	fa01 f303 	lsl.w	r3, r1, r3
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	401a      	ands	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	0e9b      	lsrs	r3, r3, #26
 8004b70:	f003 011f 	and.w	r1, r3, #31
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 031f 	and.w	r3, r3, #31
 8004b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004b84:	bf00      	nop
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3314      	adds	r3, #20
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	0e5b      	lsrs	r3, r3, #25
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	4413      	add	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	0d1b      	lsrs	r3, r3, #20
 8004bb8:	f003 031f 	and.w	r3, r3, #31
 8004bbc:	2107      	movs	r1, #7
 8004bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	401a      	ands	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	0d1b      	lsrs	r3, r3, #20
 8004bca:	f003 031f 	and.w	r3, r3, #31
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004bda:	bf00      	nop
 8004bdc:	371c      	adds	r7, #28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c00:	43db      	mvns	r3, r3
 8004c02:	401a      	ands	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f003 0318 	and.w	r3, r3, #24
 8004c0a:	4908      	ldr	r1, [pc, #32]	@ (8004c2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8004c0c:	40d9      	lsrs	r1, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	400b      	ands	r3, r1
 8004c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c16:	431a      	orrs	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004c1e:	bf00      	nop
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	0007ffff 	.word	0x0007ffff

08004c30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004c40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6093      	str	r3, [r2, #8]
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c68:	d101      	bne.n	8004c6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004c8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cb8:	d101      	bne.n	8004cbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <LL_ADC_IsEnabled+0x18>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <LL_ADC_IsEnabled+0x1a>
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d101      	bne.n	8004d0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d101      	bne.n	8004d30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e000      	b.n	8004d32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
	...

08004d40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d40:	b590      	push	{r4, r7, lr}
 8004d42:	b089      	sub	sp, #36	@ 0x24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e19b      	b.n	8005092 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d109      	bne.n	8004d7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fd fdcd 	bl	8002908 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff ff67 	bl	8004c54 <LL_ADC_IsDeepPowerDownEnabled>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d004      	beq.n	8004d96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff ff4d 	bl	8004c30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff ff82 	bl	8004ca4 <LL_ADC_IsInternalRegulatorEnabled>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d115      	bne.n	8004dd2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff ff66 	bl	8004c7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004db0:	4b97      	ldr	r3, [pc, #604]	@ (8005010 <HAL_ADC_Init+0x2d0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	099b      	lsrs	r3, r3, #6
 8004db6:	4a97      	ldr	r2, [pc, #604]	@ (8005014 <HAL_ADC_Init+0x2d4>)
 8004db8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbc:	099b      	lsrs	r3, r3, #6
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004dc4:	e002      	b.n	8004dcc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f9      	bne.n	8004dc6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff ff64 	bl	8004ca4 <LL_ADC_IsInternalRegulatorEnabled>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10d      	bne.n	8004dfe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de6:	f043 0210 	orr.w	r2, r3, #16
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df2:	f043 0201 	orr.w	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff ff75 	bl	8004cf2 <LL_ADC_REG_IsConversionOngoing>
 8004e08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e0e:	f003 0310 	and.w	r3, r3, #16
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f040 8134 	bne.w	8005080 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f040 8130 	bne.w	8005080 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e24:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004e28:	f043 0202 	orr.w	r2, r3, #2
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff ff49 	bl	8004ccc <LL_ADC_IsEnabled>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d137      	bne.n	8004eb0 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e48:	d004      	beq.n	8004e54 <HAL_ADC_Init+0x114>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a72      	ldr	r2, [pc, #456]	@ (8005018 <HAL_ADC_Init+0x2d8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d10f      	bne.n	8004e74 <HAL_ADC_Init+0x134>
 8004e54:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004e58:	f7ff ff38 	bl	8004ccc <LL_ADC_IsEnabled>
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	486e      	ldr	r0, [pc, #440]	@ (8005018 <HAL_ADC_Init+0x2d8>)
 8004e60:	f7ff ff34 	bl	8004ccc <LL_ADC_IsEnabled>
 8004e64:	4603      	mov	r3, r0
 8004e66:	4323      	orrs	r3, r4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	bf0c      	ite	eq
 8004e6c:	2301      	moveq	r3, #1
 8004e6e:	2300      	movne	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	e008      	b.n	8004e86 <HAL_ADC_Init+0x146>
 8004e74:	4869      	ldr	r0, [pc, #420]	@ (800501c <HAL_ADC_Init+0x2dc>)
 8004e76:	f7ff ff29 	bl	8004ccc <LL_ADC_IsEnabled>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bf0c      	ite	eq
 8004e80:	2301      	moveq	r3, #1
 8004e82:	2300      	movne	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d012      	beq.n	8004eb0 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e92:	d004      	beq.n	8004e9e <HAL_ADC_Init+0x15e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a5f      	ldr	r2, [pc, #380]	@ (8005018 <HAL_ADC_Init+0x2d8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d101      	bne.n	8004ea2 <HAL_ADC_Init+0x162>
 8004e9e:	4a60      	ldr	r2, [pc, #384]	@ (8005020 <HAL_ADC_Init+0x2e0>)
 8004ea0:	e000      	b.n	8004ea4 <HAL_ADC_Init+0x164>
 8004ea2:	4a60      	ldr	r2, [pc, #384]	@ (8005024 <HAL_ADC_Init+0x2e4>)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f7ff fd72 	bl	8004994 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	7f5b      	ldrb	r3, [r3, #29]
 8004eb4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004eba:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004ec0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004ec6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ece:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d106      	bne.n	8004eec <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	045b      	lsls	r3, r3, #17
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d009      	beq.n	8004f08 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f00:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	4b46      	ldr	r3, [pc, #280]	@ (8005028 <HAL_ADC_Init+0x2e8>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	69b9      	ldr	r1, [r7, #24]
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff feee 	bl	8004d18 <LL_ADC_INJ_IsConversionOngoing>
 8004f3c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d17b      	bne.n	800503c <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d178      	bne.n	800503c <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f4e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f56:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f66:	f023 0302 	bic.w	r3, r3, #2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	69b9      	ldr	r1, [r7, #24]
 8004f70:	430b      	orrs	r3, r1
 8004f72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d017      	beq.n	8004fac <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004f8a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f94:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6911      	ldr	r1, [r2, #16]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6812      	ldr	r2, [r2, #0]
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004faa:	e013      	b.n	8004fd4 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004fba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004fcc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004fd0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d126      	bne.n	800502c <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004fe8:	f023 0304 	bic.w	r3, r3, #4
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ff4:	4311      	orrs	r1, r2
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004ffa:	4311      	orrs	r1, r2
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005000:	430a      	orrs	r2, r1
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f042 0201 	orr.w	r2, r2, #1
 800500c:	611a      	str	r2, [r3, #16]
 800500e:	e015      	b.n	800503c <HAL_ADC_Init+0x2fc>
 8005010:	20000004 	.word	0x20000004
 8005014:	053e2d63 	.word	0x053e2d63
 8005018:	50000100 	.word	0x50000100
 800501c:	50000400 	.word	0x50000400
 8005020:	50000300 	.word	0x50000300
 8005024:	50000700 	.word	0x50000700
 8005028:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d10c      	bne.n	800505e <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504a:	f023 010f 	bic.w	r1, r3, #15
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	1e5a      	subs	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	631a      	str	r2, [r3, #48]	@ 0x30
 800505c:	e007      	b.n	800506e <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 020f 	bic.w	r2, r2, #15
 800506c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005072:	f023 0303 	bic.w	r3, r3, #3
 8005076:	f043 0201 	orr.w	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800507e:	e007      	b.n	8005090 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005084:	f043 0210 	orr.w	r2, r3, #16
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005090:	7ffb      	ldrb	r3, [r7, #31]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3724      	adds	r7, #36	@ 0x24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd90      	pop	{r4, r7, pc}
 800509a:	bf00      	nop

0800509c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b0b6      	sub	sp, #216	@ 0xd8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d102      	bne.n	80050c0 <HAL_ADC_ConfigChannel+0x24>
 80050ba:	2302      	movs	r3, #2
 80050bc:	f000 bc04 	b.w	80058c8 <HAL_ADC_ConfigChannel+0x82c>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff fe10 	bl	8004cf2 <LL_ADC_REG_IsConversionOngoing>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f040 83e8 	bne.w	80058aa <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	6859      	ldr	r1, [r3, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	f7ff fd26 	bl	8004b38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff fdfe 	bl	8004cf2 <LL_ADC_REG_IsConversionOngoing>
 80050f6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff fe0a 	bl	8004d18 <LL_ADC_INJ_IsConversionOngoing>
 8005104:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005108:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800510c:	2b00      	cmp	r3, #0
 800510e:	f040 81d9 	bne.w	80054c4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005112:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005116:	2b00      	cmp	r3, #0
 8005118:	f040 81d4 	bne.w	80054c4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005124:	d10f      	bne.n	8005146 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2200      	movs	r2, #0
 8005130:	4619      	mov	r1, r3
 8005132:	f7ff fd2d 	bl	8004b90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff fce7 	bl	8004b12 <LL_ADC_SetSamplingTimeCommonConfig>
 8005144:	e00e      	b.n	8005164 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6819      	ldr	r1, [r3, #0]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	461a      	mov	r2, r3
 8005154:	f7ff fd1c 	bl	8004b90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2100      	movs	r1, #0
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff fcd7 	bl	8004b12 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	08db      	lsrs	r3, r3, #3
 8005170:	f003 0303 	and.w	r3, r3, #3
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	2b04      	cmp	r3, #4
 8005184:	d022      	beq.n	80051cc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6818      	ldr	r0, [r3, #0]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6919      	ldr	r1, [r3, #16]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005196:	f7ff fc31 	bl	80049fc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6919      	ldr	r1, [r3, #16]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	461a      	mov	r2, r3
 80051a8:	f7ff fc7d 	bl	8004aa6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d102      	bne.n	80051c2 <HAL_ADC_ConfigChannel+0x126>
 80051bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051c0:	e000      	b.n	80051c4 <HAL_ADC_ConfigChannel+0x128>
 80051c2:	2300      	movs	r3, #0
 80051c4:	461a      	mov	r2, r3
 80051c6:	f7ff fc89 	bl	8004adc <LL_ADC_SetOffsetSaturation>
 80051ca:	e17b      	b.n	80054c4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2100      	movs	r1, #0
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff fc36 	bl	8004a44 <LL_ADC_GetOffsetChannel>
 80051d8:	4603      	mov	r3, r0
 80051da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10a      	bne.n	80051f8 <HAL_ADC_ConfigChannel+0x15c>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2100      	movs	r1, #0
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff fc2b 	bl	8004a44 <LL_ADC_GetOffsetChannel>
 80051ee:	4603      	mov	r3, r0
 80051f0:	0e9b      	lsrs	r3, r3, #26
 80051f2:	f003 021f 	and.w	r2, r3, #31
 80051f6:	e01e      	b.n	8005236 <HAL_ADC_ConfigChannel+0x19a>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff fc20 	bl	8004a44 <LL_ADC_GetOffsetChannel>
 8005204:	4603      	mov	r3, r0
 8005206:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800520e:	fa93 f3a3 	rbit	r3, r3
 8005212:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005216:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800521a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800521e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005226:	2320      	movs	r3, #32
 8005228:	e004      	b.n	8005234 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800522a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800522e:	fab3 f383 	clz	r3, r3
 8005232:	b2db      	uxtb	r3, r3
 8005234:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800523e:	2b00      	cmp	r3, #0
 8005240:	d105      	bne.n	800524e <HAL_ADC_ConfigChannel+0x1b2>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	0e9b      	lsrs	r3, r3, #26
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	e018      	b.n	8005280 <HAL_ADC_ConfigChannel+0x1e4>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005256:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800525a:	fa93 f3a3 	rbit	r3, r3
 800525e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005266:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800526a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005272:	2320      	movs	r3, #32
 8005274:	e004      	b.n	8005280 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005276:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800527a:	fab3 f383 	clz	r3, r3
 800527e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005280:	429a      	cmp	r2, r3
 8005282:	d106      	bne.n	8005292 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2200      	movs	r2, #0
 800528a:	2100      	movs	r1, #0
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff fbef 	bl	8004a70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2101      	movs	r1, #1
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff fbd3 	bl	8004a44 <LL_ADC_GetOffsetChannel>
 800529e:	4603      	mov	r3, r0
 80052a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <HAL_ADC_ConfigChannel+0x222>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2101      	movs	r1, #1
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff fbc8 	bl	8004a44 <LL_ADC_GetOffsetChannel>
 80052b4:	4603      	mov	r3, r0
 80052b6:	0e9b      	lsrs	r3, r3, #26
 80052b8:	f003 021f 	and.w	r2, r3, #31
 80052bc:	e01e      	b.n	80052fc <HAL_ADC_ConfigChannel+0x260>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2101      	movs	r1, #1
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fbbd 	bl	8004a44 <LL_ADC_GetOffsetChannel>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80052d4:	fa93 f3a3 	rbit	r3, r3
 80052d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80052dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80052e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80052e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80052ec:	2320      	movs	r3, #32
 80052ee:	e004      	b.n	80052fa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80052f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80052f4:	fab3 f383 	clz	r3, r3
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005304:	2b00      	cmp	r3, #0
 8005306:	d105      	bne.n	8005314 <HAL_ADC_ConfigChannel+0x278>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	0e9b      	lsrs	r3, r3, #26
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	e018      	b.n	8005346 <HAL_ADC_ConfigChannel+0x2aa>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005320:	fa93 f3a3 	rbit	r3, r3
 8005324:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005328:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800532c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005330:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005338:	2320      	movs	r3, #32
 800533a:	e004      	b.n	8005346 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800533c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005340:	fab3 f383 	clz	r3, r3
 8005344:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005346:	429a      	cmp	r2, r3
 8005348:	d106      	bne.n	8005358 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2200      	movs	r2, #0
 8005350:	2101      	movs	r1, #1
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fb8c 	bl	8004a70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2102      	movs	r1, #2
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff fb70 	bl	8004a44 <LL_ADC_GetOffsetChannel>
 8005364:	4603      	mov	r3, r0
 8005366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10a      	bne.n	8005384 <HAL_ADC_ConfigChannel+0x2e8>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2102      	movs	r1, #2
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff fb65 	bl	8004a44 <LL_ADC_GetOffsetChannel>
 800537a:	4603      	mov	r3, r0
 800537c:	0e9b      	lsrs	r3, r3, #26
 800537e:	f003 021f 	and.w	r2, r3, #31
 8005382:	e01e      	b.n	80053c2 <HAL_ADC_ConfigChannel+0x326>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2102      	movs	r1, #2
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff fb5a 	bl	8004a44 <LL_ADC_GetOffsetChannel>
 8005390:	4603      	mov	r3, r0
 8005392:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005396:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800539a:	fa93 f3a3 	rbit	r3, r3
 800539e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80053a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80053aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80053b2:	2320      	movs	r3, #32
 80053b4:	e004      	b.n	80053c0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80053b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053ba:	fab3 f383 	clz	r3, r3
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d105      	bne.n	80053da <HAL_ADC_ConfigChannel+0x33e>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	0e9b      	lsrs	r3, r3, #26
 80053d4:	f003 031f 	and.w	r3, r3, #31
 80053d8:	e016      	b.n	8005408 <HAL_ADC_ConfigChannel+0x36c>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80053e6:	fa93 f3a3 	rbit	r3, r3
 80053ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80053ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80053f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80053fa:	2320      	movs	r3, #32
 80053fc:	e004      	b.n	8005408 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80053fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005402:	fab3 f383 	clz	r3, r3
 8005406:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005408:	429a      	cmp	r2, r3
 800540a:	d106      	bne.n	800541a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2200      	movs	r2, #0
 8005412:	2102      	movs	r1, #2
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff fb2b 	bl	8004a70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2103      	movs	r1, #3
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff fb0f 	bl	8004a44 <LL_ADC_GetOffsetChannel>
 8005426:	4603      	mov	r3, r0
 8005428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <HAL_ADC_ConfigChannel+0x3aa>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2103      	movs	r1, #3
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff fb04 	bl	8004a44 <LL_ADC_GetOffsetChannel>
 800543c:	4603      	mov	r3, r0
 800543e:	0e9b      	lsrs	r3, r3, #26
 8005440:	f003 021f 	and.w	r2, r3, #31
 8005444:	e017      	b.n	8005476 <HAL_ADC_ConfigChannel+0x3da>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2103      	movs	r1, #3
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff faf9 	bl	8004a44 <LL_ADC_GetOffsetChannel>
 8005452:	4603      	mov	r3, r0
 8005454:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005456:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005458:	fa93 f3a3 	rbit	r3, r3
 800545c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800545e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005460:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005462:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005468:	2320      	movs	r3, #32
 800546a:	e003      	b.n	8005474 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800546c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800546e:	fab3 f383 	clz	r3, r3
 8005472:	b2db      	uxtb	r3, r3
 8005474:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800547e:	2b00      	cmp	r3, #0
 8005480:	d105      	bne.n	800548e <HAL_ADC_ConfigChannel+0x3f2>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	0e9b      	lsrs	r3, r3, #26
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	e011      	b.n	80054b2 <HAL_ADC_ConfigChannel+0x416>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005494:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005496:	fa93 f3a3 	rbit	r3, r3
 800549a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800549c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800549e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80054a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80054a6:	2320      	movs	r3, #32
 80054a8:	e003      	b.n	80054b2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80054aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054ac:	fab3 f383 	clz	r3, r3
 80054b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d106      	bne.n	80054c4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2200      	movs	r2, #0
 80054bc:	2103      	movs	r1, #3
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff fad6 	bl	8004a70 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff fbff 	bl	8004ccc <LL_ADC_IsEnabled>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f040 813d 	bne.w	8005750 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6819      	ldr	r1, [r3, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	461a      	mov	r2, r3
 80054e4:	f7ff fb80 	bl	8004be8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	4aa2      	ldr	r2, [pc, #648]	@ (8005778 <HAL_ADC_ConfigChannel+0x6dc>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	f040 812e 	bne.w	8005750 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10b      	bne.n	800551c <HAL_ADC_ConfigChannel+0x480>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	0e9b      	lsrs	r3, r3, #26
 800550a:	3301      	adds	r3, #1
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	2b09      	cmp	r3, #9
 8005512:	bf94      	ite	ls
 8005514:	2301      	movls	r3, #1
 8005516:	2300      	movhi	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	e019      	b.n	8005550 <HAL_ADC_ConfigChannel+0x4b4>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005524:	fa93 f3a3 	rbit	r3, r3
 8005528:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800552a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800552c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800552e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005534:	2320      	movs	r3, #32
 8005536:	e003      	b.n	8005540 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005538:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800553a:	fab3 f383 	clz	r3, r3
 800553e:	b2db      	uxtb	r3, r3
 8005540:	3301      	adds	r3, #1
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	2b09      	cmp	r3, #9
 8005548:	bf94      	ite	ls
 800554a:	2301      	movls	r3, #1
 800554c:	2300      	movhi	r3, #0
 800554e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005550:	2b00      	cmp	r3, #0
 8005552:	d079      	beq.n	8005648 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800555c:	2b00      	cmp	r3, #0
 800555e:	d107      	bne.n	8005570 <HAL_ADC_ConfigChannel+0x4d4>
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	0e9b      	lsrs	r3, r3, #26
 8005566:	3301      	adds	r3, #1
 8005568:	069b      	lsls	r3, r3, #26
 800556a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800556e:	e015      	b.n	800559c <HAL_ADC_ConfigChannel+0x500>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005576:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005578:	fa93 f3a3 	rbit	r3, r3
 800557c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800557e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005580:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005588:	2320      	movs	r3, #32
 800558a:	e003      	b.n	8005594 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800558c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800558e:	fab3 f383 	clz	r3, r3
 8005592:	b2db      	uxtb	r3, r3
 8005594:	3301      	adds	r3, #1
 8005596:	069b      	lsls	r3, r3, #26
 8005598:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d109      	bne.n	80055bc <HAL_ADC_ConfigChannel+0x520>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	0e9b      	lsrs	r3, r3, #26
 80055ae:	3301      	adds	r3, #1
 80055b0:	f003 031f 	and.w	r3, r3, #31
 80055b4:	2101      	movs	r1, #1
 80055b6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ba:	e017      	b.n	80055ec <HAL_ADC_ConfigChannel+0x550>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055c4:	fa93 f3a3 	rbit	r3, r3
 80055c8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80055ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80055ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80055d4:	2320      	movs	r3, #32
 80055d6:	e003      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80055d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055da:	fab3 f383 	clz	r3, r3
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	3301      	adds	r3, #1
 80055e2:	f003 031f 	and.w	r3, r3, #31
 80055e6:	2101      	movs	r1, #1
 80055e8:	fa01 f303 	lsl.w	r3, r1, r3
 80055ec:	ea42 0103 	orr.w	r1, r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <HAL_ADC_ConfigChannel+0x576>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	0e9b      	lsrs	r3, r3, #26
 8005602:	3301      	adds	r3, #1
 8005604:	f003 021f 	and.w	r2, r3, #31
 8005608:	4613      	mov	r3, r2
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	4413      	add	r3, r2
 800560e:	051b      	lsls	r3, r3, #20
 8005610:	e018      	b.n	8005644 <HAL_ADC_ConfigChannel+0x5a8>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561a:	fa93 f3a3 	rbit	r3, r3
 800561e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800562a:	2320      	movs	r3, #32
 800562c:	e003      	b.n	8005636 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800562e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005630:	fab3 f383 	clz	r3, r3
 8005634:	b2db      	uxtb	r3, r3
 8005636:	3301      	adds	r3, #1
 8005638:	f003 021f 	and.w	r2, r3, #31
 800563c:	4613      	mov	r3, r2
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	4413      	add	r3, r2
 8005642:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005644:	430b      	orrs	r3, r1
 8005646:	e07e      	b.n	8005746 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005650:	2b00      	cmp	r3, #0
 8005652:	d107      	bne.n	8005664 <HAL_ADC_ConfigChannel+0x5c8>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	0e9b      	lsrs	r3, r3, #26
 800565a:	3301      	adds	r3, #1
 800565c:	069b      	lsls	r3, r3, #26
 800565e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005662:	e015      	b.n	8005690 <HAL_ADC_ConfigChannel+0x5f4>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566c:	fa93 f3a3 	rbit	r3, r3
 8005670:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005674:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800567c:	2320      	movs	r3, #32
 800567e:	e003      	b.n	8005688 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005682:	fab3 f383 	clz	r3, r3
 8005686:	b2db      	uxtb	r3, r3
 8005688:	3301      	adds	r3, #1
 800568a:	069b      	lsls	r3, r3, #26
 800568c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005698:	2b00      	cmp	r3, #0
 800569a:	d109      	bne.n	80056b0 <HAL_ADC_ConfigChannel+0x614>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	0e9b      	lsrs	r3, r3, #26
 80056a2:	3301      	adds	r3, #1
 80056a4:	f003 031f 	and.w	r3, r3, #31
 80056a8:	2101      	movs	r1, #1
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	e017      	b.n	80056e0 <HAL_ADC_ConfigChannel+0x644>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	fa93 f3a3 	rbit	r3, r3
 80056bc:	61fb      	str	r3, [r7, #28]
  return result;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80056c8:	2320      	movs	r3, #32
 80056ca:	e003      	b.n	80056d4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	fab3 f383 	clz	r3, r3
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	3301      	adds	r3, #1
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	2101      	movs	r1, #1
 80056dc:	fa01 f303 	lsl.w	r3, r1, r3
 80056e0:	ea42 0103 	orr.w	r1, r2, r3
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10d      	bne.n	800570c <HAL_ADC_ConfigChannel+0x670>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	0e9b      	lsrs	r3, r3, #26
 80056f6:	3301      	adds	r3, #1
 80056f8:	f003 021f 	and.w	r2, r3, #31
 80056fc:	4613      	mov	r3, r2
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	4413      	add	r3, r2
 8005702:	3b1e      	subs	r3, #30
 8005704:	051b      	lsls	r3, r3, #20
 8005706:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800570a:	e01b      	b.n	8005744 <HAL_ADC_ConfigChannel+0x6a8>
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	fa93 f3a3 	rbit	r3, r3
 8005718:	613b      	str	r3, [r7, #16]
  return result;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005724:	2320      	movs	r3, #32
 8005726:	e003      	b.n	8005730 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	fab3 f383 	clz	r3, r3
 800572e:	b2db      	uxtb	r3, r3
 8005730:	3301      	adds	r3, #1
 8005732:	f003 021f 	and.w	r2, r3, #31
 8005736:	4613      	mov	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4413      	add	r3, r2
 800573c:	3b1e      	subs	r3, #30
 800573e:	051b      	lsls	r3, r3, #20
 8005740:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005744:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800574a:	4619      	mov	r1, r3
 800574c:	f7ff fa20 	bl	8004b90 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	4b09      	ldr	r3, [pc, #36]	@ (800577c <HAL_ADC_ConfigChannel+0x6e0>)
 8005756:	4013      	ands	r3, r2
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 80af 	beq.w	80058bc <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005766:	d004      	beq.n	8005772 <HAL_ADC_ConfigChannel+0x6d6>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a04      	ldr	r2, [pc, #16]	@ (8005780 <HAL_ADC_ConfigChannel+0x6e4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d10a      	bne.n	8005788 <HAL_ADC_ConfigChannel+0x6ec>
 8005772:	4b04      	ldr	r3, [pc, #16]	@ (8005784 <HAL_ADC_ConfigChannel+0x6e8>)
 8005774:	e009      	b.n	800578a <HAL_ADC_ConfigChannel+0x6ee>
 8005776:	bf00      	nop
 8005778:	407f0000 	.word	0x407f0000
 800577c:	80080000 	.word	0x80080000
 8005780:	50000100 	.word	0x50000100
 8005784:	50000300 	.word	0x50000300
 8005788:	4b51      	ldr	r3, [pc, #324]	@ (80058d0 <HAL_ADC_ConfigChannel+0x834>)
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff f928 	bl	80049e0 <LL_ADC_GetCommonPathInternalCh>
 8005790:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a4e      	ldr	r2, [pc, #312]	@ (80058d4 <HAL_ADC_ConfigChannel+0x838>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d004      	beq.n	80057a8 <HAL_ADC_ConfigChannel+0x70c>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a4d      	ldr	r2, [pc, #308]	@ (80058d8 <HAL_ADC_ConfigChannel+0x83c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d134      	bne.n	8005812 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80057a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d12e      	bne.n	8005812 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057bc:	d17e      	bne.n	80058bc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057c6:	d004      	beq.n	80057d2 <HAL_ADC_ConfigChannel+0x736>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a43      	ldr	r2, [pc, #268]	@ (80058dc <HAL_ADC_ConfigChannel+0x840>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d101      	bne.n	80057d6 <HAL_ADC_ConfigChannel+0x73a>
 80057d2:	4a43      	ldr	r2, [pc, #268]	@ (80058e0 <HAL_ADC_ConfigChannel+0x844>)
 80057d4:	e000      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x73c>
 80057d6:	4a3e      	ldr	r2, [pc, #248]	@ (80058d0 <HAL_ADC_ConfigChannel+0x834>)
 80057d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80057e0:	4619      	mov	r1, r3
 80057e2:	4610      	mov	r0, r2
 80057e4:	f7ff f8e9 	bl	80049ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057e8:	4b3e      	ldr	r3, [pc, #248]	@ (80058e4 <HAL_ADC_ConfigChannel+0x848>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	099b      	lsrs	r3, r3, #6
 80057ee:	4a3e      	ldr	r2, [pc, #248]	@ (80058e8 <HAL_ADC_ConfigChannel+0x84c>)
 80057f0:	fba2 2303 	umull	r2, r3, r2, r3
 80057f4:	099b      	lsrs	r3, r3, #6
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	4613      	mov	r3, r2
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005802:	e002      	b.n	800580a <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3b01      	subs	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1f9      	bne.n	8005804 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005810:	e054      	b.n	80058bc <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a35      	ldr	r2, [pc, #212]	@ (80058ec <HAL_ADC_ConfigChannel+0x850>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d120      	bne.n	800585e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800581c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d11a      	bne.n	800585e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005830:	d144      	bne.n	80058bc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800583a:	d004      	beq.n	8005846 <HAL_ADC_ConfigChannel+0x7aa>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a26      	ldr	r2, [pc, #152]	@ (80058dc <HAL_ADC_ConfigChannel+0x840>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d101      	bne.n	800584a <HAL_ADC_ConfigChannel+0x7ae>
 8005846:	4a26      	ldr	r2, [pc, #152]	@ (80058e0 <HAL_ADC_ConfigChannel+0x844>)
 8005848:	e000      	b.n	800584c <HAL_ADC_ConfigChannel+0x7b0>
 800584a:	4a21      	ldr	r2, [pc, #132]	@ (80058d0 <HAL_ADC_ConfigChannel+0x834>)
 800584c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005850:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005854:	4619      	mov	r1, r3
 8005856:	4610      	mov	r0, r2
 8005858:	f7ff f8af 	bl	80049ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800585c:	e02e      	b.n	80058bc <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a23      	ldr	r2, [pc, #140]	@ (80058f0 <HAL_ADC_ConfigChannel+0x854>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d129      	bne.n	80058bc <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800586c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d123      	bne.n	80058bc <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a18      	ldr	r2, [pc, #96]	@ (80058dc <HAL_ADC_ConfigChannel+0x840>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d01e      	beq.n	80058bc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005886:	d004      	beq.n	8005892 <HAL_ADC_ConfigChannel+0x7f6>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a13      	ldr	r2, [pc, #76]	@ (80058dc <HAL_ADC_ConfigChannel+0x840>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d101      	bne.n	8005896 <HAL_ADC_ConfigChannel+0x7fa>
 8005892:	4a13      	ldr	r2, [pc, #76]	@ (80058e0 <HAL_ADC_ConfigChannel+0x844>)
 8005894:	e000      	b.n	8005898 <HAL_ADC_ConfigChannel+0x7fc>
 8005896:	4a0e      	ldr	r2, [pc, #56]	@ (80058d0 <HAL_ADC_ConfigChannel+0x834>)
 8005898:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800589c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80058a0:	4619      	mov	r1, r3
 80058a2:	4610      	mov	r0, r2
 80058a4:	f7ff f889 	bl	80049ba <LL_ADC_SetCommonPathInternalCh>
 80058a8:	e008      	b.n	80058bc <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ae:	f043 0220 	orr.w	r2, r3, #32
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80058c4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	37d8      	adds	r7, #216	@ 0xd8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	50000700 	.word	0x50000700
 80058d4:	c3210000 	.word	0xc3210000
 80058d8:	90c00010 	.word	0x90c00010
 80058dc:	50000100 	.word	0x50000100
 80058e0:	50000300 	.word	0x50000300
 80058e4:	20000004 	.word	0x20000004
 80058e8:	053e2d63 	.word	0x053e2d63
 80058ec:	c7520000 	.word	0xc7520000
 80058f0:	cb840000 	.word	0xcb840000

080058f4 <LL_ADC_IsEnabled>:
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <LL_ADC_IsEnabled+0x18>
 8005908:	2301      	movs	r3, #1
 800590a:	e000      	b.n	800590e <LL_ADC_IsEnabled+0x1a>
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <LL_ADC_REG_IsConversionOngoing>:
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b04      	cmp	r3, #4
 800592c:	d101      	bne.n	8005932 <LL_ADC_REG_IsConversionOngoing+0x18>
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005940:	b590      	push	{r4, r7, lr}
 8005942:	b0a1      	sub	sp, #132	@ 0x84
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800595a:	2302      	movs	r3, #2
 800595c:	e0cb      	b.n	8005af6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005966:	2300      	movs	r3, #0
 8005968:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800596a:	2300      	movs	r3, #0
 800596c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005976:	d102      	bne.n	800597e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005978:	4b61      	ldr	r3, [pc, #388]	@ (8005b00 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800597a:	60bb      	str	r3, [r7, #8]
 800597c:	e001      	b.n	8005982 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800597e:	2300      	movs	r3, #0
 8005980:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10b      	bne.n	80059a0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800598c:	f043 0220 	orr.w	r2, r3, #32
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0aa      	b.n	8005af6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff ffb9 	bl	800591a <LL_ADC_REG_IsConversionOngoing>
 80059a8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff ffb3 	bl	800591a <LL_ADC_REG_IsConversionOngoing>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f040 808c 	bne.w	8005ad4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80059bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f040 8088 	bne.w	8005ad4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059cc:	d004      	beq.n	80059d8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a4b      	ldr	r2, [pc, #300]	@ (8005b00 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d101      	bne.n	80059dc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80059d8:	4b4a      	ldr	r3, [pc, #296]	@ (8005b04 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 80059da:	e000      	b.n	80059de <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80059dc:	4b4a      	ldr	r3, [pc, #296]	@ (8005b08 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80059de:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d041      	beq.n	8005a6c <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80059e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	6859      	ldr	r1, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80059fa:	035b      	lsls	r3, r3, #13
 80059fc:	430b      	orrs	r3, r1
 80059fe:	431a      	orrs	r2, r3
 8005a00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a02:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a0c:	d004      	beq.n	8005a18 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a3b      	ldr	r2, [pc, #236]	@ (8005b00 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d10f      	bne.n	8005a38 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8005a18:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005a1c:	f7ff ff6a 	bl	80058f4 <LL_ADC_IsEnabled>
 8005a20:	4604      	mov	r4, r0
 8005a22:	4837      	ldr	r0, [pc, #220]	@ (8005b00 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005a24:	f7ff ff66 	bl	80058f4 <LL_ADC_IsEnabled>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	4323      	orrs	r3, r4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	bf0c      	ite	eq
 8005a30:	2301      	moveq	r3, #1
 8005a32:	2300      	movne	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	e008      	b.n	8005a4a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8005a38:	4834      	ldr	r0, [pc, #208]	@ (8005b0c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005a3a:	f7ff ff5b 	bl	80058f4 <LL_ADC_IsEnabled>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	bf0c      	ite	eq
 8005a44:	2301      	moveq	r3, #1
 8005a46:	2300      	movne	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d04c      	beq.n	8005ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005a4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005a56:	f023 030f 	bic.w	r3, r3, #15
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	6811      	ldr	r1, [r2, #0]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	6892      	ldr	r2, [r2, #8]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	431a      	orrs	r2, r3
 8005a66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a68:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005a6a:	e03d      	b.n	8005ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005a6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a76:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a80:	d004      	beq.n	8005a8c <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1e      	ldr	r2, [pc, #120]	@ (8005b00 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d10f      	bne.n	8005aac <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8005a8c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005a90:	f7ff ff30 	bl	80058f4 <LL_ADC_IsEnabled>
 8005a94:	4604      	mov	r4, r0
 8005a96:	481a      	ldr	r0, [pc, #104]	@ (8005b00 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005a98:	f7ff ff2c 	bl	80058f4 <LL_ADC_IsEnabled>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	4323      	orrs	r3, r4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	bf0c      	ite	eq
 8005aa4:	2301      	moveq	r3, #1
 8005aa6:	2300      	movne	r3, #0
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	e008      	b.n	8005abe <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8005aac:	4817      	ldr	r0, [pc, #92]	@ (8005b0c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005aae:	f7ff ff21 	bl	80058f4 <LL_ADC_IsEnabled>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bf0c      	ite	eq
 8005ab8:	2301      	moveq	r3, #1
 8005aba:	2300      	movne	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d012      	beq.n	8005ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005ac2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005aca:	f023 030f 	bic.w	r3, r3, #15
 8005ace:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005ad0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ad2:	e009      	b.n	8005ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad8:	f043 0220 	orr.w	r2, r3, #32
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005ae6:	e000      	b.n	8005aea <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ae8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005af2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3784      	adds	r7, #132	@ 0x84
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd90      	pop	{r4, r7, pc}
 8005afe:	bf00      	nop
 8005b00:	50000100 	.word	0x50000100
 8005b04:	50000300 	.word	0x50000300
 8005b08:	50000700 	.word	0x50000700
 8005b0c:	50000400 	.word	0x50000400

08005b10 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e023      	b.n	8005b6a <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fc ff3a 	bl	80029b0 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b84:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005b90:	4013      	ands	r3, r2
 8005b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ba6:	4a04      	ldr	r2, [pc, #16]	@ (8005bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	60d3      	str	r3, [r2, #12]
}
 8005bac:	bf00      	nop
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	e000ed00 	.word	0xe000ed00

08005bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bc0:	4b04      	ldr	r3, [pc, #16]	@ (8005bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	0a1b      	lsrs	r3, r3, #8
 8005bc6:	f003 0307 	and.w	r3, r3, #7
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	e000ed00 	.word	0xe000ed00

08005bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	4603      	mov	r3, r0
 8005be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	db0b      	blt.n	8005c02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	f003 021f 	and.w	r2, r3, #31
 8005bf0:	4907      	ldr	r1, [pc, #28]	@ (8005c10 <__NVIC_EnableIRQ+0x38>)
 8005bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	2001      	movs	r0, #1
 8005bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8005bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	e000e100 	.word	0xe000e100

08005c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	6039      	str	r1, [r7, #0]
 8005c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	db0a      	blt.n	8005c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	490c      	ldr	r1, [pc, #48]	@ (8005c60 <__NVIC_SetPriority+0x4c>)
 8005c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c32:	0112      	lsls	r2, r2, #4
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	440b      	add	r3, r1
 8005c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c3c:	e00a      	b.n	8005c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	4908      	ldr	r1, [pc, #32]	@ (8005c64 <__NVIC_SetPriority+0x50>)
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	3b04      	subs	r3, #4
 8005c4c:	0112      	lsls	r2, r2, #4
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	440b      	add	r3, r1
 8005c52:	761a      	strb	r2, [r3, #24]
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	e000e100 	.word	0xe000e100
 8005c64:	e000ed00 	.word	0xe000ed00

08005c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b089      	sub	sp, #36	@ 0x24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f1c3 0307 	rsb	r3, r3, #7
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	bf28      	it	cs
 8005c86:	2304      	movcs	r3, #4
 8005c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	2b06      	cmp	r3, #6
 8005c90:	d902      	bls.n	8005c98 <NVIC_EncodePriority+0x30>
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	3b03      	subs	r3, #3
 8005c96:	e000      	b.n	8005c9a <NVIC_EncodePriority+0x32>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	43da      	mvns	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	401a      	ands	r2, r3
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cb0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cba:	43d9      	mvns	r1, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cc0:	4313      	orrs	r3, r2
         );
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3724      	adds	r7, #36	@ 0x24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7ff ff4c 	bl	8005b74 <__NVIC_SetPriorityGrouping>
}
 8005cdc:	bf00      	nop
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	4603      	mov	r3, r0
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cf2:	f7ff ff63 	bl	8005bbc <__NVIC_GetPriorityGrouping>
 8005cf6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	68b9      	ldr	r1, [r7, #8]
 8005cfc:	6978      	ldr	r0, [r7, #20]
 8005cfe:	f7ff ffb3 	bl	8005c68 <NVIC_EncodePriority>
 8005d02:	4602      	mov	r2, r0
 8005d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d08:	4611      	mov	r1, r2
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff ff82 	bl	8005c14 <__NVIC_SetPriority>
}
 8005d10:	bf00      	nop
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	4603      	mov	r3, r0
 8005d20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff ff56 	bl	8005bd8 <__NVIC_EnableIRQ>
}
 8005d2c:	bf00      	nop
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e08d      	b.n	8005e62 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	4b47      	ldr	r3, [pc, #284]	@ (8005e6c <HAL_DMA_Init+0x138>)
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d80f      	bhi.n	8005d72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	4b45      	ldr	r3, [pc, #276]	@ (8005e70 <HAL_DMA_Init+0x13c>)
 8005d5a:	4413      	add	r3, r2
 8005d5c:	4a45      	ldr	r2, [pc, #276]	@ (8005e74 <HAL_DMA_Init+0x140>)
 8005d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d62:	091b      	lsrs	r3, r3, #4
 8005d64:	009a      	lsls	r2, r3, #2
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a42      	ldr	r2, [pc, #264]	@ (8005e78 <HAL_DMA_Init+0x144>)
 8005d6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005d70:	e00e      	b.n	8005d90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	4b40      	ldr	r3, [pc, #256]	@ (8005e7c <HAL_DMA_Init+0x148>)
 8005d7a:	4413      	add	r3, r2
 8005d7c:	4a3d      	ldr	r2, [pc, #244]	@ (8005e74 <HAL_DMA_Init+0x140>)
 8005d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d82:	091b      	lsrs	r3, r3, #4
 8005d84:	009a      	lsls	r2, r3, #2
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a3c      	ldr	r2, [pc, #240]	@ (8005e80 <HAL_DMA_Init+0x14c>)
 8005d8e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f9be 	bl	8006164 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005df0:	d102      	bne.n	8005df8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e0c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d010      	beq.n	8005e38 <HAL_DMA_Init+0x104>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	d80c      	bhi.n	8005e38 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f9de 	bl	80061e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e34:	605a      	str	r2, [r3, #4]
 8005e36:	e008      	b.n	8005e4a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40020407 	.word	0x40020407
 8005e70:	bffdfff8 	.word	0xbffdfff8
 8005e74:	cccccccd 	.word	0xcccccccd
 8005e78:	40020000 	.word	0x40020000
 8005e7c:	bffdfbf8 	.word	0xbffdfbf8
 8005e80:	40020400 	.word	0x40020400

08005e84 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d005      	beq.n	8005ea8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	73fb      	strb	r3, [r7, #15]
 8005ea6:	e037      	b.n	8005f18 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 020e 	bic.w	r2, r2, #14
 8005eb6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ec2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ec6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0201 	bic.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005edc:	f003 021f 	and.w	r2, r3, #31
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8005eea:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ef4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00c      	beq.n	8005f18 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f0c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f16:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b084      	sub	sp, #16
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d00d      	beq.n	8005f6a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2204      	movs	r2, #4
 8005f52:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	73fb      	strb	r3, [r7, #15]
 8005f68:	e047      	b.n	8005ffa <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 020e 	bic.w	r2, r2, #14
 8005f78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0201 	bic.w	r2, r2, #1
 8005f88:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f9e:	f003 021f 	and.w	r2, r3, #31
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8005fac:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005fb6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00c      	beq.n	8005fda <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005fd8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	4798      	blx	r3
    }
  }
  return status;
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006020:	f003 031f 	and.w	r3, r3, #31
 8006024:	2204      	movs	r2, #4
 8006026:	409a      	lsls	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4013      	ands	r3, r2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d026      	beq.n	800607e <HAL_DMA_IRQHandler+0x7a>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 0304 	and.w	r3, r3, #4
 8006036:	2b00      	cmp	r3, #0
 8006038:	d021      	beq.n	800607e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0320 	and.w	r3, r3, #32
 8006044:	2b00      	cmp	r3, #0
 8006046:	d107      	bne.n	8006058 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0204 	bic.w	r2, r2, #4
 8006056:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800605c:	f003 021f 	and.w	r2, r3, #31
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006064:	2104      	movs	r1, #4
 8006066:	fa01 f202 	lsl.w	r2, r1, r2
 800606a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006070:	2b00      	cmp	r3, #0
 8006072:	d071      	beq.n	8006158 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800607c:	e06c      	b.n	8006158 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006082:	f003 031f 	and.w	r3, r3, #31
 8006086:	2202      	movs	r2, #2
 8006088:	409a      	lsls	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4013      	ands	r3, r2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d02e      	beq.n	80060f0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d029      	beq.n	80060f0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10b      	bne.n	80060c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 020a 	bic.w	r2, r2, #10
 80060b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c6:	f003 021f 	and.w	r2, r3, #31
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ce:	2102      	movs	r1, #2
 80060d0:	fa01 f202 	lsl.w	r2, r1, r2
 80060d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d038      	beq.n	8006158 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80060ee:	e033      	b.n	8006158 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f4:	f003 031f 	and.w	r3, r3, #31
 80060f8:	2208      	movs	r2, #8
 80060fa:	409a      	lsls	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4013      	ands	r3, r2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d02a      	beq.n	800615a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d025      	beq.n	800615a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 020e 	bic.w	r2, r2, #14
 800611c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006122:	f003 021f 	and.w	r2, r3, #31
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800612a:	2101      	movs	r1, #1
 800612c:	fa01 f202 	lsl.w	r2, r1, r2
 8006130:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800614c:	2b00      	cmp	r3, #0
 800614e:	d004      	beq.n	800615a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006158:	bf00      	nop
 800615a:	bf00      	nop
}
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	461a      	mov	r2, r3
 8006172:	4b16      	ldr	r3, [pc, #88]	@ (80061cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006174:	429a      	cmp	r2, r3
 8006176:	d802      	bhi.n	800617e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006178:	4b15      	ldr	r3, [pc, #84]	@ (80061d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	e001      	b.n	8006182 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800617e:	4b15      	ldr	r3, [pc, #84]	@ (80061d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006180:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	3b08      	subs	r3, #8
 800618e:	4a12      	ldr	r2, [pc, #72]	@ (80061d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006190:	fba2 2303 	umull	r2, r3, r2, r3
 8006194:	091b      	lsrs	r3, r3, #4
 8006196:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800619c:	089b      	lsrs	r3, r3, #2
 800619e:	009a      	lsls	r2, r3, #2
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	4413      	add	r3, r2
 80061a4:	461a      	mov	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a0b      	ldr	r2, [pc, #44]	@ (80061dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80061ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f003 031f 	and.w	r3, r3, #31
 80061b6:	2201      	movs	r2, #1
 80061b8:	409a      	lsls	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80061be:	bf00      	nop
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40020407 	.word	0x40020407
 80061d0:	40020800 	.word	0x40020800
 80061d4:	40020820 	.word	0x40020820
 80061d8:	cccccccd 	.word	0xcccccccd
 80061dc:	40020880 	.word	0x40020880

080061e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	461a      	mov	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a08      	ldr	r2, [pc, #32]	@ (8006224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006202:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3b01      	subs	r3, #1
 8006208:	f003 031f 	and.w	r3, r3, #31
 800620c:	2201      	movs	r2, #1
 800620e:	409a      	lsls	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006214:	bf00      	nop
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	1000823f 	.word	0x1000823f
 8006224:	40020940 	.word	0x40020940

08006228 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e033      	b.n	80062a2 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fc fbce 	bl	80029f0 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f854 	bl	8006308 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f822 	bl	80062aa <FMAC_Reset>
 8006266:	4603      	mov	r3, r0
 8006268:	2b01      	cmp	r3, #1
 800626a:	d10c      	bne.n	8006286 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006270:	f043 0210 	orr.w	r2, r3, #16
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	22a0      	movs	r2, #160	@ 0xa0
 800627c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	73fb      	strb	r3, [r7, #15]
 8006284:	e008      	b.n	8006298 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2220      	movs	r2, #32
 8006290:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062b2:	f7fe fb1d 	bl	80048f0 <HAL_GetTick>
 80062b6:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80062c6:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80062c8:	e00f      	b.n	80062ea <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80062ca:	f7fe fb11 	bl	80048f0 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80062d8:	d907      	bls.n	80062ea <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e00a      	b.n	8006300 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1e8      	bne.n	80062ca <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f807 	bl	8006324 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f81b 	bl	8006352 <FMAC_ResetOutputStateAndDataPointers>
}
 800631c:	bf00      	nop
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2220      	movs	r2, #32
 8006370:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006380:	b480      	push	{r7}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800638e:	e15a      	b.n	8006646 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	2101      	movs	r1, #1
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	fa01 f303 	lsl.w	r3, r1, r3
 800639c:	4013      	ands	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 814c 	beq.w	8006640 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f003 0303 	and.w	r3, r3, #3
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d005      	beq.n	80063c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d130      	bne.n	8006422 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	2203      	movs	r2, #3
 80063cc:	fa02 f303 	lsl.w	r3, r2, r3
 80063d0:	43db      	mvns	r3, r3
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	4013      	ands	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	fa02 f303 	lsl.w	r3, r2, r3
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063f6:	2201      	movs	r2, #1
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	fa02 f303 	lsl.w	r3, r2, r3
 80063fe:	43db      	mvns	r3, r3
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4013      	ands	r3, r2
 8006404:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	091b      	lsrs	r3, r3, #4
 800640c:	f003 0201 	and.w	r2, r3, #1
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f003 0303 	and.w	r3, r3, #3
 800642a:	2b03      	cmp	r3, #3
 800642c:	d017      	beq.n	800645e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	2203      	movs	r2, #3
 800643a:	fa02 f303 	lsl.w	r3, r2, r3
 800643e:	43db      	mvns	r3, r3
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4013      	ands	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	689a      	ldr	r2, [r3, #8]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	fa02 f303 	lsl.w	r3, r2, r3
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	2b02      	cmp	r3, #2
 8006468:	d123      	bne.n	80064b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	08da      	lsrs	r2, r3, #3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3208      	adds	r2, #8
 8006472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006476:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	220f      	movs	r2, #15
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	43db      	mvns	r3, r3
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4013      	ands	r3, r2
 800648c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	691a      	ldr	r2, [r3, #16]
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f003 0307 	and.w	r3, r3, #7
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	fa02 f303 	lsl.w	r3, r2, r3
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	08da      	lsrs	r2, r3, #3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3208      	adds	r2, #8
 80064ac:	6939      	ldr	r1, [r7, #16]
 80064ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	2203      	movs	r2, #3
 80064be:	fa02 f303 	lsl.w	r3, r2, r3
 80064c2:	43db      	mvns	r3, r3
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4013      	ands	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f003 0203 	and.w	r2, r3, #3
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	fa02 f303 	lsl.w	r3, r2, r3
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80a6 	beq.w	8006640 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064f4:	4b5b      	ldr	r3, [pc, #364]	@ (8006664 <HAL_GPIO_Init+0x2e4>)
 80064f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064f8:	4a5a      	ldr	r2, [pc, #360]	@ (8006664 <HAL_GPIO_Init+0x2e4>)
 80064fa:	f043 0301 	orr.w	r3, r3, #1
 80064fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8006500:	4b58      	ldr	r3, [pc, #352]	@ (8006664 <HAL_GPIO_Init+0x2e4>)
 8006502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	60bb      	str	r3, [r7, #8]
 800650a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800650c:	4a56      	ldr	r2, [pc, #344]	@ (8006668 <HAL_GPIO_Init+0x2e8>)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	089b      	lsrs	r3, r3, #2
 8006512:	3302      	adds	r3, #2
 8006514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006518:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f003 0303 	and.w	r3, r3, #3
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	220f      	movs	r2, #15
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	43db      	mvns	r3, r3
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4013      	ands	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006536:	d01f      	beq.n	8006578 <HAL_GPIO_Init+0x1f8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a4c      	ldr	r2, [pc, #304]	@ (800666c <HAL_GPIO_Init+0x2ec>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d019      	beq.n	8006574 <HAL_GPIO_Init+0x1f4>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a4b      	ldr	r2, [pc, #300]	@ (8006670 <HAL_GPIO_Init+0x2f0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d013      	beq.n	8006570 <HAL_GPIO_Init+0x1f0>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a4a      	ldr	r2, [pc, #296]	@ (8006674 <HAL_GPIO_Init+0x2f4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00d      	beq.n	800656c <HAL_GPIO_Init+0x1ec>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a49      	ldr	r2, [pc, #292]	@ (8006678 <HAL_GPIO_Init+0x2f8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d007      	beq.n	8006568 <HAL_GPIO_Init+0x1e8>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a48      	ldr	r2, [pc, #288]	@ (800667c <HAL_GPIO_Init+0x2fc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d101      	bne.n	8006564 <HAL_GPIO_Init+0x1e4>
 8006560:	2305      	movs	r3, #5
 8006562:	e00a      	b.n	800657a <HAL_GPIO_Init+0x1fa>
 8006564:	2306      	movs	r3, #6
 8006566:	e008      	b.n	800657a <HAL_GPIO_Init+0x1fa>
 8006568:	2304      	movs	r3, #4
 800656a:	e006      	b.n	800657a <HAL_GPIO_Init+0x1fa>
 800656c:	2303      	movs	r3, #3
 800656e:	e004      	b.n	800657a <HAL_GPIO_Init+0x1fa>
 8006570:	2302      	movs	r3, #2
 8006572:	e002      	b.n	800657a <HAL_GPIO_Init+0x1fa>
 8006574:	2301      	movs	r3, #1
 8006576:	e000      	b.n	800657a <HAL_GPIO_Init+0x1fa>
 8006578:	2300      	movs	r3, #0
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	f002 0203 	and.w	r2, r2, #3
 8006580:	0092      	lsls	r2, r2, #2
 8006582:	4093      	lsls	r3, r2
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800658a:	4937      	ldr	r1, [pc, #220]	@ (8006668 <HAL_GPIO_Init+0x2e8>)
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	089b      	lsrs	r3, r3, #2
 8006590:	3302      	adds	r3, #2
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006598:	4b39      	ldr	r3, [pc, #228]	@ (8006680 <HAL_GPIO_Init+0x300>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	43db      	mvns	r3, r3
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4013      	ands	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80065bc:	4a30      	ldr	r2, [pc, #192]	@ (8006680 <HAL_GPIO_Init+0x300>)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80065c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006680 <HAL_GPIO_Init+0x300>)
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	43db      	mvns	r3, r3
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4013      	ands	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80065e6:	4a26      	ldr	r2, [pc, #152]	@ (8006680 <HAL_GPIO_Init+0x300>)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80065ec:	4b24      	ldr	r3, [pc, #144]	@ (8006680 <HAL_GPIO_Init+0x300>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	43db      	mvns	r3, r3
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4013      	ands	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d003      	beq.n	8006610 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4313      	orrs	r3, r2
 800660e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006610:	4a1b      	ldr	r2, [pc, #108]	@ (8006680 <HAL_GPIO_Init+0x300>)
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006616:	4b1a      	ldr	r3, [pc, #104]	@ (8006680 <HAL_GPIO_Init+0x300>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	43db      	mvns	r3, r3
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4013      	ands	r3, r2
 8006624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800663a:	4a11      	ldr	r2, [pc, #68]	@ (8006680 <HAL_GPIO_Init+0x300>)
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	3301      	adds	r3, #1
 8006644:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	fa22 f303 	lsr.w	r3, r2, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	f47f ae9d 	bne.w	8006390 <HAL_GPIO_Init+0x10>
  }
}
 8006656:	bf00      	nop
 8006658:	bf00      	nop
 800665a:	371c      	adds	r7, #28
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	40021000 	.word	0x40021000
 8006668:	40010000 	.word	0x40010000
 800666c:	48000400 	.word	0x48000400
 8006670:	48000800 	.word	0x48000800
 8006674:	48000c00 	.word	0x48000c00
 8006678:	48001000 	.word	0x48001000
 800667c:	48001400 	.word	0x48001400
 8006680:	40010400 	.word	0x40010400

08006684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	887b      	ldrh	r3, [r7, #2]
 8006696:	4013      	ands	r3, r2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800669c:	2301      	movs	r3, #1
 800669e:	73fb      	strb	r3, [r7, #15]
 80066a0:	e001      	b.n	80066a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80066a2:	2300      	movs	r3, #0
 80066a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	807b      	strh	r3, [r7, #2]
 80066c0:	4613      	mov	r3, r2
 80066c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80066c4:	787b      	ldrb	r3, [r7, #1]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80066ca:	887a      	ldrh	r2, [r7, #2]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80066d0:	e002      	b.n	80066d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80066d2:	887a      	ldrh	r2, [r7, #2]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e08d      	b.n	8006812 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7fc f990 	bl	8002a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2224      	movs	r2, #36	@ 0x24
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0201 	bic.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006734:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006744:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d107      	bne.n	800675e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800675a:	609a      	str	r2, [r3, #8]
 800675c:	e006      	b.n	800676c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800676a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	2b02      	cmp	r3, #2
 8006772:	d108      	bne.n	8006786 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006782:	605a      	str	r2, [r3, #4]
 8006784:	e007      	b.n	8006796 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006794:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6812      	ldr	r2, [r2, #0]
 80067a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80067a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80067b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691a      	ldr	r2, [r3, #16]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	69d9      	ldr	r1, [r3, #28]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a1a      	ldr	r2, [r3, #32]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0201 	orr.w	r2, r2, #1
 80067f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b088      	sub	sp, #32
 8006820:	af02      	add	r7, sp, #8
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	4608      	mov	r0, r1
 8006826:	4611      	mov	r1, r2
 8006828:	461a      	mov	r2, r3
 800682a:	4603      	mov	r3, r0
 800682c:	817b      	strh	r3, [r7, #10]
 800682e:	460b      	mov	r3, r1
 8006830:	813b      	strh	r3, [r7, #8]
 8006832:	4613      	mov	r3, r2
 8006834:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b20      	cmp	r3, #32
 8006840:	f040 80fd 	bne.w	8006a3e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <HAL_I2C_Mem_Read+0x34>
 800684a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800684c:	2b00      	cmp	r3, #0
 800684e:	d105      	bne.n	800685c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006856:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e0f1      	b.n	8006a40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006862:	2b01      	cmp	r3, #1
 8006864:	d101      	bne.n	800686a <HAL_I2C_Mem_Read+0x4e>
 8006866:	2302      	movs	r3, #2
 8006868:	e0ea      	b.n	8006a40 <HAL_I2C_Mem_Read+0x224>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006872:	f7fe f83d 	bl	80048f0 <HAL_GetTick>
 8006876:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	2319      	movs	r3, #25
 800687e:	2201      	movs	r2, #1
 8006880:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 f95b 	bl	8006b40 <I2C_WaitOnFlagUntilTimeout>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e0d5      	b.n	8006a40 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2222      	movs	r2, #34	@ 0x22
 8006898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2240      	movs	r2, #64	@ 0x40
 80068a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a3a      	ldr	r2, [r7, #32]
 80068ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80068b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068bc:	88f8      	ldrh	r0, [r7, #6]
 80068be:	893a      	ldrh	r2, [r7, #8]
 80068c0:	8979      	ldrh	r1, [r7, #10]
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	4603      	mov	r3, r0
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 f8bf 	bl	8006a50 <I2C_RequestMemoryRead>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d005      	beq.n	80068e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e0ad      	b.n	8006a40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	2bff      	cmp	r3, #255	@ 0xff
 80068ec:	d90e      	bls.n	800690c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	22ff      	movs	r2, #255	@ 0xff
 80068f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	8979      	ldrh	r1, [r7, #10]
 80068fc:	4b52      	ldr	r3, [pc, #328]	@ (8006a48 <HAL_I2C_Mem_Read+0x22c>)
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 fadf 	bl	8006ec8 <I2C_TransferConfig>
 800690a:	e00f      	b.n	800692c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006910:	b29a      	uxth	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800691a:	b2da      	uxtb	r2, r3
 800691c:	8979      	ldrh	r1, [r7, #10]
 800691e:	4b4a      	ldr	r3, [pc, #296]	@ (8006a48 <HAL_I2C_Mem_Read+0x22c>)
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 face 	bl	8006ec8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006932:	2200      	movs	r2, #0
 8006934:	2104      	movs	r1, #4
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 f902 	bl	8006b40 <I2C_WaitOnFlagUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e07c      	b.n	8006a40 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006950:	b2d2      	uxtb	r2, r2
 8006952:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800696e:	b29b      	uxth	r3, r3
 8006970:	3b01      	subs	r3, #1
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800697c:	b29b      	uxth	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d034      	beq.n	80069ec <HAL_I2C_Mem_Read+0x1d0>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006986:	2b00      	cmp	r3, #0
 8006988:	d130      	bne.n	80069ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006990:	2200      	movs	r2, #0
 8006992:	2180      	movs	r1, #128	@ 0x80
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 f8d3 	bl	8006b40 <I2C_WaitOnFlagUntilTimeout>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e04d      	b.n	8006a40 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2bff      	cmp	r3, #255	@ 0xff
 80069ac:	d90e      	bls.n	80069cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	22ff      	movs	r2, #255	@ 0xff
 80069b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	8979      	ldrh	r1, [r7, #10]
 80069bc:	2300      	movs	r3, #0
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 fa7f 	bl	8006ec8 <I2C_TransferConfig>
 80069ca:	e00f      	b.n	80069ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	8979      	ldrh	r1, [r7, #10]
 80069de:	2300      	movs	r3, #0
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 fa6e 	bl	8006ec8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d19a      	bne.n	800692c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 f940 	bl	8006c80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e01a      	b.n	8006a40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6859      	ldr	r1, [r3, #4]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a4c <HAL_I2C_Mem_Read+0x230>)
 8006a1e:	400b      	ands	r3, r1
 8006a20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e000      	b.n	8006a40 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006a3e:	2302      	movs	r3, #2
  }
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	80002400 	.word	0x80002400
 8006a4c:	fe00e800 	.word	0xfe00e800

08006a50 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	4608      	mov	r0, r1
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4603      	mov	r3, r0
 8006a60:	817b      	strh	r3, [r7, #10]
 8006a62:	460b      	mov	r3, r1
 8006a64:	813b      	strh	r3, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006a6a:	88fb      	ldrh	r3, [r7, #6]
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	8979      	ldrh	r1, [r7, #10]
 8006a70:	4b20      	ldr	r3, [pc, #128]	@ (8006af4 <I2C_RequestMemoryRead+0xa4>)
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	2300      	movs	r3, #0
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 fa26 	bl	8006ec8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a7c:	69fa      	ldr	r2, [r7, #28]
 8006a7e:	69b9      	ldr	r1, [r7, #24]
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f8b6 	bl	8006bf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e02c      	b.n	8006aea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a90:	88fb      	ldrh	r3, [r7, #6]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d105      	bne.n	8006aa2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a96:	893b      	ldrh	r3, [r7, #8]
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006aa0:	e015      	b.n	8006ace <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006aa2:	893b      	ldrh	r3, [r7, #8]
 8006aa4:	0a1b      	lsrs	r3, r3, #8
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	69b9      	ldr	r1, [r7, #24]
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f89c 	bl	8006bf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e012      	b.n	8006aea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ac4:	893b      	ldrh	r3, [r7, #8]
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2140      	movs	r1, #64	@ 0x40
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 f831 	bl	8006b40 <I2C_WaitOnFlagUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e000      	b.n	8006aea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	80002000 	.word	0x80002000

08006af8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d103      	bne.n	8006b16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2200      	movs	r2, #0
 8006b14:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d007      	beq.n	8006b34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0201 	orr.w	r2, r2, #1
 8006b32:	619a      	str	r2, [r3, #24]
  }
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	603b      	str	r3, [r7, #0]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b50:	e03b      	b.n	8006bca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 f8d6 	bl	8006d08 <I2C_IsErrorOccurred>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e041      	b.n	8006bea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b6c:	d02d      	beq.n	8006bca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b6e:	f7fd febf 	bl	80048f0 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d302      	bcc.n	8006b84 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d122      	bne.n	8006bca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	bf0c      	ite	eq
 8006b94:	2301      	moveq	r3, #1
 8006b96:	2300      	movne	r3, #0
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d113      	bne.n	8006bca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ba6:	f043 0220 	orr.w	r2, r3, #32
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e00f      	b.n	8006bea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	699a      	ldr	r2, [r3, #24]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	bf0c      	ite	eq
 8006bda:	2301      	moveq	r3, #1
 8006bdc:	2300      	movne	r3, #0
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	461a      	mov	r2, r3
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d0b4      	beq.n	8006b52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006bfe:	e033      	b.n	8006c68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f87f 	bl	8006d08 <I2C_IsErrorOccurred>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e031      	b.n	8006c78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c1a:	d025      	beq.n	8006c68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c1c:	f7fd fe68 	bl	80048f0 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d302      	bcc.n	8006c32 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d11a      	bne.n	8006c68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d013      	beq.n	8006c68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c44:	f043 0220 	orr.w	r2, r3, #32
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e007      	b.n	8006c78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d1c4      	bne.n	8006c00 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c8c:	e02f      	b.n	8006cee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 f838 	bl	8006d08 <I2C_IsErrorOccurred>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e02d      	b.n	8006cfe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ca2:	f7fd fe25 	bl	80048f0 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d302      	bcc.n	8006cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d11a      	bne.n	8006cee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	f003 0320 	and.w	r3, r3, #32
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	d013      	beq.n	8006cee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cca:	f043 0220 	orr.w	r2, r3, #32
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e007      	b.n	8006cfe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	f003 0320 	and.w	r3, r3, #32
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d1c8      	bne.n	8006c8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08a      	sub	sp, #40	@ 0x28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	f003 0310 	and.w	r3, r3, #16
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d068      	beq.n	8006e06 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2210      	movs	r2, #16
 8006d3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d3c:	e049      	b.n	8006dd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d44:	d045      	beq.n	8006dd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d46:	f7fd fdd3 	bl	80048f0 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d302      	bcc.n	8006d5c <I2C_IsErrorOccurred+0x54>
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d13a      	bne.n	8006dd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d7e:	d121      	bne.n	8006dc4 <I2C_IsErrorOccurred+0xbc>
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d86:	d01d      	beq.n	8006dc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006d88:	7cfb      	ldrb	r3, [r7, #19]
 8006d8a:	2b20      	cmp	r3, #32
 8006d8c:	d01a      	beq.n	8006dc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006d9e:	f7fd fda7 	bl	80048f0 <HAL_GetTick>
 8006da2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006da4:	e00e      	b.n	8006dc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006da6:	f7fd fda3 	bl	80048f0 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b19      	cmp	r3, #25
 8006db2:	d907      	bls.n	8006dc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	f043 0320 	orr.w	r3, r3, #32
 8006dba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006dc2:	e006      	b.n	8006dd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	f003 0320 	and.w	r3, r3, #32
 8006dce:	2b20      	cmp	r3, #32
 8006dd0:	d1e9      	bne.n	8006da6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b20      	cmp	r3, #32
 8006dde:	d003      	beq.n	8006de8 <I2C_IsErrorOccurred+0xe0>
 8006de0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d0aa      	beq.n	8006d3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006de8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d103      	bne.n	8006df8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2220      	movs	r2, #32
 8006df6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	f043 0304 	orr.w	r3, r3, #4
 8006dfe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00b      	beq.n	8006e30 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	f043 0301 	orr.w	r3, r3, #1
 8006e1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00b      	beq.n	8006e52 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	f043 0308 	orr.w	r3, r3, #8
 8006e40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006e4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00b      	beq.n	8006e74 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	f043 0302 	orr.w	r3, r3, #2
 8006e62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006e74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d01c      	beq.n	8006eb6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f7ff fe3b 	bl	8006af8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6859      	ldr	r1, [r3, #4]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec4 <I2C_IsErrorOccurred+0x1bc>)
 8006e8e:	400b      	ands	r3, r1
 8006e90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3728      	adds	r7, #40	@ 0x28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	fe00e800 	.word	0xfe00e800

08006ec8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	607b      	str	r3, [r7, #4]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	817b      	strh	r3, [r7, #10]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006eda:	897b      	ldrh	r3, [r7, #10]
 8006edc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ee0:	7a7b      	ldrb	r3, [r7, #9]
 8006ee2:	041b      	lsls	r3, r3, #16
 8006ee4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ee8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ef6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	0d5b      	lsrs	r3, r3, #21
 8006f02:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006f06:	4b08      	ldr	r3, [pc, #32]	@ (8006f28 <I2C_TransferConfig+0x60>)
 8006f08:	430b      	orrs	r3, r1
 8006f0a:	43db      	mvns	r3, r3
 8006f0c:	ea02 0103 	and.w	r1, r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006f1a:	bf00      	nop
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	03ff63ff 	.word	0x03ff63ff

08006f2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d138      	bne.n	8006fb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d101      	bne.n	8006f50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	e032      	b.n	8006fb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2224      	movs	r2, #36	@ 0x24
 8006f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0201 	bic.w	r2, r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6819      	ldr	r1, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0201 	orr.w	r2, r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e000      	b.n	8006fb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006fb4:	2302      	movs	r3, #2
  }
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b085      	sub	sp, #20
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b20      	cmp	r3, #32
 8006fd6:	d139      	bne.n	800704c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d101      	bne.n	8006fe6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	e033      	b.n	800704e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2224      	movs	r2, #36	@ 0x24
 8006ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0201 	bic.w	r2, r2, #1
 8007004:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007014:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	021b      	lsls	r3, r3, #8
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	4313      	orrs	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0201 	orr.w	r2, r2, #1
 8007036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	e000      	b.n	800704e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800704c:	2302      	movs	r3, #2
  }
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e0c0      	b.n	80071ee <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	d106      	bne.n	8007086 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f00a fda9 	bl	8011bd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2203      	movs	r2, #3
 800708a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4618      	mov	r0, r3
 8007094:	f006 ffcf 	bl	800e036 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007098:	2300      	movs	r3, #0
 800709a:	73fb      	strb	r3, [r7, #15]
 800709c:	e03e      	b.n	800711c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800709e:	7bfa      	ldrb	r2, [r7, #15]
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	4613      	mov	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	440b      	add	r3, r1
 80070ac:	3311      	adds	r3, #17
 80070ae:	2201      	movs	r2, #1
 80070b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80070b2:	7bfa      	ldrb	r2, [r7, #15]
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	00db      	lsls	r3, r3, #3
 80070be:	440b      	add	r3, r1
 80070c0:	3310      	adds	r3, #16
 80070c2:	7bfa      	ldrb	r2, [r7, #15]
 80070c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80070c6:	7bfa      	ldrb	r2, [r7, #15]
 80070c8:	6879      	ldr	r1, [r7, #4]
 80070ca:	4613      	mov	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	440b      	add	r3, r1
 80070d4:	3313      	adds	r3, #19
 80070d6:	2200      	movs	r2, #0
 80070d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80070da:	7bfa      	ldrb	r2, [r7, #15]
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	00db      	lsls	r3, r3, #3
 80070e6:	440b      	add	r3, r1
 80070e8:	3320      	adds	r3, #32
 80070ea:	2200      	movs	r2, #0
 80070ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80070ee:	7bfa      	ldrb	r2, [r7, #15]
 80070f0:	6879      	ldr	r1, [r7, #4]
 80070f2:	4613      	mov	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	00db      	lsls	r3, r3, #3
 80070fa:	440b      	add	r3, r1
 80070fc:	3324      	adds	r3, #36	@ 0x24
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	4613      	mov	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	440b      	add	r3, r1
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	3301      	adds	r3, #1
 800711a:	73fb      	strb	r3, [r7, #15]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	791b      	ldrb	r3, [r3, #4]
 8007120:	7bfa      	ldrb	r2, [r7, #15]
 8007122:	429a      	cmp	r2, r3
 8007124:	d3bb      	bcc.n	800709e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007126:	2300      	movs	r3, #0
 8007128:	73fb      	strb	r3, [r7, #15]
 800712a:	e044      	b.n	80071b6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800712c:	7bfa      	ldrb	r2, [r7, #15]
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	4613      	mov	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	440b      	add	r3, r1
 800713a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800713e:	2200      	movs	r2, #0
 8007140:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007142:	7bfa      	ldrb	r2, [r7, #15]
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	440b      	add	r3, r1
 8007150:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007154:	7bfa      	ldrb	r2, [r7, #15]
 8007156:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007158:	7bfa      	ldrb	r2, [r7, #15]
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	4613      	mov	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	440b      	add	r3, r1
 8007166:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800716a:	2200      	movs	r2, #0
 800716c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800716e:	7bfa      	ldrb	r2, [r7, #15]
 8007170:	6879      	ldr	r1, [r7, #4]
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	00db      	lsls	r3, r3, #3
 800717a:	440b      	add	r3, r1
 800717c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007184:	7bfa      	ldrb	r2, [r7, #15]
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	440b      	add	r3, r1
 8007192:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007196:	2200      	movs	r2, #0
 8007198:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800719a:	7bfa      	ldrb	r2, [r7, #15]
 800719c:	6879      	ldr	r1, [r7, #4]
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	00db      	lsls	r3, r3, #3
 80071a6:	440b      	add	r3, r1
 80071a8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	3301      	adds	r3, #1
 80071b4:	73fb      	strb	r3, [r7, #15]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	791b      	ldrb	r3, [r3, #4]
 80071ba:	7bfa      	ldrb	r2, [r7, #15]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d3b5      	bcc.n	800712c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3304      	adds	r3, #4
 80071c8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80071cc:	f006 ff4e 	bl	800e06c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	7a9b      	ldrb	r3, [r3, #10]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d102      	bne.n	80071ec <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 fcaa 	bl	8008b40 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b082      	sub	sp, #8
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007204:	2b01      	cmp	r3, #1
 8007206:	d101      	bne.n	800720c <HAL_PCD_Start+0x16>
 8007208:	2302      	movs	r3, #2
 800720a:	e012      	b.n	8007232 <HAL_PCD_Start+0x3c>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4618      	mov	r0, r3
 800721a:	f006 fef5 	bl	800e008 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f008 fae5 	bl	800f7f2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b082      	sub	sp, #8
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_PCD_Stop+0x16>
 800724c:	2302      	movs	r3, #2
 800724e:	e012      	b.n	8007276 <HAL_PCD_Stop+0x3c>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4618      	mov	r0, r3
 800725e:	f006 feea 	bl	800e036 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4618      	mov	r0, r3
 8007268:	f008 fada 	bl	800f820 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4618      	mov	r0, r3
 800728c:	f008 fadd 	bl	800f84a <USB_ReadInterrupts>
 8007290:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d003      	beq.n	80072a4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 faa6 	bl	80077ee <PCD_EP_ISR_Handler>

    return;
 80072a2:	e110      	b.n	80074c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d013      	beq.n	80072d6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072c0:	b292      	uxth	r2, r2
 80072c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f00a fd17 	bl	8011cfa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80072cc:	2100      	movs	r1, #0
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f8fc 	bl	80074cc <HAL_PCD_SetAddress>

    return;
 80072d4:	e0f7      	b.n	80074c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00c      	beq.n	80072fa <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072f2:	b292      	uxth	r2, r2
 80072f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80072f8:	e0e5      	b.n	80074c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00c      	beq.n	800731e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800730c:	b29a      	uxth	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007316:	b292      	uxth	r2, r2
 8007318:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800731c:	e0d3      	b.n	80074c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d034      	beq.n	8007392 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007330:	b29a      	uxth	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 0204 	bic.w	r2, r2, #4
 800733a:	b292      	uxth	r2, r2
 800733c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007348:	b29a      	uxth	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0208 	bic.w	r2, r2, #8
 8007352:	b292      	uxth	r2, r2
 8007354:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800735e:	2b01      	cmp	r3, #1
 8007360:	d107      	bne.n	8007372 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800736a:	2100      	movs	r1, #0
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f00a fef1 	bl	8012154 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f00a fcfa 	bl	8011d6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007380:	b29a      	uxth	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800738a:	b292      	uxth	r2, r2
 800738c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007390:	e099      	b.n	80074c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007398:	2b00      	cmp	r3, #0
 800739a:	d027      	beq.n	80073ec <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f042 0208 	orr.w	r2, r2, #8
 80073ae:	b292      	uxth	r2, r2
 80073b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80073bc:	b29a      	uxth	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073c6:	b292      	uxth	r2, r2
 80073c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0204 	orr.w	r2, r2, #4
 80073de:	b292      	uxth	r2, r2
 80073e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f00a fca7 	bl	8011d38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80073ea:	e06c      	b.n	80074c6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d040      	beq.n	8007478 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80073fe:	b29a      	uxth	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007408:	b292      	uxth	r2, r2
 800740a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8007414:	2b00      	cmp	r3, #0
 8007416:	d12b      	bne.n	8007470 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007420:	b29a      	uxth	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f042 0204 	orr.w	r2, r2, #4
 800742a:	b292      	uxth	r2, r2
 800742c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007438:	b29a      	uxth	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0208 	orr.w	r2, r2, #8
 8007442:	b292      	uxth	r2, r2
 8007444:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007458:	b29b      	uxth	r3, r3
 800745a:	089b      	lsrs	r3, r3, #2
 800745c:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007466:	2101      	movs	r1, #1
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f00a fe73 	bl	8012154 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800746e:	e02a      	b.n	80074c6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f00a fc61 	bl	8011d38 <HAL_PCD_SuspendCallback>
    return;
 8007476:	e026      	b.n	80074c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00f      	beq.n	80074a2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800748a:	b29a      	uxth	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007494:	b292      	uxth	r2, r2
 8007496:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f00a fc1f 	bl	8011cde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80074a0:	e011      	b.n	80074c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00c      	beq.n	80074c6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074be:	b292      	uxth	r2, r2
 80074c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80074c4:	bf00      	nop
  }
}
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d101      	bne.n	80074e6 <HAL_PCD_SetAddress+0x1a>
 80074e2:	2302      	movs	r3, #2
 80074e4:	e012      	b.n	800750c <HAL_PCD_SetAddress+0x40>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	78fa      	ldrb	r2, [r7, #3]
 80074f2:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	78fa      	ldrb	r2, [r7, #3]
 80074fa:	4611      	mov	r1, r2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f008 f964 	bl	800f7ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	4608      	mov	r0, r1
 800751e:	4611      	mov	r1, r2
 8007520:	461a      	mov	r2, r3
 8007522:	4603      	mov	r3, r0
 8007524:	70fb      	strb	r3, [r7, #3]
 8007526:	460b      	mov	r3, r1
 8007528:	803b      	strh	r3, [r7, #0]
 800752a:	4613      	mov	r3, r2
 800752c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007532:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007536:	2b00      	cmp	r3, #0
 8007538:	da0e      	bge.n	8007558 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800753a:	78fb      	ldrb	r3, [r7, #3]
 800753c:	f003 0207 	and.w	r2, r3, #7
 8007540:	4613      	mov	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	3310      	adds	r3, #16
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	4413      	add	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2201      	movs	r2, #1
 8007554:	705a      	strb	r2, [r3, #1]
 8007556:	e00e      	b.n	8007576 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007558:	78fb      	ldrb	r3, [r7, #3]
 800755a:	f003 0207 	and.w	r2, r3, #7
 800755e:	4613      	mov	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	00db      	lsls	r3, r3, #3
 8007566:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	4413      	add	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007576:	78fb      	ldrb	r3, [r7, #3]
 8007578:	f003 0307 	and.w	r3, r3, #7
 800757c:	b2da      	uxtb	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007582:	883b      	ldrh	r3, [r7, #0]
 8007584:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	78ba      	ldrb	r2, [r7, #2]
 8007590:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007592:	78bb      	ldrb	r3, [r7, #2]
 8007594:	2b02      	cmp	r3, #2
 8007596:	d102      	bne.n	800759e <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d101      	bne.n	80075ac <HAL_PCD_EP_Open+0x98>
 80075a8:	2302      	movs	r3, #2
 80075aa:	e00e      	b.n	80075ca <HAL_PCD_EP_Open+0xb6>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68f9      	ldr	r1, [r7, #12]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f006 fd74 	bl	800e0a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80075c8:	7afb      	ldrb	r3, [r7, #11]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b086      	sub	sp, #24
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	60f8      	str	r0, [r7, #12]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	603b      	str	r3, [r7, #0]
 80075de:	460b      	mov	r3, r1
 80075e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075e2:	7afb      	ldrb	r3, [r7, #11]
 80075e4:	f003 0207 	and.w	r2, r3, #7
 80075e8:	4613      	mov	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2200      	movs	r2, #0
 800760a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	2200      	movs	r2, #0
 8007610:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007612:	7afb      	ldrb	r3, [r7, #11]
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	b2da      	uxtb	r2, r3
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6979      	ldr	r1, [r7, #20]
 8007624:	4618      	mov	r0, r3
 8007626:	f007 fa27 	bl	800ea78 <USB_EPStartXfer>

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3718      	adds	r7, #24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	607a      	str	r2, [r7, #4]
 800763e:	603b      	str	r3, [r7, #0]
 8007640:	460b      	mov	r3, r1
 8007642:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007644:	7afb      	ldrb	r3, [r7, #11]
 8007646:	f003 0207 	and.w	r2, r3, #7
 800764a:	4613      	mov	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	00db      	lsls	r3, r3, #3
 8007652:	3310      	adds	r3, #16
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	2200      	movs	r2, #0
 8007678:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	2201      	movs	r2, #1
 800767e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007680:	7afb      	ldrb	r3, [r7, #11]
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	b2da      	uxtb	r2, r3
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6979      	ldr	r1, [r7, #20]
 8007692:	4618      	mov	r0, r3
 8007694:	f007 f9f0 	bl	800ea78 <USB_EPStartXfer>

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	7912      	ldrb	r2, [r2, #4]
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d901      	bls.n	80076c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e03e      	b.n	800773e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80076c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	da0e      	bge.n	80076e6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	f003 0207 	and.w	r2, r3, #7
 80076ce:	4613      	mov	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	3310      	adds	r3, #16
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	4413      	add	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	705a      	strb	r2, [r3, #1]
 80076e4:	e00c      	b.n	8007700 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80076e6:	78fa      	ldrb	r2, [r7, #3]
 80076e8:	4613      	mov	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	4413      	add	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2201      	movs	r2, #1
 8007704:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007706:	78fb      	ldrb	r3, [r7, #3]
 8007708:	f003 0307 	and.w	r3, r3, #7
 800770c:	b2da      	uxtb	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007718:	2b01      	cmp	r3, #1
 800771a:	d101      	bne.n	8007720 <HAL_PCD_EP_SetStall+0x7e>
 800771c:	2302      	movs	r3, #2
 800771e:	e00e      	b.n	800773e <HAL_PCD_EP_SetStall+0x9c>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68f9      	ldr	r1, [r7, #12]
 800772e:	4618      	mov	r0, r3
 8007730:	f007 ff51 	bl	800f5d6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	460b      	mov	r3, r1
 8007750:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007752:	78fb      	ldrb	r3, [r7, #3]
 8007754:	f003 030f 	and.w	r3, r3, #15
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	7912      	ldrb	r2, [r2, #4]
 800775c:	4293      	cmp	r3, r2
 800775e:	d901      	bls.n	8007764 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e040      	b.n	80077e6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007768:	2b00      	cmp	r3, #0
 800776a:	da0e      	bge.n	800778a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	f003 0207 	and.w	r2, r3, #7
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	00db      	lsls	r3, r3, #3
 800777a:	3310      	adds	r3, #16
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	4413      	add	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	705a      	strb	r2, [r3, #1]
 8007788:	e00e      	b.n	80077a8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800778a:	78fb      	ldrb	r3, [r7, #3]
 800778c:	f003 0207 	and.w	r2, r3, #7
 8007790:	4613      	mov	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	00db      	lsls	r3, r3, #3
 8007798:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	4413      	add	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077ae:	78fb      	ldrb	r3, [r7, #3]
 80077b0:	f003 0307 	and.w	r3, r3, #7
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <HAL_PCD_EP_ClrStall+0x82>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e00e      	b.n	80077e6 <HAL_PCD_EP_ClrStall+0xa0>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68f9      	ldr	r1, [r7, #12]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f007 ff4e 	bl	800f678 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b092      	sub	sp, #72	@ 0x48
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80077f6:	e333      	b.n	8007e60 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007800:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007802:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007804:	b2db      	uxtb	r3, r3
 8007806:	f003 030f 	and.w	r3, r3, #15
 800780a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800780e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007812:	2b00      	cmp	r3, #0
 8007814:	f040 8108 	bne.w	8007a28 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007818:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800781a:	f003 0310 	and.w	r3, r3, #16
 800781e:	2b00      	cmp	r3, #0
 8007820:	d14c      	bne.n	80078bc <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	881b      	ldrh	r3, [r3, #0]
 8007828:	b29b      	uxth	r3, r3
 800782a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800782e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007832:	813b      	strh	r3, [r7, #8]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	893b      	ldrh	r3, [r7, #8]
 800783a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800783e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007842:	b29b      	uxth	r3, r3
 8007844:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	3310      	adds	r3, #16
 800784a:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007854:	b29b      	uxth	r3, r3
 8007856:	461a      	mov	r2, r3
 8007858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	4413      	add	r3, r2
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	6812      	ldr	r2, [r2, #0]
 8007864:	4413      	add	r3, r2
 8007866:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007872:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007876:	695a      	ldr	r2, [r3, #20]
 8007878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	441a      	add	r2, r3
 800787e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007880:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007882:	2100      	movs	r1, #0
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f00a fa10 	bl	8011caa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	7b1b      	ldrb	r3, [r3, #12]
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 82e5 	beq.w	8007e60 <PCD_EP_ISR_Handler+0x672>
 8007896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	2b00      	cmp	r3, #0
 800789c:	f040 82e0 	bne.w	8007e60 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	7b1b      	ldrb	r3, [r3, #12]
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	731a      	strb	r2, [r3, #12]
 80078ba:	e2d1      	b.n	8007e60 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078c2:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80078cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80078ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d032      	beq.n	800793c <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078de:	b29b      	uxth	r3, r3
 80078e0:	461a      	mov	r2, r3
 80078e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	4413      	add	r3, r2
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6812      	ldr	r2, [r2, #0]
 80078ee:	4413      	add	r3, r2
 80078f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80078fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078fc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6818      	ldr	r0, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800790a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800790c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800790e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007910:	b29b      	uxth	r3, r3
 8007912:	f007 ffec 	bl	800f8ee <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29a      	uxth	r2, r3
 800791e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007922:	4013      	ands	r3, r2
 8007924:	817b      	strh	r3, [r7, #10]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	897a      	ldrh	r2, [r7, #10]
 800792c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007930:	b292      	uxth	r2, r2
 8007932:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f00a f98b 	bl	8011c50 <HAL_PCD_SetupStageCallback>
 800793a:	e291      	b.n	8007e60 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800793c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8007940:	2b00      	cmp	r3, #0
 8007942:	f280 828d 	bge.w	8007e60 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b29a      	uxth	r2, r3
 800794e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007952:	4013      	ands	r3, r2
 8007954:	81fb      	strh	r3, [r7, #14]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	89fa      	ldrh	r2, [r7, #14]
 800795c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007960:	b292      	uxth	r2, r2
 8007962:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800796c:	b29b      	uxth	r3, r3
 800796e:	461a      	mov	r2, r3
 8007970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	00db      	lsls	r3, r3, #3
 8007976:	4413      	add	r3, r2
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6812      	ldr	r2, [r2, #0]
 800797c:	4413      	add	r3, r2
 800797e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800798a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800798c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d019      	beq.n	80079c8 <PCD_EP_ISR_Handler+0x1da>
 8007994:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d015      	beq.n	80079c8 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6818      	ldr	r0, [r3, #0]
 80079a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079a2:	6959      	ldr	r1, [r3, #20]
 80079a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079a6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80079a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079aa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	f007 ff9e 	bl	800f8ee <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80079b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079b4:	695a      	ldr	r2, [r3, #20]
 80079b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	441a      	add	r2, r3
 80079bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079be:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80079c0:	2100      	movs	r1, #0
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f00a f956 	bl	8011c74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80079d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80079d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f040 8242 	bne.w	8007e60 <PCD_EP_ISR_Handler+0x672>
 80079dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80079de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80079e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80079e6:	f000 823b 	beq.w	8007e60 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079fa:	81bb      	strh	r3, [r7, #12]
 80079fc:	89bb      	ldrh	r3, [r7, #12]
 80079fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a02:	81bb      	strh	r3, [r7, #12]
 8007a04:	89bb      	ldrh	r3, [r7, #12]
 8007a06:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a0a:	81bb      	strh	r3, [r7, #12]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	89bb      	ldrh	r3, [r7, #12]
 8007a12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	8013      	strh	r3, [r2, #0]
 8007a26:	e21b      	b.n	8007e60 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4413      	add	r3, r2
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007a3a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f280 80f1 	bge.w	8007c26 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007a6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007a72:	b292      	uxth	r2, r2
 8007a74:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007a76:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	00db      	lsls	r3, r3, #3
 8007a82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	4413      	add	r3, r2
 8007a8a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007a8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a8e:	7b1b      	ldrb	r3, [r3, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d123      	bne.n	8007adc <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	00db      	lsls	r3, r3, #3
 8007aa6:	4413      	add	r3, r2
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	6812      	ldr	r2, [r2, #0]
 8007aac:	4413      	add	r3, r2
 8007aae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ab8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8007abc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 808b 	beq.w	8007bdc <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6818      	ldr	r0, [r3, #0]
 8007aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007acc:	6959      	ldr	r1, [r3, #20]
 8007ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ad0:	88da      	ldrh	r2, [r3, #6]
 8007ad2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007ad6:	f007 ff0a 	bl	800f8ee <USB_ReadPMA>
 8007ada:	e07f      	b.n	8007bdc <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ade:	78db      	ldrb	r3, [r3, #3]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d109      	bne.n	8007af8 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007ae4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f9c6 	bl	8007e7c <HAL_PCD_EP_DB_Receive>
 8007af0:	4603      	mov	r3, r0
 8007af2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007af6:	e071      	b.n	8007bdc <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b12:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	441a      	add	r2, r3
 8007b22:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007b24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d022      	beq.n	8007b98 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	00db      	lsls	r3, r3, #3
 8007b64:	4413      	add	r3, r2
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	6812      	ldr	r2, [r2, #0]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b76:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8007b7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d02c      	beq.n	8007bdc <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6818      	ldr	r0, [r3, #0]
 8007b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b88:	6959      	ldr	r1, [r3, #20]
 8007b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b8c:	891a      	ldrh	r2, [r3, #8]
 8007b8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007b92:	f007 feac 	bl	800f8ee <USB_ReadPMA>
 8007b96:	e021      	b.n	8007bdc <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	4413      	add	r3, r2
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	6812      	ldr	r2, [r2, #0]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bbc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8007bc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d009      	beq.n	8007bdc <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6818      	ldr	r0, [r3, #0]
 8007bcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bce:	6959      	ldr	r1, [r3, #20]
 8007bd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bd2:	895a      	ldrh	r2, [r3, #10]
 8007bd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007bd8:	f007 fe89 	bl	800f8ee <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bde:	69da      	ldr	r2, [r3, #28]
 8007be0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007be4:	441a      	add	r2, r3
 8007be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007be8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bec:	695a      	ldr	r2, [r3, #20]
 8007bee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007bf2:	441a      	add	r2, r3
 8007bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bf6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d005      	beq.n	8007c0c <PCD_EP_ISR_Handler+0x41e>
 8007c00:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d206      	bcs.n	8007c1a <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f00a f82e 	bl	8011c74 <HAL_PCD_DataOutStageCallback>
 8007c18:	e005      	b.n	8007c26 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c20:	4618      	mov	r0, r3
 8007c22:	f006 ff29 	bl	800ea78 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007c26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 8117 	beq.w	8007e60 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8007c32:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	00db      	lsls	r3, r3, #3
 8007c3e:	3310      	adds	r3, #16
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	4413      	add	r3, r2
 8007c44:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c60:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	441a      	add	r2, r3
 8007c70:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c80:	78db      	ldrb	r3, [r3, #3]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	f040 80a1 	bne.w	8007dca <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8007c88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c90:	7b1b      	ldrb	r3, [r3, #12]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 8092 	beq.w	8007dbc <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007c98:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d046      	beq.n	8007d30 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ca4:	785b      	ldrb	r3, [r3, #1]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d126      	bne.n	8007cf8 <PCD_EP_ISR_Handler+0x50a>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	617b      	str	r3, [r7, #20]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	461a      	mov	r2, r3
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	00da      	lsls	r2, r3, #3
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007cd0:	613b      	str	r3, [r7, #16]
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	801a      	strh	r2, [r3, #0]
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	801a      	strh	r2, [r3, #0]
 8007cf6:	e061      	b.n	8007dbc <PCD_EP_ISR_Handler+0x5ce>
 8007cf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cfa:	785b      	ldrb	r3, [r3, #1]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d15d      	bne.n	8007dbc <PCD_EP_ISR_Handler+0x5ce>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	61fb      	str	r3, [r7, #28]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	461a      	mov	r2, r3
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	4413      	add	r3, r2
 8007d16:	61fb      	str	r3, [r7, #28]
 8007d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	00da      	lsls	r2, r3, #3
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	4413      	add	r3, r2
 8007d22:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d26:	61bb      	str	r3, [r7, #24]
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	801a      	strh	r2, [r3, #0]
 8007d2e:	e045      	b.n	8007dbc <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d38:	785b      	ldrb	r3, [r3, #1]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d126      	bne.n	8007d8c <PCD_EP_ISR_Handler+0x59e>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	461a      	mov	r2, r3
 8007d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d52:	4413      	add	r3, r2
 8007d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	00da      	lsls	r2, r3, #3
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5e:	4413      	add	r3, r2
 8007d60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d64:	623b      	str	r3, [r7, #32]
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	801a      	strh	r2, [r3, #0]
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	801a      	strh	r2, [r3, #0]
 8007d8a:	e017      	b.n	8007dbc <PCD_EP_ISR_Handler+0x5ce>
 8007d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d8e:	785b      	ldrb	r3, [r3, #1]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d113      	bne.n	8007dbc <PCD_EP_ISR_Handler+0x5ce>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	461a      	mov	r2, r3
 8007da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da2:	4413      	add	r3, r2
 8007da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	00da      	lsls	r2, r3, #3
 8007dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dae:	4413      	add	r3, r2
 8007db0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db8:	2200      	movs	r2, #0
 8007dba:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007dbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f009 ff71 	bl	8011caa <HAL_PCD_DataInStageCallback>
 8007dc8:	e04a      	b.n	8007e60 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007dca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d13f      	bne.n	8007e54 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	461a      	mov	r2, r3
 8007de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	00db      	lsls	r3, r3, #3
 8007de6:	4413      	add	r3, r2
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	6812      	ldr	r2, [r2, #0]
 8007dec:	4413      	add	r3, r2
 8007dee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007df8:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8007dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dfc:	699a      	ldr	r2, [r3, #24]
 8007dfe:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d906      	bls.n	8007e12 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8007e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e06:	699a      	ldr	r2, [r3, #24]
 8007e08:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007e0a:	1ad2      	subs	r2, r2, r3
 8007e0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e0e:	619a      	str	r2, [r3, #24]
 8007e10:	e002      	b.n	8007e18 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8007e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e14:	2200      	movs	r2, #0
 8007e16:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007e18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d106      	bne.n	8007e2e <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007e20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	4619      	mov	r1, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f009 ff3f 	bl	8011caa <HAL_PCD_DataInStageCallback>
 8007e2c:	e018      	b.n	8007e60 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e30:	695a      	ldr	r2, [r3, #20]
 8007e32:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007e34:	441a      	add	r2, r3
 8007e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e38:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e3c:	69da      	ldr	r2, [r3, #28]
 8007e3e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007e40:	441a      	add	r2, r3
 8007e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e44:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f006 fe13 	bl	800ea78 <USB_EPStartXfer>
 8007e52:	e005      	b.n	8007e60 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007e54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e56:	461a      	mov	r2, r3
 8007e58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f917 	bl	800808e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	b21b      	sxth	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f6ff acc3 	blt.w	80077f8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3748      	adds	r7, #72	@ 0x48
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	4613      	mov	r3, r2
 8007e88:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007e8a:	88fb      	ldrh	r3, [r7, #6]
 8007e8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d07c      	beq.n	8007f8e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	00db      	lsls	r3, r3, #3
 8007ea6:	4413      	add	r3, r2
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	6812      	ldr	r2, [r2, #0]
 8007eac:	4413      	add	r3, r2
 8007eae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eb8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	8b7b      	ldrh	r3, [r7, #26]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d306      	bcc.n	8007ed2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	699a      	ldr	r2, [r3, #24]
 8007ec8:	8b7b      	ldrh	r3, [r7, #26]
 8007eca:	1ad2      	subs	r2, r2, r3
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	619a      	str	r2, [r3, #24]
 8007ed0:	e002      	b.n	8007ed8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d123      	bne.n	8007f28 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	881b      	ldrh	r3, [r3, #0]
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007efa:	833b      	strh	r3, [r7, #24]
 8007efc:	8b3b      	ldrh	r3, [r7, #24]
 8007efe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f02:	833b      	strh	r3, [r7, #24]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	441a      	add	r2, r3
 8007f12:	8b3b      	ldrh	r3, [r7, #24]
 8007f14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007f28:	88fb      	ldrh	r3, [r7, #6]
 8007f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d01f      	beq.n	8007f72 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	881b      	ldrh	r3, [r3, #0]
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f4c:	82fb      	strh	r3, [r7, #22]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	441a      	add	r2, r3
 8007f5c:	8afb      	ldrh	r3, [r7, #22]
 8007f5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007f72:	8b7b      	ldrh	r3, [r7, #26]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 8085 	beq.w	8008084 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6818      	ldr	r0, [r3, #0]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	6959      	ldr	r1, [r3, #20]
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	891a      	ldrh	r2, [r3, #8]
 8007f86:	8b7b      	ldrh	r3, [r7, #26]
 8007f88:	f007 fcb1 	bl	800f8ee <USB_ReadPMA>
 8007f8c:	e07a      	b.n	8008084 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	461a      	mov	r2, r3
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	4413      	add	r3, r2
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	6812      	ldr	r2, [r2, #0]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fb2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	699a      	ldr	r2, [r3, #24]
 8007fb8:	8b7b      	ldrh	r3, [r7, #26]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d306      	bcc.n	8007fcc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	699a      	ldr	r2, [r3, #24]
 8007fc2:	8b7b      	ldrh	r3, [r7, #26]
 8007fc4:	1ad2      	subs	r2, r2, r3
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	619a      	str	r2, [r3, #24]
 8007fca:	e002      	b.n	8007fd2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d123      	bne.n	8008022 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ff4:	83fb      	strh	r3, [r7, #30]
 8007ff6:	8bfb      	ldrh	r3, [r7, #30]
 8007ff8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ffc:	83fb      	strh	r3, [r7, #30]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	441a      	add	r2, r3
 800800c:	8bfb      	ldrh	r3, [r7, #30]
 800800e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008012:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800801a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800801e:	b29b      	uxth	r3, r3
 8008020:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d11f      	bne.n	800806c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	461a      	mov	r2, r3
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	b29b      	uxth	r3, r3
 800803e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008046:	83bb      	strh	r3, [r7, #28]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	461a      	mov	r2, r3
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	441a      	add	r2, r3
 8008056:	8bbb      	ldrh	r3, [r7, #28]
 8008058:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800805c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008060:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008064:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008068:	b29b      	uxth	r3, r3
 800806a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800806c:	8b7b      	ldrh	r3, [r7, #26]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d008      	beq.n	8008084 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6818      	ldr	r0, [r3, #0]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	6959      	ldr	r1, [r3, #20]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	895a      	ldrh	r2, [r3, #10]
 800807e:	8b7b      	ldrh	r3, [r7, #26]
 8008080:	f007 fc35 	bl	800f8ee <USB_ReadPMA>
    }
  }

  return count;
 8008084:	8b7b      	ldrh	r3, [r7, #26]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3720      	adds	r7, #32
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b0a6      	sub	sp, #152	@ 0x98
 8008092:	af00      	add	r7, sp, #0
 8008094:	60f8      	str	r0, [r7, #12]
 8008096:	60b9      	str	r1, [r7, #8]
 8008098:	4613      	mov	r3, r2
 800809a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800809c:	88fb      	ldrh	r3, [r7, #6]
 800809e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 81f7 	beq.w	8008496 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	00db      	lsls	r3, r3, #3
 80080ba:	4413      	add	r3, r2
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	6812      	ldr	r2, [r2, #0]
 80080c0:	4413      	add	r3, r2
 80080c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080cc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	699a      	ldr	r2, [r3, #24]
 80080d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80080d8:	429a      	cmp	r2, r3
 80080da:	d907      	bls.n	80080ec <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	699a      	ldr	r2, [r3, #24]
 80080e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80080e4:	1ad2      	subs	r2, r2, r3
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	619a      	str	r2, [r3, #24]
 80080ea:	e002      	b.n	80080f2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2200      	movs	r2, #0
 80080f0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f040 80e1 	bne.w	80082be <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	785b      	ldrb	r3, [r3, #1]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d126      	bne.n	8008152 <HAL_PCD_EP_DB_Transmit+0xc4>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	633b      	str	r3, [r7, #48]	@ 0x30
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008112:	b29b      	uxth	r3, r3
 8008114:	461a      	mov	r2, r3
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	4413      	add	r3, r2
 800811a:	633b      	str	r3, [r7, #48]	@ 0x30
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	00da      	lsls	r2, r3, #3
 8008122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008124:	4413      	add	r3, r2
 8008126:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800812a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800812c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	b29b      	uxth	r3, r3
 8008132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008136:	b29a      	uxth	r2, r3
 8008138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800813a:	801a      	strh	r2, [r3, #0]
 800813c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	b29b      	uxth	r3, r3
 8008142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800814a:	b29a      	uxth	r2, r3
 800814c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800814e:	801a      	strh	r2, [r3, #0]
 8008150:	e01a      	b.n	8008188 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	785b      	ldrb	r3, [r3, #1]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d116      	bne.n	8008188 <HAL_PCD_EP_DB_Transmit+0xfa>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008168:	b29b      	uxth	r3, r3
 800816a:	461a      	mov	r2, r3
 800816c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816e:	4413      	add	r3, r2
 8008170:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	00da      	lsls	r2, r3, #3
 8008178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817a:	4413      	add	r3, r2
 800817c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008180:	637b      	str	r3, [r7, #52]	@ 0x34
 8008182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008184:	2200      	movs	r2, #0
 8008186:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	785b      	ldrb	r3, [r3, #1]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d126      	bne.n	80081e4 <HAL_PCD_EP_DB_Transmit+0x156>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	623b      	str	r3, [r7, #32]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	461a      	mov	r2, r3
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	4413      	add	r3, r2
 80081ac:	623b      	str	r3, [r7, #32]
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	00da      	lsls	r2, r3, #3
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	4413      	add	r3, r2
 80081b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80081bc:	61fb      	str	r3, [r7, #28]
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	801a      	strh	r2, [r3, #0]
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081dc:	b29a      	uxth	r2, r3
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	801a      	strh	r2, [r3, #0]
 80081e2:	e017      	b.n	8008214 <HAL_PCD_EP_DB_Transmit+0x186>
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	785b      	ldrb	r3, [r3, #1]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d113      	bne.n	8008214 <HAL_PCD_EP_DB_Transmit+0x186>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	461a      	mov	r2, r3
 80081f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fa:	4413      	add	r3, r2
 80081fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	00da      	lsls	r2, r3, #3
 8008204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008206:	4413      	add	r3, r2
 8008208:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800820c:	627b      	str	r3, [r7, #36]	@ 0x24
 800820e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008210:	2200      	movs	r2, #0
 8008212:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	78db      	ldrb	r3, [r3, #3]
 8008218:	2b02      	cmp	r3, #2
 800821a:	d123      	bne.n	8008264 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	461a      	mov	r2, r3
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	881b      	ldrh	r3, [r3, #0]
 800822c:	b29b      	uxth	r3, r3
 800822e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008232:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008236:	837b      	strh	r3, [r7, #26]
 8008238:	8b7b      	ldrh	r3, [r7, #26]
 800823a:	f083 0320 	eor.w	r3, r3, #32
 800823e:	837b      	strh	r3, [r7, #26]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	461a      	mov	r2, r3
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	441a      	add	r2, r3
 800824e:	8b7b      	ldrh	r3, [r7, #26]
 8008250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800825c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008260:	b29b      	uxth	r3, r3
 8008262:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	4619      	mov	r1, r3
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f009 fd1d 	bl	8011caa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008270:	88fb      	ldrh	r3, [r7, #6]
 8008272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d01f      	beq.n	80082ba <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	b29b      	uxth	r3, r3
 800828c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008294:	833b      	strh	r3, [r7, #24]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	441a      	add	r2, r3
 80082a4:	8b3b      	ldrh	r3, [r7, #24]
 80082a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	e31f      	b.n	80088fe <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80082be:	88fb      	ldrh	r3, [r7, #6]
 80082c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d021      	beq.n	800830c <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	461a      	mov	r2, r3
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	b29b      	uxth	r3, r3
 80082da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	441a      	add	r2, r3
 80082f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80082f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008300:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008308:	b29b      	uxth	r3, r3
 800830a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008312:	2b01      	cmp	r3, #1
 8008314:	f040 82ca 	bne.w	80088ac <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	695a      	ldr	r2, [r3, #20]
 800831c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008320:	441a      	add	r2, r3
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	69da      	ldr	r2, [r3, #28]
 800832a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800832e:	441a      	add	r2, r3
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	6a1a      	ldr	r2, [r3, #32]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	429a      	cmp	r2, r3
 800833e:	d309      	bcc.n	8008354 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	6a1a      	ldr	r2, [r3, #32]
 800834a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800834c:	1ad2      	subs	r2, r2, r3
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	621a      	str	r2, [r3, #32]
 8008352:	e015      	b.n	8008380 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	6a1b      	ldr	r3, [r3, #32]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d107      	bne.n	800836c <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800835c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008360:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800836a:	e009      	b.n	8008380 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	6a1b      	ldr	r3, [r3, #32]
 8008378:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2200      	movs	r2, #0
 800837e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	785b      	ldrb	r3, [r3, #1]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d15f      	bne.n	8008448 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	643b      	str	r3, [r7, #64]	@ 0x40
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008396:	b29b      	uxth	r3, r3
 8008398:	461a      	mov	r2, r3
 800839a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800839c:	4413      	add	r3, r2
 800839e:	643b      	str	r3, [r7, #64]	@ 0x40
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	00da      	lsls	r2, r3, #3
 80083a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083a8:	4413      	add	r3, r2
 80083aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80083ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083be:	801a      	strh	r2, [r3, #0]
 80083c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10a      	bne.n	80083dc <HAL_PCD_EP_DB_Transmit+0x34e>
 80083c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083d8:	801a      	strh	r2, [r3, #0]
 80083da:	e051      	b.n	8008480 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80083dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083de:	2b3e      	cmp	r3, #62	@ 0x3e
 80083e0:	d816      	bhi.n	8008410 <HAL_PCD_EP_DB_Transmit+0x382>
 80083e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083e4:	085b      	lsrs	r3, r3, #1
 80083e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80083e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d002      	beq.n	80083f8 <HAL_PCD_EP_DB_Transmit+0x36a>
 80083f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083f4:	3301      	adds	r3, #1
 80083f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80083f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008400:	b29b      	uxth	r3, r3
 8008402:	029b      	lsls	r3, r3, #10
 8008404:	b29b      	uxth	r3, r3
 8008406:	4313      	orrs	r3, r2
 8008408:	b29a      	uxth	r2, r3
 800840a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800840c:	801a      	strh	r2, [r3, #0]
 800840e:	e037      	b.n	8008480 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008410:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008412:	095b      	lsrs	r3, r3, #5
 8008414:	653b      	str	r3, [r7, #80]	@ 0x50
 8008416:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008418:	f003 031f 	and.w	r3, r3, #31
 800841c:	2b00      	cmp	r3, #0
 800841e:	d102      	bne.n	8008426 <HAL_PCD_EP_DB_Transmit+0x398>
 8008420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008422:	3b01      	subs	r3, #1
 8008424:	653b      	str	r3, [r7, #80]	@ 0x50
 8008426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008428:	881b      	ldrh	r3, [r3, #0]
 800842a:	b29a      	uxth	r2, r3
 800842c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800842e:	b29b      	uxth	r3, r3
 8008430:	029b      	lsls	r3, r3, #10
 8008432:	b29b      	uxth	r3, r3
 8008434:	4313      	orrs	r3, r2
 8008436:	b29b      	uxth	r3, r3
 8008438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800843c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008440:	b29a      	uxth	r2, r3
 8008442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008444:	801a      	strh	r2, [r3, #0]
 8008446:	e01b      	b.n	8008480 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	785b      	ldrb	r3, [r3, #1]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d117      	bne.n	8008480 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800845e:	b29b      	uxth	r3, r3
 8008460:	461a      	mov	r2, r3
 8008462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008464:	4413      	add	r3, r2
 8008466:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	00da      	lsls	r2, r3, #3
 800846e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008470:	4413      	add	r3, r2
 8008472:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008476:	647b      	str	r3, [r7, #68]	@ 0x44
 8008478:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800847a:	b29a      	uxth	r2, r3
 800847c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800847e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6818      	ldr	r0, [r3, #0]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	6959      	ldr	r1, [r3, #20]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	891a      	ldrh	r2, [r3, #8]
 800848c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800848e:	b29b      	uxth	r3, r3
 8008490:	f007 f9eb 	bl	800f86a <USB_WritePMA>
 8008494:	e20a      	b.n	80088ac <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800849e:	b29b      	uxth	r3, r3
 80084a0:	461a      	mov	r2, r3
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	4413      	add	r3, r2
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	6812      	ldr	r2, [r2, #0]
 80084ae:	4413      	add	r3, r2
 80084b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084ba:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	699a      	ldr	r2, [r3, #24]
 80084c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d307      	bcc.n	80084da <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	699a      	ldr	r2, [r3, #24]
 80084ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80084d2:	1ad2      	subs	r2, r2, r3
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	619a      	str	r2, [r3, #24]
 80084d8:	e002      	b.n	80084e0 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2200      	movs	r2, #0
 80084de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f040 80f6 	bne.w	80086d6 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	785b      	ldrb	r3, [r3, #1]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d126      	bne.n	8008540 <HAL_PCD_EP_DB_Transmit+0x4b2>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008500:	b29b      	uxth	r3, r3
 8008502:	461a      	mov	r2, r3
 8008504:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008506:	4413      	add	r3, r2
 8008508:	677b      	str	r3, [r7, #116]	@ 0x74
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	00da      	lsls	r2, r3, #3
 8008510:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008512:	4413      	add	r3, r2
 8008514:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008518:	673b      	str	r3, [r7, #112]	@ 0x70
 800851a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	b29b      	uxth	r3, r3
 8008520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008524:	b29a      	uxth	r2, r3
 8008526:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008528:	801a      	strh	r2, [r3, #0]
 800852a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	b29b      	uxth	r3, r3
 8008530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008538:	b29a      	uxth	r2, r3
 800853a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800853c:	801a      	strh	r2, [r3, #0]
 800853e:	e01a      	b.n	8008576 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	785b      	ldrb	r3, [r3, #1]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d116      	bne.n	8008576 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008556:	b29b      	uxth	r3, r3
 8008558:	461a      	mov	r2, r3
 800855a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800855c:	4413      	add	r3, r2
 800855e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	00da      	lsls	r2, r3, #3
 8008566:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008568:	4413      	add	r3, r2
 800856a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800856e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008572:	2200      	movs	r2, #0
 8008574:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	785b      	ldrb	r3, [r3, #1]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d12f      	bne.n	80085e6 <HAL_PCD_EP_DB_Transmit+0x558>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008596:	b29b      	uxth	r3, r3
 8008598:	461a      	mov	r2, r3
 800859a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800859e:	4413      	add	r3, r2
 80085a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	00da      	lsls	r2, r3, #3
 80085aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085ae:	4413      	add	r3, r2
 80085b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80085b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80085b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	b29b      	uxth	r3, r3
 80085c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80085ca:	801a      	strh	r2, [r3, #0]
 80085cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80085d0:	881b      	ldrh	r3, [r3, #0]
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085dc:	b29a      	uxth	r2, r3
 80085de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80085e2:	801a      	strh	r2, [r3, #0]
 80085e4:	e01c      	b.n	8008620 <HAL_PCD_EP_DB_Transmit+0x592>
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	785b      	ldrb	r3, [r3, #1]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d118      	bne.n	8008620 <HAL_PCD_EP_DB_Transmit+0x592>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	461a      	mov	r2, r3
 80085fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80085fe:	4413      	add	r3, r2
 8008600:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	00da      	lsls	r2, r3, #3
 800860a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800860e:	4413      	add	r3, r2
 8008610:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008614:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008618:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800861c:	2200      	movs	r2, #0
 800861e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	78db      	ldrb	r3, [r3, #3]
 8008624:	2b02      	cmp	r3, #2
 8008626:	d127      	bne.n	8008678 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	461a      	mov	r2, r3
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	b29b      	uxth	r3, r3
 800863a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800863e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008642:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008646:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800864a:	f083 0320 	eor.w	r3, r3, #32
 800864e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	441a      	add	r2, r3
 8008660:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008664:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008668:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800866c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008674:	b29b      	uxth	r3, r3
 8008676:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	4619      	mov	r1, r3
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f009 fb13 	bl	8011caa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008684:	88fb      	ldrh	r3, [r7, #6]
 8008686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d121      	bne.n	80086d2 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	b29b      	uxth	r3, r3
 80086a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086a8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	461a      	mov	r2, r3
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	441a      	add	r2, r3
 80086ba:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80086be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80086ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	e113      	b.n	80088fe <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80086d6:	88fb      	ldrh	r3, [r7, #6]
 80086d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d121      	bne.n	8008724 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	461a      	mov	r2, r3
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086fa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	441a      	add	r2, r3
 800870c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008710:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008714:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008718:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800871c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008720:	b29b      	uxth	r3, r3
 8008722:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800872a:	2b01      	cmp	r3, #1
 800872c:	f040 80be 	bne.w	80088ac <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	695a      	ldr	r2, [r3, #20]
 8008734:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008738:	441a      	add	r2, r3
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	69da      	ldr	r2, [r3, #28]
 8008742:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008746:	441a      	add	r2, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	6a1a      	ldr	r2, [r3, #32]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	429a      	cmp	r2, r3
 8008756:	d309      	bcc.n	800876c <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	6a1a      	ldr	r2, [r3, #32]
 8008762:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008764:	1ad2      	subs	r2, r2, r3
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	621a      	str	r2, [r3, #32]
 800876a:	e015      	b.n	8008798 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d107      	bne.n	8008784 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8008774:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008778:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008782:	e009      	b.n	8008798 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	6a1b      	ldr	r3, [r3, #32]
 8008788:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2200      	movs	r2, #0
 800878e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	785b      	ldrb	r3, [r3, #1]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d15f      	bne.n	8008866 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	461a      	mov	r2, r3
 80087b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087ba:	4413      	add	r3, r2
 80087bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	00da      	lsls	r2, r3, #3
 80087c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087c6:	4413      	add	r3, r2
 80087c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80087cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80087ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087d8:	b29a      	uxth	r2, r3
 80087da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087dc:	801a      	strh	r2, [r3, #0]
 80087de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10a      	bne.n	80087fa <HAL_PCD_EP_DB_Transmit+0x76c>
 80087e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087f6:	801a      	strh	r2, [r3, #0]
 80087f8:	e04e      	b.n	8008898 <HAL_PCD_EP_DB_Transmit+0x80a>
 80087fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80087fe:	d816      	bhi.n	800882e <HAL_PCD_EP_DB_Transmit+0x7a0>
 8008800:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008802:	085b      	lsrs	r3, r3, #1
 8008804:	663b      	str	r3, [r7, #96]	@ 0x60
 8008806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <HAL_PCD_EP_DB_Transmit+0x788>
 8008810:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008812:	3301      	adds	r3, #1
 8008814:	663b      	str	r3, [r7, #96]	@ 0x60
 8008816:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	b29a      	uxth	r2, r3
 800881c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800881e:	b29b      	uxth	r3, r3
 8008820:	029b      	lsls	r3, r3, #10
 8008822:	b29b      	uxth	r3, r3
 8008824:	4313      	orrs	r3, r2
 8008826:	b29a      	uxth	r2, r3
 8008828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800882a:	801a      	strh	r2, [r3, #0]
 800882c:	e034      	b.n	8008898 <HAL_PCD_EP_DB_Transmit+0x80a>
 800882e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008830:	095b      	lsrs	r3, r3, #5
 8008832:	663b      	str	r3, [r7, #96]	@ 0x60
 8008834:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008836:	f003 031f 	and.w	r3, r3, #31
 800883a:	2b00      	cmp	r3, #0
 800883c:	d102      	bne.n	8008844 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800883e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008840:	3b01      	subs	r3, #1
 8008842:	663b      	str	r3, [r7, #96]	@ 0x60
 8008844:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	b29a      	uxth	r2, r3
 800884a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800884c:	b29b      	uxth	r3, r3
 800884e:	029b      	lsls	r3, r3, #10
 8008850:	b29b      	uxth	r3, r3
 8008852:	4313      	orrs	r3, r2
 8008854:	b29b      	uxth	r3, r3
 8008856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800885a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800885e:	b29a      	uxth	r2, r3
 8008860:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008862:	801a      	strh	r2, [r3, #0]
 8008864:	e018      	b.n	8008898 <HAL_PCD_EP_DB_Transmit+0x80a>
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	785b      	ldrb	r3, [r3, #1]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d114      	bne.n	8008898 <HAL_PCD_EP_DB_Transmit+0x80a>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008876:	b29b      	uxth	r3, r3
 8008878:	461a      	mov	r2, r3
 800887a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800887c:	4413      	add	r3, r2
 800887e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	00da      	lsls	r2, r3, #3
 8008886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008888:	4413      	add	r3, r2
 800888a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800888e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008890:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008892:	b29a      	uxth	r2, r3
 8008894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008896:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6818      	ldr	r0, [r3, #0]
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	6959      	ldr	r1, [r3, #20]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	895a      	ldrh	r2, [r3, #10]
 80088a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	f006 ffdf 	bl	800f86a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	461a      	mov	r2, r3
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	b29b      	uxth	r3, r3
 80088be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088c6:	82fb      	strh	r3, [r7, #22]
 80088c8:	8afb      	ldrh	r3, [r7, #22]
 80088ca:	f083 0310 	eor.w	r3, r3, #16
 80088ce:	82fb      	strh	r3, [r7, #22]
 80088d0:	8afb      	ldrh	r3, [r7, #22]
 80088d2:	f083 0320 	eor.w	r3, r3, #32
 80088d6:	82fb      	strh	r3, [r7, #22]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	461a      	mov	r2, r3
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	441a      	add	r2, r3
 80088e6:	8afb      	ldrh	r3, [r7, #22]
 80088e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3798      	adds	r7, #152	@ 0x98
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008906:	b480      	push	{r7}
 8008908:	b087      	sub	sp, #28
 800890a:	af00      	add	r7, sp, #0
 800890c:	60f8      	str	r0, [r7, #12]
 800890e:	607b      	str	r3, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	817b      	strh	r3, [r7, #10]
 8008914:	4613      	mov	r3, r2
 8008916:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008918:	897b      	ldrh	r3, [r7, #10]
 800891a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800891e:	b29b      	uxth	r3, r3
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00b      	beq.n	800893c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008924:	897b      	ldrh	r3, [r7, #10]
 8008926:	f003 0207 	and.w	r2, r3, #7
 800892a:	4613      	mov	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	00db      	lsls	r3, r3, #3
 8008932:	3310      	adds	r3, #16
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	4413      	add	r3, r2
 8008938:	617b      	str	r3, [r7, #20]
 800893a:	e009      	b.n	8008950 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800893c:	897a      	ldrh	r2, [r7, #10]
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	4413      	add	r3, r2
 800894e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008950:	893b      	ldrh	r3, [r7, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d107      	bne.n	8008966 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	2200      	movs	r2, #0
 800895a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	b29a      	uxth	r2, r3
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	80da      	strh	r2, [r3, #6]
 8008964:	e00b      	b.n	800897e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2201      	movs	r2, #1
 800896a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	b29a      	uxth	r2, r3
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	0c1b      	lsrs	r3, r3, #16
 8008978:	b29a      	uxth	r2, r3
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	371c      	adds	r7, #28
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  /* Enable BCD feature */
  USBx->BCDR |= USB_BCDR_BCDEN;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	f043 0301 	orr.w	r3, r3, #1
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  /* Enable DCD : Data Contact Detect */
  USBx->BCDR &= ~(USB_BCDR_PDEN);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80089bc:	b29b      	uxth	r3, r3
 80089be:	f023 0304 	bic.w	r3, r3, #4
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  USBx->BCDR &= ~(USB_BCDR_SDEN);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	f023 0308 	bic.w	r3, r3, #8
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  USBx->BCDR |= USB_BCDR_DCDEN;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	f043 0302 	orr.w	r3, r3, #2
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <HAL_PCDEx_DeActivateBCD>:
  * @brief  Deactivate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_DeActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 0U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  /* Disable BCD feature */
  USBx->BCDR &= ~(USB_BCDR_BCDEN);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	f023 0301 	bic.w	r3, r3, #1
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <HAL_PCDEx_BCD_VBUSDetect>:
  * @brief  Handle BatteryCharging Process.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCDEx_BCD_VBUSDetect(PCD_HandleTypeDef *hpcd)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = HAL_GetTick();
 8008a46:	f7fb ff53 	bl	80048f0 <HAL_GetTick>
 8008a4a:	60b8      	str	r0, [r7, #8]

  /* Wait for Min DCD Timeout */
  HAL_Delay(300U);
 8008a4c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008a50:	f7fb ff5a 	bl	8004908 <HAL_Delay>

  /* Data Pin Contact ? Check Detect flag */
  if ((USBx->BCDR & USB_BCDR_DCDET) == USB_BCDR_DCDET)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	f003 0310 	and.w	r3, r3, #16
 8008a60:	2b10      	cmp	r3, #16
 8008a62:	d103      	bne.n	8008a6c <HAL_PCDEx_BCD_VBUSDetect+0x34>
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_CONTACT_DETECTION);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CONTACT_DETECTION);
 8008a64:	21fe      	movs	r1, #254	@ 0xfe
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f009 f99c 	bl	8011da4 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }
  /* Primary detection: checks if connected to Standard Downstream Port
  (without charging capability) */
  USBx->BCDR &= ~(USB_BCDR_DCDEN);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	f023 0302 	bic.w	r3, r3, #2
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  HAL_Delay(50U);
 8008a80:	2032      	movs	r0, #50	@ 0x32
 8008a82:	f7fb ff41 	bl	8004908 <HAL_Delay>
  USBx->BCDR |= (USB_BCDR_PDEN);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	f043 0304 	orr.w	r3, r3, #4
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  HAL_Delay(50U);
 8008a9a:	2032      	movs	r0, #50	@ 0x32
 8008a9c:	f7fb ff34 	bl	8004908 <HAL_Delay>

  /* If Charger detect ? */
  if ((USBx->BCDR & USB_BCDR_PDET) == USB_BCDR_PDET)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	f003 0320 	and.w	r3, r3, #32
 8008aac:	2b20      	cmp	r3, #32
 8008aae:	d12b      	bne.n	8008b08 <HAL_PCDEx_BCD_VBUSDetect+0xd0>
  {
    /* Start secondary detection to check connection to Charging Downstream
    Port or Dedicated Charging Port */
    USBx->BCDR &= ~(USB_BCDR_PDEN);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	f023 0304 	bic.w	r3, r3, #4
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    HAL_Delay(50U);
 8008ac4:	2032      	movs	r0, #50	@ 0x32
 8008ac6:	f7fb ff1f 	bl	8004908 <HAL_Delay>
    USBx->BCDR |= (USB_BCDR_SDEN);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	f043 0308 	orr.w	r3, r3, #8
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    HAL_Delay(50U);
 8008ade:	2032      	movs	r0, #50	@ 0x32
 8008ae0:	f7fb ff12 	bl	8004908 <HAL_Delay>

    /* If CDP ? */
    if ((USBx->BCDR & USB_BCDR_SDET) == USB_BCDR_SDET)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008af0:	2b40      	cmp	r3, #64	@ 0x40
 8008af2:	d104      	bne.n	8008afe <HAL_PCDEx_BCD_VBUSDetect+0xc6>
    {
      /* Dedicated Downstream Port DCP */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
 8008af4:	21fb      	movs	r1, #251	@ 0xfb
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f009 f954 	bl	8011da4 <HAL_PCDEx_BCD_Callback>
 8008afc:	e008      	b.n	8008b10 <HAL_PCDEx_BCD_VBUSDetect+0xd8>
    {
      /* Charging Downstream Port CDP */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
 8008afe:	21fc      	movs	r1, #252	@ 0xfc
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f009 f94f 	bl	8011da4 <HAL_PCDEx_BCD_Callback>
 8008b06:	e003      	b.n	8008b10 <HAL_PCDEx_BCD_VBUSDetect+0xd8>
  {
    /* Standard Downstream Port */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
 8008b08:	21fd      	movs	r1, #253	@ 0xfd
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f009 f94a 	bl	8011da4 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Battery Charging capability discovery finished Start Enumeration */
  (void)HAL_PCDEx_DeActivateBCD(hpcd);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7ff ff75 	bl	8008a00 <HAL_PCDEx_DeActivateBCD>

  /* Check for the Timeout, else start USB Device */
  if ((HAL_GetTick() - tickstart) > 1000U)
 8008b16:	f7fb feeb 	bl	80048f0 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b24:	d904      	bls.n	8008b30 <HAL_PCDEx_BCD_VBUSDetect+0xf8>
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_ERROR);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_ERROR);
 8008b26:	21ff      	movs	r1, #255	@ 0xff
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f009 f93b 	bl	8011da4 <HAL_PCDEx_BCD_Callback>
    hpcd->BCDCallback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }
}
 8008b2e:	e003      	b.n	8008b38 <HAL_PCDEx_BCD_VBUSDetect+0x100>
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
 8008b30:	2100      	movs	r1, #0
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f009 f936 	bl	8011da4 <HAL_PCDEx_BCD_Callback>
}
 8008b38:	bf00      	nop
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	f043 0301 	orr.w	r3, r3, #1
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	f043 0302 	orr.w	r3, r3, #2
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008b94:	b480      	push	{r7}
 8008b96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b98:	4b05      	ldr	r3, [pc, #20]	@ (8008bb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a04      	ldr	r2, [pc, #16]	@ (8008bb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ba2:	6013      	str	r3, [r2, #0]
}
 8008ba4:	bf00      	nop
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	40007000 	.word	0x40007000

08008bb4 <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8008bb8:	4b05      	ldr	r3, [pc, #20]	@ (8008bd0 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a04      	ldr	r2, [pc, #16]	@ (8008bd0 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8008bbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bc2:	6013      	str	r3, [r2, #0]
}
 8008bc4:	bf00      	nop
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	40007000 	.word	0x40007000

08008bd4 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8008bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8008c8c <HAL_PWR_ConfigPVD+0xb8>)
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	f023 020e 	bic.w	r2, r3, #14
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4928      	ldr	r1, [pc, #160]	@ (8008c8c <HAL_PWR_ConfigPVD+0xb8>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8008bee:	4b28      	ldr	r3, [pc, #160]	@ (8008c90 <HAL_PWR_ConfigPVD+0xbc>)
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	4a27      	ldr	r2, [pc, #156]	@ (8008c90 <HAL_PWR_ConfigPVD+0xbc>)
 8008bf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bf8:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8008bfa:	4b25      	ldr	r3, [pc, #148]	@ (8008c90 <HAL_PWR_ConfigPVD+0xbc>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a24      	ldr	r2, [pc, #144]	@ (8008c90 <HAL_PWR_ConfigPVD+0xbc>)
 8008c00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c04:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8008c06:	4b22      	ldr	r3, [pc, #136]	@ (8008c90 <HAL_PWR_ConfigPVD+0xbc>)
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	4a21      	ldr	r2, [pc, #132]	@ (8008c90 <HAL_PWR_ConfigPVD+0xbc>)
 8008c0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c10:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8008c12:	4b1f      	ldr	r3, [pc, #124]	@ (8008c90 <HAL_PWR_ConfigPVD+0xbc>)
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	4a1e      	ldr	r2, [pc, #120]	@ (8008c90 <HAL_PWR_ConfigPVD+0xbc>)
 8008c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c1c:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d005      	beq.n	8008c36 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8008c2a:	4b19      	ldr	r3, [pc, #100]	@ (8008c90 <HAL_PWR_ConfigPVD+0xbc>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a18      	ldr	r2, [pc, #96]	@ (8008c90 <HAL_PWR_ConfigPVD+0xbc>)
 8008c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c34:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d005      	beq.n	8008c4e <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8008c42:	4b13      	ldr	r3, [pc, #76]	@ (8008c90 <HAL_PWR_ConfigPVD+0xbc>)
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	4a12      	ldr	r2, [pc, #72]	@ (8008c90 <HAL_PWR_ConfigPVD+0xbc>)
 8008c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c4c:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d005      	beq.n	8008c66 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8008c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c90 <HAL_PWR_ConfigPVD+0xbc>)
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8008c90 <HAL_PWR_ConfigPVD+0xbc>)
 8008c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c64:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f003 0302 	and.w	r3, r3, #2
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d005      	beq.n	8008c7e <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8008c72:	4b07      	ldr	r3, [pc, #28]	@ (8008c90 <HAL_PWR_ConfigPVD+0xbc>)
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	4a06      	ldr	r2, [pc, #24]	@ (8008c90 <HAL_PWR_ConfigPVD+0xbc>)
 8008c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c7c:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	40007000 	.word	0x40007000
 8008c90:	40010400 	.word	0x40010400

08008c94 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8008c94:	b480      	push	{r7}
 8008c96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8008c98:	4b05      	ldr	r3, [pc, #20]	@ (8008cb0 <HAL_PWR_EnablePVD+0x1c>)
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	4a04      	ldr	r2, [pc, #16]	@ (8008cb0 <HAL_PWR_EnablePVD+0x1c>)
 8008c9e:	f043 0301 	orr.w	r3, r3, #1
 8008ca2:	6053      	str	r3, [r2, #4]
}
 8008ca4:	bf00      	nop
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	40007000 	.word	0x40007000

08008cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d141      	bne.n	8008d46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cce:	d131      	bne.n	8008d34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008cd0:	4b47      	ldr	r3, [pc, #284]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cd6:	4a46      	ldr	r2, [pc, #280]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008ce0:	4b43      	ldr	r3, [pc, #268]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008ce8:	4a41      	ldr	r2, [pc, #260]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008cee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008cf0:	4b40      	ldr	r3, [pc, #256]	@ (8008df4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2232      	movs	r2, #50	@ 0x32
 8008cf6:	fb02 f303 	mul.w	r3, r2, r3
 8008cfa:	4a3f      	ldr	r2, [pc, #252]	@ (8008df8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8008d00:	0c9b      	lsrs	r3, r3, #18
 8008d02:	3301      	adds	r3, #1
 8008d04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008d06:	e002      	b.n	8008d0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008d0e:	4b38      	ldr	r3, [pc, #224]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d1a:	d102      	bne.n	8008d22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1f2      	bne.n	8008d08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008d22:	4b33      	ldr	r3, [pc, #204]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d2e:	d158      	bne.n	8008de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e057      	b.n	8008de4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008d34:	4b2e      	ldr	r3, [pc, #184]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008d44:	e04d      	b.n	8008de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d4c:	d141      	bne.n	8008dd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008d4e:	4b28      	ldr	r3, [pc, #160]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d5a:	d131      	bne.n	8008dc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008d5c:	4b24      	ldr	r3, [pc, #144]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d62:	4a23      	ldr	r2, [pc, #140]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d6c:	4b20      	ldr	r3, [pc, #128]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008d74:	4a1e      	ldr	r2, [pc, #120]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008d7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8008df4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2232      	movs	r2, #50	@ 0x32
 8008d82:	fb02 f303 	mul.w	r3, r2, r3
 8008d86:	4a1c      	ldr	r2, [pc, #112]	@ (8008df8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008d88:	fba2 2303 	umull	r2, r3, r2, r3
 8008d8c:	0c9b      	lsrs	r3, r3, #18
 8008d8e:	3301      	adds	r3, #1
 8008d90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008d92:	e002      	b.n	8008d9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008d9a:	4b15      	ldr	r3, [pc, #84]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008da6:	d102      	bne.n	8008dae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1f2      	bne.n	8008d94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008dae:	4b10      	ldr	r3, [pc, #64]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dba:	d112      	bne.n	8008de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e011      	b.n	8008de4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008dd0:	e007      	b.n	8008de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008dd2:	4b07      	ldr	r3, [pc, #28]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008dda:	4a05      	ldr	r2, [pc, #20]	@ (8008df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ddc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008de0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	40007000 	.word	0x40007000
 8008df4:	20000004 	.word	0x20000004
 8008df8:	431bde83 	.word	0x431bde83

08008dfc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008e00:	4b05      	ldr	r3, [pc, #20]	@ (8008e18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	4a04      	ldr	r2, [pc, #16]	@ (8008e18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008e06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e0a:	6093      	str	r3, [r2, #8]
}
 8008e0c:	bf00      	nop
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	40007000 	.word	0x40007000

08008e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b088      	sub	sp, #32
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d101      	bne.n	8008e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e2fe      	b.n	800942c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d075      	beq.n	8008f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e3a:	4b97      	ldr	r3, [pc, #604]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f003 030c 	and.w	r3, r3, #12
 8008e42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e44:	4b94      	ldr	r3, [pc, #592]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f003 0303 	and.w	r3, r3, #3
 8008e4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	2b0c      	cmp	r3, #12
 8008e52:	d102      	bne.n	8008e5a <HAL_RCC_OscConfig+0x3e>
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	d002      	beq.n	8008e60 <HAL_RCC_OscConfig+0x44>
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	2b08      	cmp	r3, #8
 8008e5e:	d10b      	bne.n	8008e78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e60:	4b8d      	ldr	r3, [pc, #564]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d05b      	beq.n	8008f24 <HAL_RCC_OscConfig+0x108>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d157      	bne.n	8008f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e2d9      	b.n	800942c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e80:	d106      	bne.n	8008e90 <HAL_RCC_OscConfig+0x74>
 8008e82:	4b85      	ldr	r3, [pc, #532]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a84      	ldr	r2, [pc, #528]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	e01d      	b.n	8008ecc <HAL_RCC_OscConfig+0xb0>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e98:	d10c      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x98>
 8008e9a:	4b7f      	ldr	r3, [pc, #508]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a7e      	ldr	r2, [pc, #504]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008ea4:	6013      	str	r3, [r2, #0]
 8008ea6:	4b7c      	ldr	r3, [pc, #496]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a7b      	ldr	r2, [pc, #492]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	e00b      	b.n	8008ecc <HAL_RCC_OscConfig+0xb0>
 8008eb4:	4b78      	ldr	r3, [pc, #480]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a77      	ldr	r2, [pc, #476]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	4b75      	ldr	r3, [pc, #468]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a74      	ldr	r2, [pc, #464]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d013      	beq.n	8008efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed4:	f7fb fd0c 	bl	80048f0 <HAL_GetTick>
 8008ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008eda:	e008      	b.n	8008eee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008edc:	f7fb fd08 	bl	80048f0 <HAL_GetTick>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	2b64      	cmp	r3, #100	@ 0x64
 8008ee8:	d901      	bls.n	8008eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e29e      	b.n	800942c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008eee:	4b6a      	ldr	r3, [pc, #424]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d0f0      	beq.n	8008edc <HAL_RCC_OscConfig+0xc0>
 8008efa:	e014      	b.n	8008f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008efc:	f7fb fcf8 	bl	80048f0 <HAL_GetTick>
 8008f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f02:	e008      	b.n	8008f16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f04:	f7fb fcf4 	bl	80048f0 <HAL_GetTick>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	2b64      	cmp	r3, #100	@ 0x64
 8008f10:	d901      	bls.n	8008f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e28a      	b.n	800942c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f16:	4b60      	ldr	r3, [pc, #384]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1f0      	bne.n	8008f04 <HAL_RCC_OscConfig+0xe8>
 8008f22:	e000      	b.n	8008f26 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0302 	and.w	r3, r3, #2
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d075      	beq.n	800901e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f32:	4b59      	ldr	r3, [pc, #356]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f003 030c 	and.w	r3, r3, #12
 8008f3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f3c:	4b56      	ldr	r3, [pc, #344]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f003 0303 	and.w	r3, r3, #3
 8008f44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	2b0c      	cmp	r3, #12
 8008f4a:	d102      	bne.n	8008f52 <HAL_RCC_OscConfig+0x136>
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d002      	beq.n	8008f58 <HAL_RCC_OscConfig+0x13c>
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	2b04      	cmp	r3, #4
 8008f56:	d11f      	bne.n	8008f98 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f58:	4b4f      	ldr	r3, [pc, #316]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d005      	beq.n	8008f70 <HAL_RCC_OscConfig+0x154>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e25d      	b.n	800942c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f70:	4b49      	ldr	r3, [pc, #292]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	061b      	lsls	r3, r3, #24
 8008f7e:	4946      	ldr	r1, [pc, #280]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008f80:	4313      	orrs	r3, r2
 8008f82:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008f84:	4b45      	ldr	r3, [pc, #276]	@ (800909c <HAL_RCC_OscConfig+0x280>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fa f8e3 	bl	8003154 <HAL_InitTick>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d043      	beq.n	800901c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e249      	b.n	800942c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d023      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008fa0:	4b3d      	ldr	r3, [pc, #244]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a3c      	ldr	r2, [pc, #240]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fac:	f7fb fca0 	bl	80048f0 <HAL_GetTick>
 8008fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008fb2:	e008      	b.n	8008fc6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fb4:	f7fb fc9c 	bl	80048f0 <HAL_GetTick>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d901      	bls.n	8008fc6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e232      	b.n	800942c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008fc6:	4b34      	ldr	r3, [pc, #208]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0f0      	beq.n	8008fb4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fd2:	4b31      	ldr	r3, [pc, #196]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	061b      	lsls	r3, r3, #24
 8008fe0:	492d      	ldr	r1, [pc, #180]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	604b      	str	r3, [r1, #4]
 8008fe6:	e01a      	b.n	800901e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a2a      	ldr	r2, [pc, #168]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8008fee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff4:	f7fb fc7c 	bl	80048f0 <HAL_GetTick>
 8008ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008ffa:	e008      	b.n	800900e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ffc:	f7fb fc78 	bl	80048f0 <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b02      	cmp	r3, #2
 8009008:	d901      	bls.n	800900e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e20e      	b.n	800942c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800900e:	4b22      	ldr	r3, [pc, #136]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1f0      	bne.n	8008ffc <HAL_RCC_OscConfig+0x1e0>
 800901a:	e000      	b.n	800901e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800901c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0308 	and.w	r3, r3, #8
 8009026:	2b00      	cmp	r3, #0
 8009028:	d041      	beq.n	80090ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d01c      	beq.n	800906c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009032:	4b19      	ldr	r3, [pc, #100]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8009034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009038:	4a17      	ldr	r2, [pc, #92]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 800903a:	f043 0301 	orr.w	r3, r3, #1
 800903e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009042:	f7fb fc55 	bl	80048f0 <HAL_GetTick>
 8009046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009048:	e008      	b.n	800905c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800904a:	f7fb fc51 	bl	80048f0 <HAL_GetTick>
 800904e:	4602      	mov	r2, r0
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	2b02      	cmp	r3, #2
 8009056:	d901      	bls.n	800905c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e1e7      	b.n	800942c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800905c:	4b0e      	ldr	r3, [pc, #56]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 800905e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009062:	f003 0302 	and.w	r3, r3, #2
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0ef      	beq.n	800904a <HAL_RCC_OscConfig+0x22e>
 800906a:	e020      	b.n	80090ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800906c:	4b0a      	ldr	r3, [pc, #40]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 800906e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009072:	4a09      	ldr	r2, [pc, #36]	@ (8009098 <HAL_RCC_OscConfig+0x27c>)
 8009074:	f023 0301 	bic.w	r3, r3, #1
 8009078:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800907c:	f7fb fc38 	bl	80048f0 <HAL_GetTick>
 8009080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009082:	e00d      	b.n	80090a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009084:	f7fb fc34 	bl	80048f0 <HAL_GetTick>
 8009088:	4602      	mov	r2, r0
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	2b02      	cmp	r3, #2
 8009090:	d906      	bls.n	80090a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e1ca      	b.n	800942c <HAL_RCC_OscConfig+0x610>
 8009096:	bf00      	nop
 8009098:	40021000 	.word	0x40021000
 800909c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80090a0:	4b8c      	ldr	r3, [pc, #560]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 80090a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090a6:	f003 0302 	and.w	r3, r3, #2
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1ea      	bne.n	8009084 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 0304 	and.w	r3, r3, #4
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f000 80a6 	beq.w	8009208 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090bc:	2300      	movs	r3, #0
 80090be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80090c0:	4b84      	ldr	r3, [pc, #528]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 80090c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <HAL_RCC_OscConfig+0x2b4>
 80090cc:	2301      	movs	r3, #1
 80090ce:	e000      	b.n	80090d2 <HAL_RCC_OscConfig+0x2b6>
 80090d0:	2300      	movs	r3, #0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00d      	beq.n	80090f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090d6:	4b7f      	ldr	r3, [pc, #508]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 80090d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090da:	4a7e      	ldr	r2, [pc, #504]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 80090dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80090e2:	4b7c      	ldr	r3, [pc, #496]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 80090e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80090ee:	2301      	movs	r3, #1
 80090f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090f2:	4b79      	ldr	r3, [pc, #484]	@ (80092d8 <HAL_RCC_OscConfig+0x4bc>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d118      	bne.n	8009130 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80090fe:	4b76      	ldr	r3, [pc, #472]	@ (80092d8 <HAL_RCC_OscConfig+0x4bc>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a75      	ldr	r2, [pc, #468]	@ (80092d8 <HAL_RCC_OscConfig+0x4bc>)
 8009104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800910a:	f7fb fbf1 	bl	80048f0 <HAL_GetTick>
 800910e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009110:	e008      	b.n	8009124 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009112:	f7fb fbed 	bl	80048f0 <HAL_GetTick>
 8009116:	4602      	mov	r2, r0
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	2b02      	cmp	r3, #2
 800911e:	d901      	bls.n	8009124 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009120:	2303      	movs	r3, #3
 8009122:	e183      	b.n	800942c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009124:	4b6c      	ldr	r3, [pc, #432]	@ (80092d8 <HAL_RCC_OscConfig+0x4bc>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800912c:	2b00      	cmp	r3, #0
 800912e:	d0f0      	beq.n	8009112 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d108      	bne.n	800914a <HAL_RCC_OscConfig+0x32e>
 8009138:	4b66      	ldr	r3, [pc, #408]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 800913a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800913e:	4a65      	ldr	r2, [pc, #404]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 8009140:	f043 0301 	orr.w	r3, r3, #1
 8009144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009148:	e024      	b.n	8009194 <HAL_RCC_OscConfig+0x378>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	2b05      	cmp	r3, #5
 8009150:	d110      	bne.n	8009174 <HAL_RCC_OscConfig+0x358>
 8009152:	4b60      	ldr	r3, [pc, #384]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 8009154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009158:	4a5e      	ldr	r2, [pc, #376]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 800915a:	f043 0304 	orr.w	r3, r3, #4
 800915e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009162:	4b5c      	ldr	r3, [pc, #368]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 8009164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009168:	4a5a      	ldr	r2, [pc, #360]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 800916a:	f043 0301 	orr.w	r3, r3, #1
 800916e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009172:	e00f      	b.n	8009194 <HAL_RCC_OscConfig+0x378>
 8009174:	4b57      	ldr	r3, [pc, #348]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 8009176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800917a:	4a56      	ldr	r2, [pc, #344]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 800917c:	f023 0301 	bic.w	r3, r3, #1
 8009180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009184:	4b53      	ldr	r3, [pc, #332]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 8009186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800918a:	4a52      	ldr	r2, [pc, #328]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 800918c:	f023 0304 	bic.w	r3, r3, #4
 8009190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d016      	beq.n	80091ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800919c:	f7fb fba8 	bl	80048f0 <HAL_GetTick>
 80091a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091a2:	e00a      	b.n	80091ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091a4:	f7fb fba4 	bl	80048f0 <HAL_GetTick>
 80091a8:	4602      	mov	r2, r0
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d901      	bls.n	80091ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e138      	b.n	800942c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091ba:	4b46      	ldr	r3, [pc, #280]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 80091bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091c0:	f003 0302 	and.w	r3, r3, #2
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d0ed      	beq.n	80091a4 <HAL_RCC_OscConfig+0x388>
 80091c8:	e015      	b.n	80091f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ca:	f7fb fb91 	bl	80048f0 <HAL_GetTick>
 80091ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80091d0:	e00a      	b.n	80091e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091d2:	f7fb fb8d 	bl	80048f0 <HAL_GetTick>
 80091d6:	4602      	mov	r2, r0
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d901      	bls.n	80091e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e121      	b.n	800942c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80091e8:	4b3a      	ldr	r3, [pc, #232]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 80091ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091ee:	f003 0302 	and.w	r3, r3, #2
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1ed      	bne.n	80091d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80091f6:	7ffb      	ldrb	r3, [r7, #31]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d105      	bne.n	8009208 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091fc:	4b35      	ldr	r3, [pc, #212]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 80091fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009200:	4a34      	ldr	r2, [pc, #208]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 8009202:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009206:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 0320 	and.w	r3, r3, #32
 8009210:	2b00      	cmp	r3, #0
 8009212:	d03c      	beq.n	800928e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d01c      	beq.n	8009256 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800921c:	4b2d      	ldr	r3, [pc, #180]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 800921e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009222:	4a2c      	ldr	r2, [pc, #176]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 8009224:	f043 0301 	orr.w	r3, r3, #1
 8009228:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800922c:	f7fb fb60 	bl	80048f0 <HAL_GetTick>
 8009230:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009232:	e008      	b.n	8009246 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009234:	f7fb fb5c 	bl	80048f0 <HAL_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	2b02      	cmp	r3, #2
 8009240:	d901      	bls.n	8009246 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e0f2      	b.n	800942c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009246:	4b23      	ldr	r3, [pc, #140]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 8009248:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800924c:	f003 0302 	and.w	r3, r3, #2
 8009250:	2b00      	cmp	r3, #0
 8009252:	d0ef      	beq.n	8009234 <HAL_RCC_OscConfig+0x418>
 8009254:	e01b      	b.n	800928e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009256:	4b1f      	ldr	r3, [pc, #124]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 8009258:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800925c:	4a1d      	ldr	r2, [pc, #116]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 800925e:	f023 0301 	bic.w	r3, r3, #1
 8009262:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009266:	f7fb fb43 	bl	80048f0 <HAL_GetTick>
 800926a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800926c:	e008      	b.n	8009280 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800926e:	f7fb fb3f 	bl	80048f0 <HAL_GetTick>
 8009272:	4602      	mov	r2, r0
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	2b02      	cmp	r3, #2
 800927a:	d901      	bls.n	8009280 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e0d5      	b.n	800942c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009280:	4b14      	ldr	r3, [pc, #80]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 8009282:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009286:	f003 0302 	and.w	r3, r3, #2
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1ef      	bne.n	800926e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	69db      	ldr	r3, [r3, #28]
 8009292:	2b00      	cmp	r3, #0
 8009294:	f000 80c9 	beq.w	800942a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009298:	4b0e      	ldr	r3, [pc, #56]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f003 030c 	and.w	r3, r3, #12
 80092a0:	2b0c      	cmp	r3, #12
 80092a2:	f000 8083 	beq.w	80093ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d15e      	bne.n	800936c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092ae:	4b09      	ldr	r3, [pc, #36]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a08      	ldr	r2, [pc, #32]	@ (80092d4 <HAL_RCC_OscConfig+0x4b8>)
 80092b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092ba:	f7fb fb19 	bl	80048f0 <HAL_GetTick>
 80092be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80092c0:	e00c      	b.n	80092dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092c2:	f7fb fb15 	bl	80048f0 <HAL_GetTick>
 80092c6:	4602      	mov	r2, r0
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d905      	bls.n	80092dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e0ab      	b.n	800942c <HAL_RCC_OscConfig+0x610>
 80092d4:	40021000 	.word	0x40021000
 80092d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80092dc:	4b55      	ldr	r3, [pc, #340]	@ (8009434 <HAL_RCC_OscConfig+0x618>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1ec      	bne.n	80092c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092e8:	4b52      	ldr	r3, [pc, #328]	@ (8009434 <HAL_RCC_OscConfig+0x618>)
 80092ea:	68da      	ldr	r2, [r3, #12]
 80092ec:	4b52      	ldr	r3, [pc, #328]	@ (8009438 <HAL_RCC_OscConfig+0x61c>)
 80092ee:	4013      	ands	r3, r2
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	6a11      	ldr	r1, [r2, #32]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80092f8:	3a01      	subs	r2, #1
 80092fa:	0112      	lsls	r2, r2, #4
 80092fc:	4311      	orrs	r1, r2
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009302:	0212      	lsls	r2, r2, #8
 8009304:	4311      	orrs	r1, r2
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800930a:	0852      	lsrs	r2, r2, #1
 800930c:	3a01      	subs	r2, #1
 800930e:	0552      	lsls	r2, r2, #21
 8009310:	4311      	orrs	r1, r2
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009316:	0852      	lsrs	r2, r2, #1
 8009318:	3a01      	subs	r2, #1
 800931a:	0652      	lsls	r2, r2, #25
 800931c:	4311      	orrs	r1, r2
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009322:	06d2      	lsls	r2, r2, #27
 8009324:	430a      	orrs	r2, r1
 8009326:	4943      	ldr	r1, [pc, #268]	@ (8009434 <HAL_RCC_OscConfig+0x618>)
 8009328:	4313      	orrs	r3, r2
 800932a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800932c:	4b41      	ldr	r3, [pc, #260]	@ (8009434 <HAL_RCC_OscConfig+0x618>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a40      	ldr	r2, [pc, #256]	@ (8009434 <HAL_RCC_OscConfig+0x618>)
 8009332:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009336:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009338:	4b3e      	ldr	r3, [pc, #248]	@ (8009434 <HAL_RCC_OscConfig+0x618>)
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	4a3d      	ldr	r2, [pc, #244]	@ (8009434 <HAL_RCC_OscConfig+0x618>)
 800933e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009342:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009344:	f7fb fad4 	bl	80048f0 <HAL_GetTick>
 8009348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800934a:	e008      	b.n	800935e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800934c:	f7fb fad0 	bl	80048f0 <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	2b02      	cmp	r3, #2
 8009358:	d901      	bls.n	800935e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	e066      	b.n	800942c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800935e:	4b35      	ldr	r3, [pc, #212]	@ (8009434 <HAL_RCC_OscConfig+0x618>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d0f0      	beq.n	800934c <HAL_RCC_OscConfig+0x530>
 800936a:	e05e      	b.n	800942a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800936c:	4b31      	ldr	r3, [pc, #196]	@ (8009434 <HAL_RCC_OscConfig+0x618>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a30      	ldr	r2, [pc, #192]	@ (8009434 <HAL_RCC_OscConfig+0x618>)
 8009372:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009378:	f7fb faba 	bl	80048f0 <HAL_GetTick>
 800937c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800937e:	e008      	b.n	8009392 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009380:	f7fb fab6 	bl	80048f0 <HAL_GetTick>
 8009384:	4602      	mov	r2, r0
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	2b02      	cmp	r3, #2
 800938c:	d901      	bls.n	8009392 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e04c      	b.n	800942c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009392:	4b28      	ldr	r3, [pc, #160]	@ (8009434 <HAL_RCC_OscConfig+0x618>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1f0      	bne.n	8009380 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800939e:	4b25      	ldr	r3, [pc, #148]	@ (8009434 <HAL_RCC_OscConfig+0x618>)
 80093a0:	68da      	ldr	r2, [r3, #12]
 80093a2:	4924      	ldr	r1, [pc, #144]	@ (8009434 <HAL_RCC_OscConfig+0x618>)
 80093a4:	4b25      	ldr	r3, [pc, #148]	@ (800943c <HAL_RCC_OscConfig+0x620>)
 80093a6:	4013      	ands	r3, r2
 80093a8:	60cb      	str	r3, [r1, #12]
 80093aa:	e03e      	b.n	800942a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	69db      	ldr	r3, [r3, #28]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d101      	bne.n	80093b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e039      	b.n	800942c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80093b8:	4b1e      	ldr	r3, [pc, #120]	@ (8009434 <HAL_RCC_OscConfig+0x618>)
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f003 0203 	and.w	r2, r3, #3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a1b      	ldr	r3, [r3, #32]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d12c      	bne.n	8009426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d6:	3b01      	subs	r3, #1
 80093d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093da:	429a      	cmp	r2, r3
 80093dc:	d123      	bne.n	8009426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d11b      	bne.n	8009426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d113      	bne.n	8009426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009408:	085b      	lsrs	r3, r3, #1
 800940a:	3b01      	subs	r3, #1
 800940c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800940e:	429a      	cmp	r2, r3
 8009410:	d109      	bne.n	8009426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800941c:	085b      	lsrs	r3, r3, #1
 800941e:	3b01      	subs	r3, #1
 8009420:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009422:	429a      	cmp	r2, r3
 8009424:	d001      	beq.n	800942a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e000      	b.n	800942c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3720      	adds	r7, #32
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	40021000 	.word	0x40021000
 8009438:	019f800c 	.word	0x019f800c
 800943c:	feeefffc 	.word	0xfeeefffc

08009440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800944a:	2300      	movs	r3, #0
 800944c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d101      	bne.n	8009458 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	e11e      	b.n	8009696 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009458:	4b91      	ldr	r3, [pc, #580]	@ (80096a0 <HAL_RCC_ClockConfig+0x260>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 030f 	and.w	r3, r3, #15
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	429a      	cmp	r2, r3
 8009464:	d910      	bls.n	8009488 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009466:	4b8e      	ldr	r3, [pc, #568]	@ (80096a0 <HAL_RCC_ClockConfig+0x260>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f023 020f 	bic.w	r2, r3, #15
 800946e:	498c      	ldr	r1, [pc, #560]	@ (80096a0 <HAL_RCC_ClockConfig+0x260>)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	4313      	orrs	r3, r2
 8009474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009476:	4b8a      	ldr	r3, [pc, #552]	@ (80096a0 <HAL_RCC_ClockConfig+0x260>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 030f 	and.w	r3, r3, #15
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	429a      	cmp	r2, r3
 8009482:	d001      	beq.n	8009488 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e106      	b.n	8009696 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	2b00      	cmp	r3, #0
 8009492:	d073      	beq.n	800957c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	2b03      	cmp	r3, #3
 800949a:	d129      	bne.n	80094f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800949c:	4b81      	ldr	r3, [pc, #516]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d101      	bne.n	80094ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e0f4      	b.n	8009696 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80094ac:	f000 fa16 	bl	80098dc <RCC_GetSysClockFreqFromPLLSource>
 80094b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	4a7c      	ldr	r2, [pc, #496]	@ (80096a8 <HAL_RCC_ClockConfig+0x268>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d93f      	bls.n	800953a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80094ba:	4b7a      	ldr	r3, [pc, #488]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d009      	beq.n	80094da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d033      	beq.n	800953a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d12f      	bne.n	800953a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80094da:	4b72      	ldr	r3, [pc, #456]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80094e2:	4a70      	ldr	r2, [pc, #448]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 80094e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80094ea:	2380      	movs	r3, #128	@ 0x80
 80094ec:	617b      	str	r3, [r7, #20]
 80094ee:	e024      	b.n	800953a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d107      	bne.n	8009508 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80094f8:	4b6a      	ldr	r3, [pc, #424]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d109      	bne.n	8009518 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e0c6      	b.n	8009696 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009508:	4b66      	ldr	r3, [pc, #408]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e0be      	b.n	8009696 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009518:	f000 f914 	bl	8009744 <HAL_RCC_GetSysClockFreq>
 800951c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	4a61      	ldr	r2, [pc, #388]	@ (80096a8 <HAL_RCC_ClockConfig+0x268>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d909      	bls.n	800953a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009526:	4b5f      	ldr	r3, [pc, #380]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800952e:	4a5d      	ldr	r2, [pc, #372]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 8009530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009534:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009536:	2380      	movs	r3, #128	@ 0x80
 8009538:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800953a:	4b5a      	ldr	r3, [pc, #360]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	f023 0203 	bic.w	r2, r3, #3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	4957      	ldr	r1, [pc, #348]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 8009548:	4313      	orrs	r3, r2
 800954a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800954c:	f7fb f9d0 	bl	80048f0 <HAL_GetTick>
 8009550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009552:	e00a      	b.n	800956a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009554:	f7fb f9cc 	bl	80048f0 <HAL_GetTick>
 8009558:	4602      	mov	r2, r0
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009562:	4293      	cmp	r3, r2
 8009564:	d901      	bls.n	800956a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e095      	b.n	8009696 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800956a:	4b4e      	ldr	r3, [pc, #312]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f003 020c 	and.w	r2, r3, #12
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	429a      	cmp	r2, r3
 800957a:	d1eb      	bne.n	8009554 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0302 	and.w	r3, r3, #2
 8009584:	2b00      	cmp	r3, #0
 8009586:	d023      	beq.n	80095d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0304 	and.w	r3, r3, #4
 8009590:	2b00      	cmp	r3, #0
 8009592:	d005      	beq.n	80095a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009594:	4b43      	ldr	r3, [pc, #268]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	4a42      	ldr	r2, [pc, #264]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 800959a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800959e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 0308 	and.w	r3, r3, #8
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d007      	beq.n	80095bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80095ac:	4b3d      	ldr	r3, [pc, #244]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80095b4:	4a3b      	ldr	r2, [pc, #236]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 80095b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80095ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095bc:	4b39      	ldr	r3, [pc, #228]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	4936      	ldr	r1, [pc, #216]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 80095ca:	4313      	orrs	r3, r2
 80095cc:	608b      	str	r3, [r1, #8]
 80095ce:	e008      	b.n	80095e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	2b80      	cmp	r3, #128	@ 0x80
 80095d4:	d105      	bne.n	80095e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80095d6:	4b33      	ldr	r3, [pc, #204]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	4a32      	ldr	r2, [pc, #200]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 80095dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80095e2:	4b2f      	ldr	r3, [pc, #188]	@ (80096a0 <HAL_RCC_ClockConfig+0x260>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 030f 	and.w	r3, r3, #15
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d21d      	bcs.n	800962c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095f0:	4b2b      	ldr	r3, [pc, #172]	@ (80096a0 <HAL_RCC_ClockConfig+0x260>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f023 020f 	bic.w	r2, r3, #15
 80095f8:	4929      	ldr	r1, [pc, #164]	@ (80096a0 <HAL_RCC_ClockConfig+0x260>)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009600:	f7fb f976 	bl	80048f0 <HAL_GetTick>
 8009604:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009606:	e00a      	b.n	800961e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009608:	f7fb f972 	bl	80048f0 <HAL_GetTick>
 800960c:	4602      	mov	r2, r0
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009616:	4293      	cmp	r3, r2
 8009618:	d901      	bls.n	800961e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800961a:	2303      	movs	r3, #3
 800961c:	e03b      	b.n	8009696 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800961e:	4b20      	ldr	r3, [pc, #128]	@ (80096a0 <HAL_RCC_ClockConfig+0x260>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 030f 	and.w	r3, r3, #15
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	429a      	cmp	r2, r3
 800962a:	d1ed      	bne.n	8009608 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0304 	and.w	r3, r3, #4
 8009634:	2b00      	cmp	r3, #0
 8009636:	d008      	beq.n	800964a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009638:	4b1a      	ldr	r3, [pc, #104]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	4917      	ldr	r1, [pc, #92]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 8009646:	4313      	orrs	r3, r2
 8009648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0308 	and.w	r3, r3, #8
 8009652:	2b00      	cmp	r3, #0
 8009654:	d009      	beq.n	800966a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009656:	4b13      	ldr	r3, [pc, #76]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	00db      	lsls	r3, r3, #3
 8009664:	490f      	ldr	r1, [pc, #60]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 8009666:	4313      	orrs	r3, r2
 8009668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800966a:	f000 f86b 	bl	8009744 <HAL_RCC_GetSysClockFreq>
 800966e:	4602      	mov	r2, r0
 8009670:	4b0c      	ldr	r3, [pc, #48]	@ (80096a4 <HAL_RCC_ClockConfig+0x264>)
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	091b      	lsrs	r3, r3, #4
 8009676:	f003 030f 	and.w	r3, r3, #15
 800967a:	490c      	ldr	r1, [pc, #48]	@ (80096ac <HAL_RCC_ClockConfig+0x26c>)
 800967c:	5ccb      	ldrb	r3, [r1, r3]
 800967e:	f003 031f 	and.w	r3, r3, #31
 8009682:	fa22 f303 	lsr.w	r3, r2, r3
 8009686:	4a0a      	ldr	r2, [pc, #40]	@ (80096b0 <HAL_RCC_ClockConfig+0x270>)
 8009688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800968a:	4b0a      	ldr	r3, [pc, #40]	@ (80096b4 <HAL_RCC_ClockConfig+0x274>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4618      	mov	r0, r3
 8009690:	f7f9 fd60 	bl	8003154 <HAL_InitTick>
 8009694:	4603      	mov	r3, r0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3718      	adds	r7, #24
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	40022000 	.word	0x40022000
 80096a4:	40021000 	.word	0x40021000
 80096a8:	04c4b400 	.word	0x04c4b400
 80096ac:	08016254 	.word	0x08016254
 80096b0:	20000004 	.word	0x20000004
 80096b4:	20000008 	.word	0x20000008

080096b8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b08c      	sub	sp, #48	@ 0x30
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 80096c4:	2302      	movs	r3, #2
 80096c6:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80096c8:	2303      	movs	r3, #3
 80096ca:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 80096cc:	2300      	movs	r3, #0
 80096ce:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	0c1b      	lsrs	r3, r3, #16
 80096dc:	f003 030f 	and.w	r3, r3, #15
 80096e0:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 80096e4:	029b      	lsls	r3, r3, #10
 80096e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	0c1b      	lsrs	r3, r3, #16
 80096ec:	f003 030f 	and.w	r3, r3, #15
 80096f0:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 80096f2:	4b13      	ldr	r3, [pc, #76]	@ (8009740 <HAL_RCC_MCOConfig+0x88>)
 80096f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80096f6:	2101      	movs	r1, #1
 80096f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fa:	fa01 f303 	lsl.w	r3, r1, r3
 80096fe:	4910      	ldr	r1, [pc, #64]	@ (8009740 <HAL_RCC_MCOConfig+0x88>)
 8009700:	4313      	orrs	r3, r2
 8009702:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	b29b      	uxth	r3, r3
 8009708:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	0d1b      	lsrs	r3, r3, #20
 800970e:	b2db      	uxtb	r3, r3
 8009710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8009712:	f107 0310 	add.w	r3, r7, #16
 8009716:	4619      	mov	r1, r3
 8009718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800971a:	f7fc fe31 	bl	8006380 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 800971e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009720:	2b00      	cmp	r3, #0
 8009722:	d109      	bne.n	8009738 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8009724:	4b06      	ldr	r3, [pc, #24]	@ (8009740 <HAL_RCC_MCOConfig+0x88>)
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800972c:	68b9      	ldr	r1, [r7, #8]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	430b      	orrs	r3, r1
 8009732:	4903      	ldr	r1, [pc, #12]	@ (8009740 <HAL_RCC_MCOConfig+0x88>)
 8009734:	4313      	orrs	r3, r2
 8009736:	608b      	str	r3, [r1, #8]
  }
}
 8009738:	bf00      	nop
 800973a:	3730      	adds	r7, #48	@ 0x30
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	40021000 	.word	0x40021000

08009744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009744:	b480      	push	{r7}
 8009746:	b087      	sub	sp, #28
 8009748:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800974a:	4b2c      	ldr	r3, [pc, #176]	@ (80097fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f003 030c 	and.w	r3, r3, #12
 8009752:	2b04      	cmp	r3, #4
 8009754:	d102      	bne.n	800975c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009756:	4b2a      	ldr	r3, [pc, #168]	@ (8009800 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009758:	613b      	str	r3, [r7, #16]
 800975a:	e047      	b.n	80097ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800975c:	4b27      	ldr	r3, [pc, #156]	@ (80097fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	f003 030c 	and.w	r3, r3, #12
 8009764:	2b08      	cmp	r3, #8
 8009766:	d102      	bne.n	800976e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009768:	4b26      	ldr	r3, [pc, #152]	@ (8009804 <HAL_RCC_GetSysClockFreq+0xc0>)
 800976a:	613b      	str	r3, [r7, #16]
 800976c:	e03e      	b.n	80097ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800976e:	4b23      	ldr	r3, [pc, #140]	@ (80097fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f003 030c 	and.w	r3, r3, #12
 8009776:	2b0c      	cmp	r3, #12
 8009778:	d136      	bne.n	80097e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800977a:	4b20      	ldr	r3, [pc, #128]	@ (80097fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	f003 0303 	and.w	r3, r3, #3
 8009782:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009784:	4b1d      	ldr	r3, [pc, #116]	@ (80097fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	091b      	lsrs	r3, r3, #4
 800978a:	f003 030f 	and.w	r3, r3, #15
 800978e:	3301      	adds	r3, #1
 8009790:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2b03      	cmp	r3, #3
 8009796:	d10c      	bne.n	80097b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009798:	4a1a      	ldr	r2, [pc, #104]	@ (8009804 <HAL_RCC_GetSysClockFreq+0xc0>)
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a0:	4a16      	ldr	r2, [pc, #88]	@ (80097fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80097a2:	68d2      	ldr	r2, [r2, #12]
 80097a4:	0a12      	lsrs	r2, r2, #8
 80097a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80097aa:	fb02 f303 	mul.w	r3, r2, r3
 80097ae:	617b      	str	r3, [r7, #20]
      break;
 80097b0:	e00c      	b.n	80097cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80097b2:	4a13      	ldr	r2, [pc, #76]	@ (8009800 <HAL_RCC_GetSysClockFreq+0xbc>)
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ba:	4a10      	ldr	r2, [pc, #64]	@ (80097fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80097bc:	68d2      	ldr	r2, [r2, #12]
 80097be:	0a12      	lsrs	r2, r2, #8
 80097c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80097c4:	fb02 f303 	mul.w	r3, r2, r3
 80097c8:	617b      	str	r3, [r7, #20]
      break;
 80097ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80097cc:	4b0b      	ldr	r3, [pc, #44]	@ (80097fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	0e5b      	lsrs	r3, r3, #25
 80097d2:	f003 0303 	and.w	r3, r3, #3
 80097d6:	3301      	adds	r3, #1
 80097d8:	005b      	lsls	r3, r3, #1
 80097da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e4:	613b      	str	r3, [r7, #16]
 80097e6:	e001      	b.n	80097ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80097e8:	2300      	movs	r3, #0
 80097ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80097ec:	693b      	ldr	r3, [r7, #16]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	371c      	adds	r7, #28
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	40021000 	.word	0x40021000
 8009800:	00f42400 	.word	0x00f42400
 8009804:	007a1200 	.word	0x007a1200

08009808 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009808:	b480      	push	{r7}
 800980a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800980c:	4b03      	ldr	r3, [pc, #12]	@ (800981c <HAL_RCC_GetHCLKFreq+0x14>)
 800980e:	681b      	ldr	r3, [r3, #0]
}
 8009810:	4618      	mov	r0, r3
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	20000004 	.word	0x20000004

08009820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009824:	f7ff fff0 	bl	8009808 <HAL_RCC_GetHCLKFreq>
 8009828:	4602      	mov	r2, r0
 800982a:	4b06      	ldr	r3, [pc, #24]	@ (8009844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	0a1b      	lsrs	r3, r3, #8
 8009830:	f003 0307 	and.w	r3, r3, #7
 8009834:	4904      	ldr	r1, [pc, #16]	@ (8009848 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009836:	5ccb      	ldrb	r3, [r1, r3]
 8009838:	f003 031f 	and.w	r3, r3, #31
 800983c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009840:	4618      	mov	r0, r3
 8009842:	bd80      	pop	{r7, pc}
 8009844:	40021000 	.word	0x40021000
 8009848:	08016264 	.word	0x08016264

0800984c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009850:	f7ff ffda 	bl	8009808 <HAL_RCC_GetHCLKFreq>
 8009854:	4602      	mov	r2, r0
 8009856:	4b06      	ldr	r3, [pc, #24]	@ (8009870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	0adb      	lsrs	r3, r3, #11
 800985c:	f003 0307 	and.w	r3, r3, #7
 8009860:	4904      	ldr	r1, [pc, #16]	@ (8009874 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009862:	5ccb      	ldrb	r3, [r1, r3]
 8009864:	f003 031f 	and.w	r3, r3, #31
 8009868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800986c:	4618      	mov	r0, r3
 800986e:	bd80      	pop	{r7, pc}
 8009870:	40021000 	.word	0x40021000
 8009874:	08016264 	.word	0x08016264

08009878 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	220f      	movs	r2, #15
 8009886:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009888:	4b12      	ldr	r3, [pc, #72]	@ (80098d4 <HAL_RCC_GetClockConfig+0x5c>)
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	f003 0203 	and.w	r2, r3, #3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009894:	4b0f      	ldr	r3, [pc, #60]	@ (80098d4 <HAL_RCC_GetClockConfig+0x5c>)
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80098a0:	4b0c      	ldr	r3, [pc, #48]	@ (80098d4 <HAL_RCC_GetClockConfig+0x5c>)
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80098ac:	4b09      	ldr	r3, [pc, #36]	@ (80098d4 <HAL_RCC_GetClockConfig+0x5c>)
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	08db      	lsrs	r3, r3, #3
 80098b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80098ba:	4b07      	ldr	r3, [pc, #28]	@ (80098d8 <HAL_RCC_GetClockConfig+0x60>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 020f 	and.w	r2, r3, #15
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	601a      	str	r2, [r3, #0]
}
 80098c6:	bf00      	nop
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	40021000 	.word	0x40021000
 80098d8:	40022000 	.word	0x40022000

080098dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80098dc:	b480      	push	{r7}
 80098de:	b087      	sub	sp, #28
 80098e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80098e2:	4b1e      	ldr	r3, [pc, #120]	@ (800995c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	f003 0303 	and.w	r3, r3, #3
 80098ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80098ec:	4b1b      	ldr	r3, [pc, #108]	@ (800995c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	091b      	lsrs	r3, r3, #4
 80098f2:	f003 030f 	and.w	r3, r3, #15
 80098f6:	3301      	adds	r3, #1
 80098f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2b03      	cmp	r3, #3
 80098fe:	d10c      	bne.n	800991a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009900:	4a17      	ldr	r2, [pc, #92]	@ (8009960 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	fbb2 f3f3 	udiv	r3, r2, r3
 8009908:	4a14      	ldr	r2, [pc, #80]	@ (800995c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800990a:	68d2      	ldr	r2, [r2, #12]
 800990c:	0a12      	lsrs	r2, r2, #8
 800990e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009912:	fb02 f303 	mul.w	r3, r2, r3
 8009916:	617b      	str	r3, [r7, #20]
    break;
 8009918:	e00c      	b.n	8009934 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800991a:	4a12      	ldr	r2, [pc, #72]	@ (8009964 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009922:	4a0e      	ldr	r2, [pc, #56]	@ (800995c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009924:	68d2      	ldr	r2, [r2, #12]
 8009926:	0a12      	lsrs	r2, r2, #8
 8009928:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800992c:	fb02 f303 	mul.w	r3, r2, r3
 8009930:	617b      	str	r3, [r7, #20]
    break;
 8009932:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009934:	4b09      	ldr	r3, [pc, #36]	@ (800995c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	0e5b      	lsrs	r3, r3, #25
 800993a:	f003 0303 	and.w	r3, r3, #3
 800993e:	3301      	adds	r3, #1
 8009940:	005b      	lsls	r3, r3, #1
 8009942:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009944:	697a      	ldr	r2, [r7, #20]
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	fbb2 f3f3 	udiv	r3, r2, r3
 800994c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800994e:	687b      	ldr	r3, [r7, #4]
}
 8009950:	4618      	mov	r0, r3
 8009952:	371c      	adds	r7, #28
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	40021000 	.word	0x40021000
 8009960:	007a1200 	.word	0x007a1200
 8009964:	00f42400 	.word	0x00f42400

08009968 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009970:	2300      	movs	r3, #0
 8009972:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009974:	2300      	movs	r3, #0
 8009976:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 8098 	beq.w	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009986:	2300      	movs	r3, #0
 8009988:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800998a:	4b43      	ldr	r3, [pc, #268]	@ (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800998c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800998e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10d      	bne.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009996:	4b40      	ldr	r3, [pc, #256]	@ (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800999a:	4a3f      	ldr	r2, [pc, #252]	@ (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800999c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80099a2:	4b3d      	ldr	r3, [pc, #244]	@ (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099aa:	60bb      	str	r3, [r7, #8]
 80099ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099ae:	2301      	movs	r3, #1
 80099b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80099b2:	4b3a      	ldr	r3, [pc, #232]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a39      	ldr	r2, [pc, #228]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80099b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80099be:	f7fa ff97 	bl	80048f0 <HAL_GetTick>
 80099c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099c4:	e009      	b.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099c6:	f7fa ff93 	bl	80048f0 <HAL_GetTick>
 80099ca:	4602      	mov	r2, r0
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d902      	bls.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80099d4:	2303      	movs	r3, #3
 80099d6:	74fb      	strb	r3, [r7, #19]
        break;
 80099d8:	e005      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099da:	4b30      	ldr	r3, [pc, #192]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0ef      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80099e6:	7cfb      	ldrb	r3, [r7, #19]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d159      	bne.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80099ec:	4b2a      	ldr	r3, [pc, #168]	@ (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d01e      	beq.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a02:	697a      	ldr	r2, [r7, #20]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d019      	beq.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009a08:	4b23      	ldr	r3, [pc, #140]	@ (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a14:	4b20      	ldr	r3, [pc, #128]	@ (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a24:	4b1c      	ldr	r3, [pc, #112]	@ (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009a34:	4a18      	ldr	r2, [pc, #96]	@ (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f003 0301 	and.w	r3, r3, #1
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d016      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a46:	f7fa ff53 	bl	80048f0 <HAL_GetTick>
 8009a4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a4c:	e00b      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a4e:	f7fa ff4f 	bl	80048f0 <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d902      	bls.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	74fb      	strb	r3, [r7, #19]
            break;
 8009a64:	e006      	b.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a66:	4b0c      	ldr	r3, [pc, #48]	@ (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a6c:	f003 0302 	and.w	r3, r3, #2
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d0ec      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009a74:	7cfb      	ldrb	r3, [r7, #19]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10b      	bne.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a7a:	4b07      	ldr	r3, [pc, #28]	@ (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a88:	4903      	ldr	r1, [pc, #12]	@ (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009a90:	e008      	b.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a92:	7cfb      	ldrb	r3, [r7, #19]
 8009a94:	74bb      	strb	r3, [r7, #18]
 8009a96:	e005      	b.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009a98:	40021000 	.word	0x40021000
 8009a9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa0:	7cfb      	ldrb	r3, [r7, #19]
 8009aa2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009aa4:	7c7b      	ldrb	r3, [r7, #17]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d105      	bne.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009aaa:	4ba7      	ldr	r3, [pc, #668]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aae:	4aa6      	ldr	r2, [pc, #664]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ab0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ab4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00a      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009ac2:	4ba1      	ldr	r3, [pc, #644]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ac8:	f023 0203 	bic.w	r2, r3, #3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	499d      	ldr	r1, [pc, #628]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 0302 	and.w	r3, r3, #2
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00a      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009ae4:	4b98      	ldr	r3, [pc, #608]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aea:	f023 020c 	bic.w	r2, r3, #12
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	4995      	ldr	r1, [pc, #596]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009af4:	4313      	orrs	r3, r2
 8009af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f003 0304 	and.w	r3, r3, #4
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00a      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009b06:	4b90      	ldr	r3, [pc, #576]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b0c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	498c      	ldr	r1, [pc, #560]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f003 0308 	and.w	r3, r3, #8
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00a      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009b28:	4b87      	ldr	r3, [pc, #540]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b2e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	4984      	ldr	r1, [pc, #528]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f003 0310 	and.w	r3, r3, #16
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00a      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009b4a:	4b7f      	ldr	r3, [pc, #508]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	497b      	ldr	r1, [pc, #492]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0320 	and.w	r3, r3, #32
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00a      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009b6c:	4b76      	ldr	r3, [pc, #472]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b72:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	4973      	ldr	r1, [pc, #460]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00a      	beq.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009b8e:	4b6e      	ldr	r3, [pc, #440]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b94:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	69db      	ldr	r3, [r3, #28]
 8009b9c:	496a      	ldr	r1, [pc, #424]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00a      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009bb0:	4b65      	ldr	r3, [pc, #404]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bb6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	4962      	ldr	r1, [pc, #392]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00a      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009bd2:	4b5d      	ldr	r3, [pc, #372]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be0:	4959      	ldr	r1, [pc, #356]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009be2:	4313      	orrs	r3, r2
 8009be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00a      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009bf4:	4b54      	ldr	r3, [pc, #336]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bfa:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c02:	4951      	ldr	r1, [pc, #324]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c04:	4313      	orrs	r3, r2
 8009c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d015      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009c16:	4b4c      	ldr	r3, [pc, #304]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c1c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c24:	4948      	ldr	r1, [pc, #288]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c34:	d105      	bne.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c36:	4b44      	ldr	r3, [pc, #272]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	4a43      	ldr	r2, [pc, #268]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c40:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d015      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c54:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c5c:	493a      	ldr	r1, [pc, #232]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c6c:	d105      	bne.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c6e:	4b36      	ldr	r3, [pc, #216]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	4a35      	ldr	r2, [pc, #212]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c78:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d015      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c86:	4b30      	ldr	r3, [pc, #192]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c8c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c94:	492c      	ldr	r1, [pc, #176]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c96:	4313      	orrs	r3, r2
 8009c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ca0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ca4:	d105      	bne.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ca6:	4b28      	ldr	r3, [pc, #160]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	4a27      	ldr	r2, [pc, #156]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cb0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d015      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009cbe:	4b22      	ldr	r3, [pc, #136]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cc4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ccc:	491e      	ldr	r1, [pc, #120]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cdc:	d105      	bne.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009cde:	4b1a      	ldr	r3, [pc, #104]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	4a19      	ldr	r2, [pc, #100]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ce4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ce8:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d015      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009cf6:	4b14      	ldr	r3, [pc, #80]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cfc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d04:	4910      	ldr	r1, [pc, #64]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d06:	4313      	orrs	r3, r2
 8009d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d14:	d105      	bne.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d16:	4b0c      	ldr	r3, [pc, #48]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	4a0b      	ldr	r2, [pc, #44]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d20:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d018      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009d2e:	4b06      	ldr	r3, [pc, #24]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d34:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d3c:	4902      	ldr	r1, [pc, #8]	@ (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	e001      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009d48:	40021000 	.word	0x40021000
 8009d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d52:	d105      	bne.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009d54:	4b21      	ldr	r3, [pc, #132]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	4a20      	ldr	r2, [pc, #128]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009d5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d5e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d015      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d72:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d7a:	4918      	ldr	r1, [pc, #96]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d8a:	d105      	bne.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009d8c:	4b13      	ldr	r3, [pc, #76]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	4a12      	ldr	r2, [pc, #72]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009d92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d96:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d015      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009da4:	4b0d      	ldr	r3, [pc, #52]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009da6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009daa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009db2:	490a      	ldr	r1, [pc, #40]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009db4:	4313      	orrs	r3, r2
 8009db6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dc2:	d105      	bne.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009dc4:	4b05      	ldr	r3, [pc, #20]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	4a04      	ldr	r2, [pc, #16]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009dca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009dd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3718      	adds	r7, #24
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	40021000 	.word	0x40021000

08009de0 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b08a      	sub	sp, #40	@ 0x28
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8009de8:	2300      	movs	r3, #0
 8009dea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  FlagStatus       backupchanged = RESET;
 8009dee:	2300      	movs	r3, #0
 8009df0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  __LSCO_CLK_ENABLE();
 8009df4:	4b2d      	ldr	r3, [pc, #180]	@ (8009eac <HAL_RCCEx_EnableLSCO+0xcc>)
 8009df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009df8:	4a2c      	ldr	r2, [pc, #176]	@ (8009eac <HAL_RCCEx_EnableLSCO+0xcc>)
 8009dfa:	f043 0301 	orr.w	r3, r3, #1
 8009dfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009e00:	4b2a      	ldr	r3, [pc, #168]	@ (8009eac <HAL_RCCEx_EnableLSCO+0xcc>)
 8009e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e04:	f003 0301 	and.w	r3, r3, #1
 8009e08:	60fb      	str	r3, [r7, #12]
 8009e0a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8009e0c:	2304      	movs	r3, #4
 8009e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009e10:	2303      	movs	r3, #3
 8009e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009e14:	2302      	movs	r3, #2
 8009e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8009e1c:	f107 0310 	add.w	r3, r7, #16
 8009e20:	4619      	mov	r1, r3
 8009e22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009e26:	f7fc faab 	bl	8006380 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e2a:	4b20      	ldr	r3, [pc, #128]	@ (8009eac <HAL_RCCEx_EnableLSCO+0xcc>)
 8009e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10e      	bne.n	8009e54 <HAL_RCCEx_EnableLSCO+0x74>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009e36:	4b1d      	ldr	r3, [pc, #116]	@ (8009eac <HAL_RCCEx_EnableLSCO+0xcc>)
 8009e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8009eac <HAL_RCCEx_EnableLSCO+0xcc>)
 8009e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e40:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e42:	4b1a      	ldr	r3, [pc, #104]	@ (8009eac <HAL_RCCEx_EnableLSCO+0xcc>)
 8009e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e4a:	60bb      	str	r3, [r7, #8]
 8009e4c:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e54:	4b16      	ldr	r3, [pc, #88]	@ (8009eb0 <HAL_RCCEx_EnableLSCO+0xd0>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d104      	bne.n	8009e6a <HAL_RCCEx_EnableLSCO+0x8a>
  {
    HAL_PWR_EnableBkUpAccess();
 8009e60:	f7fe fe98 	bl	8008b94 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 8009e64:	2301      	movs	r3, #1
 8009e66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8009e6a:	4b10      	ldr	r3, [pc, #64]	@ (8009eac <HAL_RCCEx_EnableLSCO+0xcc>)
 8009e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e70:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	4a0c      	ldr	r2, [pc, #48]	@ (8009eac <HAL_RCCEx_EnableLSCO+0xcc>)
 8009e7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009e7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  if(backupchanged == SET)
 8009e82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d101      	bne.n	8009e8e <HAL_RCCEx_EnableLSCO+0xae>
  {
    HAL_PWR_DisableBkUpAccess();
 8009e8a:	f7fe fe93 	bl	8008bb4 <HAL_PWR_DisableBkUpAccess>
  }
  if(pwrclkchanged == SET)
 8009e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d105      	bne.n	8009ea2 <HAL_RCCEx_EnableLSCO+0xc2>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8009e96:	4b05      	ldr	r3, [pc, #20]	@ (8009eac <HAL_RCCEx_EnableLSCO+0xcc>)
 8009e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e9a:	4a04      	ldr	r2, [pc, #16]	@ (8009eac <HAL_RCCEx_EnableLSCO+0xcc>)
 8009e9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ea0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
}
 8009ea2:	bf00      	nop
 8009ea4:	3728      	adds	r7, #40	@ 0x28
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	40021000 	.word	0x40021000
 8009eb0:	40007000 	.word	0x40007000

08009eb4 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8009ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8009f30 <HAL_RCCEx_CRSConfig+0x7c>)
 8009ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8009f30 <HAL_RCCEx_CRSConfig+0x7c>)
 8009ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ec6:	6393      	str	r3, [r2, #56]	@ 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 8009ec8:	4b19      	ldr	r3, [pc, #100]	@ (8009f30 <HAL_RCCEx_CRSConfig+0x7c>)
 8009eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ecc:	4a18      	ldr	r2, [pc, #96]	@ (8009f30 <HAL_RCCEx_CRSConfig+0x7c>)
 8009ece:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ed2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	431a      	orrs	r2, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	041b      	lsls	r3, r3, #16
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8009efc:	4a0d      	ldr	r2, [pc, #52]	@ (8009f34 <HAL_RCCEx_CRSConfig+0x80>)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8009f02:	4b0c      	ldr	r3, [pc, #48]	@ (8009f34 <HAL_RCCEx_CRSConfig+0x80>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	021b      	lsls	r3, r3, #8
 8009f10:	4908      	ldr	r1, [pc, #32]	@ (8009f34 <HAL_RCCEx_CRSConfig+0x80>)
 8009f12:	4313      	orrs	r3, r2
 8009f14:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8009f16:	4b07      	ldr	r3, [pc, #28]	@ (8009f34 <HAL_RCCEx_CRSConfig+0x80>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a06      	ldr	r2, [pc, #24]	@ (8009f34 <HAL_RCCEx_CRSConfig+0x80>)
 8009f1c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009f20:	6013      	str	r3, [r2, #0]
}
 8009f22:	bf00      	nop
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	40021000 	.word	0x40021000
 8009f34:	40002000 	.word	0x40002000

08009f38 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d101      	bne.n	8009f4a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e027      	b.n	8009f9a <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	7a5b      	ldrb	r3, [r3, #9]
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d105      	bne.n	8009f60 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7f8 fdc2 	bl	8002ae4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2202      	movs	r2, #2
 8009f64:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f023 0108 	bic.w	r1, r3, #8
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f042 0204 	orr.w	r2, r2, #4
 8009f8a:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d070      	beq.n	800a096 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d106      	bne.n	8009fce <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7f8 fdbf 	bl	8002b4c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2202      	movs	r2, #2
 8009fd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	f003 0310 	and.w	r3, r3, #16
 8009fe0:	2b10      	cmp	r3, #16
 8009fe2:	d04f      	beq.n	800a084 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	22ca      	movs	r2, #202	@ 0xca
 8009fea:	625a      	str	r2, [r3, #36]	@ 0x24
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2253      	movs	r2, #83	@ 0x53
 8009ff2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f877 	bl	800a0e8 <RTC_EnterInitMode>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d126      	bne.n	800a052 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	699b      	ldr	r3, [r3, #24]
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	6812      	ldr	r2, [r2, #0]
 800a00e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800a012:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a016:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	6999      	ldr	r1, [r3, #24]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	431a      	orrs	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	699b      	ldr	r3, [r3, #24]
 800a02c:	431a      	orrs	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	430a      	orrs	r2, r1
 800a034:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68d9      	ldr	r1, [r3, #12]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	041a      	lsls	r2, r3, #16
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	430a      	orrs	r2, r1
 800a046:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f883 	bl	800a154 <RTC_ExitInitMode>
 800a04e:	4603      	mov	r3, r0
 800a050:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800a052:	7bfb      	ldrb	r3, [r7, #15]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d110      	bne.n	800a07a <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	699b      	ldr	r3, [r3, #24]
 800a05e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a1a      	ldr	r2, [r3, #32]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	69db      	ldr	r3, [r3, #28]
 800a06a:	431a      	orrs	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	695b      	ldr	r3, [r3, #20]
 800a070:	431a      	orrs	r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	430a      	orrs	r2, r1
 800a078:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	22ff      	movs	r2, #255	@ 0xff
 800a080:	625a      	str	r2, [r3, #36]	@ 0x24
 800a082:	e001      	b.n	800a088 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a088:	7bfb      	ldrb	r3, [r7, #15]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d103      	bne.n	800a096 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2201      	movs	r2, #1
 800a092:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 800a096:	7bfb      	ldrb	r3, [r7, #15]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a0d      	ldr	r2, [pc, #52]	@ (800a0e4 <HAL_RTC_WaitForSynchro+0x44>)
 800a0ae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a0b0:	f7fa fc1e 	bl	80048f0 <HAL_GetTick>
 800a0b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800a0b6:	e009      	b.n	800a0cc <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a0b8:	f7fa fc1a 	bl	80048f0 <HAL_GetTick>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a0c6:	d901      	bls.n	800a0cc <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e007      	b.n	800a0dc <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	f003 0320 	and.w	r3, r3, #32
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d0ee      	beq.n	800a0b8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	0001005f 	.word	0x0001005f

0800a0e8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d123      	bne.n	800a14a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68da      	ldr	r2, [r3, #12]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a110:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a112:	f7fa fbed 	bl	80048f0 <HAL_GetTick>
 800a116:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a118:	e00d      	b.n	800a136 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a11a:	f7fa fbe9 	bl	80048f0 <HAL_GetTick>
 800a11e:	4602      	mov	r2, r0
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	1ad3      	subs	r3, r2, r3
 800a124:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a128:	d905      	bls.n	800a136 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800a12a:	2303      	movs	r3, #3
 800a12c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2203      	movs	r2, #3
 800a132:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a140:	2b00      	cmp	r3, #0
 800a142:	d102      	bne.n	800a14a <RTC_EnterInitMode+0x62>
 800a144:	7bfb      	ldrb	r3, [r7, #15]
 800a146:	2b03      	cmp	r3, #3
 800a148:	d1e7      	bne.n	800a11a <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800a14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68da      	ldr	r2, [r3, #12]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a16e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	f003 0320 	and.w	r3, r3, #32
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10c      	bne.n	800a198 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7ff ff8e 	bl	800a0a0 <HAL_RTC_WaitForSynchro>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d022      	beq.n	800a1d0 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2203      	movs	r2, #3
 800a18e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	73fb      	strb	r3, [r7, #15]
 800a196:	e01b      	b.n	800a1d0 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	699a      	ldr	r2, [r3, #24]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f022 0220 	bic.w	r2, r2, #32
 800a1a6:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7ff ff79 	bl	800a0a0 <HAL_RTC_WaitForSynchro>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d005      	beq.n	800a1c0 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2203      	movs	r2, #3
 800a1b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	699a      	ldr	r2, [r3, #24]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f042 0220 	orr.w	r2, r2, #32
 800a1ce:	619a      	str	r2, [r3, #24]
  }

  return status;
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b084      	sub	sp, #16
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d101      	bne.n	800a1f0 <HAL_RTCEx_SetRefClock+0x16>
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	e034      	b.n	800a25a <HAL_RTCEx_SetRefClock+0x80>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	22ca      	movs	r2, #202	@ 0xca
 800a206:	625a      	str	r2, [r3, #36]	@ 0x24
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2253      	movs	r2, #83	@ 0x53
 800a20e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7ff ff69 	bl	800a0e8 <RTC_EnterInitMode>
 800a216:	4603      	mov	r3, r0
 800a218:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 800a21a:	7bfb      	ldrb	r3, [r7, #15]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10c      	bne.n	800a23a <HAL_RTCEx_SetRefClock+0x60>
  {
    /* Enable clockref detection */
    SET_BIT(hrtc->Instance->CR, RTC_CR_REFCKON);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	699a      	ldr	r2, [r3, #24]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f042 0210 	orr.w	r2, r2, #16
 800a22e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f7ff ff8f 	bl	800a154 <RTC_ExitInitMode>
 800a236:	4603      	mov	r3, r0
 800a238:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	22ff      	movs	r2, #255	@ 0xff
 800a240:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a242:	7bfb      	ldrb	r3, [r7, #15]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d103      	bne.n	800a250 <HAL_RTCEx_SetRefClock+0x76>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800a258:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b084      	sub	sp, #16
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d101      	bne.n	800a274 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	e09d      	b.n	800a3b0 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d108      	bne.n	800a28e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a284:	d009      	beq.n	800a29a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	61da      	str	r2, [r3, #28]
 800a28c:	e005      	b.n	800a29a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d106      	bne.n	800a2ba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f7f8 fcab 	bl	8002c10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2202      	movs	r2, #2
 800a2be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a2d0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a2da:	d902      	bls.n	800a2e2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	60fb      	str	r3, [r7, #12]
 800a2e0:	e002      	b.n	800a2e8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a2e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2e6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a2f0:	d007      	beq.n	800a302 <HAL_SPI_Init+0xa0>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a2fa:	d002      	beq.n	800a302 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a312:	431a      	orrs	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	f003 0302 	and.w	r3, r3, #2
 800a31c:	431a      	orrs	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	f003 0301 	and.w	r3, r3, #1
 800a326:	431a      	orrs	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	699b      	ldr	r3, [r3, #24]
 800a32c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a330:	431a      	orrs	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	69db      	ldr	r3, [r3, #28]
 800a336:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a33a:	431a      	orrs	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a1b      	ldr	r3, [r3, #32]
 800a340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a344:	ea42 0103 	orr.w	r1, r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a34c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	430a      	orrs	r2, r1
 800a356:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	0c1b      	lsrs	r3, r3, #16
 800a35e:	f003 0204 	and.w	r2, r3, #4
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a366:	f003 0310 	and.w	r3, r3, #16
 800a36a:	431a      	orrs	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a370:	f003 0308 	and.w	r3, r3, #8
 800a374:	431a      	orrs	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a37e:	ea42 0103 	orr.w	r1, r2, r3
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	430a      	orrs	r2, r1
 800a38e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	69da      	ldr	r2, [r3, #28]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a39e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	603b      	str	r3, [r7, #0]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3c8:	f7fa fa92 	bl	80048f0 <HAL_GetTick>
 800a3cc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800a3ce:	88fb      	ldrh	r3, [r7, #6]
 800a3d0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d001      	beq.n	800a3e2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800a3de:	2302      	movs	r3, #2
 800a3e0:	e15c      	b.n	800a69c <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <HAL_SPI_Transmit+0x36>
 800a3e8:	88fb      	ldrh	r3, [r7, #6]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e154      	b.n	800a69c <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d101      	bne.n	800a400 <HAL_SPI_Transmit+0x48>
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	e14d      	b.n	800a69c <HAL_SPI_Transmit+0x2e4>
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2203      	movs	r2, #3
 800a40c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	88fa      	ldrh	r2, [r7, #6]
 800a420:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	88fa      	ldrh	r2, [r7, #6]
 800a426:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a452:	d10f      	bne.n	800a474 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a462:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a472:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a47e:	2b40      	cmp	r3, #64	@ 0x40
 800a480:	d007      	beq.n	800a492 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a490:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a49a:	d952      	bls.n	800a542 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d002      	beq.n	800a4aa <HAL_SPI_Transmit+0xf2>
 800a4a4:	8b7b      	ldrh	r3, [r7, #26]
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d145      	bne.n	800a536 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ae:	881a      	ldrh	r2, [r3, #0]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ba:	1c9a      	adds	r2, r3, #2
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a4ce:	e032      	b.n	800a536 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	f003 0302 	and.w	r3, r3, #2
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d112      	bne.n	800a504 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4e2:	881a      	ldrh	r2, [r3, #0]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ee:	1c9a      	adds	r2, r3, #2
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	b29a      	uxth	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a502:	e018      	b.n	800a536 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a504:	f7fa f9f4 	bl	80048f0 <HAL_GetTick>
 800a508:	4602      	mov	r2, r0
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	429a      	cmp	r2, r3
 800a512:	d803      	bhi.n	800a51c <HAL_SPI_Transmit+0x164>
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a51a:	d102      	bne.n	800a522 <HAL_SPI_Transmit+0x16a>
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d109      	bne.n	800a536 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2201      	movs	r2, #1
 800a526:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a532:	2303      	movs	r3, #3
 800a534:	e0b2      	b.n	800a69c <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1c7      	bne.n	800a4d0 <HAL_SPI_Transmit+0x118>
 800a540:	e083      	b.n	800a64a <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d002      	beq.n	800a550 <HAL_SPI_Transmit+0x198>
 800a54a:	8b7b      	ldrh	r3, [r7, #26]
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d177      	bne.n	800a640 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a554:	b29b      	uxth	r3, r3
 800a556:	2b01      	cmp	r3, #1
 800a558:	d912      	bls.n	800a580 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a55e:	881a      	ldrh	r2, [r3, #0]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a56a:	1c9a      	adds	r2, r3, #2
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a574:	b29b      	uxth	r3, r3
 800a576:	3b02      	subs	r3, #2
 800a578:	b29a      	uxth	r2, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a57e:	e05f      	b.n	800a640 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	330c      	adds	r3, #12
 800a58a:	7812      	ldrb	r2, [r2, #0]
 800a58c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a592:	1c5a      	adds	r2, r3, #1
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a5a6:	e04b      	b.n	800a640 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	f003 0302 	and.w	r3, r3, #2
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d12b      	bne.n	800a60e <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d912      	bls.n	800a5e6 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5c4:	881a      	ldrh	r2, [r3, #0]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5d0:	1c9a      	adds	r2, r3, #2
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	3b02      	subs	r3, #2
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a5e4:	e02c      	b.n	800a640 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	330c      	adds	r3, #12
 800a5f0:	7812      	ldrb	r2, [r2, #0]
 800a5f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5f8:	1c5a      	adds	r2, r3, #1
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a602:	b29b      	uxth	r3, r3
 800a604:	3b01      	subs	r3, #1
 800a606:	b29a      	uxth	r2, r3
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a60c:	e018      	b.n	800a640 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a60e:	f7fa f96f 	bl	80048f0 <HAL_GetTick>
 800a612:	4602      	mov	r2, r0
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	683a      	ldr	r2, [r7, #0]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d803      	bhi.n	800a626 <HAL_SPI_Transmit+0x26e>
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a624:	d102      	bne.n	800a62c <HAL_SPI_Transmit+0x274>
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d109      	bne.n	800a640 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a63c:	2303      	movs	r3, #3
 800a63e:	e02d      	b.n	800a69c <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a644:	b29b      	uxth	r3, r3
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1ae      	bne.n	800a5a8 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a64a:	69fa      	ldr	r2, [r7, #28]
 800a64c:	6839      	ldr	r1, [r7, #0]
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f000 fcf6 	bl	800b040 <SPI_EndRxTxTransaction>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d002      	beq.n	800a660 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2220      	movs	r2, #32
 800a65e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10a      	bne.n	800a67e <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a668:	2300      	movs	r3, #0
 800a66a:	617b      	str	r3, [r7, #20]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	617b      	str	r3, [r7, #20]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	617b      	str	r3, [r7, #20]
 800a67c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2201      	movs	r2, #1
 800a682:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e000      	b.n	800a69c <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800a69a:	2300      	movs	r3, #0
  }
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3720      	adds	r7, #32
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b088      	sub	sp, #32
 800a6a8:	af02      	add	r7, sp, #8
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	603b      	str	r3, [r7, #0]
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d001      	beq.n	800a6c4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800a6c0:	2302      	movs	r3, #2
 800a6c2:	e123      	b.n	800a90c <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <HAL_SPI_Receive+0x2c>
 800a6ca:	88fb      	ldrh	r3, [r7, #6]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e11b      	b.n	800a90c <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a6dc:	d112      	bne.n	800a704 <HAL_SPI_Receive+0x60>
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10e      	bne.n	800a704 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2204      	movs	r2, #4
 800a6ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a6ee:	88fa      	ldrh	r2, [r7, #6]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	9300      	str	r3, [sp, #0]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	68b9      	ldr	r1, [r7, #8]
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 f90a 	bl	800a914 <HAL_SPI_TransmitReceive>
 800a700:	4603      	mov	r3, r0
 800a702:	e103      	b.n	800a90c <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a704:	f7fa f8f4 	bl	80048f0 <HAL_GetTick>
 800a708:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a710:	2b01      	cmp	r3, #1
 800a712:	d101      	bne.n	800a718 <HAL_SPI_Receive+0x74>
 800a714:	2302      	movs	r3, #2
 800a716:	e0f9      	b.n	800a90c <HAL_SPI_Receive+0x268>
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2204      	movs	r2, #4
 800a724:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	88fa      	ldrh	r2, [r7, #6]
 800a738:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	88fa      	ldrh	r2, [r7, #6]
 800a740:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a76a:	d908      	bls.n	800a77e <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	685a      	ldr	r2, [r3, #4]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a77a:	605a      	str	r2, [r3, #4]
 800a77c:	e007      	b.n	800a78e <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	685a      	ldr	r2, [r3, #4]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a78c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a796:	d10f      	bne.n	800a7b8 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a7a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a7b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7c2:	2b40      	cmp	r3, #64	@ 0x40
 800a7c4:	d007      	beq.n	800a7d6 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a7d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a7de:	d875      	bhi.n	800a8cc <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a7e0:	e037      	b.n	800a852 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	f003 0301 	and.w	r3, r3, #1
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d117      	bne.n	800a820 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f103 020c 	add.w	r2, r3, #12
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7fc:	7812      	ldrb	r2, [r2, #0]
 800a7fe:	b2d2      	uxtb	r2, r2
 800a800:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a806:	1c5a      	adds	r2, r3, #1
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a812:	b29b      	uxth	r3, r3
 800a814:	3b01      	subs	r3, #1
 800a816:	b29a      	uxth	r2, r3
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800a81e:	e018      	b.n	800a852 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a820:	f7fa f866 	bl	80048f0 <HAL_GetTick>
 800a824:	4602      	mov	r2, r0
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d803      	bhi.n	800a838 <HAL_SPI_Receive+0x194>
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a836:	d102      	bne.n	800a83e <HAL_SPI_Receive+0x19a>
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d109      	bne.n	800a852 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2201      	movs	r2, #1
 800a842:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e05c      	b.n	800a90c <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a858:	b29b      	uxth	r3, r3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1c1      	bne.n	800a7e2 <HAL_SPI_Receive+0x13e>
 800a85e:	e03b      	b.n	800a8d8 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	f003 0301 	and.w	r3, r3, #1
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d115      	bne.n	800a89a <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68da      	ldr	r2, [r3, #12]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a878:	b292      	uxth	r2, r2
 800a87a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a880:	1c9a      	adds	r2, r3, #2
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	3b01      	subs	r3, #1
 800a890:	b29a      	uxth	r2, r3
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800a898:	e018      	b.n	800a8cc <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a89a:	f7fa f829 	bl	80048f0 <HAL_GetTick>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	683a      	ldr	r2, [r7, #0]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d803      	bhi.n	800a8b2 <HAL_SPI_Receive+0x20e>
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8b0:	d102      	bne.n	800a8b8 <HAL_SPI_Receive+0x214>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d109      	bne.n	800a8cc <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	e01f      	b.n	800a90c <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1c3      	bne.n	800a860 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a8d8:	697a      	ldr	r2, [r7, #20]
 800a8da:	6839      	ldr	r1, [r7, #0]
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 fb57 	bl	800af90 <SPI_EndRxTransaction>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2220      	movs	r2, #32
 800a8ec:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a902:	2b00      	cmp	r3, #0
 800a904:	d001      	beq.n	800a90a <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e000      	b.n	800a90c <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800a90a:	2300      	movs	r3, #0
  }
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3718      	adds	r7, #24
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b08a      	sub	sp, #40	@ 0x28
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
 800a920:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a922:	2301      	movs	r3, #1
 800a924:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a926:	f7f9 ffe3 	bl	80048f0 <HAL_GetTick>
 800a92a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a932:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a93a:	887b      	ldrh	r3, [r7, #2]
 800a93c:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800a93e:	887b      	ldrh	r3, [r7, #2]
 800a940:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a942:	7ffb      	ldrb	r3, [r7, #31]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d00c      	beq.n	800a962 <HAL_SPI_TransmitReceive+0x4e>
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a94e:	d106      	bne.n	800a95e <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d102      	bne.n	800a95e <HAL_SPI_TransmitReceive+0x4a>
 800a958:	7ffb      	ldrb	r3, [r7, #31]
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	d001      	beq.n	800a962 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a95e:	2302      	movs	r3, #2
 800a960:	e1f3      	b.n	800ad4a <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d005      	beq.n	800a974 <HAL_SPI_TransmitReceive+0x60>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d002      	beq.n	800a974 <HAL_SPI_TransmitReceive+0x60>
 800a96e:	887b      	ldrh	r3, [r7, #2]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d101      	bne.n	800a978 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	e1e8      	b.n	800ad4a <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d101      	bne.n	800a986 <HAL_SPI_TransmitReceive+0x72>
 800a982:	2302      	movs	r3, #2
 800a984:	e1e1      	b.n	800ad4a <HAL_SPI_TransmitReceive+0x436>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a994:	b2db      	uxtb	r3, r3
 800a996:	2b04      	cmp	r3, #4
 800a998:	d003      	beq.n	800a9a2 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2205      	movs	r2, #5
 800a99e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	887a      	ldrh	r2, [r7, #2]
 800a9b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	887a      	ldrh	r2, [r7, #2]
 800a9ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	887a      	ldrh	r2, [r7, #2]
 800a9c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	887a      	ldrh	r2, [r7, #2]
 800a9ce:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a9e4:	d802      	bhi.n	800a9ec <HAL_SPI_TransmitReceive+0xd8>
 800a9e6:	8abb      	ldrh	r3, [r7, #20]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d908      	bls.n	800a9fe <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	685a      	ldr	r2, [r3, #4]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a9fa:	605a      	str	r2, [r3, #4]
 800a9fc:	e007      	b.n	800aa0e <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	685a      	ldr	r2, [r3, #4]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800aa0c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa18:	2b40      	cmp	r3, #64	@ 0x40
 800aa1a:	d007      	beq.n	800aa2c <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800aa34:	f240 8083 	bls.w	800ab3e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d002      	beq.n	800aa46 <HAL_SPI_TransmitReceive+0x132>
 800aa40:	8afb      	ldrh	r3, [r7, #22]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d16f      	bne.n	800ab26 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa4a:	881a      	ldrh	r2, [r3, #0]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa56:	1c9a      	adds	r2, r3, #2
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	3b01      	subs	r3, #1
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa6a:	e05c      	b.n	800ab26 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	f003 0302 	and.w	r3, r3, #2
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d11b      	bne.n	800aab2 <HAL_SPI_TransmitReceive+0x19e>
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d016      	beq.n	800aab2 <HAL_SPI_TransmitReceive+0x19e>
 800aa84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d113      	bne.n	800aab2 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa8e:	881a      	ldrh	r2, [r3, #0]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa9a:	1c9a      	adds	r2, r3, #2
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	3b01      	subs	r3, #1
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aaae:	2300      	movs	r3, #0
 800aab0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	f003 0301 	and.w	r3, r3, #1
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d11c      	bne.n	800aafa <HAL_SPI_TransmitReceive+0x1e6>
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d016      	beq.n	800aafa <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68da      	ldr	r2, [r3, #12]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad6:	b292      	uxth	r2, r2
 800aad8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aade:	1c9a      	adds	r2, r3, #2
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	3b01      	subs	r3, #1
 800aaee:	b29a      	uxth	r2, r3
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800aafa:	f7f9 fef9 	bl	80048f0 <HAL_GetTick>
 800aafe:	4602      	mov	r2, r0
 800ab00:	6a3b      	ldr	r3, [r7, #32]
 800ab02:	1ad3      	subs	r3, r2, r3
 800ab04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d80d      	bhi.n	800ab26 <HAL_SPI_TransmitReceive+0x212>
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab10:	d009      	beq.n	800ab26 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800ab22:	2303      	movs	r3, #3
 800ab24:	e111      	b.n	800ad4a <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d19d      	bne.n	800aa6c <HAL_SPI_TransmitReceive+0x158>
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d197      	bne.n	800aa6c <HAL_SPI_TransmitReceive+0x158>
 800ab3c:	e0e5      	b.n	800ad0a <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d003      	beq.n	800ab4e <HAL_SPI_TransmitReceive+0x23a>
 800ab46:	8afb      	ldrh	r3, [r7, #22]
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	f040 80d1 	bne.w	800acf0 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d912      	bls.n	800ab7e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab5c:	881a      	ldrh	r2, [r3, #0]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab68:	1c9a      	adds	r2, r3, #2
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	3b02      	subs	r3, #2
 800ab76:	b29a      	uxth	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ab7c:	e0b8      	b.n	800acf0 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	330c      	adds	r3, #12
 800ab88:	7812      	ldrb	r2, [r2, #0]
 800ab8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab90:	1c5a      	adds	r2, r3, #1
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	3b01      	subs	r3, #1
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aba4:	e0a4      	b.n	800acf0 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	f003 0302 	and.w	r3, r3, #2
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	d134      	bne.n	800ac1e <HAL_SPI_TransmitReceive+0x30a>
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800abb8:	b29b      	uxth	r3, r3
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d02f      	beq.n	800ac1e <HAL_SPI_TransmitReceive+0x30a>
 800abbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d12c      	bne.n	800ac1e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800abc8:	b29b      	uxth	r3, r3
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d912      	bls.n	800abf4 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abd2:	881a      	ldrh	r2, [r3, #0]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abde:	1c9a      	adds	r2, r3, #2
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800abe8:	b29b      	uxth	r3, r3
 800abea:	3b02      	subs	r3, #2
 800abec:	b29a      	uxth	r2, r3
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800abf2:	e012      	b.n	800ac1a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	330c      	adds	r3, #12
 800abfe:	7812      	ldrb	r2, [r2, #0]
 800ac00:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac06:	1c5a      	adds	r2, r3, #1
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	3b01      	subs	r3, #1
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	f003 0301 	and.w	r3, r3, #1
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d148      	bne.n	800acbe <HAL_SPI_TransmitReceive+0x3aa>
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d042      	beq.n	800acbe <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d923      	bls.n	800ac8c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68da      	ldr	r2, [r3, #12]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac4e:	b292      	uxth	r2, r2
 800ac50:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac56:	1c9a      	adds	r2, r3, #2
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	3b02      	subs	r3, #2
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d81f      	bhi.n	800acba <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	685a      	ldr	r2, [r3, #4]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ac88:	605a      	str	r2, [r3, #4]
 800ac8a:	e016      	b.n	800acba <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f103 020c 	add.w	r2, r3, #12
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac98:	7812      	ldrb	r2, [r2, #0]
 800ac9a:	b2d2      	uxtb	r2, r2
 800ac9c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800acae:	b29b      	uxth	r3, r3
 800acb0:	3b01      	subs	r3, #1
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800acba:	2301      	movs	r3, #1
 800acbc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800acbe:	f7f9 fe17 	bl	80048f0 <HAL_GetTick>
 800acc2:	4602      	mov	r2, r0
 800acc4:	6a3b      	ldr	r3, [r7, #32]
 800acc6:	1ad3      	subs	r3, r2, r3
 800acc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acca:	429a      	cmp	r2, r3
 800accc:	d803      	bhi.n	800acd6 <HAL_SPI_TransmitReceive+0x3c2>
 800acce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800acd4:	d102      	bne.n	800acdc <HAL_SPI_TransmitReceive+0x3c8>
 800acd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d109      	bne.n	800acf0 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800acec:	2303      	movs	r3, #3
 800acee:	e02c      	b.n	800ad4a <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f47f af55 	bne.w	800aba6 <HAL_SPI_TransmitReceive+0x292>
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f47f af4e 	bne.w	800aba6 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad0a:	6a3a      	ldr	r2, [r7, #32]
 800ad0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f000 f996 	bl	800b040 <SPI_EndRxTxTransaction>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d008      	beq.n	800ad2c <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2220      	movs	r2, #32
 800ad1e:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e00e      	b.n	800ad4a <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d001      	beq.n	800ad48 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e000      	b.n	800ad4a <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800ad48:	2300      	movs	r3, #0
  }
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3728      	adds	r7, #40	@ 0x28
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	603b      	str	r3, [r7, #0]
 800ad60:	4613      	mov	r3, r2
 800ad62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ad64:	f7f9 fdc4 	bl	80048f0 <HAL_GetTick>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6c:	1a9b      	subs	r3, r3, r2
 800ad6e:	683a      	ldr	r2, [r7, #0]
 800ad70:	4413      	add	r3, r2
 800ad72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ad74:	f7f9 fdbc 	bl	80048f0 <HAL_GetTick>
 800ad78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ad7a:	4b39      	ldr	r3, [pc, #228]	@ (800ae60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	015b      	lsls	r3, r3, #5
 800ad80:	0d1b      	lsrs	r3, r3, #20
 800ad82:	69fa      	ldr	r2, [r7, #28]
 800ad84:	fb02 f303 	mul.w	r3, r2, r3
 800ad88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad8a:	e054      	b.n	800ae36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad92:	d050      	beq.n	800ae36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad94:	f7f9 fdac 	bl	80048f0 <HAL_GetTick>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	69fa      	ldr	r2, [r7, #28]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d902      	bls.n	800adaa <SPI_WaitFlagStateUntilTimeout+0x56>
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d13d      	bne.n	800ae26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	685a      	ldr	r2, [r3, #4]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800adb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800adc2:	d111      	bne.n	800ade8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adcc:	d004      	beq.n	800add8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800add6:	d107      	bne.n	800ade8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ade6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adf0:	d10f      	bne.n	800ae12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ae00:	601a      	str	r2, [r3, #0]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ae10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ae22:	2303      	movs	r3, #3
 800ae24:	e017      	b.n	800ae56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d101      	bne.n	800ae30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	3b01      	subs	r3, #1
 800ae34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	689a      	ldr	r2, [r3, #8]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	4013      	ands	r3, r2
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	bf0c      	ite	eq
 800ae46:	2301      	moveq	r3, #1
 800ae48:	2300      	movne	r3, #0
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	79fb      	ldrb	r3, [r7, #7]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d19b      	bne.n	800ad8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3720      	adds	r7, #32
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	20000004 	.word	0x20000004

0800ae64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b08a      	sub	sp, #40	@ 0x28
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
 800ae70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ae76:	f7f9 fd3b 	bl	80048f0 <HAL_GetTick>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae7e:	1a9b      	subs	r3, r3, r2
 800ae80:	683a      	ldr	r2, [r7, #0]
 800ae82:	4413      	add	r3, r2
 800ae84:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800ae86:	f7f9 fd33 	bl	80048f0 <HAL_GetTick>
 800ae8a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	330c      	adds	r3, #12
 800ae92:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ae94:	4b3d      	ldr	r3, [pc, #244]	@ (800af8c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	4413      	add	r3, r2
 800ae9e:	00da      	lsls	r2, r3, #3
 800aea0:	1ad3      	subs	r3, r2, r3
 800aea2:	0d1b      	lsrs	r3, r3, #20
 800aea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aea6:	fb02 f303 	mul.w	r3, r2, r3
 800aeaa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800aeac:	e060      	b.n	800af70 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800aeb4:	d107      	bne.n	800aec6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d104      	bne.n	800aec6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800aec4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aecc:	d050      	beq.n	800af70 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aece:	f7f9 fd0f 	bl	80048f0 <HAL_GetTick>
 800aed2:	4602      	mov	r2, r0
 800aed4:	6a3b      	ldr	r3, [r7, #32]
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d902      	bls.n	800aee4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800aede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d13d      	bne.n	800af60 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	685a      	ldr	r2, [r3, #4]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800aef2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aefc:	d111      	bne.n	800af22 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af06:	d004      	beq.n	800af12 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af10:	d107      	bne.n	800af22 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800af20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af2a:	d10f      	bne.n	800af4c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800af3a:	601a      	str	r2, [r3, #0]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800af4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2200      	movs	r2, #0
 800af58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800af5c:	2303      	movs	r3, #3
 800af5e:	e010      	b.n	800af82 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d101      	bne.n	800af6a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800af66:	2300      	movs	r3, #0
 800af68:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	689a      	ldr	r2, [r3, #8]
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	4013      	ands	r3, r2
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d196      	bne.n	800aeae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3728      	adds	r7, #40	@ 0x28
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	20000004 	.word	0x20000004

0800af90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af02      	add	r7, sp, #8
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800afa4:	d111      	bne.n	800afca <SPI_EndRxTransaction+0x3a>
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800afae:	d004      	beq.n	800afba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afb8:	d107      	bne.n	800afca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800afc8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2200      	movs	r2, #0
 800afd2:	2180      	movs	r1, #128	@ 0x80
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f7ff febd 	bl	800ad54 <SPI_WaitFlagStateUntilTimeout>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d007      	beq.n	800aff0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afe4:	f043 0220 	orr.w	r2, r3, #32
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800afec:	2303      	movs	r3, #3
 800afee:	e023      	b.n	800b038 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aff8:	d11d      	bne.n	800b036 <SPI_EndRxTransaction+0xa6>
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b002:	d004      	beq.n	800b00e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b00c:	d113      	bne.n	800b036 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	9300      	str	r3, [sp, #0]
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	2200      	movs	r2, #0
 800b016:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f7ff ff22 	bl	800ae64 <SPI_WaitFifoStateUntilTimeout>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d007      	beq.n	800b036 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b02a:	f043 0220 	orr.w	r2, r3, #32
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800b032:	2303      	movs	r3, #3
 800b034:	e000      	b.n	800b038 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af02      	add	r7, sp, #8
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	2200      	movs	r2, #0
 800b054:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f7ff ff03 	bl	800ae64 <SPI_WaitFifoStateUntilTimeout>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d007      	beq.n	800b074 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b068:	f043 0220 	orr.w	r2, r3, #32
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b070:	2303      	movs	r3, #3
 800b072:	e027      	b.n	800b0c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2200      	movs	r2, #0
 800b07c:	2180      	movs	r1, #128	@ 0x80
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f7ff fe68 	bl	800ad54 <SPI_WaitFlagStateUntilTimeout>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d007      	beq.n	800b09a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b08e:	f043 0220 	orr.w	r2, r3, #32
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b096:	2303      	movs	r3, #3
 800b098:	e014      	b.n	800b0c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f7ff fedc 	bl	800ae64 <SPI_WaitFifoStateUntilTimeout>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d007      	beq.n	800b0c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0b6:	f043 0220 	orr.w	r2, r3, #32
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	e000      	b.n	800b0c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b0c2:	2300      	movs	r3, #0
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e049      	b.n	800b172 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d106      	bne.n	800b0f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7f7 fe60 	bl	8002db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	3304      	adds	r3, #4
 800b108:	4619      	mov	r1, r3
 800b10a:	4610      	mov	r0, r2
 800b10c:	f000 fdc0 	bl	800bc90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3708      	adds	r7, #8
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
	...

0800b17c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d001      	beq.n	800b194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b190:	2301      	movs	r3, #1
 800b192:	e04f      	b.n	800b234 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2202      	movs	r2, #2
 800b198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68da      	ldr	r2, [r3, #12]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f042 0201 	orr.w	r2, r2, #1
 800b1aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a23      	ldr	r2, [pc, #140]	@ (800b240 <HAL_TIM_Base_Start_IT+0xc4>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d01d      	beq.n	800b1f2 <HAL_TIM_Base_Start_IT+0x76>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1be:	d018      	beq.n	800b1f2 <HAL_TIM_Base_Start_IT+0x76>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a1f      	ldr	r2, [pc, #124]	@ (800b244 <HAL_TIM_Base_Start_IT+0xc8>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d013      	beq.n	800b1f2 <HAL_TIM_Base_Start_IT+0x76>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a1e      	ldr	r2, [pc, #120]	@ (800b248 <HAL_TIM_Base_Start_IT+0xcc>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d00e      	beq.n	800b1f2 <HAL_TIM_Base_Start_IT+0x76>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a1c      	ldr	r2, [pc, #112]	@ (800b24c <HAL_TIM_Base_Start_IT+0xd0>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d009      	beq.n	800b1f2 <HAL_TIM_Base_Start_IT+0x76>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a1b      	ldr	r2, [pc, #108]	@ (800b250 <HAL_TIM_Base_Start_IT+0xd4>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d004      	beq.n	800b1f2 <HAL_TIM_Base_Start_IT+0x76>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a19      	ldr	r2, [pc, #100]	@ (800b254 <HAL_TIM_Base_Start_IT+0xd8>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d115      	bne.n	800b21e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	689a      	ldr	r2, [r3, #8]
 800b1f8:	4b17      	ldr	r3, [pc, #92]	@ (800b258 <HAL_TIM_Base_Start_IT+0xdc>)
 800b1fa:	4013      	ands	r3, r2
 800b1fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2b06      	cmp	r3, #6
 800b202:	d015      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0xb4>
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b20a:	d011      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f042 0201 	orr.w	r2, r2, #1
 800b21a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b21c:	e008      	b.n	800b230 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f042 0201 	orr.w	r2, r2, #1
 800b22c:	601a      	str	r2, [r3, #0]
 800b22e:	e000      	b.n	800b232 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b230:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b232:	2300      	movs	r3, #0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3714      	adds	r7, #20
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr
 800b240:	40012c00 	.word	0x40012c00
 800b244:	40000400 	.word	0x40000400
 800b248:	40000800 	.word	0x40000800
 800b24c:	40013400 	.word	0x40013400
 800b250:	40014000 	.word	0x40014000
 800b254:	40015000 	.word	0x40015000
 800b258:	00010007 	.word	0x00010007

0800b25c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d101      	bne.n	800b26e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	e049      	b.n	800b302 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b274:	b2db      	uxtb	r3, r3
 800b276:	2b00      	cmp	r3, #0
 800b278:	d106      	bne.n	800b288 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f7f7 fde0 	bl	8002e48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2202      	movs	r2, #2
 800b28c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	3304      	adds	r3, #4
 800b298:	4619      	mov	r1, r3
 800b29a:	4610      	mov	r0, r2
 800b29c:	f000 fcf8 	bl	800bc90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b300:	2300      	movs	r3, #0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b086      	sub	sp, #24
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d101      	bne.n	800b31e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b31a:	2301      	movs	r3, #1
 800b31c:	e097      	b.n	800b44e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b324:	b2db      	uxtb	r3, r3
 800b326:	2b00      	cmp	r3, #0
 800b328:	d106      	bne.n	800b338 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7f7 fcb0 	bl	8002c98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2202      	movs	r2, #2
 800b33c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	6812      	ldr	r2, [r2, #0]
 800b34a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800b34e:	f023 0307 	bic.w	r3, r3, #7
 800b352:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	3304      	adds	r3, #4
 800b35c:	4619      	mov	r1, r3
 800b35e:	4610      	mov	r0, r2
 800b360:	f000 fc96 	bl	800bc90 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	699b      	ldr	r3, [r3, #24]
 800b372:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	6a1b      	ldr	r3, [r3, #32]
 800b37a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	697a      	ldr	r2, [r7, #20]
 800b382:	4313      	orrs	r3, r2
 800b384:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b38c:	f023 0303 	bic.w	r3, r3, #3
 800b390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	689a      	ldr	r2, [r3, #8]
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	699b      	ldr	r3, [r3, #24]
 800b39a:	021b      	lsls	r3, r3, #8
 800b39c:	4313      	orrs	r3, r2
 800b39e:	693a      	ldr	r2, [r7, #16]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800b3aa:	f023 030c 	bic.w	r3, r3, #12
 800b3ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b3b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b3ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	68da      	ldr	r2, [r3, #12]
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	69db      	ldr	r3, [r3, #28]
 800b3c4:	021b      	lsls	r3, r3, #8
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	693a      	ldr	r2, [r7, #16]
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	011a      	lsls	r2, r3, #4
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	6a1b      	ldr	r3, [r3, #32]
 800b3d8:	031b      	lsls	r3, r3, #12
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	693a      	ldr	r2, [r7, #16]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b3e8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b3f0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	685a      	ldr	r2, [r3, #4]
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	695b      	ldr	r3, [r3, #20]
 800b3fa:	011b      	lsls	r3, r3, #4
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	4313      	orrs	r3, r2
 800b402:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	697a      	ldr	r2, [r7, #20]
 800b40a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	693a      	ldr	r2, [r7, #16]
 800b412:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2201      	movs	r2, #1
 800b428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2201      	movs	r2, #1
 800b430:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3718      	adds	r7, #24
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b084      	sub	sp, #16
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
 800b45e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b466:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b46e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b476:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b47e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d110      	bne.n	800b4a8 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b486:	7bfb      	ldrb	r3, [r7, #15]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d102      	bne.n	800b492 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b48c:	7b7b      	ldrb	r3, [r7, #13]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d001      	beq.n	800b496 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b492:	2301      	movs	r3, #1
 800b494:	e069      	b.n	800b56a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2202      	movs	r2, #2
 800b49a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2202      	movs	r2, #2
 800b4a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b4a6:	e031      	b.n	800b50c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	2b04      	cmp	r3, #4
 800b4ac:	d110      	bne.n	800b4d0 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b4ae:	7bbb      	ldrb	r3, [r7, #14]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d102      	bne.n	800b4ba <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b4b4:	7b3b      	ldrb	r3, [r7, #12]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d001      	beq.n	800b4be <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e055      	b.n	800b56a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2202      	movs	r2, #2
 800b4c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2202      	movs	r2, #2
 800b4ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b4ce:	e01d      	b.n	800b50c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b4d0:	7bfb      	ldrb	r3, [r7, #15]
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d108      	bne.n	800b4e8 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b4d6:	7bbb      	ldrb	r3, [r7, #14]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d105      	bne.n	800b4e8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b4dc:	7b7b      	ldrb	r3, [r7, #13]
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d102      	bne.n	800b4e8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b4e2:	7b3b      	ldrb	r3, [r7, #12]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d001      	beq.n	800b4ec <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e03e      	b.n	800b56a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2202      	movs	r2, #2
 800b4f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2202      	movs	r2, #2
 800b4f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2202      	movs	r2, #2
 800b500:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2202      	movs	r2, #2
 800b508:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d003      	beq.n	800b51a <HAL_TIM_Encoder_Start+0xc4>
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	2b04      	cmp	r3, #4
 800b516:	d008      	beq.n	800b52a <HAL_TIM_Encoder_Start+0xd4>
 800b518:	e00f      	b.n	800b53a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2201      	movs	r2, #1
 800b520:	2100      	movs	r1, #0
 800b522:	4618      	mov	r0, r3
 800b524:	f001 f824 	bl	800c570 <TIM_CCxChannelCmd>
      break;
 800b528:	e016      	b.n	800b558 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2201      	movs	r2, #1
 800b530:	2104      	movs	r1, #4
 800b532:	4618      	mov	r0, r3
 800b534:	f001 f81c 	bl	800c570 <TIM_CCxChannelCmd>
      break;
 800b538:	e00e      	b.n	800b558 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2201      	movs	r2, #1
 800b540:	2100      	movs	r1, #0
 800b542:	4618      	mov	r0, r3
 800b544:	f001 f814 	bl	800c570 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2201      	movs	r2, #1
 800b54e:	2104      	movs	r1, #4
 800b550:	4618      	mov	r0, r3
 800b552:	f001 f80d 	bl	800c570 <TIM_CCxChannelCmd>
      break;
 800b556:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f042 0201 	orr.w	r2, r2, #1
 800b566:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b572:	b580      	push	{r7, lr}
 800b574:	b084      	sub	sp, #16
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	f003 0302 	and.w	r3, r3, #2
 800b590:	2b00      	cmp	r3, #0
 800b592:	d020      	beq.n	800b5d6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f003 0302 	and.w	r3, r3, #2
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d01b      	beq.n	800b5d6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f06f 0202 	mvn.w	r2, #2
 800b5a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	699b      	ldr	r3, [r3, #24]
 800b5b4:	f003 0303 	and.w	r3, r3, #3
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d003      	beq.n	800b5c4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 fb49 	bl	800bc54 <HAL_TIM_IC_CaptureCallback>
 800b5c2:	e005      	b.n	800b5d0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 fb3b 	bl	800bc40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 fb4c 	bl	800bc68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	f003 0304 	and.w	r3, r3, #4
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d020      	beq.n	800b622 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f003 0304 	and.w	r3, r3, #4
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d01b      	beq.n	800b622 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f06f 0204 	mvn.w	r2, #4
 800b5f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2202      	movs	r2, #2
 800b5f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	699b      	ldr	r3, [r3, #24]
 800b600:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b604:	2b00      	cmp	r3, #0
 800b606:	d003      	beq.n	800b610 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 fb23 	bl	800bc54 <HAL_TIM_IC_CaptureCallback>
 800b60e:	e005      	b.n	800b61c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fb15 	bl	800bc40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fb26 	bl	800bc68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	f003 0308 	and.w	r3, r3, #8
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d020      	beq.n	800b66e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f003 0308 	and.w	r3, r3, #8
 800b632:	2b00      	cmp	r3, #0
 800b634:	d01b      	beq.n	800b66e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f06f 0208 	mvn.w	r2, #8
 800b63e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2204      	movs	r2, #4
 800b644:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	69db      	ldr	r3, [r3, #28]
 800b64c:	f003 0303 	and.w	r3, r3, #3
 800b650:	2b00      	cmp	r3, #0
 800b652:	d003      	beq.n	800b65c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 fafd 	bl	800bc54 <HAL_TIM_IC_CaptureCallback>
 800b65a:	e005      	b.n	800b668 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 faef 	bl	800bc40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fb00 	bl	800bc68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	f003 0310 	and.w	r3, r3, #16
 800b674:	2b00      	cmp	r3, #0
 800b676:	d020      	beq.n	800b6ba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f003 0310 	and.w	r3, r3, #16
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d01b      	beq.n	800b6ba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f06f 0210 	mvn.w	r2, #16
 800b68a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2208      	movs	r2, #8
 800b690:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	69db      	ldr	r3, [r3, #28]
 800b698:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d003      	beq.n	800b6a8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 fad7 	bl	800bc54 <HAL_TIM_IC_CaptureCallback>
 800b6a6:	e005      	b.n	800b6b4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 fac9 	bl	800bc40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 fada 	bl	800bc68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	f003 0301 	and.w	r3, r3, #1
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d00c      	beq.n	800b6de <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f003 0301 	and.w	r3, r3, #1
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d007      	beq.n	800b6de <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f06f 0201 	mvn.w	r2, #1
 800b6d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f7f7 f8c5 	bl	8002868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d104      	bne.n	800b6f2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d00c      	beq.n	800b70c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d007      	beq.n	800b70c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f001 f8bf 	bl	800c88a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00c      	beq.n	800b730 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d007      	beq.n	800b730 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f001 f8b7 	bl	800c89e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00c      	beq.n	800b754 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b740:	2b00      	cmp	r3, #0
 800b742:	d007      	beq.n	800b754 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b74c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fa94 	bl	800bc7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	f003 0320 	and.w	r3, r3, #32
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00c      	beq.n	800b778 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f003 0320 	and.w	r3, r3, #32
 800b764:	2b00      	cmp	r3, #0
 800b766:	d007      	beq.n	800b778 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f06f 0220 	mvn.w	r2, #32
 800b770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f001 f87f 	bl	800c876 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00c      	beq.n	800b79c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d007      	beq.n	800b79c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f001 f88b 	bl	800c8b2 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00c      	beq.n	800b7c0 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d007      	beq.n	800b7c0 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f001 f883 	bl	800c8c6 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00c      	beq.n	800b7e4 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d007      	beq.n	800b7e4 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b7dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f001 f87b 	bl	800c8da <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00c      	beq.n	800b808 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d007      	beq.n	800b808 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f001 f873 	bl	800c8ee <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b808:	bf00      	nop
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b81c:	2300      	movs	r3, #0
 800b81e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b826:	2b01      	cmp	r3, #1
 800b828:	d101      	bne.n	800b82e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b82a:	2302      	movs	r3, #2
 800b82c:	e0ff      	b.n	800ba2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2201      	movs	r2, #1
 800b832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2b14      	cmp	r3, #20
 800b83a:	f200 80f0 	bhi.w	800ba1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b83e:	a201      	add	r2, pc, #4	@ (adr r2, 800b844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b844:	0800b899 	.word	0x0800b899
 800b848:	0800ba1f 	.word	0x0800ba1f
 800b84c:	0800ba1f 	.word	0x0800ba1f
 800b850:	0800ba1f 	.word	0x0800ba1f
 800b854:	0800b8d9 	.word	0x0800b8d9
 800b858:	0800ba1f 	.word	0x0800ba1f
 800b85c:	0800ba1f 	.word	0x0800ba1f
 800b860:	0800ba1f 	.word	0x0800ba1f
 800b864:	0800b91b 	.word	0x0800b91b
 800b868:	0800ba1f 	.word	0x0800ba1f
 800b86c:	0800ba1f 	.word	0x0800ba1f
 800b870:	0800ba1f 	.word	0x0800ba1f
 800b874:	0800b95b 	.word	0x0800b95b
 800b878:	0800ba1f 	.word	0x0800ba1f
 800b87c:	0800ba1f 	.word	0x0800ba1f
 800b880:	0800ba1f 	.word	0x0800ba1f
 800b884:	0800b99d 	.word	0x0800b99d
 800b888:	0800ba1f 	.word	0x0800ba1f
 800b88c:	0800ba1f 	.word	0x0800ba1f
 800b890:	0800ba1f 	.word	0x0800ba1f
 800b894:	0800b9dd 	.word	0x0800b9dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68b9      	ldr	r1, [r7, #8]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f000 faa0 	bl	800bde4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	699a      	ldr	r2, [r3, #24]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f042 0208 	orr.w	r2, r2, #8
 800b8b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	699a      	ldr	r2, [r3, #24]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f022 0204 	bic.w	r2, r2, #4
 800b8c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	6999      	ldr	r1, [r3, #24]
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	691a      	ldr	r2, [r3, #16]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	430a      	orrs	r2, r1
 800b8d4:	619a      	str	r2, [r3, #24]
      break;
 800b8d6:	e0a5      	b.n	800ba24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68b9      	ldr	r1, [r7, #8]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f000 fb1a 	bl	800bf18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	699a      	ldr	r2, [r3, #24]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b8f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	699a      	ldr	r2, [r3, #24]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	6999      	ldr	r1, [r3, #24]
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	691b      	ldr	r3, [r3, #16]
 800b90e:	021a      	lsls	r2, r3, #8
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	430a      	orrs	r2, r1
 800b916:	619a      	str	r2, [r3, #24]
      break;
 800b918:	e084      	b.n	800ba24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	68b9      	ldr	r1, [r7, #8]
 800b920:	4618      	mov	r0, r3
 800b922:	f000 fb8d 	bl	800c040 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	69da      	ldr	r2, [r3, #28]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f042 0208 	orr.w	r2, r2, #8
 800b934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	69da      	ldr	r2, [r3, #28]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f022 0204 	bic.w	r2, r2, #4
 800b944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	69d9      	ldr	r1, [r3, #28]
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	691a      	ldr	r2, [r3, #16]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	430a      	orrs	r2, r1
 800b956:	61da      	str	r2, [r3, #28]
      break;
 800b958:	e064      	b.n	800ba24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	68b9      	ldr	r1, [r7, #8]
 800b960:	4618      	mov	r0, r3
 800b962:	f000 fbff 	bl	800c164 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	69da      	ldr	r2, [r3, #28]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	69da      	ldr	r2, [r3, #28]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	69d9      	ldr	r1, [r3, #28]
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	691b      	ldr	r3, [r3, #16]
 800b990:	021a      	lsls	r2, r3, #8
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	430a      	orrs	r2, r1
 800b998:	61da      	str	r2, [r3, #28]
      break;
 800b99a:	e043      	b.n	800ba24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68b9      	ldr	r1, [r7, #8]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 fc72 	bl	800c28c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f042 0208 	orr.w	r2, r2, #8
 800b9b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f022 0204 	bic.w	r2, r2, #4
 800b9c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	691a      	ldr	r2, [r3, #16]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	430a      	orrs	r2, r1
 800b9d8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b9da:	e023      	b.n	800ba24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	68b9      	ldr	r1, [r7, #8]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 fcbc 	bl	800c360 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b9f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba06:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	021a      	lsls	r2, r3, #8
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	430a      	orrs	r2, r1
 800ba1a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ba1c:	e002      	b.n	800ba24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	75fb      	strb	r3, [r7, #23]
      break;
 800ba22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3718      	adds	r7, #24
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop

0800ba38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba42:	2300      	movs	r3, #0
 800ba44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d101      	bne.n	800ba54 <HAL_TIM_ConfigClockSource+0x1c>
 800ba50:	2302      	movs	r3, #2
 800ba52:	e0e6      	b.n	800bc22 <HAL_TIM_ConfigClockSource+0x1ea>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2202      	movs	r2, #2
 800ba60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ba72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ba76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ba7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	68ba      	ldr	r2, [r7, #8]
 800ba86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a67      	ldr	r2, [pc, #412]	@ (800bc2c <HAL_TIM_ConfigClockSource+0x1f4>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	f000 80b1 	beq.w	800bbf6 <HAL_TIM_ConfigClockSource+0x1be>
 800ba94:	4a65      	ldr	r2, [pc, #404]	@ (800bc2c <HAL_TIM_ConfigClockSource+0x1f4>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	f200 80b6 	bhi.w	800bc08 <HAL_TIM_ConfigClockSource+0x1d0>
 800ba9c:	4a64      	ldr	r2, [pc, #400]	@ (800bc30 <HAL_TIM_ConfigClockSource+0x1f8>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	f000 80a9 	beq.w	800bbf6 <HAL_TIM_ConfigClockSource+0x1be>
 800baa4:	4a62      	ldr	r2, [pc, #392]	@ (800bc30 <HAL_TIM_ConfigClockSource+0x1f8>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	f200 80ae 	bhi.w	800bc08 <HAL_TIM_ConfigClockSource+0x1d0>
 800baac:	4a61      	ldr	r2, [pc, #388]	@ (800bc34 <HAL_TIM_ConfigClockSource+0x1fc>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	f000 80a1 	beq.w	800bbf6 <HAL_TIM_ConfigClockSource+0x1be>
 800bab4:	4a5f      	ldr	r2, [pc, #380]	@ (800bc34 <HAL_TIM_ConfigClockSource+0x1fc>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	f200 80a6 	bhi.w	800bc08 <HAL_TIM_ConfigClockSource+0x1d0>
 800babc:	4a5e      	ldr	r2, [pc, #376]	@ (800bc38 <HAL_TIM_ConfigClockSource+0x200>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	f000 8099 	beq.w	800bbf6 <HAL_TIM_ConfigClockSource+0x1be>
 800bac4:	4a5c      	ldr	r2, [pc, #368]	@ (800bc38 <HAL_TIM_ConfigClockSource+0x200>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	f200 809e 	bhi.w	800bc08 <HAL_TIM_ConfigClockSource+0x1d0>
 800bacc:	4a5b      	ldr	r2, [pc, #364]	@ (800bc3c <HAL_TIM_ConfigClockSource+0x204>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	f000 8091 	beq.w	800bbf6 <HAL_TIM_ConfigClockSource+0x1be>
 800bad4:	4a59      	ldr	r2, [pc, #356]	@ (800bc3c <HAL_TIM_ConfigClockSource+0x204>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	f200 8096 	bhi.w	800bc08 <HAL_TIM_ConfigClockSource+0x1d0>
 800badc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bae0:	f000 8089 	beq.w	800bbf6 <HAL_TIM_ConfigClockSource+0x1be>
 800bae4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bae8:	f200 808e 	bhi.w	800bc08 <HAL_TIM_ConfigClockSource+0x1d0>
 800baec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800baf0:	d03e      	beq.n	800bb70 <HAL_TIM_ConfigClockSource+0x138>
 800baf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800baf6:	f200 8087 	bhi.w	800bc08 <HAL_TIM_ConfigClockSource+0x1d0>
 800bafa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bafe:	f000 8086 	beq.w	800bc0e <HAL_TIM_ConfigClockSource+0x1d6>
 800bb02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb06:	d87f      	bhi.n	800bc08 <HAL_TIM_ConfigClockSource+0x1d0>
 800bb08:	2b70      	cmp	r3, #112	@ 0x70
 800bb0a:	d01a      	beq.n	800bb42 <HAL_TIM_ConfigClockSource+0x10a>
 800bb0c:	2b70      	cmp	r3, #112	@ 0x70
 800bb0e:	d87b      	bhi.n	800bc08 <HAL_TIM_ConfigClockSource+0x1d0>
 800bb10:	2b60      	cmp	r3, #96	@ 0x60
 800bb12:	d050      	beq.n	800bbb6 <HAL_TIM_ConfigClockSource+0x17e>
 800bb14:	2b60      	cmp	r3, #96	@ 0x60
 800bb16:	d877      	bhi.n	800bc08 <HAL_TIM_ConfigClockSource+0x1d0>
 800bb18:	2b50      	cmp	r3, #80	@ 0x50
 800bb1a:	d03c      	beq.n	800bb96 <HAL_TIM_ConfigClockSource+0x15e>
 800bb1c:	2b50      	cmp	r3, #80	@ 0x50
 800bb1e:	d873      	bhi.n	800bc08 <HAL_TIM_ConfigClockSource+0x1d0>
 800bb20:	2b40      	cmp	r3, #64	@ 0x40
 800bb22:	d058      	beq.n	800bbd6 <HAL_TIM_ConfigClockSource+0x19e>
 800bb24:	2b40      	cmp	r3, #64	@ 0x40
 800bb26:	d86f      	bhi.n	800bc08 <HAL_TIM_ConfigClockSource+0x1d0>
 800bb28:	2b30      	cmp	r3, #48	@ 0x30
 800bb2a:	d064      	beq.n	800bbf6 <HAL_TIM_ConfigClockSource+0x1be>
 800bb2c:	2b30      	cmp	r3, #48	@ 0x30
 800bb2e:	d86b      	bhi.n	800bc08 <HAL_TIM_ConfigClockSource+0x1d0>
 800bb30:	2b20      	cmp	r3, #32
 800bb32:	d060      	beq.n	800bbf6 <HAL_TIM_ConfigClockSource+0x1be>
 800bb34:	2b20      	cmp	r3, #32
 800bb36:	d867      	bhi.n	800bc08 <HAL_TIM_ConfigClockSource+0x1d0>
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d05c      	beq.n	800bbf6 <HAL_TIM_ConfigClockSource+0x1be>
 800bb3c:	2b10      	cmp	r3, #16
 800bb3e:	d05a      	beq.n	800bbf6 <HAL_TIM_ConfigClockSource+0x1be>
 800bb40:	e062      	b.n	800bc08 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb52:	f000 fced 	bl	800c530 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bb64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68ba      	ldr	r2, [r7, #8]
 800bb6c:	609a      	str	r2, [r3, #8]
      break;
 800bb6e:	e04f      	b.n	800bc10 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb80:	f000 fcd6 	bl	800c530 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	689a      	ldr	r2, [r3, #8]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bb92:	609a      	str	r2, [r3, #8]
      break;
 800bb94:	e03c      	b.n	800bc10 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bba2:	461a      	mov	r2, r3
 800bba4:	f000 fc48 	bl	800c438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	2150      	movs	r1, #80	@ 0x50
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 fca1 	bl	800c4f6 <TIM_ITRx_SetConfig>
      break;
 800bbb4:	e02c      	b.n	800bc10 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	f000 fc67 	bl	800c496 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2160      	movs	r1, #96	@ 0x60
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 fc91 	bl	800c4f6 <TIM_ITRx_SetConfig>
      break;
 800bbd4:	e01c      	b.n	800bc10 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	f000 fc28 	bl	800c438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2140      	movs	r1, #64	@ 0x40
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f000 fc81 	bl	800c4f6 <TIM_ITRx_SetConfig>
      break;
 800bbf4:	e00c      	b.n	800bc10 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4619      	mov	r1, r3
 800bc00:	4610      	mov	r0, r2
 800bc02:	f000 fc78 	bl	800c4f6 <TIM_ITRx_SetConfig>
      break;
 800bc06:	e003      	b.n	800bc10 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	73fb      	strb	r3, [r7, #15]
      break;
 800bc0c:	e000      	b.n	800bc10 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800bc0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2201      	movs	r2, #1
 800bc14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bc20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	00100070 	.word	0x00100070
 800bc30:	00100050 	.word	0x00100050
 800bc34:	00100040 	.word	0x00100040
 800bc38:	00100030 	.word	0x00100030
 800bc3c:	00100020 	.word	0x00100020

0800bc40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc48:	bf00      	nop
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc5c:	bf00      	nop
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc70:	bf00      	nop
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc84:	bf00      	nop
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4a48      	ldr	r2, [pc, #288]	@ (800bdc4 <TIM_Base_SetConfig+0x134>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d013      	beq.n	800bcd0 <TIM_Base_SetConfig+0x40>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcae:	d00f      	beq.n	800bcd0 <TIM_Base_SetConfig+0x40>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4a45      	ldr	r2, [pc, #276]	@ (800bdc8 <TIM_Base_SetConfig+0x138>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d00b      	beq.n	800bcd0 <TIM_Base_SetConfig+0x40>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4a44      	ldr	r2, [pc, #272]	@ (800bdcc <TIM_Base_SetConfig+0x13c>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d007      	beq.n	800bcd0 <TIM_Base_SetConfig+0x40>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4a43      	ldr	r2, [pc, #268]	@ (800bdd0 <TIM_Base_SetConfig+0x140>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d003      	beq.n	800bcd0 <TIM_Base_SetConfig+0x40>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a42      	ldr	r2, [pc, #264]	@ (800bdd4 <TIM_Base_SetConfig+0x144>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d108      	bne.n	800bce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4a37      	ldr	r2, [pc, #220]	@ (800bdc4 <TIM_Base_SetConfig+0x134>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d01f      	beq.n	800bd2a <TIM_Base_SetConfig+0x9a>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcf0:	d01b      	beq.n	800bd2a <TIM_Base_SetConfig+0x9a>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a34      	ldr	r2, [pc, #208]	@ (800bdc8 <TIM_Base_SetConfig+0x138>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d017      	beq.n	800bd2a <TIM_Base_SetConfig+0x9a>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4a33      	ldr	r2, [pc, #204]	@ (800bdcc <TIM_Base_SetConfig+0x13c>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d013      	beq.n	800bd2a <TIM_Base_SetConfig+0x9a>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a32      	ldr	r2, [pc, #200]	@ (800bdd0 <TIM_Base_SetConfig+0x140>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d00f      	beq.n	800bd2a <TIM_Base_SetConfig+0x9a>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a32      	ldr	r2, [pc, #200]	@ (800bdd8 <TIM_Base_SetConfig+0x148>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d00b      	beq.n	800bd2a <TIM_Base_SetConfig+0x9a>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a31      	ldr	r2, [pc, #196]	@ (800bddc <TIM_Base_SetConfig+0x14c>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d007      	beq.n	800bd2a <TIM_Base_SetConfig+0x9a>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a30      	ldr	r2, [pc, #192]	@ (800bde0 <TIM_Base_SetConfig+0x150>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d003      	beq.n	800bd2a <TIM_Base_SetConfig+0x9a>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a2b      	ldr	r2, [pc, #172]	@ (800bdd4 <TIM_Base_SetConfig+0x144>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d108      	bne.n	800bd3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	695b      	ldr	r3, [r3, #20]
 800bd46:	4313      	orrs	r3, r2
 800bd48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	689a      	ldr	r2, [r3, #8]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	4a18      	ldr	r2, [pc, #96]	@ (800bdc4 <TIM_Base_SetConfig+0x134>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d013      	beq.n	800bd90 <TIM_Base_SetConfig+0x100>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4a19      	ldr	r2, [pc, #100]	@ (800bdd0 <TIM_Base_SetConfig+0x140>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d00f      	beq.n	800bd90 <TIM_Base_SetConfig+0x100>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	4a19      	ldr	r2, [pc, #100]	@ (800bdd8 <TIM_Base_SetConfig+0x148>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d00b      	beq.n	800bd90 <TIM_Base_SetConfig+0x100>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4a18      	ldr	r2, [pc, #96]	@ (800bddc <TIM_Base_SetConfig+0x14c>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d007      	beq.n	800bd90 <TIM_Base_SetConfig+0x100>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4a17      	ldr	r2, [pc, #92]	@ (800bde0 <TIM_Base_SetConfig+0x150>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d003      	beq.n	800bd90 <TIM_Base_SetConfig+0x100>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4a12      	ldr	r2, [pc, #72]	@ (800bdd4 <TIM_Base_SetConfig+0x144>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d103      	bne.n	800bd98 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	691a      	ldr	r2, [r3, #16]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	691b      	ldr	r3, [r3, #16]
 800bda2:	f003 0301 	and.w	r3, r3, #1
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d105      	bne.n	800bdb6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	691b      	ldr	r3, [r3, #16]
 800bdae:	f023 0201 	bic.w	r2, r3, #1
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	611a      	str	r2, [r3, #16]
  }
}
 800bdb6:	bf00      	nop
 800bdb8:	3714      	adds	r7, #20
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	40012c00 	.word	0x40012c00
 800bdc8:	40000400 	.word	0x40000400
 800bdcc:	40000800 	.word	0x40000800
 800bdd0:	40013400 	.word	0x40013400
 800bdd4:	40015000 	.word	0x40015000
 800bdd8:	40014000 	.word	0x40014000
 800bddc:	40014400 	.word	0x40014400
 800bde0:	40014800 	.word	0x40014800

0800bde4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b087      	sub	sp, #28
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6a1b      	ldr	r3, [r3, #32]
 800bdf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6a1b      	ldr	r3, [r3, #32]
 800bdf8:	f023 0201 	bic.w	r2, r3, #1
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	699b      	ldr	r3, [r3, #24]
 800be0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f023 0303 	bic.w	r3, r3, #3
 800be1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	4313      	orrs	r3, r2
 800be28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	f023 0302 	bic.w	r3, r3, #2
 800be30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	697a      	ldr	r2, [r7, #20]
 800be38:	4313      	orrs	r3, r2
 800be3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a30      	ldr	r2, [pc, #192]	@ (800bf00 <TIM_OC1_SetConfig+0x11c>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d013      	beq.n	800be6c <TIM_OC1_SetConfig+0x88>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4a2f      	ldr	r2, [pc, #188]	@ (800bf04 <TIM_OC1_SetConfig+0x120>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d00f      	beq.n	800be6c <TIM_OC1_SetConfig+0x88>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4a2e      	ldr	r2, [pc, #184]	@ (800bf08 <TIM_OC1_SetConfig+0x124>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d00b      	beq.n	800be6c <TIM_OC1_SetConfig+0x88>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4a2d      	ldr	r2, [pc, #180]	@ (800bf0c <TIM_OC1_SetConfig+0x128>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d007      	beq.n	800be6c <TIM_OC1_SetConfig+0x88>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4a2c      	ldr	r2, [pc, #176]	@ (800bf10 <TIM_OC1_SetConfig+0x12c>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d003      	beq.n	800be6c <TIM_OC1_SetConfig+0x88>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4a2b      	ldr	r2, [pc, #172]	@ (800bf14 <TIM_OC1_SetConfig+0x130>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d10c      	bne.n	800be86 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	f023 0308 	bic.w	r3, r3, #8
 800be72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	697a      	ldr	r2, [r7, #20]
 800be7a:	4313      	orrs	r3, r2
 800be7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	f023 0304 	bic.w	r3, r3, #4
 800be84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4a1d      	ldr	r2, [pc, #116]	@ (800bf00 <TIM_OC1_SetConfig+0x11c>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d013      	beq.n	800beb6 <TIM_OC1_SetConfig+0xd2>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4a1c      	ldr	r2, [pc, #112]	@ (800bf04 <TIM_OC1_SetConfig+0x120>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d00f      	beq.n	800beb6 <TIM_OC1_SetConfig+0xd2>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4a1b      	ldr	r2, [pc, #108]	@ (800bf08 <TIM_OC1_SetConfig+0x124>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d00b      	beq.n	800beb6 <TIM_OC1_SetConfig+0xd2>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4a1a      	ldr	r2, [pc, #104]	@ (800bf0c <TIM_OC1_SetConfig+0x128>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d007      	beq.n	800beb6 <TIM_OC1_SetConfig+0xd2>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a19      	ldr	r2, [pc, #100]	@ (800bf10 <TIM_OC1_SetConfig+0x12c>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d003      	beq.n	800beb6 <TIM_OC1_SetConfig+0xd2>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4a18      	ldr	r2, [pc, #96]	@ (800bf14 <TIM_OC1_SetConfig+0x130>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d111      	bne.n	800beda <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	695b      	ldr	r3, [r3, #20]
 800beca:	693a      	ldr	r2, [r7, #16]
 800becc:	4313      	orrs	r3, r2
 800bece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	699b      	ldr	r3, [r3, #24]
 800bed4:	693a      	ldr	r2, [r7, #16]
 800bed6:	4313      	orrs	r3, r2
 800bed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	693a      	ldr	r2, [r7, #16]
 800bede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	685a      	ldr	r2, [r3, #4]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	697a      	ldr	r2, [r7, #20]
 800bef2:	621a      	str	r2, [r3, #32]
}
 800bef4:	bf00      	nop
 800bef6:	371c      	adds	r7, #28
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr
 800bf00:	40012c00 	.word	0x40012c00
 800bf04:	40013400 	.word	0x40013400
 800bf08:	40014000 	.word	0x40014000
 800bf0c:	40014400 	.word	0x40014400
 800bf10:	40014800 	.word	0x40014800
 800bf14:	40015000 	.word	0x40015000

0800bf18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b087      	sub	sp, #28
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a1b      	ldr	r3, [r3, #32]
 800bf26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6a1b      	ldr	r3, [r3, #32]
 800bf2c:	f023 0210 	bic.w	r2, r3, #16
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	699b      	ldr	r3, [r3, #24]
 800bf3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bf46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	021b      	lsls	r3, r3, #8
 800bf5a:	68fa      	ldr	r2, [r7, #12]
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	f023 0320 	bic.w	r3, r3, #32
 800bf66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	011b      	lsls	r3, r3, #4
 800bf6e:	697a      	ldr	r2, [r7, #20]
 800bf70:	4313      	orrs	r3, r2
 800bf72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4a2c      	ldr	r2, [pc, #176]	@ (800c028 <TIM_OC2_SetConfig+0x110>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d007      	beq.n	800bf8c <TIM_OC2_SetConfig+0x74>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4a2b      	ldr	r2, [pc, #172]	@ (800c02c <TIM_OC2_SetConfig+0x114>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d003      	beq.n	800bf8c <TIM_OC2_SetConfig+0x74>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	4a2a      	ldr	r2, [pc, #168]	@ (800c030 <TIM_OC2_SetConfig+0x118>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d10d      	bne.n	800bfa8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	011b      	lsls	r3, r3, #4
 800bf9a:	697a      	ldr	r2, [r7, #20]
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bfa6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	4a1f      	ldr	r2, [pc, #124]	@ (800c028 <TIM_OC2_SetConfig+0x110>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d013      	beq.n	800bfd8 <TIM_OC2_SetConfig+0xc0>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	4a1e      	ldr	r2, [pc, #120]	@ (800c02c <TIM_OC2_SetConfig+0x114>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d00f      	beq.n	800bfd8 <TIM_OC2_SetConfig+0xc0>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4a1e      	ldr	r2, [pc, #120]	@ (800c034 <TIM_OC2_SetConfig+0x11c>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d00b      	beq.n	800bfd8 <TIM_OC2_SetConfig+0xc0>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	4a1d      	ldr	r2, [pc, #116]	@ (800c038 <TIM_OC2_SetConfig+0x120>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d007      	beq.n	800bfd8 <TIM_OC2_SetConfig+0xc0>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	4a1c      	ldr	r2, [pc, #112]	@ (800c03c <TIM_OC2_SetConfig+0x124>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d003      	beq.n	800bfd8 <TIM_OC2_SetConfig+0xc0>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	4a17      	ldr	r2, [pc, #92]	@ (800c030 <TIM_OC2_SetConfig+0x118>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d113      	bne.n	800c000 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bfde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bfe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	695b      	ldr	r3, [r3, #20]
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	693a      	ldr	r2, [r7, #16]
 800bff0:	4313      	orrs	r3, r2
 800bff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	699b      	ldr	r3, [r3, #24]
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	693a      	ldr	r2, [r7, #16]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	693a      	ldr	r2, [r7, #16]
 800c004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	697a      	ldr	r2, [r7, #20]
 800c018:	621a      	str	r2, [r3, #32]
}
 800c01a:	bf00      	nop
 800c01c:	371c      	adds	r7, #28
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	40012c00 	.word	0x40012c00
 800c02c:	40013400 	.word	0x40013400
 800c030:	40015000 	.word	0x40015000
 800c034:	40014000 	.word	0x40014000
 800c038:	40014400 	.word	0x40014400
 800c03c:	40014800 	.word	0x40014800

0800c040 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c040:	b480      	push	{r7}
 800c042:	b087      	sub	sp, #28
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a1b      	ldr	r3, [r3, #32]
 800c04e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a1b      	ldr	r3, [r3, #32]
 800c054:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	69db      	ldr	r3, [r3, #28]
 800c066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c06e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f023 0303 	bic.w	r3, r3, #3
 800c07a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	4313      	orrs	r3, r2
 800c084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c08c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	021b      	lsls	r3, r3, #8
 800c094:	697a      	ldr	r2, [r7, #20]
 800c096:	4313      	orrs	r3, r2
 800c098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4a2b      	ldr	r2, [pc, #172]	@ (800c14c <TIM_OC3_SetConfig+0x10c>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d007      	beq.n	800c0b2 <TIM_OC3_SetConfig+0x72>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4a2a      	ldr	r2, [pc, #168]	@ (800c150 <TIM_OC3_SetConfig+0x110>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d003      	beq.n	800c0b2 <TIM_OC3_SetConfig+0x72>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a29      	ldr	r2, [pc, #164]	@ (800c154 <TIM_OC3_SetConfig+0x114>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d10d      	bne.n	800c0ce <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c0b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	021b      	lsls	r3, r3, #8
 800c0c0:	697a      	ldr	r2, [r7, #20]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c0cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4a1e      	ldr	r2, [pc, #120]	@ (800c14c <TIM_OC3_SetConfig+0x10c>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d013      	beq.n	800c0fe <TIM_OC3_SetConfig+0xbe>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4a1d      	ldr	r2, [pc, #116]	@ (800c150 <TIM_OC3_SetConfig+0x110>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d00f      	beq.n	800c0fe <TIM_OC3_SetConfig+0xbe>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4a1d      	ldr	r2, [pc, #116]	@ (800c158 <TIM_OC3_SetConfig+0x118>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d00b      	beq.n	800c0fe <TIM_OC3_SetConfig+0xbe>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4a1c      	ldr	r2, [pc, #112]	@ (800c15c <TIM_OC3_SetConfig+0x11c>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d007      	beq.n	800c0fe <TIM_OC3_SetConfig+0xbe>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a1b      	ldr	r2, [pc, #108]	@ (800c160 <TIM_OC3_SetConfig+0x120>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d003      	beq.n	800c0fe <TIM_OC3_SetConfig+0xbe>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a16      	ldr	r2, [pc, #88]	@ (800c154 <TIM_OC3_SetConfig+0x114>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d113      	bne.n	800c126 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c10c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	695b      	ldr	r3, [r3, #20]
 800c112:	011b      	lsls	r3, r3, #4
 800c114:	693a      	ldr	r2, [r7, #16]
 800c116:	4313      	orrs	r3, r2
 800c118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	699b      	ldr	r3, [r3, #24]
 800c11e:	011b      	lsls	r3, r3, #4
 800c120:	693a      	ldr	r2, [r7, #16]
 800c122:	4313      	orrs	r3, r2
 800c124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	693a      	ldr	r2, [r7, #16]
 800c12a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	68fa      	ldr	r2, [r7, #12]
 800c130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	685a      	ldr	r2, [r3, #4]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	697a      	ldr	r2, [r7, #20]
 800c13e:	621a      	str	r2, [r3, #32]
}
 800c140:	bf00      	nop
 800c142:	371c      	adds	r7, #28
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr
 800c14c:	40012c00 	.word	0x40012c00
 800c150:	40013400 	.word	0x40013400
 800c154:	40015000 	.word	0x40015000
 800c158:	40014000 	.word	0x40014000
 800c15c:	40014400 	.word	0x40014400
 800c160:	40014800 	.word	0x40014800

0800c164 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c164:	b480      	push	{r7}
 800c166:	b087      	sub	sp, #28
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6a1b      	ldr	r3, [r3, #32]
 800c172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6a1b      	ldr	r3, [r3, #32]
 800c178:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	69db      	ldr	r3, [r3, #28]
 800c18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c19e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	021b      	lsls	r3, r3, #8
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c1b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	031b      	lsls	r3, r3, #12
 800c1ba:	697a      	ldr	r2, [r7, #20]
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4a2c      	ldr	r2, [pc, #176]	@ (800c274 <TIM_OC4_SetConfig+0x110>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d007      	beq.n	800c1d8 <TIM_OC4_SetConfig+0x74>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a2b      	ldr	r2, [pc, #172]	@ (800c278 <TIM_OC4_SetConfig+0x114>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d003      	beq.n	800c1d8 <TIM_OC4_SetConfig+0x74>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	4a2a      	ldr	r2, [pc, #168]	@ (800c27c <TIM_OC4_SetConfig+0x118>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d10d      	bne.n	800c1f4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c1de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	031b      	lsls	r3, r3, #12
 800c1e6:	697a      	ldr	r2, [r7, #20]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c1f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	4a1f      	ldr	r2, [pc, #124]	@ (800c274 <TIM_OC4_SetConfig+0x110>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d013      	beq.n	800c224 <TIM_OC4_SetConfig+0xc0>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	4a1e      	ldr	r2, [pc, #120]	@ (800c278 <TIM_OC4_SetConfig+0x114>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d00f      	beq.n	800c224 <TIM_OC4_SetConfig+0xc0>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	4a1e      	ldr	r2, [pc, #120]	@ (800c280 <TIM_OC4_SetConfig+0x11c>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d00b      	beq.n	800c224 <TIM_OC4_SetConfig+0xc0>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	4a1d      	ldr	r2, [pc, #116]	@ (800c284 <TIM_OC4_SetConfig+0x120>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d007      	beq.n	800c224 <TIM_OC4_SetConfig+0xc0>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	4a1c      	ldr	r2, [pc, #112]	@ (800c288 <TIM_OC4_SetConfig+0x124>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d003      	beq.n	800c224 <TIM_OC4_SetConfig+0xc0>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	4a17      	ldr	r2, [pc, #92]	@ (800c27c <TIM_OC4_SetConfig+0x118>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d113      	bne.n	800c24c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c22a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c232:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	695b      	ldr	r3, [r3, #20]
 800c238:	019b      	lsls	r3, r3, #6
 800c23a:	693a      	ldr	r2, [r7, #16]
 800c23c:	4313      	orrs	r3, r2
 800c23e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	699b      	ldr	r3, [r3, #24]
 800c244:	019b      	lsls	r3, r3, #6
 800c246:	693a      	ldr	r2, [r7, #16]
 800c248:	4313      	orrs	r3, r2
 800c24a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	693a      	ldr	r2, [r7, #16]
 800c250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	68fa      	ldr	r2, [r7, #12]
 800c256:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	697a      	ldr	r2, [r7, #20]
 800c264:	621a      	str	r2, [r3, #32]
}
 800c266:	bf00      	nop
 800c268:	371c      	adds	r7, #28
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	40012c00 	.word	0x40012c00
 800c278:	40013400 	.word	0x40013400
 800c27c:	40015000 	.word	0x40015000
 800c280:	40014000 	.word	0x40014000
 800c284:	40014400 	.word	0x40014400
 800c288:	40014800 	.word	0x40014800

0800c28c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b087      	sub	sp, #28
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6a1b      	ldr	r3, [r3, #32]
 800c29a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6a1b      	ldr	r3, [r3, #32]
 800c2a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c2ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	68fa      	ldr	r2, [r7, #12]
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c2d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	041b      	lsls	r3, r3, #16
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4a19      	ldr	r2, [pc, #100]	@ (800c348 <TIM_OC5_SetConfig+0xbc>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d013      	beq.n	800c30e <TIM_OC5_SetConfig+0x82>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	4a18      	ldr	r2, [pc, #96]	@ (800c34c <TIM_OC5_SetConfig+0xc0>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d00f      	beq.n	800c30e <TIM_OC5_SetConfig+0x82>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4a17      	ldr	r2, [pc, #92]	@ (800c350 <TIM_OC5_SetConfig+0xc4>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d00b      	beq.n	800c30e <TIM_OC5_SetConfig+0x82>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	4a16      	ldr	r2, [pc, #88]	@ (800c354 <TIM_OC5_SetConfig+0xc8>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d007      	beq.n	800c30e <TIM_OC5_SetConfig+0x82>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4a15      	ldr	r2, [pc, #84]	@ (800c358 <TIM_OC5_SetConfig+0xcc>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d003      	beq.n	800c30e <TIM_OC5_SetConfig+0x82>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4a14      	ldr	r2, [pc, #80]	@ (800c35c <TIM_OC5_SetConfig+0xd0>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d109      	bne.n	800c322 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c314:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	695b      	ldr	r3, [r3, #20]
 800c31a:	021b      	lsls	r3, r3, #8
 800c31c:	697a      	ldr	r2, [r7, #20]
 800c31e:	4313      	orrs	r3, r2
 800c320:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	697a      	ldr	r2, [r7, #20]
 800c326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	685a      	ldr	r2, [r3, #4]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	693a      	ldr	r2, [r7, #16]
 800c33a:	621a      	str	r2, [r3, #32]
}
 800c33c:	bf00      	nop
 800c33e:	371c      	adds	r7, #28
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr
 800c348:	40012c00 	.word	0x40012c00
 800c34c:	40013400 	.word	0x40013400
 800c350:	40014000 	.word	0x40014000
 800c354:	40014400 	.word	0x40014400
 800c358:	40014800 	.word	0x40014800
 800c35c:	40015000 	.word	0x40015000

0800c360 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c360:	b480      	push	{r7}
 800c362:	b087      	sub	sp, #28
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6a1b      	ldr	r3, [r3, #32]
 800c36e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6a1b      	ldr	r3, [r3, #32]
 800c374:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c38e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	021b      	lsls	r3, r3, #8
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	4313      	orrs	r3, r2
 800c39e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c3a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	051b      	lsls	r3, r3, #20
 800c3ae:	693a      	ldr	r2, [r7, #16]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	4a1a      	ldr	r2, [pc, #104]	@ (800c420 <TIM_OC6_SetConfig+0xc0>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d013      	beq.n	800c3e4 <TIM_OC6_SetConfig+0x84>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4a19      	ldr	r2, [pc, #100]	@ (800c424 <TIM_OC6_SetConfig+0xc4>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d00f      	beq.n	800c3e4 <TIM_OC6_SetConfig+0x84>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4a18      	ldr	r2, [pc, #96]	@ (800c428 <TIM_OC6_SetConfig+0xc8>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d00b      	beq.n	800c3e4 <TIM_OC6_SetConfig+0x84>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4a17      	ldr	r2, [pc, #92]	@ (800c42c <TIM_OC6_SetConfig+0xcc>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d007      	beq.n	800c3e4 <TIM_OC6_SetConfig+0x84>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4a16      	ldr	r2, [pc, #88]	@ (800c430 <TIM_OC6_SetConfig+0xd0>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d003      	beq.n	800c3e4 <TIM_OC6_SetConfig+0x84>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4a15      	ldr	r2, [pc, #84]	@ (800c434 <TIM_OC6_SetConfig+0xd4>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d109      	bne.n	800c3f8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c3ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	695b      	ldr	r3, [r3, #20]
 800c3f0:	029b      	lsls	r3, r3, #10
 800c3f2:	697a      	ldr	r2, [r7, #20]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	697a      	ldr	r2, [r7, #20]
 800c3fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	685a      	ldr	r2, [r3, #4]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	693a      	ldr	r2, [r7, #16]
 800c410:	621a      	str	r2, [r3, #32]
}
 800c412:	bf00      	nop
 800c414:	371c      	adds	r7, #28
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	40012c00 	.word	0x40012c00
 800c424:	40013400 	.word	0x40013400
 800c428:	40014000 	.word	0x40014000
 800c42c:	40014400 	.word	0x40014400
 800c430:	40014800 	.word	0x40014800
 800c434:	40015000 	.word	0x40015000

0800c438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c438:	b480      	push	{r7}
 800c43a:	b087      	sub	sp, #28
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6a1b      	ldr	r3, [r3, #32]
 800c448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	6a1b      	ldr	r3, [r3, #32]
 800c44e:	f023 0201 	bic.w	r2, r3, #1
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	699b      	ldr	r3, [r3, #24]
 800c45a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	011b      	lsls	r3, r3, #4
 800c468:	693a      	ldr	r2, [r7, #16]
 800c46a:	4313      	orrs	r3, r2
 800c46c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f023 030a 	bic.w	r3, r3, #10
 800c474:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	4313      	orrs	r3, r2
 800c47c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	693a      	ldr	r2, [r7, #16]
 800c482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	697a      	ldr	r2, [r7, #20]
 800c488:	621a      	str	r2, [r3, #32]
}
 800c48a:	bf00      	nop
 800c48c:	371c      	adds	r7, #28
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr

0800c496 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c496:	b480      	push	{r7}
 800c498:	b087      	sub	sp, #28
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	60f8      	str	r0, [r7, #12]
 800c49e:	60b9      	str	r1, [r7, #8]
 800c4a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	6a1b      	ldr	r3, [r3, #32]
 800c4a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6a1b      	ldr	r3, [r3, #32]
 800c4ac:	f023 0210 	bic.w	r2, r3, #16
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	699b      	ldr	r3, [r3, #24]
 800c4b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c4c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	031b      	lsls	r3, r3, #12
 800c4c6:	693a      	ldr	r2, [r7, #16]
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c4d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	011b      	lsls	r3, r3, #4
 800c4d8:	697a      	ldr	r2, [r7, #20]
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	693a      	ldr	r2, [r7, #16]
 800c4e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	697a      	ldr	r2, [r7, #20]
 800c4e8:	621a      	str	r2, [r3, #32]
}
 800c4ea:	bf00      	nop
 800c4ec:	371c      	adds	r7, #28
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c4f6:	b480      	push	{r7}
 800c4f8:	b085      	sub	sp, #20
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
 800c4fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c50c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c510:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c512:	683a      	ldr	r2, [r7, #0]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	4313      	orrs	r3, r2
 800c518:	f043 0307 	orr.w	r3, r3, #7
 800c51c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	68fa      	ldr	r2, [r7, #12]
 800c522:	609a      	str	r2, [r3, #8]
}
 800c524:	bf00      	nop
 800c526:	3714      	adds	r7, #20
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c530:	b480      	push	{r7}
 800c532:	b087      	sub	sp, #28
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
 800c53c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c54a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	021a      	lsls	r2, r3, #8
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	431a      	orrs	r2, r3
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	4313      	orrs	r3, r2
 800c558:	697a      	ldr	r2, [r7, #20]
 800c55a:	4313      	orrs	r3, r2
 800c55c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	697a      	ldr	r2, [r7, #20]
 800c562:	609a      	str	r2, [r3, #8]
}
 800c564:	bf00      	nop
 800c566:	371c      	adds	r7, #28
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c570:	b480      	push	{r7}
 800c572:	b087      	sub	sp, #28
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	f003 031f 	and.w	r3, r3, #31
 800c582:	2201      	movs	r2, #1
 800c584:	fa02 f303 	lsl.w	r3, r2, r3
 800c588:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6a1a      	ldr	r2, [r3, #32]
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	43db      	mvns	r3, r3
 800c592:	401a      	ands	r2, r3
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	6a1a      	ldr	r2, [r3, #32]
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	f003 031f 	and.w	r3, r3, #31
 800c5a2:	6879      	ldr	r1, [r7, #4]
 800c5a4:	fa01 f303 	lsl.w	r3, r1, r3
 800c5a8:	431a      	orrs	r2, r3
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	621a      	str	r2, [r3, #32]
}
 800c5ae:	bf00      	nop
 800c5b0:	371c      	adds	r7, #28
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr
	...

0800c5bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b085      	sub	sp, #20
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d101      	bne.n	800c5d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c5d0:	2302      	movs	r3, #2
 800c5d2:	e06f      	b.n	800c6b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2202      	movs	r2, #2
 800c5e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a31      	ldr	r2, [pc, #196]	@ (800c6c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d009      	beq.n	800c612 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	4a30      	ldr	r2, [pc, #192]	@ (800c6c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d004      	beq.n	800c612 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4a2e      	ldr	r2, [pc, #184]	@ (800c6c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d108      	bne.n	800c624 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c618:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	68fa      	ldr	r2, [r7, #12]
 800c620:	4313      	orrs	r3, r2
 800c622:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c62a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c62e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	4313      	orrs	r3, r2
 800c638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a1e      	ldr	r2, [pc, #120]	@ (800c6c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d01d      	beq.n	800c688 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c654:	d018      	beq.n	800c688 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a1c      	ldr	r2, [pc, #112]	@ (800c6cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d013      	beq.n	800c688 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a1a      	ldr	r2, [pc, #104]	@ (800c6d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d00e      	beq.n	800c688 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4a15      	ldr	r2, [pc, #84]	@ (800c6c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d009      	beq.n	800c688 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a16      	ldr	r2, [pc, #88]	@ (800c6d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d004      	beq.n	800c688 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a11      	ldr	r2, [pc, #68]	@ (800c6c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d10c      	bne.n	800c6a2 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c68e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	68ba      	ldr	r2, [r7, #8]
 800c696:	4313      	orrs	r3, r2
 800c698:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	68ba      	ldr	r2, [r7, #8]
 800c6a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c6b2:	2300      	movs	r3, #0
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3714      	adds	r7, #20
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr
 800c6c0:	40012c00 	.word	0x40012c00
 800c6c4:	40013400 	.word	0x40013400
 800c6c8:	40015000 	.word	0x40015000
 800c6cc:	40000400 	.word	0x40000400
 800c6d0:	40000800 	.word	0x40000800
 800c6d4:	40014000 	.word	0x40014000

0800c6d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d101      	bne.n	800c6f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	e078      	b.n	800c7e6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	4313      	orrs	r3, r2
 800c708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	4313      	orrs	r3, r2
 800c716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	4313      	orrs	r3, r2
 800c724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4313      	orrs	r3, r2
 800c732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	691b      	ldr	r3, [r3, #16]
 800c73e:	4313      	orrs	r3, r2
 800c740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	695b      	ldr	r3, [r3, #20]
 800c74c:	4313      	orrs	r3, r2
 800c74e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c75a:	4313      	orrs	r3, r2
 800c75c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	699b      	ldr	r3, [r3, #24]
 800c768:	041b      	lsls	r3, r3, #16
 800c76a:	4313      	orrs	r3, r2
 800c76c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	69db      	ldr	r3, [r3, #28]
 800c778:	4313      	orrs	r3, r2
 800c77a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a1c      	ldr	r2, [pc, #112]	@ (800c7f4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d009      	beq.n	800c79a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4a1b      	ldr	r2, [pc, #108]	@ (800c7f8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d004      	beq.n	800c79a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a19      	ldr	r2, [pc, #100]	@ (800c7fc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d11c      	bne.n	800c7d4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7a4:	051b      	lsls	r3, r3, #20
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	6a1b      	ldr	r3, [r3, #32]
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3714      	adds	r7, #20
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	40012c00 	.word	0x40012c00
 800c7f8:	40013400 	.word	0x40013400
 800c7fc:	40015000 	.word	0x40015000

0800c800 <HAL_TIMEx_ConfigEncoderIndex>:
  * @param  sEncoderIndexConfig Encoder index configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigEncoderIndex(TIM_HandleTypeDef *htim,
                                               TIMEx_EncoderIndexConfigTypeDef *sEncoderIndexConfig)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  assert_param(IS_FUNCTIONAL_STATE(sEncoderIndexConfig->FirstIndexEnable));
  assert_param(IS_TIM_ENCODERINDEX_POSITION(sEncoderIndexConfig->Position));
  assert_param(IS_TIM_ENCODERINDEX_DIRECTION(sEncoderIndexConfig->Direction));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c810:	2b01      	cmp	r3, #1
 800c812:	d101      	bne.n	800c818 <HAL_TIMEx_ConfigEncoderIndex+0x18>
 800c814:	2302      	movs	r3, #2
 800c816:	e02a      	b.n	800c86e <HAL_TIMEx_ConfigEncoderIndex+0x6e>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Configures the TIMx External Trigger (ETR) which is used as Index input */
  TIM_ETR_SetConfig(htim->Instance,
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6818      	ldr	r0, [r3, #0]
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	6859      	ldr	r1, [r3, #4]
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	f7ff fe7e 	bl	800c530 <TIM_ETR_SetConfig>
                    sEncoderIndexConfig->Prescaler,
                    sEncoderIndexConfig->Polarity,
                    sEncoderIndexConfig->Filter);

  /* Configures the encoder index */
  MODIFY_REG(htim->Instance->ECR,
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c83a:	f023 02e6 	bic.w	r2, r3, #230	@ 0xe6
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	695b      	ldr	r3, [r3, #20]
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	7b09      	ldrb	r1, [r1, #12]
 800c846:	2901      	cmp	r1, #1
 800c848:	d101      	bne.n	800c84e <HAL_TIMEx_ConfigEncoderIndex+0x4e>
 800c84a:	2120      	movs	r1, #32
 800c84c:	e000      	b.n	800c850 <HAL_TIMEx_ConfigEncoderIndex+0x50>
 800c84e:	2100      	movs	r1, #0
 800c850:	4319      	orrs	r1, r3
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	691b      	ldr	r3, [r3, #16]
 800c856:	430b      	orrs	r3, r1
 800c858:	431a      	orrs	r2, r3
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f042 0201 	orr.w	r2, r2, #1
 800c862:	659a      	str	r2, [r3, #88]	@ 0x58
             (sEncoderIndexConfig->Direction |
              ((sEncoderIndexConfig->FirstIndexEnable == ENABLE) ? (0x1U << TIM_ECR_FIDX_Pos) : 0U) |
              sEncoderIndexConfig->Position |
              TIM_ECR_IE));

  __HAL_UNLOCK(htim);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3708      	adds	r7, #8
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c876:	b480      	push	{r7}
 800c878:	b083      	sub	sp, #12
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c87e:	bf00      	nop
 800c880:	370c      	adds	r7, #12
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr

0800c88a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c88a:	b480      	push	{r7}
 800c88c:	b083      	sub	sp, #12
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c892:	bf00      	nop
 800c894:	370c      	adds	r7, #12
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr

0800c89e <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c89e:	b480      	push	{r7}
 800c8a0:	b083      	sub	sp, #12
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c8a6:	bf00      	nop
 800c8a8:	370c      	adds	r7, #12
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr

0800c8b2 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c8b2:	b480      	push	{r7}
 800c8b4:	b083      	sub	sp, #12
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c8ba:	bf00      	nop
 800c8bc:	370c      	adds	r7, #12
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr

0800c8c6 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c8c6:	b480      	push	{r7}
 800c8c8:	b083      	sub	sp, #12
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c8ce:	bf00      	nop
 800c8d0:	370c      	adds	r7, #12
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr

0800c8da <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c8da:	b480      	push	{r7}
 800c8dc:	b083      	sub	sp, #12
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c8e2:	bf00      	nop
 800c8e4:	370c      	adds	r7, #12
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr

0800c8ee <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c8ee:	b480      	push	{r7}
 800c8f0:	b083      	sub	sp, #12
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c8f6:	bf00      	nop
 800c8f8:	370c      	adds	r7, #12
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr

0800c902 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b082      	sub	sp, #8
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d101      	bne.n	800c914 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c910:	2301      	movs	r3, #1
 800c912:	e042      	b.n	800c99a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d106      	bne.n	800c92c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f7f6 fb28 	bl	8002f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2224      	movs	r2, #36	@ 0x24
 800c930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f022 0201 	bic.w	r2, r2, #1
 800c942:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d002      	beq.n	800c952 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 ffdd 	bl	800d90c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fcde 	bl	800d314 <UART_SetConfig>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d101      	bne.n	800c962 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c95e:	2301      	movs	r3, #1
 800c960:	e01b      	b.n	800c99a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	685a      	ldr	r2, [r3, #4]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c970:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	689a      	ldr	r2, [r3, #8]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c980:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f042 0201 	orr.w	r2, r2, #1
 800c990:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f001 f85c 	bl	800da50 <UART_CheckIdleState>
 800c998:	4603      	mov	r3, r0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3708      	adds	r7, #8
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b08a      	sub	sp, #40	@ 0x28
 800c9a6:	af02      	add	r7, sp, #8
 800c9a8:	60f8      	str	r0, [r7, #12]
 800c9aa:	60b9      	str	r1, [r7, #8]
 800c9ac:	603b      	str	r3, [r7, #0]
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9b8:	2b20      	cmp	r3, #32
 800c9ba:	d17b      	bne.n	800cab4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d002      	beq.n	800c9c8 <HAL_UART_Transmit+0x26>
 800c9c2:	88fb      	ldrh	r3, [r7, #6]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d101      	bne.n	800c9cc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	e074      	b.n	800cab6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2221      	movs	r2, #33	@ 0x21
 800c9d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c9dc:	f7f7 ff88 	bl	80048f0 <HAL_GetTick>
 800c9e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	88fa      	ldrh	r2, [r7, #6]
 800c9e6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	88fa      	ldrh	r2, [r7, #6]
 800c9ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9fa:	d108      	bne.n	800ca0e <HAL_UART_Transmit+0x6c>
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d104      	bne.n	800ca0e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ca04:	2300      	movs	r3, #0
 800ca06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	61bb      	str	r3, [r7, #24]
 800ca0c:	e003      	b.n	800ca16 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ca12:	2300      	movs	r3, #0
 800ca14:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ca16:	e030      	b.n	800ca7a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	9300      	str	r3, [sp, #0]
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	2180      	movs	r1, #128	@ 0x80
 800ca22:	68f8      	ldr	r0, [r7, #12]
 800ca24:	f001 f8be 	bl	800dba4 <UART_WaitOnFlagUntilTimeout>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d005      	beq.n	800ca3a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2220      	movs	r2, #32
 800ca32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ca36:	2303      	movs	r3, #3
 800ca38:	e03d      	b.n	800cab6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10b      	bne.n	800ca58 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ca40:	69bb      	ldr	r3, [r7, #24]
 800ca42:	881b      	ldrh	r3, [r3, #0]
 800ca44:	461a      	mov	r2, r3
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	3302      	adds	r3, #2
 800ca54:	61bb      	str	r3, [r7, #24]
 800ca56:	e007      	b.n	800ca68 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	781a      	ldrb	r2, [r3, #0]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	3301      	adds	r3, #1
 800ca66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	3b01      	subs	r3, #1
 800ca72:	b29a      	uxth	r2, r3
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d1c8      	bne.n	800ca18 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	9300      	str	r3, [sp, #0]
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	2140      	movs	r1, #64	@ 0x40
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f001 f887 	bl	800dba4 <UART_WaitOnFlagUntilTimeout>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d005      	beq.n	800caa8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2220      	movs	r2, #32
 800caa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800caa4:	2303      	movs	r3, #3
 800caa6:	e006      	b.n	800cab6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2220      	movs	r2, #32
 800caac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cab0:	2300      	movs	r3, #0
 800cab2:	e000      	b.n	800cab6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cab4:	2302      	movs	r3, #2
  }
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3720      	adds	r7, #32
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b08a      	sub	sp, #40	@ 0x28
 800cac2:	af02      	add	r7, sp, #8
 800cac4:	60f8      	str	r0, [r7, #12]
 800cac6:	60b9      	str	r1, [r7, #8]
 800cac8:	603b      	str	r3, [r7, #0]
 800caca:	4613      	mov	r3, r2
 800cacc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cad4:	2b20      	cmp	r3, #32
 800cad6:	f040 80b5 	bne.w	800cc44 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d002      	beq.n	800cae6 <HAL_UART_Receive+0x28>
 800cae0:	88fb      	ldrh	r3, [r7, #6]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d101      	bne.n	800caea <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800cae6:	2301      	movs	r3, #1
 800cae8:	e0ad      	b.n	800cc46 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2200      	movs	r2, #0
 800caee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2222      	movs	r2, #34	@ 0x22
 800caf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2200      	movs	r2, #0
 800cafe:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cb00:	f7f7 fef6 	bl	80048f0 <HAL_GetTick>
 800cb04:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	88fa      	ldrh	r2, [r7, #6]
 800cb0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	88fa      	ldrh	r2, [r7, #6]
 800cb12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb1e:	d10e      	bne.n	800cb3e <HAL_UART_Receive+0x80>
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	691b      	ldr	r3, [r3, #16]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d105      	bne.n	800cb34 <HAL_UART_Receive+0x76>
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800cb2e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cb32:	e02d      	b.n	800cb90 <HAL_UART_Receive+0xd2>
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	22ff      	movs	r2, #255	@ 0xff
 800cb38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cb3c:	e028      	b.n	800cb90 <HAL_UART_Receive+0xd2>
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	689b      	ldr	r3, [r3, #8]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d10d      	bne.n	800cb62 <HAL_UART_Receive+0xa4>
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	691b      	ldr	r3, [r3, #16]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d104      	bne.n	800cb58 <HAL_UART_Receive+0x9a>
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	22ff      	movs	r2, #255	@ 0xff
 800cb52:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cb56:	e01b      	b.n	800cb90 <HAL_UART_Receive+0xd2>
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	227f      	movs	r2, #127	@ 0x7f
 800cb5c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cb60:	e016      	b.n	800cb90 <HAL_UART_Receive+0xd2>
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	689b      	ldr	r3, [r3, #8]
 800cb66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb6a:	d10d      	bne.n	800cb88 <HAL_UART_Receive+0xca>
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	691b      	ldr	r3, [r3, #16]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d104      	bne.n	800cb7e <HAL_UART_Receive+0xc0>
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	227f      	movs	r2, #127	@ 0x7f
 800cb78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cb7c:	e008      	b.n	800cb90 <HAL_UART_Receive+0xd2>
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	223f      	movs	r2, #63	@ 0x3f
 800cb82:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cb86:	e003      	b.n	800cb90 <HAL_UART_Receive+0xd2>
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cb96:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	689b      	ldr	r3, [r3, #8]
 800cb9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cba0:	d108      	bne.n	800cbb4 <HAL_UART_Receive+0xf6>
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	691b      	ldr	r3, [r3, #16]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d104      	bne.n	800cbb4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	61bb      	str	r3, [r7, #24]
 800cbb2:	e003      	b.n	800cbbc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800cbbc:	e036      	b.n	800cc2c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	2120      	movs	r1, #32
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	f000 ffeb 	bl	800dba4 <UART_WaitOnFlagUntilTimeout>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d005      	beq.n	800cbe0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2220      	movs	r2, #32
 800cbd8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800cbdc:	2303      	movs	r3, #3
 800cbde:	e032      	b.n	800cc46 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d10c      	bne.n	800cc00 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbec:	b29a      	uxth	r2, r3
 800cbee:	8a7b      	ldrh	r3, [r7, #18]
 800cbf0:	4013      	ands	r3, r2
 800cbf2:	b29a      	uxth	r2, r3
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800cbf8:	69bb      	ldr	r3, [r7, #24]
 800cbfa:	3302      	adds	r3, #2
 800cbfc:	61bb      	str	r3, [r7, #24]
 800cbfe:	e00c      	b.n	800cc1a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc06:	b2da      	uxtb	r2, r3
 800cc08:	8a7b      	ldrh	r3, [r7, #18]
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	4013      	ands	r3, r2
 800cc0e:	b2da      	uxtb	r2, r3
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	3301      	adds	r3, #1
 800cc18:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	3b01      	subs	r3, #1
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1c2      	bne.n	800cbbe <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2220      	movs	r2, #32
 800cc3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800cc40:	2300      	movs	r3, #0
 800cc42:	e000      	b.n	800cc46 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800cc44:	2302      	movs	r3, #2
  }
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3720      	adds	r7, #32
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
	...

0800cc50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b0ba      	sub	sp, #232	@ 0xe8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	69db      	ldr	r3, [r3, #28]
 800cc5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	689b      	ldr	r3, [r3, #8]
 800cc72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cc76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cc7a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cc7e:	4013      	ands	r3, r2
 800cc80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cc84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d11b      	bne.n	800ccc4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cc8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc90:	f003 0320 	and.w	r3, r3, #32
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d015      	beq.n	800ccc4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cc98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc9c:	f003 0320 	and.w	r3, r3, #32
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d105      	bne.n	800ccb0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d009      	beq.n	800ccc4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f000 8300 	beq.w	800d2ba <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	4798      	blx	r3
      }
      return;
 800ccc2:	e2fa      	b.n	800d2ba <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ccc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f000 8123 	beq.w	800cf14 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ccce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ccd2:	4b8d      	ldr	r3, [pc, #564]	@ (800cf08 <HAL_UART_IRQHandler+0x2b8>)
 800ccd4:	4013      	ands	r3, r2
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d106      	bne.n	800cce8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ccda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ccde:	4b8b      	ldr	r3, [pc, #556]	@ (800cf0c <HAL_UART_IRQHandler+0x2bc>)
 800cce0:	4013      	ands	r3, r2
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f000 8116 	beq.w	800cf14 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccec:	f003 0301 	and.w	r3, r3, #1
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d011      	beq.n	800cd18 <HAL_UART_IRQHandler+0xc8>
 800ccf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00b      	beq.n	800cd18 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	2201      	movs	r2, #1
 800cd06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd0e:	f043 0201 	orr.w	r2, r3, #1
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd1c:	f003 0302 	and.w	r3, r3, #2
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d011      	beq.n	800cd48 <HAL_UART_IRQHandler+0xf8>
 800cd24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd28:	f003 0301 	and.w	r3, r3, #1
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d00b      	beq.n	800cd48 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	2202      	movs	r2, #2
 800cd36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd3e:	f043 0204 	orr.w	r2, r3, #4
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd4c:	f003 0304 	and.w	r3, r3, #4
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d011      	beq.n	800cd78 <HAL_UART_IRQHandler+0x128>
 800cd54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd58:	f003 0301 	and.w	r3, r3, #1
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d00b      	beq.n	800cd78 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2204      	movs	r2, #4
 800cd66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd6e:	f043 0202 	orr.w	r2, r3, #2
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cd78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd7c:	f003 0308 	and.w	r3, r3, #8
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d017      	beq.n	800cdb4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cd84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd88:	f003 0320 	and.w	r3, r3, #32
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d105      	bne.n	800cd9c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cd90:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cd94:	4b5c      	ldr	r3, [pc, #368]	@ (800cf08 <HAL_UART_IRQHandler+0x2b8>)
 800cd96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00b      	beq.n	800cdb4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	2208      	movs	r2, #8
 800cda2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdaa:	f043 0208 	orr.w	r2, r3, #8
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cdb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d012      	beq.n	800cde6 <HAL_UART_IRQHandler+0x196>
 800cdc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d00c      	beq.n	800cde6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cdd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cddc:	f043 0220 	orr.w	r2, r3, #32
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	f000 8266 	beq.w	800d2be <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cdf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdf6:	f003 0320 	and.w	r3, r3, #32
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d013      	beq.n	800ce26 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cdfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce02:	f003 0320 	and.w	r3, r3, #32
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d105      	bne.n	800ce16 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ce0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d007      	beq.n	800ce26 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d003      	beq.n	800ce26 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	689b      	ldr	r3, [r3, #8]
 800ce36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce3a:	2b40      	cmp	r3, #64	@ 0x40
 800ce3c:	d005      	beq.n	800ce4a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ce3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ce42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d054      	beq.n	800cef4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 ff17 	bl	800dc7e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	689b      	ldr	r3, [r3, #8]
 800ce56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce5a:	2b40      	cmp	r3, #64	@ 0x40
 800ce5c:	d146      	bne.n	800ceec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	3308      	adds	r3, #8
 800ce64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ce6c:	e853 3f00 	ldrex	r3, [r3]
 800ce70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ce74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ce78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	3308      	adds	r3, #8
 800ce86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ce8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ce8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ce96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ce9a:	e841 2300 	strex	r3, r2, [r1]
 800ce9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d1d9      	bne.n	800ce5e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d017      	beq.n	800cee4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ceba:	4a15      	ldr	r2, [pc, #84]	@ (800cf10 <HAL_UART_IRQHandler+0x2c0>)
 800cebc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7f9 f836 	bl	8005f36 <HAL_DMA_Abort_IT>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d019      	beq.n	800cf04 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ced6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800cede:	4610      	mov	r0, r2
 800cee0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cee2:	e00f      	b.n	800cf04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 f9ff 	bl	800d2e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ceea:	e00b      	b.n	800cf04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 f9fb 	bl	800d2e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cef2:	e007      	b.n	800cf04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f000 f9f7 	bl	800d2e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2200      	movs	r2, #0
 800cefe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800cf02:	e1dc      	b.n	800d2be <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf04:	bf00      	nop
    return;
 800cf06:	e1da      	b.n	800d2be <HAL_UART_IRQHandler+0x66e>
 800cf08:	10000001 	.word	0x10000001
 800cf0c:	04000120 	.word	0x04000120
 800cf10:	0800dd4b 	.word	0x0800dd4b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	f040 8170 	bne.w	800d1fe <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cf1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf22:	f003 0310 	and.w	r3, r3, #16
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	f000 8169 	beq.w	800d1fe <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cf2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf30:	f003 0310 	and.w	r3, r3, #16
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	f000 8162 	beq.w	800d1fe <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2210      	movs	r2, #16
 800cf40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	689b      	ldr	r3, [r3, #8]
 800cf48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf4c:	2b40      	cmp	r3, #64	@ 0x40
 800cf4e:	f040 80d8 	bne.w	800d102 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cf60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	f000 80af 	beq.w	800d0c8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cf70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cf74:	429a      	cmp	r2, r3
 800cf76:	f080 80a7 	bcs.w	800d0c8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cf80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f003 0320 	and.w	r3, r3, #32
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	f040 8087 	bne.w	800d0a6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cfa4:	e853 3f00 	ldrex	r3, [r3]
 800cfa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cfac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cfb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cfb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cfc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cfc6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cfce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cfd2:	e841 2300 	strex	r3, r2, [r1]
 800cfd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cfda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d1da      	bne.n	800cf98 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	3308      	adds	r3, #8
 800cfe8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cfec:	e853 3f00 	ldrex	r3, [r3]
 800cff0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cff2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cff4:	f023 0301 	bic.w	r3, r3, #1
 800cff8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	3308      	adds	r3, #8
 800d002:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d006:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d00a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d00c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d00e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d012:	e841 2300 	strex	r3, r2, [r1]
 800d016:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d018:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d1e1      	bne.n	800cfe2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	3308      	adds	r3, #8
 800d024:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d026:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d028:	e853 3f00 	ldrex	r3, [r3]
 800d02c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d02e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d030:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d034:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	3308      	adds	r3, #8
 800d03e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d042:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d044:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d046:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d048:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d04a:	e841 2300 	strex	r3, r2, [r1]
 800d04e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d050:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d052:	2b00      	cmp	r3, #0
 800d054:	d1e3      	bne.n	800d01e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2220      	movs	r2, #32
 800d05a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2200      	movs	r2, #0
 800d062:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d06a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d06c:	e853 3f00 	ldrex	r3, [r3]
 800d070:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d074:	f023 0310 	bic.w	r3, r3, #16
 800d078:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	461a      	mov	r2, r3
 800d082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d086:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d088:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d08a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d08c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d08e:	e841 2300 	strex	r3, r2, [r1]
 800d092:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d096:	2b00      	cmp	r3, #0
 800d098:	d1e4      	bne.n	800d064 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7f8 feef 	bl	8005e84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2202      	movs	r2, #2
 800d0aa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	1ad3      	subs	r3, r2, r3
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	4619      	mov	r1, r3
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 f91b 	bl	800d2fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d0c6:	e0fc      	b.n	800d2c2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d0ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	f040 80f5 	bne.w	800d2c2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f003 0320 	and.w	r3, r3, #32
 800d0e6:	2b20      	cmp	r3, #32
 800d0e8:	f040 80eb 	bne.w	800d2c2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2202      	movs	r2, #2
 800d0f0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 f8fe 	bl	800d2fc <HAL_UARTEx_RxEventCallback>
      return;
 800d100:	e0df      	b.n	800d2c2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d10e:	b29b      	uxth	r3, r3
 800d110:	1ad3      	subs	r3, r2, r3
 800d112:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	2b00      	cmp	r3, #0
 800d120:	f000 80d1 	beq.w	800d2c6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800d124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d128:	2b00      	cmp	r3, #0
 800d12a:	f000 80cc 	beq.w	800d2c6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d136:	e853 3f00 	ldrex	r3, [r3]
 800d13a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d13e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d142:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	461a      	mov	r2, r3
 800d14c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d150:	647b      	str	r3, [r7, #68]	@ 0x44
 800d152:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d154:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d158:	e841 2300 	strex	r3, r2, [r1]
 800d15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d160:	2b00      	cmp	r3, #0
 800d162:	d1e4      	bne.n	800d12e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	3308      	adds	r3, #8
 800d16a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d16e:	e853 3f00 	ldrex	r3, [r3]
 800d172:	623b      	str	r3, [r7, #32]
   return(result);
 800d174:	6a3b      	ldr	r3, [r7, #32]
 800d176:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d17a:	f023 0301 	bic.w	r3, r3, #1
 800d17e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	3308      	adds	r3, #8
 800d188:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d18c:	633a      	str	r2, [r7, #48]	@ 0x30
 800d18e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d190:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d194:	e841 2300 	strex	r3, r2, [r1]
 800d198:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1e1      	bne.n	800d164 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2220      	movs	r2, #32
 800d1a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	e853 3f00 	ldrex	r3, [r3]
 800d1c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f023 0310 	bic.w	r3, r3, #16
 800d1c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d1d6:	61fb      	str	r3, [r7, #28]
 800d1d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1da:	69b9      	ldr	r1, [r7, #24]
 800d1dc:	69fa      	ldr	r2, [r7, #28]
 800d1de:	e841 2300 	strex	r3, r2, [r1]
 800d1e2:	617b      	str	r3, [r7, #20]
   return(result);
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d1e4      	bne.n	800d1b4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2202      	movs	r2, #2
 800d1ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d1f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 f880 	bl	800d2fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d1fc:	e063      	b.n	800d2c6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d1fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d202:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00e      	beq.n	800d228 <HAL_UART_IRQHandler+0x5d8>
 800d20a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d20e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d212:	2b00      	cmp	r3, #0
 800d214:	d008      	beq.n	800d228 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d21e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 fdcf 	bl	800ddc4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d226:	e051      	b.n	800d2cc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d22c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d230:	2b00      	cmp	r3, #0
 800d232:	d014      	beq.n	800d25e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d105      	bne.n	800d24c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d244:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d008      	beq.n	800d25e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d250:	2b00      	cmp	r3, #0
 800d252:	d03a      	beq.n	800d2ca <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	4798      	blx	r3
    }
    return;
 800d25c:	e035      	b.n	800d2ca <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d25e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d266:	2b00      	cmp	r3, #0
 800d268:	d009      	beq.n	800d27e <HAL_UART_IRQHandler+0x62e>
 800d26a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d26e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d272:	2b00      	cmp	r3, #0
 800d274:	d003      	beq.n	800d27e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 fd79 	bl	800dd6e <UART_EndTransmit_IT>
    return;
 800d27c:	e026      	b.n	800d2cc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d27e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d286:	2b00      	cmp	r3, #0
 800d288:	d009      	beq.n	800d29e <HAL_UART_IRQHandler+0x64e>
 800d28a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d28e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d292:	2b00      	cmp	r3, #0
 800d294:	d003      	beq.n	800d29e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 fda8 	bl	800ddec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d29c:	e016      	b.n	800d2cc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d29e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d010      	beq.n	800d2cc <HAL_UART_IRQHandler+0x67c>
 800d2aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	da0c      	bge.n	800d2cc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 fd90 	bl	800ddd8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d2b8:	e008      	b.n	800d2cc <HAL_UART_IRQHandler+0x67c>
      return;
 800d2ba:	bf00      	nop
 800d2bc:	e006      	b.n	800d2cc <HAL_UART_IRQHandler+0x67c>
    return;
 800d2be:	bf00      	nop
 800d2c0:	e004      	b.n	800d2cc <HAL_UART_IRQHandler+0x67c>
      return;
 800d2c2:	bf00      	nop
 800d2c4:	e002      	b.n	800d2cc <HAL_UART_IRQHandler+0x67c>
      return;
 800d2c6:	bf00      	nop
 800d2c8:	e000      	b.n	800d2cc <HAL_UART_IRQHandler+0x67c>
    return;
 800d2ca:	bf00      	nop
  }
}
 800d2cc:	37e8      	adds	r7, #232	@ 0xe8
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop

0800d2d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d2dc:	bf00      	nop
 800d2de:	370c      	adds	r7, #12
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	4770      	bx	lr

0800d2e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b083      	sub	sp, #12
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d2f0:	bf00      	nop
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	460b      	mov	r3, r1
 800d306:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d308:	bf00      	nop
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d318:	b08c      	sub	sp, #48	@ 0x30
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d31e:	2300      	movs	r3, #0
 800d320:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	689a      	ldr	r2, [r3, #8]
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	691b      	ldr	r3, [r3, #16]
 800d32c:	431a      	orrs	r2, r3
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	695b      	ldr	r3, [r3, #20]
 800d332:	431a      	orrs	r2, r3
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	69db      	ldr	r3, [r3, #28]
 800d338:	4313      	orrs	r3, r2
 800d33a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	4baa      	ldr	r3, [pc, #680]	@ (800d5ec <UART_SetConfig+0x2d8>)
 800d344:	4013      	ands	r3, r2
 800d346:	697a      	ldr	r2, [r7, #20]
 800d348:	6812      	ldr	r2, [r2, #0]
 800d34a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d34c:	430b      	orrs	r3, r1
 800d34e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	68da      	ldr	r2, [r3, #12]
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	430a      	orrs	r2, r1
 800d364:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	699b      	ldr	r3, [r3, #24]
 800d36a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a9f      	ldr	r2, [pc, #636]	@ (800d5f0 <UART_SetConfig+0x2dc>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d004      	beq.n	800d380 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	6a1b      	ldr	r3, [r3, #32]
 800d37a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d37c:	4313      	orrs	r3, r2
 800d37e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	689b      	ldr	r3, [r3, #8]
 800d386:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d38a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d38e:	697a      	ldr	r2, [r7, #20]
 800d390:	6812      	ldr	r2, [r2, #0]
 800d392:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d394:	430b      	orrs	r3, r1
 800d396:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d39e:	f023 010f 	bic.w	r1, r3, #15
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	430a      	orrs	r2, r1
 800d3ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4a90      	ldr	r2, [pc, #576]	@ (800d5f4 <UART_SetConfig+0x2e0>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d125      	bne.n	800d404 <UART_SetConfig+0xf0>
 800d3b8:	4b8f      	ldr	r3, [pc, #572]	@ (800d5f8 <UART_SetConfig+0x2e4>)
 800d3ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3be:	f003 0303 	and.w	r3, r3, #3
 800d3c2:	2b03      	cmp	r3, #3
 800d3c4:	d81a      	bhi.n	800d3fc <UART_SetConfig+0xe8>
 800d3c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d3cc <UART_SetConfig+0xb8>)
 800d3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3cc:	0800d3dd 	.word	0x0800d3dd
 800d3d0:	0800d3ed 	.word	0x0800d3ed
 800d3d4:	0800d3e5 	.word	0x0800d3e5
 800d3d8:	0800d3f5 	.word	0x0800d3f5
 800d3dc:	2301      	movs	r3, #1
 800d3de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d3e2:	e116      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d3e4:	2302      	movs	r3, #2
 800d3e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d3ea:	e112      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d3ec:	2304      	movs	r3, #4
 800d3ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d3f2:	e10e      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d3f4:	2308      	movs	r3, #8
 800d3f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d3fa:	e10a      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d3fc:	2310      	movs	r3, #16
 800d3fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d402:	e106      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a7c      	ldr	r2, [pc, #496]	@ (800d5fc <UART_SetConfig+0x2e8>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d138      	bne.n	800d480 <UART_SetConfig+0x16c>
 800d40e:	4b7a      	ldr	r3, [pc, #488]	@ (800d5f8 <UART_SetConfig+0x2e4>)
 800d410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d414:	f003 030c 	and.w	r3, r3, #12
 800d418:	2b0c      	cmp	r3, #12
 800d41a:	d82d      	bhi.n	800d478 <UART_SetConfig+0x164>
 800d41c:	a201      	add	r2, pc, #4	@ (adr r2, 800d424 <UART_SetConfig+0x110>)
 800d41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d422:	bf00      	nop
 800d424:	0800d459 	.word	0x0800d459
 800d428:	0800d479 	.word	0x0800d479
 800d42c:	0800d479 	.word	0x0800d479
 800d430:	0800d479 	.word	0x0800d479
 800d434:	0800d469 	.word	0x0800d469
 800d438:	0800d479 	.word	0x0800d479
 800d43c:	0800d479 	.word	0x0800d479
 800d440:	0800d479 	.word	0x0800d479
 800d444:	0800d461 	.word	0x0800d461
 800d448:	0800d479 	.word	0x0800d479
 800d44c:	0800d479 	.word	0x0800d479
 800d450:	0800d479 	.word	0x0800d479
 800d454:	0800d471 	.word	0x0800d471
 800d458:	2300      	movs	r3, #0
 800d45a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d45e:	e0d8      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d460:	2302      	movs	r3, #2
 800d462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d466:	e0d4      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d468:	2304      	movs	r3, #4
 800d46a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d46e:	e0d0      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d470:	2308      	movs	r3, #8
 800d472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d476:	e0cc      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d478:	2310      	movs	r3, #16
 800d47a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d47e:	e0c8      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a5e      	ldr	r2, [pc, #376]	@ (800d600 <UART_SetConfig+0x2ec>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d125      	bne.n	800d4d6 <UART_SetConfig+0x1c2>
 800d48a:	4b5b      	ldr	r3, [pc, #364]	@ (800d5f8 <UART_SetConfig+0x2e4>)
 800d48c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d490:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d494:	2b30      	cmp	r3, #48	@ 0x30
 800d496:	d016      	beq.n	800d4c6 <UART_SetConfig+0x1b2>
 800d498:	2b30      	cmp	r3, #48	@ 0x30
 800d49a:	d818      	bhi.n	800d4ce <UART_SetConfig+0x1ba>
 800d49c:	2b20      	cmp	r3, #32
 800d49e:	d00a      	beq.n	800d4b6 <UART_SetConfig+0x1a2>
 800d4a0:	2b20      	cmp	r3, #32
 800d4a2:	d814      	bhi.n	800d4ce <UART_SetConfig+0x1ba>
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d002      	beq.n	800d4ae <UART_SetConfig+0x19a>
 800d4a8:	2b10      	cmp	r3, #16
 800d4aa:	d008      	beq.n	800d4be <UART_SetConfig+0x1aa>
 800d4ac:	e00f      	b.n	800d4ce <UART_SetConfig+0x1ba>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d4b4:	e0ad      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d4b6:	2302      	movs	r3, #2
 800d4b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d4bc:	e0a9      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d4be:	2304      	movs	r3, #4
 800d4c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d4c4:	e0a5      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d4c6:	2308      	movs	r3, #8
 800d4c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d4cc:	e0a1      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d4ce:	2310      	movs	r3, #16
 800d4d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d4d4:	e09d      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a4a      	ldr	r2, [pc, #296]	@ (800d604 <UART_SetConfig+0x2f0>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d125      	bne.n	800d52c <UART_SetConfig+0x218>
 800d4e0:	4b45      	ldr	r3, [pc, #276]	@ (800d5f8 <UART_SetConfig+0x2e4>)
 800d4e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d4ea:	2bc0      	cmp	r3, #192	@ 0xc0
 800d4ec:	d016      	beq.n	800d51c <UART_SetConfig+0x208>
 800d4ee:	2bc0      	cmp	r3, #192	@ 0xc0
 800d4f0:	d818      	bhi.n	800d524 <UART_SetConfig+0x210>
 800d4f2:	2b80      	cmp	r3, #128	@ 0x80
 800d4f4:	d00a      	beq.n	800d50c <UART_SetConfig+0x1f8>
 800d4f6:	2b80      	cmp	r3, #128	@ 0x80
 800d4f8:	d814      	bhi.n	800d524 <UART_SetConfig+0x210>
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d002      	beq.n	800d504 <UART_SetConfig+0x1f0>
 800d4fe:	2b40      	cmp	r3, #64	@ 0x40
 800d500:	d008      	beq.n	800d514 <UART_SetConfig+0x200>
 800d502:	e00f      	b.n	800d524 <UART_SetConfig+0x210>
 800d504:	2300      	movs	r3, #0
 800d506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d50a:	e082      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d50c:	2302      	movs	r3, #2
 800d50e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d512:	e07e      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d514:	2304      	movs	r3, #4
 800d516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d51a:	e07a      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d51c:	2308      	movs	r3, #8
 800d51e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d522:	e076      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d524:	2310      	movs	r3, #16
 800d526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d52a:	e072      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a35      	ldr	r2, [pc, #212]	@ (800d608 <UART_SetConfig+0x2f4>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d12a      	bne.n	800d58c <UART_SetConfig+0x278>
 800d536:	4b30      	ldr	r3, [pc, #192]	@ (800d5f8 <UART_SetConfig+0x2e4>)
 800d538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d53c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d540:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d544:	d01a      	beq.n	800d57c <UART_SetConfig+0x268>
 800d546:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d54a:	d81b      	bhi.n	800d584 <UART_SetConfig+0x270>
 800d54c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d550:	d00c      	beq.n	800d56c <UART_SetConfig+0x258>
 800d552:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d556:	d815      	bhi.n	800d584 <UART_SetConfig+0x270>
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d003      	beq.n	800d564 <UART_SetConfig+0x250>
 800d55c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d560:	d008      	beq.n	800d574 <UART_SetConfig+0x260>
 800d562:	e00f      	b.n	800d584 <UART_SetConfig+0x270>
 800d564:	2300      	movs	r3, #0
 800d566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d56a:	e052      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d56c:	2302      	movs	r3, #2
 800d56e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d572:	e04e      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d574:	2304      	movs	r3, #4
 800d576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d57a:	e04a      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d57c:	2308      	movs	r3, #8
 800d57e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d582:	e046      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d584:	2310      	movs	r3, #16
 800d586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d58a:	e042      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4a17      	ldr	r2, [pc, #92]	@ (800d5f0 <UART_SetConfig+0x2dc>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d13a      	bne.n	800d60c <UART_SetConfig+0x2f8>
 800d596:	4b18      	ldr	r3, [pc, #96]	@ (800d5f8 <UART_SetConfig+0x2e4>)
 800d598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d59c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d5a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d5a4:	d01a      	beq.n	800d5dc <UART_SetConfig+0x2c8>
 800d5a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d5aa:	d81b      	bhi.n	800d5e4 <UART_SetConfig+0x2d0>
 800d5ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d5b0:	d00c      	beq.n	800d5cc <UART_SetConfig+0x2b8>
 800d5b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d5b6:	d815      	bhi.n	800d5e4 <UART_SetConfig+0x2d0>
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d003      	beq.n	800d5c4 <UART_SetConfig+0x2b0>
 800d5bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5c0:	d008      	beq.n	800d5d4 <UART_SetConfig+0x2c0>
 800d5c2:	e00f      	b.n	800d5e4 <UART_SetConfig+0x2d0>
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d5ca:	e022      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d5cc:	2302      	movs	r3, #2
 800d5ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d5d2:	e01e      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d5d4:	2304      	movs	r3, #4
 800d5d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d5da:	e01a      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d5dc:	2308      	movs	r3, #8
 800d5de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d5e2:	e016      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d5e4:	2310      	movs	r3, #16
 800d5e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d5ea:	e012      	b.n	800d612 <UART_SetConfig+0x2fe>
 800d5ec:	cfff69f3 	.word	0xcfff69f3
 800d5f0:	40008000 	.word	0x40008000
 800d5f4:	40013800 	.word	0x40013800
 800d5f8:	40021000 	.word	0x40021000
 800d5fc:	40004400 	.word	0x40004400
 800d600:	40004800 	.word	0x40004800
 800d604:	40004c00 	.word	0x40004c00
 800d608:	40005000 	.word	0x40005000
 800d60c:	2310      	movs	r3, #16
 800d60e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4aae      	ldr	r2, [pc, #696]	@ (800d8d0 <UART_SetConfig+0x5bc>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	f040 8097 	bne.w	800d74c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d61e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d622:	2b08      	cmp	r3, #8
 800d624:	d823      	bhi.n	800d66e <UART_SetConfig+0x35a>
 800d626:	a201      	add	r2, pc, #4	@ (adr r2, 800d62c <UART_SetConfig+0x318>)
 800d628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d62c:	0800d651 	.word	0x0800d651
 800d630:	0800d66f 	.word	0x0800d66f
 800d634:	0800d659 	.word	0x0800d659
 800d638:	0800d66f 	.word	0x0800d66f
 800d63c:	0800d65f 	.word	0x0800d65f
 800d640:	0800d66f 	.word	0x0800d66f
 800d644:	0800d66f 	.word	0x0800d66f
 800d648:	0800d66f 	.word	0x0800d66f
 800d64c:	0800d667 	.word	0x0800d667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d650:	f7fc f8e6 	bl	8009820 <HAL_RCC_GetPCLK1Freq>
 800d654:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d656:	e010      	b.n	800d67a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d658:	4b9e      	ldr	r3, [pc, #632]	@ (800d8d4 <UART_SetConfig+0x5c0>)
 800d65a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d65c:	e00d      	b.n	800d67a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d65e:	f7fc f871 	bl	8009744 <HAL_RCC_GetSysClockFreq>
 800d662:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d664:	e009      	b.n	800d67a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d66a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d66c:	e005      	b.n	800d67a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d66e:	2300      	movs	r3, #0
 800d670:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d672:	2301      	movs	r3, #1
 800d674:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d678:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	f000 8130 	beq.w	800d8e2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d686:	4a94      	ldr	r2, [pc, #592]	@ (800d8d8 <UART_SetConfig+0x5c4>)
 800d688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d68c:	461a      	mov	r2, r3
 800d68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d690:	fbb3 f3f2 	udiv	r3, r3, r2
 800d694:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	685a      	ldr	r2, [r3, #4]
 800d69a:	4613      	mov	r3, r2
 800d69c:	005b      	lsls	r3, r3, #1
 800d69e:	4413      	add	r3, r2
 800d6a0:	69ba      	ldr	r2, [r7, #24]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d305      	bcc.n	800d6b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d6ac:	69ba      	ldr	r2, [r7, #24]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d903      	bls.n	800d6ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d6b8:	e113      	b.n	800d8e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6bc:	2200      	movs	r2, #0
 800d6be:	60bb      	str	r3, [r7, #8]
 800d6c0:	60fa      	str	r2, [r7, #12]
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6c6:	4a84      	ldr	r2, [pc, #528]	@ (800d8d8 <UART_SetConfig+0x5c4>)
 800d6c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	603b      	str	r3, [r7, #0]
 800d6d2:	607a      	str	r2, [r7, #4]
 800d6d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d6dc:	f7f3 fadc 	bl	8000c98 <__aeabi_uldivmod>
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	4610      	mov	r0, r2
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	f04f 0200 	mov.w	r2, #0
 800d6ec:	f04f 0300 	mov.w	r3, #0
 800d6f0:	020b      	lsls	r3, r1, #8
 800d6f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d6f6:	0202      	lsls	r2, r0, #8
 800d6f8:	6979      	ldr	r1, [r7, #20]
 800d6fa:	6849      	ldr	r1, [r1, #4]
 800d6fc:	0849      	lsrs	r1, r1, #1
 800d6fe:	2000      	movs	r0, #0
 800d700:	460c      	mov	r4, r1
 800d702:	4605      	mov	r5, r0
 800d704:	eb12 0804 	adds.w	r8, r2, r4
 800d708:	eb43 0905 	adc.w	r9, r3, r5
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	2200      	movs	r2, #0
 800d712:	469a      	mov	sl, r3
 800d714:	4693      	mov	fp, r2
 800d716:	4652      	mov	r2, sl
 800d718:	465b      	mov	r3, fp
 800d71a:	4640      	mov	r0, r8
 800d71c:	4649      	mov	r1, r9
 800d71e:	f7f3 fabb 	bl	8000c98 <__aeabi_uldivmod>
 800d722:	4602      	mov	r2, r0
 800d724:	460b      	mov	r3, r1
 800d726:	4613      	mov	r3, r2
 800d728:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d72a:	6a3b      	ldr	r3, [r7, #32]
 800d72c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d730:	d308      	bcc.n	800d744 <UART_SetConfig+0x430>
 800d732:	6a3b      	ldr	r3, [r7, #32]
 800d734:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d738:	d204      	bcs.n	800d744 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	6a3a      	ldr	r2, [r7, #32]
 800d740:	60da      	str	r2, [r3, #12]
 800d742:	e0ce      	b.n	800d8e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d744:	2301      	movs	r3, #1
 800d746:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d74a:	e0ca      	b.n	800d8e2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	69db      	ldr	r3, [r3, #28]
 800d750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d754:	d166      	bne.n	800d824 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d756:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d75a:	2b08      	cmp	r3, #8
 800d75c:	d827      	bhi.n	800d7ae <UART_SetConfig+0x49a>
 800d75e:	a201      	add	r2, pc, #4	@ (adr r2, 800d764 <UART_SetConfig+0x450>)
 800d760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d764:	0800d789 	.word	0x0800d789
 800d768:	0800d791 	.word	0x0800d791
 800d76c:	0800d799 	.word	0x0800d799
 800d770:	0800d7af 	.word	0x0800d7af
 800d774:	0800d79f 	.word	0x0800d79f
 800d778:	0800d7af 	.word	0x0800d7af
 800d77c:	0800d7af 	.word	0x0800d7af
 800d780:	0800d7af 	.word	0x0800d7af
 800d784:	0800d7a7 	.word	0x0800d7a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d788:	f7fc f84a 	bl	8009820 <HAL_RCC_GetPCLK1Freq>
 800d78c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d78e:	e014      	b.n	800d7ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d790:	f7fc f85c 	bl	800984c <HAL_RCC_GetPCLK2Freq>
 800d794:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d796:	e010      	b.n	800d7ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d798:	4b4e      	ldr	r3, [pc, #312]	@ (800d8d4 <UART_SetConfig+0x5c0>)
 800d79a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d79c:	e00d      	b.n	800d7ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d79e:	f7fb ffd1 	bl	8009744 <HAL_RCC_GetSysClockFreq>
 800d7a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d7a4:	e009      	b.n	800d7ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d7ac:	e005      	b.n	800d7ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d7b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	f000 8090 	beq.w	800d8e2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7c6:	4a44      	ldr	r2, [pc, #272]	@ (800d8d8 <UART_SetConfig+0x5c4>)
 800d7c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7d4:	005a      	lsls	r2, r3, #1
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	085b      	lsrs	r3, r3, #1
 800d7dc:	441a      	add	r2, r3
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7e8:	6a3b      	ldr	r3, [r7, #32]
 800d7ea:	2b0f      	cmp	r3, #15
 800d7ec:	d916      	bls.n	800d81c <UART_SetConfig+0x508>
 800d7ee:	6a3b      	ldr	r3, [r7, #32]
 800d7f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7f4:	d212      	bcs.n	800d81c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d7f6:	6a3b      	ldr	r3, [r7, #32]
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	f023 030f 	bic.w	r3, r3, #15
 800d7fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d800:	6a3b      	ldr	r3, [r7, #32]
 800d802:	085b      	lsrs	r3, r3, #1
 800d804:	b29b      	uxth	r3, r3
 800d806:	f003 0307 	and.w	r3, r3, #7
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	8bfb      	ldrh	r3, [r7, #30]
 800d80e:	4313      	orrs	r3, r2
 800d810:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	8bfa      	ldrh	r2, [r7, #30]
 800d818:	60da      	str	r2, [r3, #12]
 800d81a:	e062      	b.n	800d8e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d81c:	2301      	movs	r3, #1
 800d81e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d822:	e05e      	b.n	800d8e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d824:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d828:	2b08      	cmp	r3, #8
 800d82a:	d828      	bhi.n	800d87e <UART_SetConfig+0x56a>
 800d82c:	a201      	add	r2, pc, #4	@ (adr r2, 800d834 <UART_SetConfig+0x520>)
 800d82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d832:	bf00      	nop
 800d834:	0800d859 	.word	0x0800d859
 800d838:	0800d861 	.word	0x0800d861
 800d83c:	0800d869 	.word	0x0800d869
 800d840:	0800d87f 	.word	0x0800d87f
 800d844:	0800d86f 	.word	0x0800d86f
 800d848:	0800d87f 	.word	0x0800d87f
 800d84c:	0800d87f 	.word	0x0800d87f
 800d850:	0800d87f 	.word	0x0800d87f
 800d854:	0800d877 	.word	0x0800d877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d858:	f7fb ffe2 	bl	8009820 <HAL_RCC_GetPCLK1Freq>
 800d85c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d85e:	e014      	b.n	800d88a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d860:	f7fb fff4 	bl	800984c <HAL_RCC_GetPCLK2Freq>
 800d864:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d866:	e010      	b.n	800d88a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d868:	4b1a      	ldr	r3, [pc, #104]	@ (800d8d4 <UART_SetConfig+0x5c0>)
 800d86a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d86c:	e00d      	b.n	800d88a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d86e:	f7fb ff69 	bl	8009744 <HAL_RCC_GetSysClockFreq>
 800d872:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d874:	e009      	b.n	800d88a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d876:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d87a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d87c:	e005      	b.n	800d88a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d87e:	2300      	movs	r3, #0
 800d880:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d882:	2301      	movs	r3, #1
 800d884:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d888:	bf00      	nop
    }

    if (pclk != 0U)
 800d88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d028      	beq.n	800d8e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d894:	4a10      	ldr	r2, [pc, #64]	@ (800d8d8 <UART_SetConfig+0x5c4>)
 800d896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d89a:	461a      	mov	r2, r3
 800d89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d89e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	085b      	lsrs	r3, r3, #1
 800d8a8:	441a      	add	r2, r3
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d8b4:	6a3b      	ldr	r3, [r7, #32]
 800d8b6:	2b0f      	cmp	r3, #15
 800d8b8:	d910      	bls.n	800d8dc <UART_SetConfig+0x5c8>
 800d8ba:	6a3b      	ldr	r3, [r7, #32]
 800d8bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8c0:	d20c      	bcs.n	800d8dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d8c2:	6a3b      	ldr	r3, [r7, #32]
 800d8c4:	b29a      	uxth	r2, r3
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	60da      	str	r2, [r3, #12]
 800d8cc:	e009      	b.n	800d8e2 <UART_SetConfig+0x5ce>
 800d8ce:	bf00      	nop
 800d8d0:	40008000 	.word	0x40008000
 800d8d4:	00f42400 	.word	0x00f42400
 800d8d8:	080162cc 	.word	0x080162cc
      }
      else
      {
        ret = HAL_ERROR;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d8fe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d902:	4618      	mov	r0, r3
 800d904:	3730      	adds	r7, #48	@ 0x30
 800d906:	46bd      	mov	sp, r7
 800d908:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d90c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b083      	sub	sp, #12
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d918:	f003 0308 	and.w	r3, r3, #8
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d00a      	beq.n	800d936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	430a      	orrs	r2, r1
 800d934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d93a:	f003 0301 	and.w	r3, r3, #1
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d00a      	beq.n	800d958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	685b      	ldr	r3, [r3, #4]
 800d948:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	430a      	orrs	r2, r1
 800d956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d95c:	f003 0302 	and.w	r3, r3, #2
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00a      	beq.n	800d97a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	430a      	orrs	r2, r1
 800d978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d97e:	f003 0304 	and.w	r3, r3, #4
 800d982:	2b00      	cmp	r3, #0
 800d984:	d00a      	beq.n	800d99c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	430a      	orrs	r2, r1
 800d99a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9a0:	f003 0310 	and.w	r3, r3, #16
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d00a      	beq.n	800d9be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	689b      	ldr	r3, [r3, #8]
 800d9ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	430a      	orrs	r2, r1
 800d9bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9c2:	f003 0320 	and.w	r3, r3, #32
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00a      	beq.n	800d9e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	689b      	ldr	r3, [r3, #8]
 800d9d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	430a      	orrs	r2, r1
 800d9de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d01a      	beq.n	800da22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	430a      	orrs	r2, r1
 800da00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da0a:	d10a      	bne.n	800da22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	430a      	orrs	r2, r1
 800da20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00a      	beq.n	800da44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	685b      	ldr	r3, [r3, #4]
 800da34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	430a      	orrs	r2, r1
 800da42:	605a      	str	r2, [r3, #4]
  }
}
 800da44:	bf00      	nop
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b098      	sub	sp, #96	@ 0x60
 800da54:	af02      	add	r7, sp, #8
 800da56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2200      	movs	r2, #0
 800da5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800da60:	f7f6 ff46 	bl	80048f0 <HAL_GetTick>
 800da64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f003 0308 	and.w	r3, r3, #8
 800da70:	2b08      	cmp	r3, #8
 800da72:	d12f      	bne.n	800dad4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da7c:	2200      	movs	r2, #0
 800da7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 f88e 	bl	800dba4 <UART_WaitOnFlagUntilTimeout>
 800da88:	4603      	mov	r3, r0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d022      	beq.n	800dad4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da96:	e853 3f00 	ldrex	r3, [r3]
 800da9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800da9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800daa2:	653b      	str	r3, [r7, #80]	@ 0x50
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	461a      	mov	r2, r3
 800daaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800daac:	647b      	str	r3, [r7, #68]	@ 0x44
 800daae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dab0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dab2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dab4:	e841 2300 	strex	r3, r2, [r1]
 800dab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800daba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d1e6      	bne.n	800da8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2220      	movs	r2, #32
 800dac4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dad0:	2303      	movs	r3, #3
 800dad2:	e063      	b.n	800db9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f003 0304 	and.w	r3, r3, #4
 800dade:	2b04      	cmp	r3, #4
 800dae0:	d149      	bne.n	800db76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dae2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daea:	2200      	movs	r2, #0
 800daec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 f857 	bl	800dba4 <UART_WaitOnFlagUntilTimeout>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d03c      	beq.n	800db76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db04:	e853 3f00 	ldrex	r3, [r3]
 800db08:	623b      	str	r3, [r7, #32]
   return(result);
 800db0a:	6a3b      	ldr	r3, [r7, #32]
 800db0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800db10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	461a      	mov	r2, r3
 800db18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800db1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db22:	e841 2300 	strex	r3, r2, [r1]
 800db26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800db28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d1e6      	bne.n	800dafc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	3308      	adds	r3, #8
 800db34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	e853 3f00 	ldrex	r3, [r3]
 800db3c:	60fb      	str	r3, [r7, #12]
   return(result);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f023 0301 	bic.w	r3, r3, #1
 800db44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	3308      	adds	r3, #8
 800db4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db4e:	61fa      	str	r2, [r7, #28]
 800db50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db52:	69b9      	ldr	r1, [r7, #24]
 800db54:	69fa      	ldr	r2, [r7, #28]
 800db56:	e841 2300 	strex	r3, r2, [r1]
 800db5a:	617b      	str	r3, [r7, #20]
   return(result);
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d1e5      	bne.n	800db2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2220      	movs	r2, #32
 800db66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2200      	movs	r2, #0
 800db6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db72:	2303      	movs	r3, #3
 800db74:	e012      	b.n	800db9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2220      	movs	r2, #32
 800db7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2220      	movs	r2, #32
 800db82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2200      	movs	r2, #0
 800db8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2200      	movs	r2, #0
 800db90:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2200      	movs	r2, #0
 800db96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db9a:	2300      	movs	r3, #0
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3758      	adds	r7, #88	@ 0x58
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	603b      	str	r3, [r7, #0]
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbb4:	e04f      	b.n	800dc56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dbb6:	69bb      	ldr	r3, [r7, #24]
 800dbb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dbbc:	d04b      	beq.n	800dc56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dbbe:	f7f6 fe97 	bl	80048f0 <HAL_GetTick>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	1ad3      	subs	r3, r2, r3
 800dbc8:	69ba      	ldr	r2, [r7, #24]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d302      	bcc.n	800dbd4 <UART_WaitOnFlagUntilTimeout+0x30>
 800dbce:	69bb      	ldr	r3, [r7, #24]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d101      	bne.n	800dbd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dbd4:	2303      	movs	r3, #3
 800dbd6:	e04e      	b.n	800dc76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f003 0304 	and.w	r3, r3, #4
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d037      	beq.n	800dc56 <UART_WaitOnFlagUntilTimeout+0xb2>
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	2b80      	cmp	r3, #128	@ 0x80
 800dbea:	d034      	beq.n	800dc56 <UART_WaitOnFlagUntilTimeout+0xb2>
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	2b40      	cmp	r3, #64	@ 0x40
 800dbf0:	d031      	beq.n	800dc56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	69db      	ldr	r3, [r3, #28]
 800dbf8:	f003 0308 	and.w	r3, r3, #8
 800dbfc:	2b08      	cmp	r3, #8
 800dbfe:	d110      	bne.n	800dc22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2208      	movs	r2, #8
 800dc06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dc08:	68f8      	ldr	r0, [r7, #12]
 800dc0a:	f000 f838 	bl	800dc7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2208      	movs	r2, #8
 800dc12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	e029      	b.n	800dc76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	69db      	ldr	r3, [r3, #28]
 800dc28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dc2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dc30:	d111      	bne.n	800dc56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dc3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dc3c:	68f8      	ldr	r0, [r7, #12]
 800dc3e:	f000 f81e 	bl	800dc7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2220      	movs	r2, #32
 800dc46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dc52:	2303      	movs	r3, #3
 800dc54:	e00f      	b.n	800dc76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	69da      	ldr	r2, [r3, #28]
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	4013      	ands	r3, r2
 800dc60:	68ba      	ldr	r2, [r7, #8]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	bf0c      	ite	eq
 800dc66:	2301      	moveq	r3, #1
 800dc68:	2300      	movne	r3, #0
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	79fb      	ldrb	r3, [r7, #7]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d0a0      	beq.n	800dbb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dc74:	2300      	movs	r3, #0
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dc7e:	b480      	push	{r7}
 800dc80:	b095      	sub	sp, #84	@ 0x54
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc8e:	e853 3f00 	ldrex	r3, [r3]
 800dc92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dc94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dc9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	461a      	mov	r2, r3
 800dca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dca4:	643b      	str	r3, [r7, #64]	@ 0x40
 800dca6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dcaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dcac:	e841 2300 	strex	r3, r2, [r1]
 800dcb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dcb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d1e6      	bne.n	800dc86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	3308      	adds	r3, #8
 800dcbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc0:	6a3b      	ldr	r3, [r7, #32]
 800dcc2:	e853 3f00 	ldrex	r3, [r3]
 800dcc6:	61fb      	str	r3, [r7, #28]
   return(result);
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dcce:	f023 0301 	bic.w	r3, r3, #1
 800dcd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	3308      	adds	r3, #8
 800dcda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dcdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dcde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dce4:	e841 2300 	strex	r3, r2, [r1]
 800dce8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d1e3      	bne.n	800dcb8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d118      	bne.n	800dd2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	e853 3f00 	ldrex	r3, [r3]
 800dd04:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	f023 0310 	bic.w	r3, r3, #16
 800dd0c:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	461a      	mov	r2, r3
 800dd14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd16:	61bb      	str	r3, [r7, #24]
 800dd18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd1a:	6979      	ldr	r1, [r7, #20]
 800dd1c:	69ba      	ldr	r2, [r7, #24]
 800dd1e:	e841 2300 	strex	r3, r2, [r1]
 800dd22:	613b      	str	r3, [r7, #16]
   return(result);
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d1e6      	bne.n	800dcf8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2220      	movs	r2, #32
 800dd2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2200      	movs	r2, #0
 800dd36:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dd3e:	bf00      	nop
 800dd40:	3754      	adds	r7, #84	@ 0x54
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr

0800dd4a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b084      	sub	sp, #16
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	f7ff fac1 	bl	800d2e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd66:	bf00      	nop
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b088      	sub	sp, #32
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	e853 3f00 	ldrex	r3, [r3]
 800dd82:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd8a:	61fb      	str	r3, [r7, #28]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	461a      	mov	r2, r3
 800dd92:	69fb      	ldr	r3, [r7, #28]
 800dd94:	61bb      	str	r3, [r7, #24]
 800dd96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd98:	6979      	ldr	r1, [r7, #20]
 800dd9a:	69ba      	ldr	r2, [r7, #24]
 800dd9c:	e841 2300 	strex	r3, r2, [r1]
 800dda0:	613b      	str	r3, [r7, #16]
   return(result);
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d1e6      	bne.n	800dd76 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2220      	movs	r2, #32
 800ddac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f7ff fa8c 	bl	800d2d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ddbc:	bf00      	nop
 800ddbe:	3720      	adds	r7, #32
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b083      	sub	sp, #12
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ddcc:	bf00      	nop
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b083      	sub	sp, #12
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dde0:	bf00      	nop
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr

0800ddec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ddf4:	bf00      	nop
 800ddf6:	370c      	adds	r7, #12
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr

0800de00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800de00:	b480      	push	{r7}
 800de02:	b085      	sub	sp, #20
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d101      	bne.n	800de16 <HAL_UARTEx_DisableFifoMode+0x16>
 800de12:	2302      	movs	r3, #2
 800de14:	e027      	b.n	800de66 <HAL_UARTEx_DisableFifoMode+0x66>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2201      	movs	r2, #1
 800de1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2224      	movs	r2, #36	@ 0x24
 800de22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	681a      	ldr	r2, [r3, #0]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f022 0201 	bic.w	r2, r2, #1
 800de3c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800de44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2200      	movs	r2, #0
 800de4a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	68fa      	ldr	r2, [r7, #12]
 800de52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2220      	movs	r2, #32
 800de58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2200      	movs	r2, #0
 800de60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de64:	2300      	movs	r3, #0
}
 800de66:	4618      	mov	r0, r3
 800de68:	3714      	adds	r7, #20
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr

0800de72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de72:	b580      	push	{r7, lr}
 800de74:	b084      	sub	sp, #16
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
 800de7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800de82:	2b01      	cmp	r3, #1
 800de84:	d101      	bne.n	800de8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800de86:	2302      	movs	r3, #2
 800de88:	e02d      	b.n	800dee6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2201      	movs	r2, #1
 800de8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2224      	movs	r2, #36	@ 0x24
 800de96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f022 0201 	bic.w	r2, r2, #1
 800deb0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	689b      	ldr	r3, [r3, #8]
 800deb8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	683a      	ldr	r2, [r7, #0]
 800dec2:	430a      	orrs	r2, r1
 800dec4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f000 f850 	bl	800df6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	68fa      	ldr	r2, [r7, #12]
 800ded2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2220      	movs	r2, #32
 800ded8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2200      	movs	r2, #0
 800dee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dee4:	2300      	movs	r3, #0
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}

0800deee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800deee:	b580      	push	{r7, lr}
 800def0:	b084      	sub	sp, #16
 800def2:	af00      	add	r7, sp, #0
 800def4:	6078      	str	r0, [r7, #4]
 800def6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800defe:	2b01      	cmp	r3, #1
 800df00:	d101      	bne.n	800df06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800df02:	2302      	movs	r3, #2
 800df04:	e02d      	b.n	800df62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2201      	movs	r2, #1
 800df0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2224      	movs	r2, #36	@ 0x24
 800df12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	681a      	ldr	r2, [r3, #0]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	f022 0201 	bic.w	r2, r2, #1
 800df2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	689b      	ldr	r3, [r3, #8]
 800df34:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	683a      	ldr	r2, [r7, #0]
 800df3e:	430a      	orrs	r2, r1
 800df40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 f812 	bl	800df6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	68fa      	ldr	r2, [r7, #12]
 800df4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2220      	movs	r2, #32
 800df54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800df60:	2300      	movs	r3, #0
}
 800df62:	4618      	mov	r0, r3
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
	...

0800df6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b085      	sub	sp, #20
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d108      	bne.n	800df8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2201      	movs	r2, #1
 800df80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2201      	movs	r2, #1
 800df88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800df8c:	e031      	b.n	800dff2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800df8e:	2308      	movs	r3, #8
 800df90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800df92:	2308      	movs	r3, #8
 800df94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	689b      	ldr	r3, [r3, #8]
 800df9c:	0e5b      	lsrs	r3, r3, #25
 800df9e:	b2db      	uxtb	r3, r3
 800dfa0:	f003 0307 	and.w	r3, r3, #7
 800dfa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	689b      	ldr	r3, [r3, #8]
 800dfac:	0f5b      	lsrs	r3, r3, #29
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	f003 0307 	and.w	r3, r3, #7
 800dfb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dfb6:	7bbb      	ldrb	r3, [r7, #14]
 800dfb8:	7b3a      	ldrb	r2, [r7, #12]
 800dfba:	4911      	ldr	r1, [pc, #68]	@ (800e000 <UARTEx_SetNbDataToProcess+0x94>)
 800dfbc:	5c8a      	ldrb	r2, [r1, r2]
 800dfbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dfc2:	7b3a      	ldrb	r2, [r7, #12]
 800dfc4:	490f      	ldr	r1, [pc, #60]	@ (800e004 <UARTEx_SetNbDataToProcess+0x98>)
 800dfc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dfc8:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfcc:	b29a      	uxth	r2, r3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dfd4:	7bfb      	ldrb	r3, [r7, #15]
 800dfd6:	7b7a      	ldrb	r2, [r7, #13]
 800dfd8:	4909      	ldr	r1, [pc, #36]	@ (800e000 <UARTEx_SetNbDataToProcess+0x94>)
 800dfda:	5c8a      	ldrb	r2, [r1, r2]
 800dfdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dfe0:	7b7a      	ldrb	r2, [r7, #13]
 800dfe2:	4908      	ldr	r1, [pc, #32]	@ (800e004 <UARTEx_SetNbDataToProcess+0x98>)
 800dfe4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dfe6:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfea:	b29a      	uxth	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dff2:	bf00      	nop
 800dff4:	3714      	adds	r7, #20
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop
 800e000:	080162e4 	.word	0x080162e4
 800e004:	080162ec 	.word	0x080162ec

0800e008 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800e008:	b480      	push	{r7}
 800e00a:	b085      	sub	sp, #20
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2200      	movs	r2, #0
 800e014:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e018:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800e01c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	b29a      	uxth	r2, r3
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e028:	2300      	movs	r3, #0
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3714      	adds	r7, #20
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr

0800e036 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800e036:	b480      	push	{r7}
 800e038:	b085      	sub	sp, #20
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e03e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800e042:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e04a:	b29a      	uxth	r2, r3
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	b29b      	uxth	r3, r3
 800e050:	43db      	mvns	r3, r3
 800e052:	b29b      	uxth	r3, r3
 800e054:	4013      	ands	r3, r2
 800e056:	b29a      	uxth	r2, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e05e:	2300      	movs	r3, #0
}
 800e060:	4618      	mov	r0, r3
 800e062:	3714      	adds	r7, #20
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b085      	sub	sp, #20
 800e070:	af00      	add	r7, sp, #0
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	1d3b      	adds	r3, r7, #4
 800e076:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2201      	movs	r2, #1
 800e07e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2200      	movs	r2, #0
 800e086:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	2200      	movs	r2, #0
 800e08e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2200      	movs	r2, #0
 800e096:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800e09a:	2300      	movs	r3, #0
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3714      	adds	r7, #20
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr

0800e0a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b0a7      	sub	sp, #156	@ 0x9c
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	4413      	add	r3, r2
 800e0c2:	881b      	ldrh	r3, [r3, #0]
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800e0ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e0ce:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	78db      	ldrb	r3, [r3, #3]
 800e0d6:	2b03      	cmp	r3, #3
 800e0d8:	d81f      	bhi.n	800e11a <USB_ActivateEndpoint+0x72>
 800e0da:	a201      	add	r2, pc, #4	@ (adr r2, 800e0e0 <USB_ActivateEndpoint+0x38>)
 800e0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0e0:	0800e0f1 	.word	0x0800e0f1
 800e0e4:	0800e10d 	.word	0x0800e10d
 800e0e8:	0800e123 	.word	0x0800e123
 800e0ec:	0800e0ff 	.word	0x0800e0ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800e0f0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e0f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e0f8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800e0fc:	e012      	b.n	800e124 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800e0fe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e102:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800e106:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800e10a:	e00b      	b.n	800e124 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800e10c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e110:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e114:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800e118:	e004      	b.n	800e124 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800e11a:	2301      	movs	r3, #1
 800e11c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800e120:	e000      	b.n	800e124 <USB_ActivateEndpoint+0x7c>
      break;
 800e122:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	441a      	add	r2, r3
 800e12e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e132:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e136:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e13a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e13e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e142:	b29b      	uxth	r3, r3
 800e144:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	4413      	add	r3, r2
 800e150:	881b      	ldrh	r3, [r3, #0]
 800e152:	b29b      	uxth	r3, r3
 800e154:	b21b      	sxth	r3, r3
 800e156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e15a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e15e:	b21a      	sxth	r2, r3
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	b21b      	sxth	r3, r3
 800e166:	4313      	orrs	r3, r2
 800e168:	b21b      	sxth	r3, r3
 800e16a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	441a      	add	r2, r3
 800e178:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800e17c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e180:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e184:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	7b1b      	ldrb	r3, [r3, #12]
 800e194:	2b00      	cmp	r3, #0
 800e196:	f040 8180 	bne.w	800e49a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	785b      	ldrb	r3, [r3, #1]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	f000 8084 	beq.w	800e2ac <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	61bb      	str	r3, [r7, #24]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	4413      	add	r3, r2
 800e1b6:	61bb      	str	r3, [r7, #24]
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	00da      	lsls	r2, r3, #3
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e1c6:	617b      	str	r3, [r7, #20]
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	88db      	ldrh	r3, [r3, #6]
 800e1cc:	085b      	lsrs	r3, r3, #1
 800e1ce:	b29b      	uxth	r3, r3
 800e1d0:	005b      	lsls	r3, r3, #1
 800e1d2:	b29a      	uxth	r2, r3
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	4413      	add	r3, r2
 800e1e2:	881b      	ldrh	r3, [r3, #0]
 800e1e4:	827b      	strh	r3, [r7, #18]
 800e1e6:	8a7b      	ldrh	r3, [r7, #18]
 800e1e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d01b      	beq.n	800e228 <USB_ActivateEndpoint+0x180>
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	009b      	lsls	r3, r3, #2
 800e1f8:	4413      	add	r3, r2
 800e1fa:	881b      	ldrh	r3, [r3, #0]
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e206:	823b      	strh	r3, [r7, #16]
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	441a      	add	r2, r3
 800e212:	8a3b      	ldrh	r3, [r7, #16]
 800e214:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e218:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e21c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e220:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e224:	b29b      	uxth	r3, r3
 800e226:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	78db      	ldrb	r3, [r3, #3]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d020      	beq.n	800e272 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	009b      	lsls	r3, r3, #2
 800e238:	4413      	add	r3, r2
 800e23a:	881b      	ldrh	r3, [r3, #0]
 800e23c:	b29b      	uxth	r3, r3
 800e23e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e246:	81bb      	strh	r3, [r7, #12]
 800e248:	89bb      	ldrh	r3, [r7, #12]
 800e24a:	f083 0320 	eor.w	r3, r3, #32
 800e24e:	81bb      	strh	r3, [r7, #12]
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	441a      	add	r2, r3
 800e25a:	89bb      	ldrh	r3, [r7, #12]
 800e25c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e260:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e264:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	8013      	strh	r3, [r2, #0]
 800e270:	e3f9      	b.n	800ea66 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	4413      	add	r3, r2
 800e27c:	881b      	ldrh	r3, [r3, #0]
 800e27e:	b29b      	uxth	r3, r3
 800e280:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e288:	81fb      	strh	r3, [r7, #14]
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	441a      	add	r2, r3
 800e294:	89fb      	ldrh	r3, [r7, #14]
 800e296:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e29a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e29e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	8013      	strh	r3, [r2, #0]
 800e2aa:	e3dc      	b.n	800ea66 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2bc:	4413      	add	r3, r2
 800e2be:	633b      	str	r3, [r7, #48]	@ 0x30
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	00da      	lsls	r2, r3, #3
 800e2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c8:	4413      	add	r3, r2
 800e2ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800e2ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	88db      	ldrh	r3, [r3, #6]
 800e2d4:	085b      	lsrs	r3, r3, #1
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	005b      	lsls	r3, r3, #1
 800e2da:	b29a      	uxth	r2, r3
 800e2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2de:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	461a      	mov	r2, r3
 800e2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2f0:	4413      	add	r3, r2
 800e2f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	00da      	lsls	r2, r3, #3
 800e2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2fc:	4413      	add	r3, r2
 800e2fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e302:	627b      	str	r3, [r7, #36]	@ 0x24
 800e304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e306:	881b      	ldrh	r3, [r3, #0]
 800e308:	b29b      	uxth	r3, r3
 800e30a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e30e:	b29a      	uxth	r2, r3
 800e310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e312:	801a      	strh	r2, [r3, #0]
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	691b      	ldr	r3, [r3, #16]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d10a      	bne.n	800e332 <USB_ActivateEndpoint+0x28a>
 800e31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e31e:	881b      	ldrh	r3, [r3, #0]
 800e320:	b29b      	uxth	r3, r3
 800e322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e32a:	b29a      	uxth	r2, r3
 800e32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e32e:	801a      	strh	r2, [r3, #0]
 800e330:	e041      	b.n	800e3b6 <USB_ActivateEndpoint+0x30e>
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	691b      	ldr	r3, [r3, #16]
 800e336:	2b3e      	cmp	r3, #62	@ 0x3e
 800e338:	d81c      	bhi.n	800e374 <USB_ActivateEndpoint+0x2cc>
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	691b      	ldr	r3, [r3, #16]
 800e33e:	085b      	lsrs	r3, r3, #1
 800e340:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	691b      	ldr	r3, [r3, #16]
 800e348:	f003 0301 	and.w	r3, r3, #1
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d004      	beq.n	800e35a <USB_ActivateEndpoint+0x2b2>
 800e350:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e354:	3301      	adds	r3, #1
 800e356:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e35c:	881b      	ldrh	r3, [r3, #0]
 800e35e:	b29a      	uxth	r2, r3
 800e360:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e364:	b29b      	uxth	r3, r3
 800e366:	029b      	lsls	r3, r3, #10
 800e368:	b29b      	uxth	r3, r3
 800e36a:	4313      	orrs	r3, r2
 800e36c:	b29a      	uxth	r2, r3
 800e36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e370:	801a      	strh	r2, [r3, #0]
 800e372:	e020      	b.n	800e3b6 <USB_ActivateEndpoint+0x30e>
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	691b      	ldr	r3, [r3, #16]
 800e378:	095b      	lsrs	r3, r3, #5
 800e37a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	691b      	ldr	r3, [r3, #16]
 800e382:	f003 031f 	and.w	r3, r3, #31
 800e386:	2b00      	cmp	r3, #0
 800e388:	d104      	bne.n	800e394 <USB_ActivateEndpoint+0x2ec>
 800e38a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e38e:	3b01      	subs	r3, #1
 800e390:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e396:	881b      	ldrh	r3, [r3, #0]
 800e398:	b29a      	uxth	r2, r3
 800e39a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	029b      	lsls	r3, r3, #10
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	4313      	orrs	r3, r2
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3b0:	b29a      	uxth	r2, r3
 800e3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	009b      	lsls	r3, r3, #2
 800e3be:	4413      	add	r3, r2
 800e3c0:	881b      	ldrh	r3, [r3, #0]
 800e3c2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800e3c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e3c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d01b      	beq.n	800e406 <USB_ActivateEndpoint+0x35e>
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	009b      	lsls	r3, r3, #2
 800e3d6:	4413      	add	r3, r2
 800e3d8:	881b      	ldrh	r3, [r3, #0]
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e3e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e3e4:	843b      	strh	r3, [r7, #32]
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	441a      	add	r2, r3
 800e3f0:	8c3b      	ldrh	r3, [r7, #32]
 800e3f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e3fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e402:	b29b      	uxth	r3, r3
 800e404:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d124      	bne.n	800e458 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	4413      	add	r3, r2
 800e418:	881b      	ldrh	r3, [r3, #0]
 800e41a:	b29b      	uxth	r3, r3
 800e41c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e424:	83bb      	strh	r3, [r7, #28]
 800e426:	8bbb      	ldrh	r3, [r7, #28]
 800e428:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e42c:	83bb      	strh	r3, [r7, #28]
 800e42e:	8bbb      	ldrh	r3, [r7, #28]
 800e430:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e434:	83bb      	strh	r3, [r7, #28]
 800e436:	687a      	ldr	r2, [r7, #4]
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	781b      	ldrb	r3, [r3, #0]
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	441a      	add	r2, r3
 800e440:	8bbb      	ldrh	r3, [r7, #28]
 800e442:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e446:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e44a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e44e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e452:	b29b      	uxth	r3, r3
 800e454:	8013      	strh	r3, [r2, #0]
 800e456:	e306      	b.n	800ea66 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800e458:	687a      	ldr	r2, [r7, #4]
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	009b      	lsls	r3, r3, #2
 800e460:	4413      	add	r3, r2
 800e462:	881b      	ldrh	r3, [r3, #0]
 800e464:	b29b      	uxth	r3, r3
 800e466:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e46a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e46e:	83fb      	strh	r3, [r7, #30]
 800e470:	8bfb      	ldrh	r3, [r7, #30]
 800e472:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e476:	83fb      	strh	r3, [r7, #30]
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	441a      	add	r2, r3
 800e482:	8bfb      	ldrh	r3, [r7, #30]
 800e484:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e488:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e48c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e494:	b29b      	uxth	r3, r3
 800e496:	8013      	strh	r3, [r2, #0]
 800e498:	e2e5      	b.n	800ea66 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	78db      	ldrb	r3, [r3, #3]
 800e49e:	2b02      	cmp	r3, #2
 800e4a0:	d11e      	bne.n	800e4e0 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	4413      	add	r3, r2
 800e4ac:	881b      	ldrh	r3, [r3, #0]
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e4b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4b8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	441a      	add	r2, r3
 800e4c6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e4ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e4ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e4d2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e4d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	8013      	strh	r3, [r2, #0]
 800e4de:	e01d      	b.n	800e51c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	009b      	lsls	r3, r3, #2
 800e4e8:	4413      	add	r3, r2
 800e4ea:	881b      	ldrh	r3, [r3, #0]
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800e4f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4f6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	009b      	lsls	r3, r3, #2
 800e502:	441a      	add	r2, r3
 800e504:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800e508:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e50c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e510:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e518:	b29b      	uxth	r3, r3
 800e51a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e526:	b29b      	uxth	r3, r3
 800e528:	461a      	mov	r2, r3
 800e52a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e52c:	4413      	add	r3, r2
 800e52e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	00da      	lsls	r2, r3, #3
 800e536:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e538:	4413      	add	r3, r2
 800e53a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e53e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	891b      	ldrh	r3, [r3, #8]
 800e544:	085b      	lsrs	r3, r3, #1
 800e546:	b29b      	uxth	r3, r3
 800e548:	005b      	lsls	r3, r3, #1
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e54e:	801a      	strh	r2, [r3, #0]
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	677b      	str	r3, [r7, #116]	@ 0x74
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e55a:	b29b      	uxth	r3, r3
 800e55c:	461a      	mov	r2, r3
 800e55e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e560:	4413      	add	r3, r2
 800e562:	677b      	str	r3, [r7, #116]	@ 0x74
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	781b      	ldrb	r3, [r3, #0]
 800e568:	00da      	lsls	r2, r3, #3
 800e56a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e56c:	4413      	add	r3, r2
 800e56e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800e572:	673b      	str	r3, [r7, #112]	@ 0x70
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	895b      	ldrh	r3, [r3, #10]
 800e578:	085b      	lsrs	r3, r3, #1
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	005b      	lsls	r3, r3, #1
 800e57e:	b29a      	uxth	r2, r3
 800e580:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e582:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	785b      	ldrb	r3, [r3, #1]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	f040 81af 	bne.w	800e8ec <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e58e:	687a      	ldr	r2, [r7, #4]
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	009b      	lsls	r3, r3, #2
 800e596:	4413      	add	r3, r2
 800e598:	881b      	ldrh	r3, [r3, #0]
 800e59a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800e59e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800e5a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d01d      	beq.n	800e5e6 <USB_ActivateEndpoint+0x53e>
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4413      	add	r3, r2
 800e5b4:	881b      	ldrh	r3, [r3, #0]
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e5bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e5c0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	009b      	lsls	r3, r3, #2
 800e5cc:	441a      	add	r2, r3
 800e5ce:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800e5d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e5d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e5da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e5de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	009b      	lsls	r3, r3, #2
 800e5ee:	4413      	add	r3, r2
 800e5f0:	881b      	ldrh	r3, [r3, #0]
 800e5f2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800e5f6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800e5fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d01d      	beq.n	800e63e <USB_ActivateEndpoint+0x596>
 800e602:	687a      	ldr	r2, [r7, #4]
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	009b      	lsls	r3, r3, #2
 800e60a:	4413      	add	r3, r2
 800e60c:	881b      	ldrh	r3, [r3, #0]
 800e60e:	b29b      	uxth	r3, r3
 800e610:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e618:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800e61c:	687a      	ldr	r2, [r7, #4]
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	441a      	add	r2, r3
 800e626:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800e62a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e62e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e636:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	785b      	ldrb	r3, [r3, #1]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d16b      	bne.n	800e71e <USB_ActivateEndpoint+0x676>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e650:	b29b      	uxth	r3, r3
 800e652:	461a      	mov	r2, r3
 800e654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e656:	4413      	add	r3, r2
 800e658:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	00da      	lsls	r2, r3, #3
 800e660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e662:	4413      	add	r3, r2
 800e664:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e668:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e66a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e66c:	881b      	ldrh	r3, [r3, #0]
 800e66e:	b29b      	uxth	r3, r3
 800e670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e674:	b29a      	uxth	r2, r3
 800e676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e678:	801a      	strh	r2, [r3, #0]
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	691b      	ldr	r3, [r3, #16]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d10a      	bne.n	800e698 <USB_ActivateEndpoint+0x5f0>
 800e682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e684:	881b      	ldrh	r3, [r3, #0]
 800e686:	b29b      	uxth	r3, r3
 800e688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e68c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e690:	b29a      	uxth	r2, r3
 800e692:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e694:	801a      	strh	r2, [r3, #0]
 800e696:	e05d      	b.n	800e754 <USB_ActivateEndpoint+0x6ac>
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	691b      	ldr	r3, [r3, #16]
 800e69c:	2b3e      	cmp	r3, #62	@ 0x3e
 800e69e:	d81c      	bhi.n	800e6da <USB_ActivateEndpoint+0x632>
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	691b      	ldr	r3, [r3, #16]
 800e6a4:	085b      	lsrs	r3, r3, #1
 800e6a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	691b      	ldr	r3, [r3, #16]
 800e6ae:	f003 0301 	and.w	r3, r3, #1
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d004      	beq.n	800e6c0 <USB_ActivateEndpoint+0x618>
 800e6b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e6c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6c2:	881b      	ldrh	r3, [r3, #0]
 800e6c4:	b29a      	uxth	r2, r3
 800e6c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	029b      	lsls	r3, r3, #10
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	b29a      	uxth	r2, r3
 800e6d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6d6:	801a      	strh	r2, [r3, #0]
 800e6d8:	e03c      	b.n	800e754 <USB_ActivateEndpoint+0x6ac>
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	691b      	ldr	r3, [r3, #16]
 800e6de:	095b      	lsrs	r3, r3, #5
 800e6e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	691b      	ldr	r3, [r3, #16]
 800e6e8:	f003 031f 	and.w	r3, r3, #31
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d104      	bne.n	800e6fa <USB_ActivateEndpoint+0x652>
 800e6f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e6f4:	3b01      	subs	r3, #1
 800e6f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e6fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6fc:	881b      	ldrh	r3, [r3, #0]
 800e6fe:	b29a      	uxth	r2, r3
 800e700:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e704:	b29b      	uxth	r3, r3
 800e706:	029b      	lsls	r3, r3, #10
 800e708:	b29b      	uxth	r3, r3
 800e70a:	4313      	orrs	r3, r2
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e716:	b29a      	uxth	r2, r3
 800e718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e71a:	801a      	strh	r2, [r3, #0]
 800e71c:	e01a      	b.n	800e754 <USB_ActivateEndpoint+0x6ac>
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	785b      	ldrb	r3, [r3, #1]
 800e722:	2b01      	cmp	r3, #1
 800e724:	d116      	bne.n	800e754 <USB_ActivateEndpoint+0x6ac>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	657b      	str	r3, [r7, #84]	@ 0x54
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e730:	b29b      	uxth	r3, r3
 800e732:	461a      	mov	r2, r3
 800e734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e736:	4413      	add	r3, r2
 800e738:	657b      	str	r3, [r7, #84]	@ 0x54
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	00da      	lsls	r2, r3, #3
 800e740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e742:	4413      	add	r3, r2
 800e744:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e748:	653b      	str	r3, [r7, #80]	@ 0x50
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	691b      	ldr	r3, [r3, #16]
 800e74e:	b29a      	uxth	r2, r3
 800e750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e752:	801a      	strh	r2, [r3, #0]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	647b      	str	r3, [r7, #68]	@ 0x44
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	785b      	ldrb	r3, [r3, #1]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d16b      	bne.n	800e838 <USB_ActivateEndpoint+0x790>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	461a      	mov	r2, r3
 800e76e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e770:	4413      	add	r3, r2
 800e772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	00da      	lsls	r2, r3, #3
 800e77a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e77c:	4413      	add	r3, r2
 800e77e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e782:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e786:	881b      	ldrh	r3, [r3, #0]
 800e788:	b29b      	uxth	r3, r3
 800e78a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e78e:	b29a      	uxth	r2, r3
 800e790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e792:	801a      	strh	r2, [r3, #0]
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	691b      	ldr	r3, [r3, #16]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d10a      	bne.n	800e7b2 <USB_ActivateEndpoint+0x70a>
 800e79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e79e:	881b      	ldrh	r3, [r3, #0]
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7aa:	b29a      	uxth	r2, r3
 800e7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7ae:	801a      	strh	r2, [r3, #0]
 800e7b0:	e05b      	b.n	800e86a <USB_ActivateEndpoint+0x7c2>
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	691b      	ldr	r3, [r3, #16]
 800e7b6:	2b3e      	cmp	r3, #62	@ 0x3e
 800e7b8:	d81c      	bhi.n	800e7f4 <USB_ActivateEndpoint+0x74c>
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	691b      	ldr	r3, [r3, #16]
 800e7be:	085b      	lsrs	r3, r3, #1
 800e7c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	691b      	ldr	r3, [r3, #16]
 800e7c8:	f003 0301 	and.w	r3, r3, #1
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d004      	beq.n	800e7da <USB_ActivateEndpoint+0x732>
 800e7d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7dc:	881b      	ldrh	r3, [r3, #0]
 800e7de:	b29a      	uxth	r2, r3
 800e7e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	029b      	lsls	r3, r3, #10
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	4313      	orrs	r3, r2
 800e7ec:	b29a      	uxth	r2, r3
 800e7ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7f0:	801a      	strh	r2, [r3, #0]
 800e7f2:	e03a      	b.n	800e86a <USB_ActivateEndpoint+0x7c2>
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	691b      	ldr	r3, [r3, #16]
 800e7f8:	095b      	lsrs	r3, r3, #5
 800e7fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	691b      	ldr	r3, [r3, #16]
 800e802:	f003 031f 	and.w	r3, r3, #31
 800e806:	2b00      	cmp	r3, #0
 800e808:	d104      	bne.n	800e814 <USB_ActivateEndpoint+0x76c>
 800e80a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e80e:	3b01      	subs	r3, #1
 800e810:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e816:	881b      	ldrh	r3, [r3, #0]
 800e818:	b29a      	uxth	r2, r3
 800e81a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e81e:	b29b      	uxth	r3, r3
 800e820:	029b      	lsls	r3, r3, #10
 800e822:	b29b      	uxth	r3, r3
 800e824:	4313      	orrs	r3, r2
 800e826:	b29b      	uxth	r3, r3
 800e828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e82c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e830:	b29a      	uxth	r2, r3
 800e832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e834:	801a      	strh	r2, [r3, #0]
 800e836:	e018      	b.n	800e86a <USB_ActivateEndpoint+0x7c2>
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	785b      	ldrb	r3, [r3, #1]
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	d114      	bne.n	800e86a <USB_ActivateEndpoint+0x7c2>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e846:	b29b      	uxth	r3, r3
 800e848:	461a      	mov	r2, r3
 800e84a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e84c:	4413      	add	r3, r2
 800e84e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	00da      	lsls	r2, r3, #3
 800e856:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e858:	4413      	add	r3, r2
 800e85a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e85e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	691b      	ldr	r3, [r3, #16]
 800e864:	b29a      	uxth	r2, r3
 800e866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e868:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	009b      	lsls	r3, r3, #2
 800e872:	4413      	add	r3, r2
 800e874:	881b      	ldrh	r3, [r3, #0]
 800e876:	b29b      	uxth	r3, r3
 800e878:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e87c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e880:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e882:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e884:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e888:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e88a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e88c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e890:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	441a      	add	r2, r3
 800e89c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e89e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e8a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8ae:	b29b      	uxth	r3, r3
 800e8b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	4413      	add	r3, r2
 800e8bc:	881b      	ldrh	r3, [r3, #0]
 800e8be:	b29b      	uxth	r3, r3
 800e8c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8c8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800e8ca:	687a      	ldr	r2, [r7, #4]
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	009b      	lsls	r3, r3, #2
 800e8d2:	441a      	add	r2, r3
 800e8d4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e8d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e8de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	8013      	strh	r3, [r2, #0]
 800e8ea:	e0bc      	b.n	800ea66 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e8ec:	687a      	ldr	r2, [r7, #4]
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	009b      	lsls	r3, r3, #2
 800e8f4:	4413      	add	r3, r2
 800e8f6:	881b      	ldrh	r3, [r3, #0]
 800e8f8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800e8fc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e900:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e904:	2b00      	cmp	r3, #0
 800e906:	d01d      	beq.n	800e944 <USB_ActivateEndpoint+0x89c>
 800e908:	687a      	ldr	r2, [r7, #4]
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	4413      	add	r3, r2
 800e912:	881b      	ldrh	r3, [r3, #0]
 800e914:	b29b      	uxth	r3, r3
 800e916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e91a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e91e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800e922:	687a      	ldr	r2, [r7, #4]
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	009b      	lsls	r3, r3, #2
 800e92a:	441a      	add	r2, r3
 800e92c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e930:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e934:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e938:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e93c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e940:	b29b      	uxth	r3, r3
 800e942:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e944:	687a      	ldr	r2, [r7, #4]
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	009b      	lsls	r3, r3, #2
 800e94c:	4413      	add	r3, r2
 800e94e:	881b      	ldrh	r3, [r3, #0]
 800e950:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800e954:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800e958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d01d      	beq.n	800e99c <USB_ActivateEndpoint+0x8f4>
 800e960:	687a      	ldr	r2, [r7, #4]
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	009b      	lsls	r3, r3, #2
 800e968:	4413      	add	r3, r2
 800e96a:	881b      	ldrh	r3, [r3, #0]
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e976:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	009b      	lsls	r3, r3, #2
 800e982:	441a      	add	r2, r3
 800e984:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800e988:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e98c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e994:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e998:	b29b      	uxth	r3, r3
 800e99a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	78db      	ldrb	r3, [r3, #3]
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d024      	beq.n	800e9ee <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	781b      	ldrb	r3, [r3, #0]
 800e9aa:	009b      	lsls	r3, r3, #2
 800e9ac:	4413      	add	r3, r2
 800e9ae:	881b      	ldrh	r3, [r3, #0]
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e9b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9ba:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800e9be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800e9c2:	f083 0320 	eor.w	r3, r3, #32
 800e9c6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800e9ca:	687a      	ldr	r2, [r7, #4]
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	009b      	lsls	r3, r3, #2
 800e9d2:	441a      	add	r2, r3
 800e9d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800e9d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e9dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e9e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e9e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	8013      	strh	r3, [r2, #0]
 800e9ec:	e01d      	b.n	800ea2a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	781b      	ldrb	r3, [r3, #0]
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4413      	add	r3, r2
 800e9f8:	881b      	ldrh	r3, [r3, #0]
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ea00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea04:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	009b      	lsls	r3, r3, #2
 800ea10:	441a      	add	r2, r3
 800ea12:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800ea16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ea22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ea2a:	687a      	ldr	r2, [r7, #4]
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	4413      	add	r3, r2
 800ea34:	881b      	ldrh	r3, [r3, #0]
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ea3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea40:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	009b      	lsls	r3, r3, #2
 800ea4c:	441a      	add	r2, r3
 800ea4e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ea52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ea5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ea66:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	379c      	adds	r7, #156	@ 0x9c
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr
 800ea76:	bf00      	nop

0800ea78 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b0ac      	sub	sp, #176	@ 0xb0
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	785b      	ldrb	r3, [r3, #1]
 800ea86:	2b01      	cmp	r3, #1
 800ea88:	f040 84ca 	bne.w	800f420 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	699a      	ldr	r2, [r3, #24]
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	691b      	ldr	r3, [r3, #16]
 800ea94:	429a      	cmp	r2, r3
 800ea96:	d904      	bls.n	800eaa2 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	691b      	ldr	r3, [r3, #16]
 800ea9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800eaa0:	e003      	b.n	800eaaa <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	699b      	ldr	r3, [r3, #24]
 800eaa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	7b1b      	ldrb	r3, [r3, #12]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d122      	bne.n	800eaf8 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	6959      	ldr	r1, [r3, #20]
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	88da      	ldrh	r2, [r3, #6]
 800eaba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f000 fed2 	bl	800f86a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	613b      	str	r3, [r7, #16]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	461a      	mov	r2, r3
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	4413      	add	r3, r2
 800ead8:	613b      	str	r3, [r7, #16]
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	00da      	lsls	r2, r3, #3
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	4413      	add	r3, r2
 800eae4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800eae8:	60fb      	str	r3, [r7, #12]
 800eaea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eaee:	b29a      	uxth	r2, r3
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	801a      	strh	r2, [r3, #0]
 800eaf4:	f000 bc6f 	b.w	800f3d6 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	78db      	ldrb	r3, [r3, #3]
 800eafc:	2b02      	cmp	r3, #2
 800eafe:	f040 831e 	bne.w	800f13e <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	6a1a      	ldr	r2, [r3, #32]
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	691b      	ldr	r3, [r3, #16]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	f240 82cf 	bls.w	800f0ae <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	009b      	lsls	r3, r3, #2
 800eb18:	4413      	add	r3, r2
 800eb1a:	881b      	ldrh	r3, [r3, #0]
 800eb1c:	b29b      	uxth	r3, r3
 800eb1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eb22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb26:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	009b      	lsls	r3, r3, #2
 800eb32:	441a      	add	r2, r3
 800eb34:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800eb38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eb3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eb40:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800eb44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	6a1a      	ldr	r2, [r3, #32]
 800eb50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb54:	1ad2      	subs	r2, r2, r3
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	009b      	lsls	r3, r3, #2
 800eb62:	4413      	add	r3, r2
 800eb64:	881b      	ldrh	r3, [r3, #0]
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	f000 814f 	beq.w	800ee10 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	785b      	ldrb	r3, [r3, #1]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d16b      	bne.n	800ec56 <USB_EPStartXfer+0x1de>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb8e:	4413      	add	r3, r2
 800eb90:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	00da      	lsls	r2, r3, #3
 800eb98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb9a:	4413      	add	r3, r2
 800eb9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800eba0:	627b      	str	r3, [r7, #36]	@ 0x24
 800eba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eba4:	881b      	ldrh	r3, [r3, #0]
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ebac:	b29a      	uxth	r2, r3
 800ebae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebb0:	801a      	strh	r2, [r3, #0]
 800ebb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d10a      	bne.n	800ebd0 <USB_EPStartXfer+0x158>
 800ebba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebbc:	881b      	ldrh	r3, [r3, #0]
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ebc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ebc8:	b29a      	uxth	r2, r3
 800ebca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebcc:	801a      	strh	r2, [r3, #0]
 800ebce:	e05b      	b.n	800ec88 <USB_EPStartXfer+0x210>
 800ebd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ebd4:	2b3e      	cmp	r3, #62	@ 0x3e
 800ebd6:	d81c      	bhi.n	800ec12 <USB_EPStartXfer+0x19a>
 800ebd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ebdc:	085b      	lsrs	r3, r3, #1
 800ebde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ebe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ebe6:	f003 0301 	and.w	r3, r3, #1
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d004      	beq.n	800ebf8 <USB_EPStartXfer+0x180>
 800ebee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ebf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebfa:	881b      	ldrh	r3, [r3, #0]
 800ebfc:	b29a      	uxth	r2, r3
 800ebfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	029b      	lsls	r3, r3, #10
 800ec06:	b29b      	uxth	r3, r3
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec0e:	801a      	strh	r2, [r3, #0]
 800ec10:	e03a      	b.n	800ec88 <USB_EPStartXfer+0x210>
 800ec12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec16:	095b      	lsrs	r3, r3, #5
 800ec18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ec1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec20:	f003 031f 	and.w	r3, r3, #31
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d104      	bne.n	800ec32 <USB_EPStartXfer+0x1ba>
 800ec28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ec2c:	3b01      	subs	r3, #1
 800ec2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ec32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec34:	881b      	ldrh	r3, [r3, #0]
 800ec36:	b29a      	uxth	r2, r3
 800ec38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ec3c:	b29b      	uxth	r3, r3
 800ec3e:	029b      	lsls	r3, r3, #10
 800ec40:	b29b      	uxth	r3, r3
 800ec42:	4313      	orrs	r3, r2
 800ec44:	b29b      	uxth	r3, r3
 800ec46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec4e:	b29a      	uxth	r2, r3
 800ec50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec52:	801a      	strh	r2, [r3, #0]
 800ec54:	e018      	b.n	800ec88 <USB_EPStartXfer+0x210>
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	785b      	ldrb	r3, [r3, #1]
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d114      	bne.n	800ec88 <USB_EPStartXfer+0x210>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	461a      	mov	r2, r3
 800ec68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec6a:	4413      	add	r3, r2
 800ec6c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	00da      	lsls	r2, r3, #3
 800ec74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec76:	4413      	add	r3, r2
 800ec78:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ec7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec82:	b29a      	uxth	r2, r3
 800ec84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	895b      	ldrh	r3, [r3, #10]
 800ec8c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	6959      	ldr	r1, [r3, #20]
 800ec94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f000 fde3 	bl	800f86a <USB_WritePMA>
            ep->xfer_buff += len;
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	695a      	ldr	r2, [r3, #20]
 800eca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ecac:	441a      	add	r2, r3
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	6a1a      	ldr	r2, [r3, #32]
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	691b      	ldr	r3, [r3, #16]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d907      	bls.n	800ecce <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	6a1a      	ldr	r2, [r3, #32]
 800ecc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ecc6:	1ad2      	subs	r2, r2, r3
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	621a      	str	r2, [r3, #32]
 800eccc:	e006      	b.n	800ecdc <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	6a1b      	ldr	r3, [r3, #32]
 800ecd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	785b      	ldrb	r3, [r3, #1]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d16b      	bne.n	800edbc <USB_EPStartXfer+0x344>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	61bb      	str	r3, [r7, #24]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	69bb      	ldr	r3, [r7, #24]
 800ecf4:	4413      	add	r3, r2
 800ecf6:	61bb      	str	r3, [r7, #24]
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	781b      	ldrb	r3, [r3, #0]
 800ecfc:	00da      	lsls	r2, r3, #3
 800ecfe:	69bb      	ldr	r3, [r7, #24]
 800ed00:	4413      	add	r3, r2
 800ed02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ed06:	617b      	str	r3, [r7, #20]
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	881b      	ldrh	r3, [r3, #0]
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed12:	b29a      	uxth	r2, r3
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	801a      	strh	r2, [r3, #0]
 800ed18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d10a      	bne.n	800ed36 <USB_EPStartXfer+0x2be>
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	881b      	ldrh	r3, [r3, #0]
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed2e:	b29a      	uxth	r2, r3
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	801a      	strh	r2, [r3, #0]
 800ed34:	e05d      	b.n	800edf2 <USB_EPStartXfer+0x37a>
 800ed36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed3a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ed3c:	d81c      	bhi.n	800ed78 <USB_EPStartXfer+0x300>
 800ed3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed42:	085b      	lsrs	r3, r3, #1
 800ed44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ed48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed4c:	f003 0301 	and.w	r3, r3, #1
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d004      	beq.n	800ed5e <USB_EPStartXfer+0x2e6>
 800ed54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ed58:	3301      	adds	r3, #1
 800ed5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	881b      	ldrh	r3, [r3, #0]
 800ed62:	b29a      	uxth	r2, r3
 800ed64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ed68:	b29b      	uxth	r3, r3
 800ed6a:	029b      	lsls	r3, r3, #10
 800ed6c:	b29b      	uxth	r3, r3
 800ed6e:	4313      	orrs	r3, r2
 800ed70:	b29a      	uxth	r2, r3
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	801a      	strh	r2, [r3, #0]
 800ed76:	e03c      	b.n	800edf2 <USB_EPStartXfer+0x37a>
 800ed78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed7c:	095b      	lsrs	r3, r3, #5
 800ed7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ed82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed86:	f003 031f 	and.w	r3, r3, #31
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d104      	bne.n	800ed98 <USB_EPStartXfer+0x320>
 800ed8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ed92:	3b01      	subs	r3, #1
 800ed94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	881b      	ldrh	r3, [r3, #0]
 800ed9c:	b29a      	uxth	r2, r3
 800ed9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800eda2:	b29b      	uxth	r3, r3
 800eda4:	029b      	lsls	r3, r3, #10
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	4313      	orrs	r3, r2
 800edaa:	b29b      	uxth	r3, r3
 800edac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800edb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800edb4:	b29a      	uxth	r2, r3
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	801a      	strh	r2, [r3, #0]
 800edba:	e01a      	b.n	800edf2 <USB_EPStartXfer+0x37a>
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	785b      	ldrb	r3, [r3, #1]
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d116      	bne.n	800edf2 <USB_EPStartXfer+0x37a>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	623b      	str	r3, [r7, #32]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800edce:	b29b      	uxth	r3, r3
 800edd0:	461a      	mov	r2, r3
 800edd2:	6a3b      	ldr	r3, [r7, #32]
 800edd4:	4413      	add	r3, r2
 800edd6:	623b      	str	r3, [r7, #32]
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	00da      	lsls	r2, r3, #3
 800edde:	6a3b      	ldr	r3, [r7, #32]
 800ede0:	4413      	add	r3, r2
 800ede2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ede6:	61fb      	str	r3, [r7, #28]
 800ede8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800edec:	b29a      	uxth	r2, r3
 800edee:	69fb      	ldr	r3, [r7, #28]
 800edf0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	891b      	ldrh	r3, [r3, #8]
 800edf6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	6959      	ldr	r1, [r3, #20]
 800edfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee02:	b29b      	uxth	r3, r3
 800ee04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f000 fd2e 	bl	800f86a <USB_WritePMA>
 800ee0e:	e2e2      	b.n	800f3d6 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	785b      	ldrb	r3, [r3, #1]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d16b      	bne.n	800eef0 <USB_EPStartXfer+0x478>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	461a      	mov	r2, r3
 800ee26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee28:	4413      	add	r3, r2
 800ee2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	00da      	lsls	r2, r3, #3
 800ee32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee34:	4413      	add	r3, r2
 800ee36:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ee3a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee3e:	881b      	ldrh	r3, [r3, #0]
 800ee40:	b29b      	uxth	r3, r3
 800ee42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ee46:	b29a      	uxth	r2, r3
 800ee48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee4a:	801a      	strh	r2, [r3, #0]
 800ee4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d10a      	bne.n	800ee6a <USB_EPStartXfer+0x3f2>
 800ee54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee56:	881b      	ldrh	r3, [r3, #0]
 800ee58:	b29b      	uxth	r3, r3
 800ee5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ee5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ee62:	b29a      	uxth	r2, r3
 800ee64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee66:	801a      	strh	r2, [r3, #0]
 800ee68:	e05d      	b.n	800ef26 <USB_EPStartXfer+0x4ae>
 800ee6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee6e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ee70:	d81c      	bhi.n	800eeac <USB_EPStartXfer+0x434>
 800ee72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee76:	085b      	lsrs	r3, r3, #1
 800ee78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ee7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee80:	f003 0301 	and.w	r3, r3, #1
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d004      	beq.n	800ee92 <USB_EPStartXfer+0x41a>
 800ee88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ee92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee94:	881b      	ldrh	r3, [r3, #0]
 800ee96:	b29a      	uxth	r2, r3
 800ee98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	029b      	lsls	r3, r3, #10
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	4313      	orrs	r3, r2
 800eea4:	b29a      	uxth	r2, r3
 800eea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eea8:	801a      	strh	r2, [r3, #0]
 800eeaa:	e03c      	b.n	800ef26 <USB_EPStartXfer+0x4ae>
 800eeac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eeb0:	095b      	lsrs	r3, r3, #5
 800eeb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800eeb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eeba:	f003 031f 	and.w	r3, r3, #31
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d104      	bne.n	800eecc <USB_EPStartXfer+0x454>
 800eec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800eec6:	3b01      	subs	r3, #1
 800eec8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800eecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eece:	881b      	ldrh	r3, [r3, #0]
 800eed0:	b29a      	uxth	r2, r3
 800eed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	029b      	lsls	r3, r3, #10
 800eeda:	b29b      	uxth	r3, r3
 800eedc:	4313      	orrs	r3, r2
 800eede:	b29b      	uxth	r3, r3
 800eee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eee8:	b29a      	uxth	r2, r3
 800eeea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eeec:	801a      	strh	r2, [r3, #0]
 800eeee:	e01a      	b.n	800ef26 <USB_EPStartXfer+0x4ae>
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	785b      	ldrb	r3, [r3, #1]
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d116      	bne.n	800ef26 <USB_EPStartXfer+0x4ae>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	653b      	str	r3, [r7, #80]	@ 0x50
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ef02:	b29b      	uxth	r3, r3
 800ef04:	461a      	mov	r2, r3
 800ef06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef08:	4413      	add	r3, r2
 800ef0a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	00da      	lsls	r2, r3, #3
 800ef12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef14:	4413      	add	r3, r2
 800ef16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ef1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ef1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef20:	b29a      	uxth	r2, r3
 800ef22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	891b      	ldrh	r3, [r3, #8]
 800ef2a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	6959      	ldr	r1, [r3, #20]
 800ef32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f000 fc94 	bl	800f86a <USB_WritePMA>
            ep->xfer_buff += len;
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	695a      	ldr	r2, [r3, #20]
 800ef46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef4a:	441a      	add	r2, r3
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	6a1a      	ldr	r2, [r3, #32]
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	691b      	ldr	r3, [r3, #16]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d907      	bls.n	800ef6c <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	6a1a      	ldr	r2, [r3, #32]
 800ef60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef64:	1ad2      	subs	r2, r2, r3
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	621a      	str	r2, [r3, #32]
 800ef6a:	e006      	b.n	800ef7a <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	6a1b      	ldr	r3, [r3, #32]
 800ef70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	2200      	movs	r2, #0
 800ef78:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	785b      	ldrb	r3, [r3, #1]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d16b      	bne.n	800f05e <USB_EPStartXfer+0x5e6>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	461a      	mov	r2, r3
 800ef94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef96:	4413      	add	r3, r2
 800ef98:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	00da      	lsls	r2, r3, #3
 800efa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efa2:	4413      	add	r3, r2
 800efa4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800efa8:	637b      	str	r3, [r7, #52]	@ 0x34
 800efaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efac:	881b      	ldrh	r3, [r3, #0]
 800efae:	b29b      	uxth	r3, r3
 800efb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800efb4:	b29a      	uxth	r2, r3
 800efb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efb8:	801a      	strh	r2, [r3, #0]
 800efba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d10a      	bne.n	800efd8 <USB_EPStartXfer+0x560>
 800efc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efc4:	881b      	ldrh	r3, [r3, #0]
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800efcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800efd0:	b29a      	uxth	r2, r3
 800efd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efd4:	801a      	strh	r2, [r3, #0]
 800efd6:	e05b      	b.n	800f090 <USB_EPStartXfer+0x618>
 800efd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efdc:	2b3e      	cmp	r3, #62	@ 0x3e
 800efde:	d81c      	bhi.n	800f01a <USB_EPStartXfer+0x5a2>
 800efe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efe4:	085b      	lsrs	r3, r3, #1
 800efe6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800efea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efee:	f003 0301 	and.w	r3, r3, #1
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d004      	beq.n	800f000 <USB_EPStartXfer+0x588>
 800eff6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800effa:	3301      	adds	r3, #1
 800effc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f002:	881b      	ldrh	r3, [r3, #0]
 800f004:	b29a      	uxth	r2, r3
 800f006:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	029b      	lsls	r3, r3, #10
 800f00e:	b29b      	uxth	r3, r3
 800f010:	4313      	orrs	r3, r2
 800f012:	b29a      	uxth	r2, r3
 800f014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f016:	801a      	strh	r2, [r3, #0]
 800f018:	e03a      	b.n	800f090 <USB_EPStartXfer+0x618>
 800f01a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f01e:	095b      	lsrs	r3, r3, #5
 800f020:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f028:	f003 031f 	and.w	r3, r3, #31
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d104      	bne.n	800f03a <USB_EPStartXfer+0x5c2>
 800f030:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f034:	3b01      	subs	r3, #1
 800f036:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f03a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f03c:	881b      	ldrh	r3, [r3, #0]
 800f03e:	b29a      	uxth	r2, r3
 800f040:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f044:	b29b      	uxth	r3, r3
 800f046:	029b      	lsls	r3, r3, #10
 800f048:	b29b      	uxth	r3, r3
 800f04a:	4313      	orrs	r3, r2
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f056:	b29a      	uxth	r2, r3
 800f058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f05a:	801a      	strh	r2, [r3, #0]
 800f05c:	e018      	b.n	800f090 <USB_EPStartXfer+0x618>
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	785b      	ldrb	r3, [r3, #1]
 800f062:	2b01      	cmp	r3, #1
 800f064:	d114      	bne.n	800f090 <USB_EPStartXfer+0x618>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	461a      	mov	r2, r3
 800f070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f072:	4413      	add	r3, r2
 800f074:	643b      	str	r3, [r7, #64]	@ 0x40
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	00da      	lsls	r2, r3, #3
 800f07c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f07e:	4413      	add	r3, r2
 800f080:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f084:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f08a:	b29a      	uxth	r2, r3
 800f08c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f08e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	895b      	ldrh	r3, [r3, #10]
 800f094:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	6959      	ldr	r1, [r3, #20]
 800f09c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 fbdf 	bl	800f86a <USB_WritePMA>
 800f0ac:	e193      	b.n	800f3d6 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	6a1b      	ldr	r3, [r3, #32]
 800f0b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800f0b6:	687a      	ldr	r2, [r7, #4]
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	009b      	lsls	r3, r3, #2
 800f0be:	4413      	add	r3, r2
 800f0c0:	881b      	ldrh	r3, [r3, #0]
 800f0c2:	b29b      	uxth	r3, r3
 800f0c4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800f0c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f0cc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800f0d0:	687a      	ldr	r2, [r7, #4]
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	009b      	lsls	r3, r3, #2
 800f0d8:	441a      	add	r2, r3
 800f0da:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800f0de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f0e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f0e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f0ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	461a      	mov	r2, r3
 800f100:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f102:	4413      	add	r3, r2
 800f104:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	00da      	lsls	r2, r3, #3
 800f10c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f10e:	4413      	add	r3, r2
 800f110:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f114:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f11a:	b29a      	uxth	r2, r3
 800f11c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f11e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	891b      	ldrh	r3, [r3, #8]
 800f124:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	6959      	ldr	r1, [r3, #20]
 800f12c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f130:	b29b      	uxth	r3, r3
 800f132:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 fb97 	bl	800f86a <USB_WritePMA>
 800f13c:	e14b      	b.n	800f3d6 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	6a1a      	ldr	r2, [r3, #32]
 800f142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f146:	1ad2      	subs	r2, r2, r3
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	009b      	lsls	r3, r3, #2
 800f154:	4413      	add	r3, r2
 800f156:	881b      	ldrh	r3, [r3, #0]
 800f158:	b29b      	uxth	r3, r3
 800f15a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f15e:	2b00      	cmp	r3, #0
 800f160:	f000 809a 	beq.w	800f298 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	673b      	str	r3, [r7, #112]	@ 0x70
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	785b      	ldrb	r3, [r3, #1]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d16b      	bne.n	800f248 <USB_EPStartXfer+0x7d0>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	461a      	mov	r2, r3
 800f17e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f180:	4413      	add	r3, r2
 800f182:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	00da      	lsls	r2, r3, #3
 800f18a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f18c:	4413      	add	r3, r2
 800f18e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f192:	667b      	str	r3, [r7, #100]	@ 0x64
 800f194:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f196:	881b      	ldrh	r3, [r3, #0]
 800f198:	b29b      	uxth	r3, r3
 800f19a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f19e:	b29a      	uxth	r2, r3
 800f1a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1a2:	801a      	strh	r2, [r3, #0]
 800f1a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d10a      	bne.n	800f1c2 <USB_EPStartXfer+0x74a>
 800f1ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1ae:	881b      	ldrh	r3, [r3, #0]
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1be:	801a      	strh	r2, [r3, #0]
 800f1c0:	e05b      	b.n	800f27a <USB_EPStartXfer+0x802>
 800f1c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f1c6:	2b3e      	cmp	r3, #62	@ 0x3e
 800f1c8:	d81c      	bhi.n	800f204 <USB_EPStartXfer+0x78c>
 800f1ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f1ce:	085b      	lsrs	r3, r3, #1
 800f1d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f1d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f1d8:	f003 0301 	and.w	r3, r3, #1
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d004      	beq.n	800f1ea <USB_EPStartXfer+0x772>
 800f1e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f1ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1ec:	881b      	ldrh	r3, [r3, #0]
 800f1ee:	b29a      	uxth	r2, r3
 800f1f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	029b      	lsls	r3, r3, #10
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	4313      	orrs	r3, r2
 800f1fc:	b29a      	uxth	r2, r3
 800f1fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f200:	801a      	strh	r2, [r3, #0]
 800f202:	e03a      	b.n	800f27a <USB_EPStartXfer+0x802>
 800f204:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f208:	095b      	lsrs	r3, r3, #5
 800f20a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f20e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f212:	f003 031f 	and.w	r3, r3, #31
 800f216:	2b00      	cmp	r3, #0
 800f218:	d104      	bne.n	800f224 <USB_EPStartXfer+0x7ac>
 800f21a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f21e:	3b01      	subs	r3, #1
 800f220:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f224:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f226:	881b      	ldrh	r3, [r3, #0]
 800f228:	b29a      	uxth	r2, r3
 800f22a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f22e:	b29b      	uxth	r3, r3
 800f230:	029b      	lsls	r3, r3, #10
 800f232:	b29b      	uxth	r3, r3
 800f234:	4313      	orrs	r3, r2
 800f236:	b29b      	uxth	r3, r3
 800f238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f23c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f240:	b29a      	uxth	r2, r3
 800f242:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f244:	801a      	strh	r2, [r3, #0]
 800f246:	e018      	b.n	800f27a <USB_EPStartXfer+0x802>
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	785b      	ldrb	r3, [r3, #1]
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	d114      	bne.n	800f27a <USB_EPStartXfer+0x802>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f256:	b29b      	uxth	r3, r3
 800f258:	461a      	mov	r2, r3
 800f25a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f25c:	4413      	add	r3, r2
 800f25e:	673b      	str	r3, [r7, #112]	@ 0x70
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	00da      	lsls	r2, r3, #3
 800f266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f268:	4413      	add	r3, r2
 800f26a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f26e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f274:	b29a      	uxth	r2, r3
 800f276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f278:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	895b      	ldrh	r3, [r3, #10]
 800f27e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	6959      	ldr	r1, [r3, #20]
 800f286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f28a:	b29b      	uxth	r3, r3
 800f28c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f000 faea 	bl	800f86a <USB_WritePMA>
 800f296:	e09e      	b.n	800f3d6 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	785b      	ldrb	r3, [r3, #1]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d16b      	bne.n	800f378 <USB_EPStartXfer+0x900>
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f2aa:	b29b      	uxth	r3, r3
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f2b0:	4413      	add	r3, r2
 800f2b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	00da      	lsls	r2, r3, #3
 800f2ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f2bc:	4413      	add	r3, r2
 800f2be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f2c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f2c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f2c6:	881b      	ldrh	r3, [r3, #0]
 800f2c8:	b29b      	uxth	r3, r3
 800f2ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f2ce:	b29a      	uxth	r2, r3
 800f2d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f2d2:	801a      	strh	r2, [r3, #0]
 800f2d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d10a      	bne.n	800f2f2 <USB_EPStartXfer+0x87a>
 800f2dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f2de:	881b      	ldrh	r3, [r3, #0]
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f2e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f2ea:	b29a      	uxth	r2, r3
 800f2ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f2ee:	801a      	strh	r2, [r3, #0]
 800f2f0:	e063      	b.n	800f3ba <USB_EPStartXfer+0x942>
 800f2f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f2f6:	2b3e      	cmp	r3, #62	@ 0x3e
 800f2f8:	d81c      	bhi.n	800f334 <USB_EPStartXfer+0x8bc>
 800f2fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f2fe:	085b      	lsrs	r3, r3, #1
 800f300:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f308:	f003 0301 	and.w	r3, r3, #1
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d004      	beq.n	800f31a <USB_EPStartXfer+0x8a2>
 800f310:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f314:	3301      	adds	r3, #1
 800f316:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f31a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f31c:	881b      	ldrh	r3, [r3, #0]
 800f31e:	b29a      	uxth	r2, r3
 800f320:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f324:	b29b      	uxth	r3, r3
 800f326:	029b      	lsls	r3, r3, #10
 800f328:	b29b      	uxth	r3, r3
 800f32a:	4313      	orrs	r3, r2
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f330:	801a      	strh	r2, [r3, #0]
 800f332:	e042      	b.n	800f3ba <USB_EPStartXfer+0x942>
 800f334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f338:	095b      	lsrs	r3, r3, #5
 800f33a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f33e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f342:	f003 031f 	and.w	r3, r3, #31
 800f346:	2b00      	cmp	r3, #0
 800f348:	d104      	bne.n	800f354 <USB_EPStartXfer+0x8dc>
 800f34a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f34e:	3b01      	subs	r3, #1
 800f350:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f354:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f356:	881b      	ldrh	r3, [r3, #0]
 800f358:	b29a      	uxth	r2, r3
 800f35a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f35e:	b29b      	uxth	r3, r3
 800f360:	029b      	lsls	r3, r3, #10
 800f362:	b29b      	uxth	r3, r3
 800f364:	4313      	orrs	r3, r2
 800f366:	b29b      	uxth	r3, r3
 800f368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f36c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f370:	b29a      	uxth	r2, r3
 800f372:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f374:	801a      	strh	r2, [r3, #0]
 800f376:	e020      	b.n	800f3ba <USB_EPStartXfer+0x942>
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	785b      	ldrb	r3, [r3, #1]
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d11c      	bne.n	800f3ba <USB_EPStartXfer+0x942>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	461a      	mov	r2, r3
 800f390:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f394:	4413      	add	r3, r2
 800f396:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	781b      	ldrb	r3, [r3, #0]
 800f39e:	00da      	lsls	r2, r3, #3
 800f3a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f3a4:	4413      	add	r3, r2
 800f3a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f3aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f3ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f3b2:	b29a      	uxth	r2, r3
 800f3b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f3b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	891b      	ldrh	r3, [r3, #8]
 800f3be:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	6959      	ldr	r1, [r3, #20]
 800f3c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f000 fa4a 	bl	800f86a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f3d6:	687a      	ldr	r2, [r7, #4]
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	009b      	lsls	r3, r3, #2
 800f3de:	4413      	add	r3, r2
 800f3e0:	881b      	ldrh	r3, [r3, #0]
 800f3e2:	b29b      	uxth	r3, r3
 800f3e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f3e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f3ec:	817b      	strh	r3, [r7, #10]
 800f3ee:	897b      	ldrh	r3, [r7, #10]
 800f3f0:	f083 0310 	eor.w	r3, r3, #16
 800f3f4:	817b      	strh	r3, [r7, #10]
 800f3f6:	897b      	ldrh	r3, [r7, #10]
 800f3f8:	f083 0320 	eor.w	r3, r3, #32
 800f3fc:	817b      	strh	r3, [r7, #10]
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	441a      	add	r2, r3
 800f408:	897b      	ldrh	r3, [r7, #10]
 800f40a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f40e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	8013      	strh	r3, [r2, #0]
 800f41e:	e0d5      	b.n	800f5cc <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	7b1b      	ldrb	r3, [r3, #12]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d156      	bne.n	800f4d6 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	699b      	ldr	r3, [r3, #24]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d122      	bne.n	800f476 <USB_EPStartXfer+0x9fe>
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	78db      	ldrb	r3, [r3, #3]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d11e      	bne.n	800f476 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800f438:	687a      	ldr	r2, [r7, #4]
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	009b      	lsls	r3, r3, #2
 800f440:	4413      	add	r3, r2
 800f442:	881b      	ldrh	r3, [r3, #0]
 800f444:	b29b      	uxth	r3, r3
 800f446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f44a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f44e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	009b      	lsls	r3, r3, #2
 800f45a:	441a      	add	r2, r3
 800f45c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f460:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f464:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f468:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800f46c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f470:	b29b      	uxth	r3, r3
 800f472:	8013      	strh	r3, [r2, #0]
 800f474:	e01d      	b.n	800f4b2 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800f476:	687a      	ldr	r2, [r7, #4]
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	009b      	lsls	r3, r3, #2
 800f47e:	4413      	add	r3, r2
 800f480:	881b      	ldrh	r3, [r3, #0]
 800f482:	b29b      	uxth	r3, r3
 800f484:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800f488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f48c:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800f490:	687a      	ldr	r2, [r7, #4]
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	009b      	lsls	r3, r3, #2
 800f498:	441a      	add	r2, r3
 800f49a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800f49e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f4a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f4a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f4aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	699a      	ldr	r2, [r3, #24]
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	691b      	ldr	r3, [r3, #16]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d907      	bls.n	800f4ce <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	699a      	ldr	r2, [r3, #24]
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	691b      	ldr	r3, [r3, #16]
 800f4c6:	1ad2      	subs	r2, r2, r3
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	619a      	str	r2, [r3, #24]
 800f4cc:	e054      	b.n	800f578 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	619a      	str	r2, [r3, #24]
 800f4d4:	e050      	b.n	800f578 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	78db      	ldrb	r3, [r3, #3]
 800f4da:	2b02      	cmp	r3, #2
 800f4dc:	d142      	bne.n	800f564 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	69db      	ldr	r3, [r3, #28]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d048      	beq.n	800f578 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800f4e6:	687a      	ldr	r2, [r7, #4]
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	4413      	add	r3, r2
 800f4f0:	881b      	ldrh	r3, [r3, #0]
 800f4f2:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f4f6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800f4fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d005      	beq.n	800f50e <USB_EPStartXfer+0xa96>
 800f502:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800f506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d10b      	bne.n	800f526 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f50e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800f512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f516:	2b00      	cmp	r3, #0
 800f518:	d12e      	bne.n	800f578 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f51a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800f51e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f522:	2b00      	cmp	r3, #0
 800f524:	d128      	bne.n	800f578 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f526:	687a      	ldr	r2, [r7, #4]
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	009b      	lsls	r3, r3, #2
 800f52e:	4413      	add	r3, r2
 800f530:	881b      	ldrh	r3, [r3, #0]
 800f532:	b29b      	uxth	r3, r3
 800f534:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f538:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f53c:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800f540:	687a      	ldr	r2, [r7, #4]
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	009b      	lsls	r3, r3, #2
 800f548:	441a      	add	r2, r3
 800f54a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800f54e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f552:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f556:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f55a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f55e:	b29b      	uxth	r3, r3
 800f560:	8013      	strh	r3, [r2, #0]
 800f562:	e009      	b.n	800f578 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	78db      	ldrb	r3, [r3, #3]
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d103      	bne.n	800f574 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	2200      	movs	r2, #0
 800f570:	619a      	str	r2, [r3, #24]
 800f572:	e001      	b.n	800f578 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800f574:	2301      	movs	r3, #1
 800f576:	e02a      	b.n	800f5ce <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f578:	687a      	ldr	r2, [r7, #4]
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	781b      	ldrb	r3, [r3, #0]
 800f57e:	009b      	lsls	r3, r3, #2
 800f580:	4413      	add	r3, r2
 800f582:	881b      	ldrh	r3, [r3, #0]
 800f584:	b29b      	uxth	r3, r3
 800f586:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f58a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f58e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f592:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f596:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f59a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f59e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f5a2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f5a6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	009b      	lsls	r3, r3, #2
 800f5b2:	441a      	add	r2, r3
 800f5b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f5b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f5bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f5c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f5c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f5cc:	2300      	movs	r3, #0
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	37b0      	adds	r7, #176	@ 0xb0
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f5d6:	b480      	push	{r7}
 800f5d8:	b085      	sub	sp, #20
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
 800f5de:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	785b      	ldrb	r3, [r3, #1]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d020      	beq.n	800f62a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	009b      	lsls	r3, r3, #2
 800f5f0:	4413      	add	r3, r2
 800f5f2:	881b      	ldrh	r3, [r3, #0]
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f5fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f5fe:	81bb      	strh	r3, [r7, #12]
 800f600:	89bb      	ldrh	r3, [r7, #12]
 800f602:	f083 0310 	eor.w	r3, r3, #16
 800f606:	81bb      	strh	r3, [r7, #12]
 800f608:	687a      	ldr	r2, [r7, #4]
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	009b      	lsls	r3, r3, #2
 800f610:	441a      	add	r2, r3
 800f612:	89bb      	ldrh	r3, [r7, #12]
 800f614:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f618:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f61c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f624:	b29b      	uxth	r3, r3
 800f626:	8013      	strh	r3, [r2, #0]
 800f628:	e01f      	b.n	800f66a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f62a:	687a      	ldr	r2, [r7, #4]
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	009b      	lsls	r3, r3, #2
 800f632:	4413      	add	r3, r2
 800f634:	881b      	ldrh	r3, [r3, #0]
 800f636:	b29b      	uxth	r3, r3
 800f638:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f63c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f640:	81fb      	strh	r3, [r7, #14]
 800f642:	89fb      	ldrh	r3, [r7, #14]
 800f644:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f648:	81fb      	strh	r3, [r7, #14]
 800f64a:	687a      	ldr	r2, [r7, #4]
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	009b      	lsls	r3, r3, #2
 800f652:	441a      	add	r2, r3
 800f654:	89fb      	ldrh	r3, [r7, #14]
 800f656:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f65a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f65e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f666:	b29b      	uxth	r3, r3
 800f668:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f66a:	2300      	movs	r3, #0
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	3714      	adds	r7, #20
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr

0800f678 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f678:	b480      	push	{r7}
 800f67a:	b087      	sub	sp, #28
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	785b      	ldrb	r3, [r3, #1]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d04c      	beq.n	800f724 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f68a:	687a      	ldr	r2, [r7, #4]
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	781b      	ldrb	r3, [r3, #0]
 800f690:	009b      	lsls	r3, r3, #2
 800f692:	4413      	add	r3, r2
 800f694:	881b      	ldrh	r3, [r3, #0]
 800f696:	823b      	strh	r3, [r7, #16]
 800f698:	8a3b      	ldrh	r3, [r7, #16]
 800f69a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d01b      	beq.n	800f6da <USB_EPClearStall+0x62>
 800f6a2:	687a      	ldr	r2, [r7, #4]
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	009b      	lsls	r3, r3, #2
 800f6aa:	4413      	add	r3, r2
 800f6ac:	881b      	ldrh	r3, [r3, #0]
 800f6ae:	b29b      	uxth	r3, r3
 800f6b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f6b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f6b8:	81fb      	strh	r3, [r7, #14]
 800f6ba:	687a      	ldr	r2, [r7, #4]
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	009b      	lsls	r3, r3, #2
 800f6c2:	441a      	add	r2, r3
 800f6c4:	89fb      	ldrh	r3, [r7, #14]
 800f6c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f6ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f6ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f6d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	78db      	ldrb	r3, [r3, #3]
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d06c      	beq.n	800f7bc <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f6e2:	687a      	ldr	r2, [r7, #4]
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	009b      	lsls	r3, r3, #2
 800f6ea:	4413      	add	r3, r2
 800f6ec:	881b      	ldrh	r3, [r3, #0]
 800f6ee:	b29b      	uxth	r3, r3
 800f6f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f6f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f6f8:	81bb      	strh	r3, [r7, #12]
 800f6fa:	89bb      	ldrh	r3, [r7, #12]
 800f6fc:	f083 0320 	eor.w	r3, r3, #32
 800f700:	81bb      	strh	r3, [r7, #12]
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	009b      	lsls	r3, r3, #2
 800f70a:	441a      	add	r2, r3
 800f70c:	89bb      	ldrh	r3, [r7, #12]
 800f70e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f712:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f71a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f71e:	b29b      	uxth	r3, r3
 800f720:	8013      	strh	r3, [r2, #0]
 800f722:	e04b      	b.n	800f7bc <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	009b      	lsls	r3, r3, #2
 800f72c:	4413      	add	r3, r2
 800f72e:	881b      	ldrh	r3, [r3, #0]
 800f730:	82fb      	strh	r3, [r7, #22]
 800f732:	8afb      	ldrh	r3, [r7, #22]
 800f734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d01b      	beq.n	800f774 <USB_EPClearStall+0xfc>
 800f73c:	687a      	ldr	r2, [r7, #4]
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	009b      	lsls	r3, r3, #2
 800f744:	4413      	add	r3, r2
 800f746:	881b      	ldrh	r3, [r3, #0]
 800f748:	b29b      	uxth	r3, r3
 800f74a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f74e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f752:	82bb      	strh	r3, [r7, #20]
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	781b      	ldrb	r3, [r3, #0]
 800f75a:	009b      	lsls	r3, r3, #2
 800f75c:	441a      	add	r2, r3
 800f75e:	8abb      	ldrh	r3, [r7, #20]
 800f760:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f764:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f768:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f76c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f770:	b29b      	uxth	r3, r3
 800f772:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	781b      	ldrb	r3, [r3, #0]
 800f77a:	009b      	lsls	r3, r3, #2
 800f77c:	4413      	add	r3, r2
 800f77e:	881b      	ldrh	r3, [r3, #0]
 800f780:	b29b      	uxth	r3, r3
 800f782:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f78a:	827b      	strh	r3, [r7, #18]
 800f78c:	8a7b      	ldrh	r3, [r7, #18]
 800f78e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f792:	827b      	strh	r3, [r7, #18]
 800f794:	8a7b      	ldrh	r3, [r7, #18]
 800f796:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f79a:	827b      	strh	r3, [r7, #18]
 800f79c:	687a      	ldr	r2, [r7, #4]
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	009b      	lsls	r3, r3, #2
 800f7a4:	441a      	add	r2, r3
 800f7a6:	8a7b      	ldrh	r3, [r7, #18]
 800f7a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f7ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f7b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f7b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f7bc:	2300      	movs	r3, #0
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	371c      	adds	r7, #28
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c8:	4770      	bx	lr

0800f7ca <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800f7ca:	b480      	push	{r7}
 800f7cc:	b083      	sub	sp, #12
 800f7ce:	af00      	add	r7, sp, #0
 800f7d0:	6078      	str	r0, [r7, #4]
 800f7d2:	460b      	mov	r3, r1
 800f7d4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f7d6:	78fb      	ldrb	r3, [r7, #3]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d103      	bne.n	800f7e4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2280      	movs	r2, #128	@ 0x80
 800f7e0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f7e4:	2300      	movs	r3, #0
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	370c      	adds	r7, #12
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr

0800f7f2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800f7f2:	b480      	push	{r7}
 800f7f4:	b083      	sub	sp, #12
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f800:	b29b      	uxth	r3, r3
 800f802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f80a:	b29a      	uxth	r2, r3
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f812:	2300      	movs	r3, #0
}
 800f814:	4618      	mov	r0, r3
 800f816:	370c      	adds	r7, #12
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr

0800f820 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800f820:	b480      	push	{r7}
 800f822:	b083      	sub	sp, #12
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f82e:	b29b      	uxth	r3, r3
 800f830:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800f834:	b29a      	uxth	r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f83c:	2300      	movs	r3, #0
}
 800f83e:	4618      	mov	r0, r3
 800f840:	370c      	adds	r7, #12
 800f842:	46bd      	mov	sp, r7
 800f844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f848:	4770      	bx	lr

0800f84a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800f84a:	b480      	push	{r7}
 800f84c:	b085      	sub	sp, #20
 800f84e:	af00      	add	r7, sp, #0
 800f850:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800f858:	b29b      	uxth	r3, r3
 800f85a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f85c:	68fb      	ldr	r3, [r7, #12]
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3714      	adds	r7, #20
 800f862:	46bd      	mov	sp, r7
 800f864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f868:	4770      	bx	lr

0800f86a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f86a:	b480      	push	{r7}
 800f86c:	b08b      	sub	sp, #44	@ 0x2c
 800f86e:	af00      	add	r7, sp, #0
 800f870:	60f8      	str	r0, [r7, #12]
 800f872:	60b9      	str	r1, [r7, #8]
 800f874:	4611      	mov	r1, r2
 800f876:	461a      	mov	r2, r3
 800f878:	460b      	mov	r3, r1
 800f87a:	80fb      	strh	r3, [r7, #6]
 800f87c:	4613      	mov	r3, r2
 800f87e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f880:	88bb      	ldrh	r3, [r7, #4]
 800f882:	3301      	adds	r3, #1
 800f884:	085b      	lsrs	r3, r3, #1
 800f886:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f890:	88fa      	ldrh	r2, [r7, #6]
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	4413      	add	r3, r2
 800f896:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f89a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f89c:	69bb      	ldr	r3, [r7, #24]
 800f89e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f8a0:	e01b      	b.n	800f8da <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800f8a2:	69fb      	ldr	r3, [r7, #28]
 800f8a4:	781b      	ldrb	r3, [r3, #0]
 800f8a6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f8a8:	69fb      	ldr	r3, [r7, #28]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	021b      	lsls	r3, r3, #8
 800f8b0:	b21a      	sxth	r2, r3
 800f8b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	b21b      	sxth	r3, r3
 800f8ba:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800f8bc:	6a3b      	ldr	r3, [r7, #32]
 800f8be:	8a7a      	ldrh	r2, [r7, #18]
 800f8c0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f8c2:	6a3b      	ldr	r3, [r7, #32]
 800f8c4:	3302      	adds	r3, #2
 800f8c6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800f8c8:	69fb      	ldr	r3, [r7, #28]
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800f8ce:	69fb      	ldr	r3, [r7, #28]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8d6:	3b01      	subs	r3, #1
 800f8d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d1e0      	bne.n	800f8a2 <USB_WritePMA+0x38>
  }
}
 800f8e0:	bf00      	nop
 800f8e2:	bf00      	nop
 800f8e4:	372c      	adds	r7, #44	@ 0x2c
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ec:	4770      	bx	lr

0800f8ee <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f8ee:	b480      	push	{r7}
 800f8f0:	b08b      	sub	sp, #44	@ 0x2c
 800f8f2:	af00      	add	r7, sp, #0
 800f8f4:	60f8      	str	r0, [r7, #12]
 800f8f6:	60b9      	str	r1, [r7, #8]
 800f8f8:	4611      	mov	r1, r2
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	460b      	mov	r3, r1
 800f8fe:	80fb      	strh	r3, [r7, #6]
 800f900:	4613      	mov	r3, r2
 800f902:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f904:	88bb      	ldrh	r3, [r7, #4]
 800f906:	085b      	lsrs	r3, r3, #1
 800f908:	b29b      	uxth	r3, r3
 800f90a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f914:	88fa      	ldrh	r2, [r7, #6]
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	4413      	add	r3, r2
 800f91a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f91e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f920:	69bb      	ldr	r3, [r7, #24]
 800f922:	627b      	str	r3, [r7, #36]	@ 0x24
 800f924:	e018      	b.n	800f958 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800f926:	6a3b      	ldr	r3, [r7, #32]
 800f928:	881b      	ldrh	r3, [r3, #0]
 800f92a:	b29b      	uxth	r3, r3
 800f92c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f92e:	6a3b      	ldr	r3, [r7, #32]
 800f930:	3302      	adds	r3, #2
 800f932:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	b2da      	uxtb	r2, r3
 800f938:	69fb      	ldr	r3, [r7, #28]
 800f93a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f93c:	69fb      	ldr	r3, [r7, #28]
 800f93e:	3301      	adds	r3, #1
 800f940:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	0a1b      	lsrs	r3, r3, #8
 800f946:	b2da      	uxtb	r2, r3
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	3301      	adds	r3, #1
 800f950:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f954:	3b01      	subs	r3, #1
 800f956:	627b      	str	r3, [r7, #36]	@ 0x24
 800f958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d1e3      	bne.n	800f926 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f95e:	88bb      	ldrh	r3, [r7, #4]
 800f960:	f003 0301 	and.w	r3, r3, #1
 800f964:	b29b      	uxth	r3, r3
 800f966:	2b00      	cmp	r3, #0
 800f968:	d007      	beq.n	800f97a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800f96a:	6a3b      	ldr	r3, [r7, #32]
 800f96c:	881b      	ldrh	r3, [r3, #0]
 800f96e:	b29b      	uxth	r3, r3
 800f970:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	b2da      	uxtb	r2, r3
 800f976:	69fb      	ldr	r3, [r7, #28]
 800f978:	701a      	strb	r2, [r3, #0]
  }
}
 800f97a:	bf00      	nop
 800f97c:	372c      	adds	r7, #44	@ 0x2c
 800f97e:	46bd      	mov	sp, r7
 800f980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f984:	4770      	bx	lr
	...

0800f988 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800f988:	b480      	push	{r7}
 800f98a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800f98c:	f3bf 8f4f 	dsb	sy
}
 800f990:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800f992:	4b06      	ldr	r3, [pc, #24]	@ (800f9ac <__NVIC_SystemReset+0x24>)
 800f994:	68db      	ldr	r3, [r3, #12]
 800f996:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800f99a:	4904      	ldr	r1, [pc, #16]	@ (800f9ac <__NVIC_SystemReset+0x24>)
 800f99c:	4b04      	ldr	r3, [pc, #16]	@ (800f9b0 <__NVIC_SystemReset+0x28>)
 800f99e:	4313      	orrs	r3, r2
 800f9a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f9a2:	f3bf 8f4f 	dsb	sy
}
 800f9a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800f9a8:	bf00      	nop
 800f9aa:	e7fd      	b.n	800f9a8 <__NVIC_SystemReset+0x20>
 800f9ac:	e000ed00 	.word	0xe000ed00
 800f9b0:	05fa0004 	.word	0x05fa0004

0800f9b4 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	460b      	mov	r3, r1
 800f9be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800f9c0:	f240 401c 	movw	r0, #1052	@ 0x41c
 800f9c4:	f002 fbfc 	bl	80121c0 <USBD_static_malloc>
 800f9c8:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d105      	bne.n	800f9dc <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800f9d8:	2302      	movs	r3, #2
 800f9da:	e03f      	b.n	800fa5c <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	68fa      	ldr	r2, [r7, #12]
 800f9e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800f9f2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2200      	movs	r2, #0
 800fa02:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	2200      	movs	r2, #0
 800fa0a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2202      	movs	r2, #2
 800fa12:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	2200      	movs	r2, #0
 800fa22:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	2200      	movs	r2, #0
 800fa32:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	2202      	movs	r2, #2
 800fa3a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2200      	movs	r2, #0
 800fa42:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800fa4c:	685b      	ldr	r3, [r3, #4]
 800fa4e:	4798      	blx	r3
 800fa50:	4603      	mov	r3, r0
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d001      	beq.n	800fa5a <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 800fa56:	2303      	movs	r3, #3
 800fa58:	e000      	b.n	800fa5c <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 800fa5a:	2300      	movs	r3, #0
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3710      	adds	r7, #16
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	460b      	mov	r3, r1
 800fa6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d101      	bne.n	800fa7e <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800fa7a:	2302      	movs	r3, #2
 800fa7c:	e027      	b.n	800face <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fa84:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	2200      	movs	r2, #0
 800fa92:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2202      	movs	r2, #2
 800fa9a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	2200      	movs	r2, #0
 800faa2:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2202      	movs	r2, #2
 800faaa:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800fab4:	689b      	ldr	r3, [r3, #8]
 800fab6:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fabe:	4618      	mov	r0, r3
 800fac0:	f002 fb8c 	bl	80121dc <USBD_static_free>
  pdev->pClassData = NULL;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2200      	movs	r2, #0
 800fac8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 800facc:	2300      	movs	r3, #0
}
 800face:	4618      	mov	r0, r3
 800fad0:	3710      	adds	r7, #16
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
	...

0800fad8 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b088      	sub	sp, #32
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fae8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800faea:	2300      	movs	r3, #0
 800faec:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 800faee:	2300      	movs	r3, #0
 800faf0:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 800faf2:	2300      	movs	r3, #0
 800faf4:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800faf6:	2300      	movs	r3, #0
 800faf8:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d101      	bne.n	800fb04 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800fb00:	2303      	movs	r3, #3
 800fb02:	e0d5      	b.n	800fcb0 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d03e      	beq.n	800fb8e <USBD_DFU_Setup+0xb6>
 800fb10:	2b20      	cmp	r3, #32
 800fb12:	f040 80c5 	bne.w	800fca0 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	785b      	ldrb	r3, [r3, #1]
 800fb1a:	2b06      	cmp	r3, #6
 800fb1c:	d82f      	bhi.n	800fb7e <USBD_DFU_Setup+0xa6>
 800fb1e:	a201      	add	r2, pc, #4	@ (adr r2, 800fb24 <USBD_DFU_Setup+0x4c>)
 800fb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb24:	0800fb75 	.word	0x0800fb75
 800fb28:	0800fb41 	.word	0x0800fb41
 800fb2c:	0800fb4b 	.word	0x0800fb4b
 800fb30:	0800fb55 	.word	0x0800fb55
 800fb34:	0800fb5d 	.word	0x0800fb5d
 800fb38:	0800fb65 	.word	0x0800fb65
 800fb3c:	0800fb6d 	.word	0x0800fb6d
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 800fb40:	6839      	ldr	r1, [r7, #0]
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f000 fa6c 	bl	8010020 <DFU_Download>
          break;
 800fb48:	e020      	b.n	800fb8c <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800fb4a:	6839      	ldr	r1, [r7, #0]
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f000 fad3 	bl	80100f8 <DFU_Upload>
          break;
 800fb52:	e01b      	b.n	800fb8c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f000 fba9 	bl	80102ac <DFU_GetStatus>
          break;
 800fb5a:	e017      	b.n	800fb8c <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f000 fc5b 	bl	8010418 <DFU_ClearStatus>
          break;
 800fb62:	e013      	b.n	800fb8c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 fcab 	bl	80104c0 <DFU_GetState>
          break;
 800fb6a:	e00f      	b.n	800fb8c <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f000 fcbf 	bl	80104f0 <DFU_Abort>
          break;
 800fb72:	e00b      	b.n	800fb8c <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800fb74:	6839      	ldr	r1, [r7, #0]
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 f9ee 	bl	800ff58 <DFU_Detach>
          break;
 800fb7c:	e006      	b.n	800fb8c <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800fb7e:	6839      	ldr	r1, [r7, #0]
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f001 fdb1 	bl	80116e8 <USBD_CtlError>
          ret = USBD_FAIL;
 800fb86:	2303      	movs	r3, #3
 800fb88:	77fb      	strb	r3, [r7, #31]
          break;
 800fb8a:	bf00      	nop
      }
      break;
 800fb8c:	e08f      	b.n	800fcae <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	785b      	ldrb	r3, [r3, #1]
 800fb92:	2b0b      	cmp	r3, #11
 800fb94:	d87b      	bhi.n	800fc8e <USBD_DFU_Setup+0x1b6>
 800fb96:	a201      	add	r2, pc, #4	@ (adr r2, 800fb9c <USBD_DFU_Setup+0xc4>)
 800fb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb9c:	0800fbcd 	.word	0x0800fbcd
 800fba0:	0800fc9d 	.word	0x0800fc9d
 800fba4:	0800fc8f 	.word	0x0800fc8f
 800fba8:	0800fc8f 	.word	0x0800fc8f
 800fbac:	0800fc8f 	.word	0x0800fc8f
 800fbb0:	0800fc8f 	.word	0x0800fc8f
 800fbb4:	0800fbf7 	.word	0x0800fbf7
 800fbb8:	0800fc8f 	.word	0x0800fc8f
 800fbbc:	0800fc8f 	.word	0x0800fc8f
 800fbc0:	0800fc8f 	.word	0x0800fc8f
 800fbc4:	0800fc21 	.word	0x0800fc21
 800fbc8:	0800fc4d 	.word	0x0800fc4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fbd2:	b2db      	uxtb	r3, r3
 800fbd4:	2b03      	cmp	r3, #3
 800fbd6:	d107      	bne.n	800fbe8 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fbd8:	f107 030e 	add.w	r3, r7, #14
 800fbdc:	2202      	movs	r2, #2
 800fbde:	4619      	mov	r1, r3
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f001 fdf2 	bl	80117ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fbe6:	e05a      	b.n	800fc9e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800fbe8:	6839      	ldr	r1, [r7, #0]
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f001 fd7c 	bl	80116e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800fbf0:	2303      	movs	r3, #3
 800fbf2:	77fb      	strb	r3, [r7, #31]
          break;
 800fbf4:	e053      	b.n	800fc9e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	885b      	ldrh	r3, [r3, #2]
 800fbfa:	0a1b      	lsrs	r3, r3, #8
 800fbfc:	b29b      	uxth	r3, r3
 800fbfe:	2b21      	cmp	r3, #33	@ 0x21
 800fc00:	d107      	bne.n	800fc12 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800fc02:	4b2d      	ldr	r3, [pc, #180]	@ (800fcb8 <USBD_DFU_Setup+0x1e0>)
 800fc04:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	88db      	ldrh	r3, [r3, #6]
 800fc0a:	2b09      	cmp	r3, #9
 800fc0c:	bf28      	it	cs
 800fc0e:	2309      	movcs	r3, #9
 800fc10:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800fc12:	8afb      	ldrh	r3, [r7, #22]
 800fc14:	461a      	mov	r2, r3
 800fc16:	69b9      	ldr	r1, [r7, #24]
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f001 fdd6 	bl	80117ca <USBD_CtlSendData>
          break;
 800fc1e:	e03e      	b.n	800fc9e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	2b03      	cmp	r3, #3
 800fc2a:	d108      	bne.n	800fc3e <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800fc32:	2201      	movs	r2, #1
 800fc34:	4619      	mov	r1, r3
 800fc36:	6878      	ldr	r0, [r7, #4]
 800fc38:	f001 fdc7 	bl	80117ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fc3c:	e02f      	b.n	800fc9e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800fc3e:	6839      	ldr	r1, [r7, #0]
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f001 fd51 	bl	80116e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800fc46:	2303      	movs	r3, #3
 800fc48:	77fb      	strb	r3, [r7, #31]
          break;
 800fc4a:	e028      	b.n	800fc9e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	885b      	ldrh	r3, [r3, #2]
 800fc50:	b2db      	uxtb	r3, r3
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d114      	bne.n	800fc80 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc5c:	b2db      	uxtb	r3, r3
 800fc5e:	2b03      	cmp	r3, #3
 800fc60:	d107      	bne.n	800fc72 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	885b      	ldrh	r3, [r3, #2]
 800fc66:	b2db      	uxtb	r3, r3
 800fc68:	461a      	mov	r2, r3
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fc70:	e015      	b.n	800fc9e <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 800fc72:	6839      	ldr	r1, [r7, #0]
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f001 fd37 	bl	80116e8 <USBD_CtlError>
              ret = USBD_FAIL;
 800fc7a:	2303      	movs	r3, #3
 800fc7c:	77fb      	strb	r3, [r7, #31]
          break;
 800fc7e:	e00e      	b.n	800fc9e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800fc80:	6839      	ldr	r1, [r7, #0]
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f001 fd30 	bl	80116e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800fc88:	2303      	movs	r3, #3
 800fc8a:	77fb      	strb	r3, [r7, #31]
          break;
 800fc8c:	e007      	b.n	800fc9e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fc8e:	6839      	ldr	r1, [r7, #0]
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f001 fd29 	bl	80116e8 <USBD_CtlError>
          ret = USBD_FAIL;
 800fc96:	2303      	movs	r3, #3
 800fc98:	77fb      	strb	r3, [r7, #31]
          break;
 800fc9a:	e000      	b.n	800fc9e <USBD_DFU_Setup+0x1c6>
          break;
 800fc9c:	bf00      	nop
      }
      break;
 800fc9e:	e006      	b.n	800fcae <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 800fca0:	6839      	ldr	r1, [r7, #0]
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f001 fd20 	bl	80116e8 <USBD_CtlError>
      ret = USBD_FAIL;
 800fca8:	2303      	movs	r3, #3
 800fcaa:	77fb      	strb	r3, [r7, #31]
      break;
 800fcac:	bf00      	nop
  }

  return (uint8_t)ret;
 800fcae:	7ffb      	ldrb	r3, [r7, #31]
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3720      	adds	r7, #32
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	2000005e 	.word	0x2000005e

0800fcbc <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b083      	sub	sp, #12
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	221b      	movs	r2, #27
 800fcc8:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800fcca:	4b03      	ldr	r3, [pc, #12]	@ (800fcd8 <USBD_DFU_GetCfgDesc+0x1c>)
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	370c      	adds	r7, #12
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr
 800fcd8:	2000004c 	.word	0x2000004c

0800fcdc <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b083      	sub	sp, #12
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800fce4:	2300      	movs	r3, #0
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	370c      	adds	r7, #12
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr

0800fcf2 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800fcf2:	b580      	push	{r7, lr}
 800fcf4:	b088      	sub	sp, #32
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fd00:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800fd08:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 800fd0a:	69fb      	ldr	r3, [r7, #28]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d101      	bne.n	800fd14 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fd10:	2303      	movs	r3, #3
 800fd12:	e0ce      	b.n	800feb2 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800fd14:	69fb      	ldr	r3, [r7, #28]
 800fd16:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800fd1a:	2b04      	cmp	r3, #4
 800fd1c:	f040 80bd 	bne.w	800fe9a <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 800fd20:	69fb      	ldr	r3, [r7, #28]
 800fd22:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d17c      	bne.n	800fe24 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 800fd2a:	69fb      	ldr	r3, [r7, #28]
 800fd2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	f000 8093 	beq.w	800fe5c <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 800fd36:	69fb      	ldr	r3, [r7, #28]
 800fd38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800fd3c:	2b05      	cmp	r3, #5
 800fd3e:	d15e      	bne.n	800fdfe <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	2b21      	cmp	r3, #33	@ 0x21
 800fd46:	d124      	bne.n	800fd92 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800fd48:	69fb      	ldr	r3, [r7, #28]
 800fd4a:	785b      	ldrb	r3, [r3, #1]
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	69fb      	ldr	r3, [r7, #28]
 800fd50:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800fd54:	69fb      	ldr	r3, [r7, #28]
 800fd56:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800fd5a:	69fb      	ldr	r3, [r7, #28]
 800fd5c:	789b      	ldrb	r3, [r3, #2]
 800fd5e:	021b      	lsls	r3, r3, #8
 800fd60:	441a      	add	r2, r3
 800fd62:	69fb      	ldr	r3, [r7, #28]
 800fd64:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800fd68:	69fb      	ldr	r3, [r7, #28]
 800fd6a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	78db      	ldrb	r3, [r3, #3]
 800fd72:	041b      	lsls	r3, r3, #16
 800fd74:	441a      	add	r2, r3
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800fd7c:	69fb      	ldr	r3, [r7, #28]
 800fd7e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	791b      	ldrb	r3, [r3, #4]
 800fd86:	061b      	lsls	r3, r3, #24
 800fd88:	441a      	add	r2, r3
 800fd8a:	69fb      	ldr	r3, [r7, #28]
 800fd8c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 800fd90:	e064      	b.n	800fe5c <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800fd92:	69fb      	ldr	r3, [r7, #28]
 800fd94:	781b      	ldrb	r3, [r3, #0]
 800fd96:	2b41      	cmp	r3, #65	@ 0x41
 800fd98:	d12f      	bne.n	800fdfa <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	785b      	ldrb	r3, [r3, #1]
 800fd9e:	461a      	mov	r2, r3
 800fda0:	69fb      	ldr	r3, [r7, #28]
 800fda2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	789b      	ldrb	r3, [r3, #2]
 800fdb0:	021b      	lsls	r3, r3, #8
 800fdb2:	441a      	add	r2, r3
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800fdc0:	69fb      	ldr	r3, [r7, #28]
 800fdc2:	78db      	ldrb	r3, [r3, #3]
 800fdc4:	041b      	lsls	r3, r3, #16
 800fdc6:	441a      	add	r2, r3
 800fdc8:	69fb      	ldr	r3, [r7, #28]
 800fdca:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800fdce:	69fb      	ldr	r3, [r7, #28]
 800fdd0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800fdd4:	69fb      	ldr	r3, [r7, #28]
 800fdd6:	791b      	ldrb	r3, [r3, #4]
 800fdd8:	061b      	lsls	r3, r3, #24
 800fdda:	441a      	add	r2, r3
 800fddc:	69fb      	ldr	r3, [r7, #28]
 800fdde:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 800fde2:	69bb      	ldr	r3, [r7, #24]
 800fde4:	68db      	ldr	r3, [r3, #12]
 800fde6:	69fa      	ldr	r2, [r7, #28]
 800fde8:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 800fdec:	4610      	mov	r0, r2
 800fdee:	4798      	blx	r3
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d032      	beq.n	800fe5c <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 800fdf6:	2303      	movs	r3, #3
 800fdf8:	e05b      	b.n	800feb2 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 800fdfa:	2303      	movs	r3, #3
 800fdfc:	e059      	b.n	800feb2 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800fdfe:	69fb      	ldr	r3, [r7, #28]
 800fe00:	2200      	movs	r2, #0
 800fe02:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 800fe06:	69fb      	ldr	r3, [r7, #28]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800fe12:	2301      	movs	r3, #1
 800fe14:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 800fe16:	f107 030c 	add.w	r3, r7, #12
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f001 fc63 	bl	80116e8 <USBD_CtlError>
 800fe22:	e01b      	b.n	800fe5c <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800fe24:	69fb      	ldr	r3, [r7, #28]
 800fe26:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d916      	bls.n	800fe5c <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800fe2e:	69fb      	ldr	r3, [r7, #28]
 800fe30:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800fe34:	3b02      	subs	r3, #2
 800fe36:	029a      	lsls	r2, r3, #10
 800fe38:	69fb      	ldr	r3, [r7, #28]
 800fe3a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800fe3e:	4413      	add	r3, r2
 800fe40:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800fe42:	69bb      	ldr	r3, [r7, #24]
 800fe44:	691b      	ldr	r3, [r3, #16]
 800fe46:	69f8      	ldr	r0, [r7, #28]
 800fe48:	6979      	ldr	r1, [r7, #20]
 800fe4a:	69fa      	ldr	r2, [r7, #28]
 800fe4c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 800fe50:	4798      	blx	r3
 800fe52:	4603      	mov	r3, r0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d001      	beq.n	800fe5c <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 800fe58:	2303      	movs	r3, #3
 800fe5a:	e02a      	b.n	800feb2 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800fe5c:	69fb      	ldr	r3, [r7, #28]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 800fe64:	69fb      	ldr	r3, [r7, #28]
 800fe66:	2200      	movs	r2, #0
 800fe68:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800fe6c:	69fb      	ldr	r3, [r7, #28]
 800fe6e:	2203      	movs	r2, #3
 800fe70:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	2200      	movs	r2, #0
 800fe78:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800fe84:	69fb      	ldr	r3, [r7, #28]
 800fe86:	2200      	movs	r2, #0
 800fe88:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fe92:	69fb      	ldr	r3, [r7, #28]
 800fe94:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800fe98:	e00a      	b.n	800feb0 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800fe9a:	69fb      	ldr	r3, [r7, #28]
 800fe9c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800fea0:	2b07      	cmp	r3, #7
 800fea2:	d103      	bne.n	800feac <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f000 fb75 	bl	8010594 <DFU_Leave>
 800feaa:	e001      	b.n	800feb0 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 800feac:	2303      	movs	r3, #3
 800feae:	e000      	b.n	800feb2 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 800feb0:	2300      	movs	r3, #0
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3720      	adds	r7, #32
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}

0800feba <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800feba:	b480      	push	{r7}
 800febc:	b083      	sub	sp, #12
 800febe:	af00      	add	r7, sp, #0
 800fec0:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800fec2:	2300      	movs	r3, #0
}
 800fec4:	4618      	mov	r0, r3
 800fec6:	370c      	adds	r7, #12
 800fec8:	46bd      	mov	sp, r7
 800feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fece:	4770      	bx	lr

0800fed0 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	220a      	movs	r2, #10
 800fedc:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800fede:	4b03      	ldr	r3, [pc, #12]	@ (800feec <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr
 800feec:	20000068 	.word	0x20000068

0800fef0 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b086      	sub	sp, #24
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	60f8      	str	r0, [r7, #12]
 800fef8:	460b      	mov	r3, r1
 800fefa:	607a      	str	r2, [r7, #4]
 800fefc:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ff04:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800ff06:	7afb      	ldrb	r3, [r7, #11]
 800ff08:	2b06      	cmp	r3, #6
 800ff0a:	d808      	bhi.n	800ff1e <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	687a      	ldr	r2, [r7, #4]
 800ff12:	4905      	ldr	r1, [pc, #20]	@ (800ff28 <USBD_DFU_GetUsrStringDesc+0x38>)
 800ff14:	4618      	mov	r0, r3
 800ff16:	f001 fbf8 	bl	801170a <USBD_GetString>
    return USBD_StrDesc;
 800ff1a:	4b03      	ldr	r3, [pc, #12]	@ (800ff28 <USBD_DFU_GetUsrStringDesc+0x38>)
 800ff1c:	e000      	b.n	800ff20 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800ff1e:	2300      	movs	r3, #0
  }
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3718      	adds	r7, #24
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	20000910 	.word	0x20000910

0800ff2c <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b083      	sub	sp, #12
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d101      	bne.n	800ff40 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ff3c:	2303      	movs	r3, #3
 800ff3e:	e004      	b.n	800ff4a <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	683a      	ldr	r2, [r7, #0]
 800ff44:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800ff48:	2300      	movs	r3, #0
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	370c      	adds	r7, #12
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff54:	4770      	bx	lr
	...

0800ff58 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ff68:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d051      	beq.n	8010014 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ff76:	2b02      	cmp	r3, #2
 800ff78:	d013      	beq.n	800ffa2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800ff80:	2b03      	cmp	r3, #3
 800ff82:	d00e      	beq.n	800ffa2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800ff8a:	2b05      	cmp	r3, #5
 800ff8c:	d009      	beq.n	800ffa2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800ff94:	2b06      	cmp	r3, #6
 800ff96:	d004      	beq.n	800ffa2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800ff9e:	2b09      	cmp	r3, #9
 800ffa0:	d125      	bne.n	800ffee <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	2202      	movs	r2, #2
 800ffa6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	2200      	movs	r2, #0
 800ffae:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	2200      	movs	r2, #0
 800ffda:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 800ffee:	4b0b      	ldr	r3, [pc, #44]	@ (801001c <DFU_Detach+0xc4>)
 800fff0:	7d5b      	ldrb	r3, [r3, #21]
 800fff2:	f003 0310 	and.w	r3, r3, #16
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d006      	beq.n	8010008 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f000 fb7b 	bl	80106f6 <USBD_Stop>
    (void)USBD_Start(pdev);
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f000 fb6c 	bl	80106de <USBD_Start>
 8010006:	e006      	b.n	8010016 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	885b      	ldrh	r3, [r3, #2]
 801000c:	4618      	mov	r0, r3
 801000e:	f7f4 fc7b 	bl	8004908 <HAL_Delay>
 8010012:	e000      	b.n	8010016 <DFU_Detach+0xbe>
    return;
 8010014:	bf00      	nop
  }
}
 8010016:	3710      	adds	r7, #16
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}
 801001c:	2000004c 	.word	0x2000004c

08010020 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b084      	sub	sp, #16
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010030:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d05b      	beq.n	80100f0 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	88db      	ldrh	r3, [r3, #6]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d02d      	beq.n	801009c <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8010046:	2b02      	cmp	r3, #2
 8010048:	d004      	beq.n	8010054 <DFU_Download+0x34>
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8010050:	2b05      	cmp	r3, #5
 8010052:	d11e      	bne.n	8010092 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	885b      	ldrh	r3, [r3, #2]
 8010058:	461a      	mov	r2, r3
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	88db      	ldrh	r3, [r3, #6]
 8010064:	461a      	mov	r2, r3
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	2203      	movs	r2, #3
 8010070:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8010080:	68f9      	ldr	r1, [r7, #12]
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8010088:	461a      	mov	r2, r3
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f001 fbc9 	bl	8011822 <USBD_CtlPrepareRx>
 8010090:	e02f      	b.n	80100f2 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8010092:	6839      	ldr	r1, [r7, #0]
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f001 fb27 	bl	80116e8 <USBD_CtlError>
 801009a:	e02a      	b.n	80100f2 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80100a2:	2b05      	cmp	r3, #5
 80100a4:	d004      	beq.n	80100b0 <DFU_Download+0x90>
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80100ac:	2b02      	cmp	r3, #2
 80100ae:	d11a      	bne.n	80100e6 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2201      	movs	r2, #1
 80100b4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	2206      	movs	r2, #6
 80100bc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	2200      	movs	r2, #0
 80100c4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	2200      	movs	r2, #0
 80100cc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	2200      	movs	r2, #0
 80100d4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 80100e4:	e005      	b.n	80100f2 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80100e6:	6839      	ldr	r1, [r7, #0]
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f001 fafd 	bl	80116e8 <USBD_CtlError>
 80100ee:	e000      	b.n	80100f2 <DFU_Download+0xd2>
    return;
 80100f0:	bf00      	nop
    }
  }
}
 80100f2:	3710      	adds	r7, #16
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}

080100f8 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b086      	sub	sp, #24
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
 8010100:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010108:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010110:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	2b00      	cmp	r3, #0
 8010116:	f000 80c4 	beq.w	80102a2 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	88db      	ldrh	r3, [r3, #6]
 801011e:	2b00      	cmp	r3, #0
 8010120:	f000 80a8 	beq.w	8010274 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 801012a:	2b02      	cmp	r3, #2
 801012c:	d005      	beq.n	801013a <DFU_Upload+0x42>
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8010134:	2b09      	cmp	r3, #9
 8010136:	f040 8090 	bne.w	801025a <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	885b      	ldrh	r3, [r3, #2]
 801013e:	461a      	mov	r2, r3
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	88db      	ldrh	r3, [r3, #6]
 801014a:	461a      	mov	r2, r3
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8010158:	2b00      	cmp	r3, #0
 801015a:	d12c      	bne.n	80101b6 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8010162:	2b03      	cmp	r3, #3
 8010164:	d901      	bls.n	801016a <DFU_Upload+0x72>
 8010166:	2202      	movs	r2, #2
 8010168:	e000      	b.n	801016c <DFU_Upload+0x74>
 801016a:	2209      	movs	r2, #9
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	2200      	movs	r2, #0
 8010176:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	2200      	movs	r2, #0
 801017e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	2200      	movs	r2, #0
 8010186:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	2200      	movs	r2, #0
 801019a:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	2221      	movs	r2, #33	@ 0x21
 80101a0:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	2241      	movs	r2, #65	@ 0x41
 80101a6:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	2203      	movs	r2, #3
 80101ac:	4619      	mov	r1, r3
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f001 fb0b 	bl	80117ca <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80101b4:	e076      	b.n	80102a4 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d931      	bls.n	8010224 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	2209      	movs	r2, #9
 80101c4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	2200      	movs	r2, #0
 80101cc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	2200      	movs	r2, #0
 80101d4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	2200      	movs	r2, #0
 80101dc:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80101f2:	3b02      	subs	r3, #2
 80101f4:	029a      	lsls	r2, r3, #10
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80101fc:	4413      	add	r3, r2
 80101fe:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	695b      	ldr	r3, [r3, #20]
 8010204:	68f8      	ldr	r0, [r7, #12]
 8010206:	6979      	ldr	r1, [r7, #20]
 8010208:	697a      	ldr	r2, [r7, #20]
 801020a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 801020e:	4798      	blx	r3
 8010210:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8010218:	461a      	mov	r2, r3
 801021a:	68b9      	ldr	r1, [r7, #8]
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f001 fad4 	bl	80117ca <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8010222:	e03f      	b.n	80102a4 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	220f      	movs	r2, #15
 8010228:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	2200      	movs	r2, #0
 8010230:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	2200      	movs	r2, #0
 8010238:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	2200      	movs	r2, #0
 8010240:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 8010250:	6839      	ldr	r1, [r7, #0]
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f001 fa48 	bl	80116e8 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8010258:	e024      	b.n	80102a4 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	2200      	movs	r2, #0
 801025e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	2200      	movs	r2, #0
 8010266:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 801026a:	6839      	ldr	r1, [r7, #0]
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f001 fa3b 	bl	80116e8 <USBD_CtlError>
 8010272:	e017      	b.n	80102a4 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	2202      	movs	r2, #2
 8010278:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	2200      	movs	r2, #0
 8010280:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	2200      	movs	r2, #0
 8010288:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	2200      	movs	r2, #0
 8010290:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 80102a0:	e000      	b.n	80102a4 <DFU_Upload+0x1ac>
    return;
 80102a2:	bf00      	nop
  }
}
 80102a4:	3718      	adds	r7, #24
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
	...

080102ac <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b084      	sub	sp, #16
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80102ba:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80102c2:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	f000 80a0 	beq.w	801040c <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80102d2:	2b03      	cmp	r3, #3
 80102d4:	d002      	beq.n	80102dc <DFU_GetStatus+0x30>
 80102d6:	2b06      	cmp	r3, #6
 80102d8:	d051      	beq.n	801037e <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 80102da:	e08e      	b.n	80103fa <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d034      	beq.n	8010350 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	2204      	movs	r2, #4
 80102ea:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	2200      	movs	r2, #0
 80102f2:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	2200      	movs	r2, #0
 80102fa:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	2200      	movs	r2, #0
 8010302:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8010318:	2b00      	cmp	r3, #0
 801031a:	d10e      	bne.n	801033a <DFU_GetStatus+0x8e>
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	781b      	ldrb	r3, [r3, #0]
 8010320:	2b41      	cmp	r3, #65	@ 0x41
 8010322:	d10a      	bne.n	801033a <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	699b      	ldr	r3, [r3, #24]
 8010328:	68fa      	ldr	r2, [r7, #12]
 801032a:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 801032e:	68fa      	ldr	r2, [r7, #12]
 8010330:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 8010334:	2100      	movs	r1, #0
 8010336:	4798      	blx	r3
      break;
 8010338:	e05f      	b.n	80103fa <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	699b      	ldr	r3, [r3, #24]
 801033e:	68fa      	ldr	r2, [r7, #12]
 8010340:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8010344:	68fa      	ldr	r2, [r7, #12]
 8010346:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 801034a:	2101      	movs	r1, #1
 801034c:	4798      	blx	r3
      break;
 801034e:	e054      	b.n	80103fa <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	2205      	movs	r2, #5
 8010354:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	2200      	movs	r2, #0
 801035c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	2200      	movs	r2, #0
 8010364:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	2200      	movs	r2, #0
 801036c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 801037c:	e03d      	b.n	80103fa <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8010384:	2b01      	cmp	r3, #1
 8010386:	d116      	bne.n	80103b6 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	2207      	movs	r2, #7
 801038c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	2201      	movs	r2, #1
 8010394:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2200      	movs	r2, #0
 801039c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	2200      	movs	r2, #0
 80103a4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 80103b4:	e020      	b.n	80103f8 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d11b      	bne.n	80103f8 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 80103c0:	4b14      	ldr	r3, [pc, #80]	@ (8010414 <DFU_GetStatus+0x168>)
 80103c2:	7d1b      	ldrb	r3, [r3, #20]
 80103c4:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d015      	beq.n	80103f8 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2202      	movs	r2, #2
 80103d0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	2200      	movs	r2, #0
 80103d8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	2200      	movs	r2, #0
 80103e0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	2200      	movs	r2, #0
 80103e8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 80103f8:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8010400:	2206      	movs	r2, #6
 8010402:	4619      	mov	r1, r3
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f001 f9e0 	bl	80117ca <USBD_CtlSendData>
 801040a:	e000      	b.n	801040e <DFU_GetStatus+0x162>
    return;
 801040c:	bf00      	nop
}
 801040e:	3710      	adds	r7, #16
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}
 8010414:	2000004c 	.word	0x2000004c

08010418 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8010418:	b480      	push	{r7}
 801041a:	b085      	sub	sp, #20
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010426:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d042      	beq.n	80104b4 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8010434:	2b0a      	cmp	r3, #10
 8010436:	d11e      	bne.n	8010476 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	2202      	movs	r2, #2
 801043c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	2200      	movs	r2, #0
 8010444:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2200      	movs	r2, #0
 801044c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	2200      	movs	r2, #0
 8010454:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2200      	movs	r2, #0
 801045c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	2200      	movs	r2, #0
 8010470:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8010474:	e01f      	b.n	80104b6 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	220a      	movs	r2, #10
 801047a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	220e      	movs	r2, #14
 8010482:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2200      	movs	r2, #0
 801048a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	2200      	movs	r2, #0
 8010492:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	2200      	movs	r2, #0
 801049a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	2200      	movs	r2, #0
 80104ae:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 80104b2:	e000      	b.n	80104b6 <DFU_ClearStatus+0x9e>
    return;
 80104b4:	bf00      	nop
  }
}
 80104b6:	3714      	adds	r7, #20
 80104b8:	46bd      	mov	sp, r7
 80104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104be:	4770      	bx	lr

080104c0 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80104ce:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d008      	beq.n	80104e8 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 80104dc:	2201      	movs	r2, #1
 80104de:	4619      	mov	r1, r3
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f001 f972 	bl	80117ca <USBD_CtlSendData>
 80104e6:	e000      	b.n	80104ea <DFU_GetState+0x2a>
    return;
 80104e8:	bf00      	nop
}
 80104ea:	3710      	adds	r7, #16
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}

080104f0 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 80104f0:	b480      	push	{r7}
 80104f2:	b085      	sub	sp, #20
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80104fe:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d03f      	beq.n	8010586 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 801050c:	2b02      	cmp	r3, #2
 801050e:	d013      	beq.n	8010538 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8010516:	2b03      	cmp	r3, #3
 8010518:	d00e      	beq.n	8010538 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8010520:	2b05      	cmp	r3, #5
 8010522:	d009      	beq.n	8010538 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 801052a:	2b06      	cmp	r3, #6
 801052c:	d004      	beq.n	8010538 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8010534:	2b09      	cmp	r3, #9
 8010536:	d127      	bne.n	8010588 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	2202      	movs	r2, #2
 801053c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2200      	movs	r2, #0
 8010544:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2200      	movs	r2, #0
 801054c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	2200      	movs	r2, #0
 8010554:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2200      	movs	r2, #0
 801055c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2200      	movs	r2, #0
 8010570:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	2200      	movs	r2, #0
 8010578:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	2200      	movs	r2, #0
 8010580:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8010584:	e000      	b.n	8010588 <DFU_Abort+0x98>
    return;
 8010586:	bf00      	nop
  }
}
 8010588:	3714      	adds	r7, #20
 801058a:	46bd      	mov	sp, r7
 801058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010590:	4770      	bx	lr
	...

08010594 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b084      	sub	sp, #16
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80105a2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d03b      	beq.n	8010622 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	2200      	movs	r2, #0
 80105ae:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 80105b2:	4b1e      	ldr	r3, [pc, #120]	@ (801062c <DFU_Leave+0x98>)
 80105b4:	7d1b      	ldrb	r3, [r3, #20]
 80105b6:	f003 0304 	and.w	r3, r3, #4
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d016      	beq.n	80105ec <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	2206      	movs	r2, #6
 80105c2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2200      	movs	r2, #0
 80105ca:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	2200      	movs	r2, #0
 80105d2:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	2200      	movs	r2, #0
 80105da:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 80105ea:	e01b      	b.n	8010624 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2208      	movs	r2, #8
 80105f0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	2200      	movs	r2, #0
 80105f8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	2200      	movs	r2, #0
 8010600:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2200      	movs	r2, #0
 8010608:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f000 f86c 	bl	80106f6 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 801061e:	f7ff f9b3 	bl	800f988 <__NVIC_SystemReset>
    return;
 8010622:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8010624:	3710      	adds	r7, #16
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	2000004c 	.word	0x2000004c

08010630 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b086      	sub	sp, #24
 8010634:	af00      	add	r7, sp, #0
 8010636:	60f8      	str	r0, [r7, #12]
 8010638:	60b9      	str	r1, [r7, #8]
 801063a:	4613      	mov	r3, r2
 801063c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d101      	bne.n	8010648 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010644:	2303      	movs	r3, #3
 8010646:	e01f      	b.n	8010688 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	2200      	movs	r2, #0
 801064c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	2200      	movs	r2, #0
 8010654:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	2200      	movs	r2, #0
 801065c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d003      	beq.n	801066e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	68ba      	ldr	r2, [r7, #8]
 801066a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	2201      	movs	r2, #1
 8010672:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	79fa      	ldrb	r2, [r7, #7]
 801067a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801067c:	68f8      	ldr	r0, [r7, #12]
 801067e:	f001 fbd9 	bl	8011e34 <USBD_LL_Init>
 8010682:	4603      	mov	r3, r0
 8010684:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010686:	7dfb      	ldrb	r3, [r7, #23]
}
 8010688:	4618      	mov	r0, r3
 801068a:	3718      	adds	r7, #24
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}

08010690 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b084      	sub	sp, #16
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
 8010698:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801069a:	2300      	movs	r3, #0
 801069c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d101      	bne.n	80106a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80106a4:	2303      	movs	r3, #3
 80106a6:	e016      	b.n	80106d6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	683a      	ldr	r2, [r7, #0]
 80106ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80106b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d00b      	beq.n	80106d4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80106c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106c4:	f107 020e 	add.w	r2, r7, #14
 80106c8:	4610      	mov	r0, r2
 80106ca:	4798      	blx	r3
 80106cc:	4602      	mov	r2, r0
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80106d4:	2300      	movs	r3, #0
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3710      	adds	r7, #16
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}

080106de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80106de:	b580      	push	{r7, lr}
 80106e0:	b082      	sub	sp, #8
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f001 fbea 	bl	8011ec0 <USBD_LL_Start>
 80106ec:	4603      	mov	r3, r0
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3708      	adds	r7, #8
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}

080106f6 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b082      	sub	sp, #8
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f001 fbf9 	bl	8011ef6 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801070a:	2b00      	cmp	r3, #0
 801070c:	d009      	beq.n	8010722 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	687a      	ldr	r2, [r7, #4]
 8010718:	6852      	ldr	r2, [r2, #4]
 801071a:	b2d2      	uxtb	r2, r2
 801071c:	4611      	mov	r1, r2
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	4798      	blx	r3
  }

  return USBD_OK;
 8010722:	2300      	movs	r3, #0
}
 8010724:	4618      	mov	r0, r3
 8010726:	3708      	adds	r7, #8
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}

0801072c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801072c:	b480      	push	{r7}
 801072e:	b083      	sub	sp, #12
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010734:	2300      	movs	r3, #0
}
 8010736:	4618      	mov	r0, r3
 8010738:	370c      	adds	r7, #12
 801073a:	46bd      	mov	sp, r7
 801073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010740:	4770      	bx	lr

08010742 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010742:	b580      	push	{r7, lr}
 8010744:	b084      	sub	sp, #16
 8010746:	af00      	add	r7, sp, #0
 8010748:	6078      	str	r0, [r7, #4]
 801074a:	460b      	mov	r3, r1
 801074c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801074e:	2303      	movs	r3, #3
 8010750:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010758:	2b00      	cmp	r3, #0
 801075a:	d009      	beq.n	8010770 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	78fa      	ldrb	r2, [r7, #3]
 8010766:	4611      	mov	r1, r2
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	4798      	blx	r3
 801076c:	4603      	mov	r3, r0
 801076e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010770:	7bfb      	ldrb	r3, [r7, #15]
}
 8010772:	4618      	mov	r0, r3
 8010774:	3710      	adds	r7, #16
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}

0801077a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801077a:	b580      	push	{r7, lr}
 801077c:	b082      	sub	sp, #8
 801077e:	af00      	add	r7, sp, #0
 8010780:	6078      	str	r0, [r7, #4]
 8010782:	460b      	mov	r3, r1
 8010784:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801078c:	2b00      	cmp	r3, #0
 801078e:	d007      	beq.n	80107a0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	78fa      	ldrb	r2, [r7, #3]
 801079a:	4611      	mov	r1, r2
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	4798      	blx	r3
  }

  return USBD_OK;
 80107a0:	2300      	movs	r3, #0
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	3708      	adds	r7, #8
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}

080107aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80107aa:	b580      	push	{r7, lr}
 80107ac:	b084      	sub	sp, #16
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	6078      	str	r0, [r7, #4]
 80107b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80107ba:	6839      	ldr	r1, [r7, #0]
 80107bc:	4618      	mov	r0, r3
 80107be:	f000 ff59 	bl	8011674 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2201      	movs	r2, #1
 80107c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80107d0:	461a      	mov	r2, r3
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80107de:	f003 031f 	and.w	r3, r3, #31
 80107e2:	2b02      	cmp	r3, #2
 80107e4:	d01a      	beq.n	801081c <USBD_LL_SetupStage+0x72>
 80107e6:	2b02      	cmp	r3, #2
 80107e8:	d822      	bhi.n	8010830 <USBD_LL_SetupStage+0x86>
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d002      	beq.n	80107f4 <USBD_LL_SetupStage+0x4a>
 80107ee:	2b01      	cmp	r3, #1
 80107f0:	d00a      	beq.n	8010808 <USBD_LL_SetupStage+0x5e>
 80107f2:	e01d      	b.n	8010830 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80107fa:	4619      	mov	r1, r3
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f000 f9ef 	bl	8010be0 <USBD_StdDevReq>
 8010802:	4603      	mov	r3, r0
 8010804:	73fb      	strb	r3, [r7, #15]
      break;
 8010806:	e020      	b.n	801084a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801080e:	4619      	mov	r1, r3
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f000 fa53 	bl	8010cbc <USBD_StdItfReq>
 8010816:	4603      	mov	r3, r0
 8010818:	73fb      	strb	r3, [r7, #15]
      break;
 801081a:	e016      	b.n	801084a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010822:	4619      	mov	r1, r3
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f000 fa92 	bl	8010d4e <USBD_StdEPReq>
 801082a:	4603      	mov	r3, r0
 801082c:	73fb      	strb	r3, [r7, #15]
      break;
 801082e:	e00c      	b.n	801084a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010836:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801083a:	b2db      	uxtb	r3, r3
 801083c:	4619      	mov	r1, r3
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f001 fb9a 	bl	8011f78 <USBD_LL_StallEP>
 8010844:	4603      	mov	r3, r0
 8010846:	73fb      	strb	r3, [r7, #15]
      break;
 8010848:	bf00      	nop
  }

  return ret;
 801084a:	7bfb      	ldrb	r3, [r7, #15]
}
 801084c:	4618      	mov	r0, r3
 801084e:	3710      	adds	r7, #16
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b086      	sub	sp, #24
 8010858:	af00      	add	r7, sp, #0
 801085a:	60f8      	str	r0, [r7, #12]
 801085c:	460b      	mov	r3, r1
 801085e:	607a      	str	r2, [r7, #4]
 8010860:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010862:	7afb      	ldrb	r3, [r7, #11]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d138      	bne.n	80108da <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801086e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010876:	2b03      	cmp	r3, #3
 8010878:	d14a      	bne.n	8010910 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801087a:	693b      	ldr	r3, [r7, #16]
 801087c:	689a      	ldr	r2, [r3, #8]
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	68db      	ldr	r3, [r3, #12]
 8010882:	429a      	cmp	r2, r3
 8010884:	d913      	bls.n	80108ae <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010886:	693b      	ldr	r3, [r7, #16]
 8010888:	689a      	ldr	r2, [r3, #8]
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	68db      	ldr	r3, [r3, #12]
 801088e:	1ad2      	subs	r2, r2, r3
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	68da      	ldr	r2, [r3, #12]
 8010898:	693b      	ldr	r3, [r7, #16]
 801089a:	689b      	ldr	r3, [r3, #8]
 801089c:	4293      	cmp	r3, r2
 801089e:	bf28      	it	cs
 80108a0:	4613      	movcs	r3, r2
 80108a2:	461a      	mov	r2, r3
 80108a4:	6879      	ldr	r1, [r7, #4]
 80108a6:	68f8      	ldr	r0, [r7, #12]
 80108a8:	f000 ffd8 	bl	801185c <USBD_CtlContinueRx>
 80108ac:	e030      	b.n	8010910 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108b4:	b2db      	uxtb	r3, r3
 80108b6:	2b03      	cmp	r3, #3
 80108b8:	d10b      	bne.n	80108d2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80108c0:	691b      	ldr	r3, [r3, #16]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d005      	beq.n	80108d2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80108cc:	691b      	ldr	r3, [r3, #16]
 80108ce:	68f8      	ldr	r0, [r7, #12]
 80108d0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80108d2:	68f8      	ldr	r0, [r7, #12]
 80108d4:	f000 ffd3 	bl	801187e <USBD_CtlSendStatus>
 80108d8:	e01a      	b.n	8010910 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	2b03      	cmp	r3, #3
 80108e4:	d114      	bne.n	8010910 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80108ec:	699b      	ldr	r3, [r3, #24]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d00e      	beq.n	8010910 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80108f8:	699b      	ldr	r3, [r3, #24]
 80108fa:	7afa      	ldrb	r2, [r7, #11]
 80108fc:	4611      	mov	r1, r2
 80108fe:	68f8      	ldr	r0, [r7, #12]
 8010900:	4798      	blx	r3
 8010902:	4603      	mov	r3, r0
 8010904:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010906:	7dfb      	ldrb	r3, [r7, #23]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d001      	beq.n	8010910 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801090c:	7dfb      	ldrb	r3, [r7, #23]
 801090e:	e000      	b.n	8010912 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010910:	2300      	movs	r3, #0
}
 8010912:	4618      	mov	r0, r3
 8010914:	3718      	adds	r7, #24
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}

0801091a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801091a:	b580      	push	{r7, lr}
 801091c:	b086      	sub	sp, #24
 801091e:	af00      	add	r7, sp, #0
 8010920:	60f8      	str	r0, [r7, #12]
 8010922:	460b      	mov	r3, r1
 8010924:	607a      	str	r2, [r7, #4]
 8010926:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010928:	7afb      	ldrb	r3, [r7, #11]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d16b      	bne.n	8010a06 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	3314      	adds	r3, #20
 8010932:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801093a:	2b02      	cmp	r3, #2
 801093c:	d156      	bne.n	80109ec <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	689a      	ldr	r2, [r3, #8]
 8010942:	693b      	ldr	r3, [r7, #16]
 8010944:	68db      	ldr	r3, [r3, #12]
 8010946:	429a      	cmp	r2, r3
 8010948:	d914      	bls.n	8010974 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	689a      	ldr	r2, [r3, #8]
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	68db      	ldr	r3, [r3, #12]
 8010952:	1ad2      	subs	r2, r2, r3
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	689b      	ldr	r3, [r3, #8]
 801095c:	461a      	mov	r2, r3
 801095e:	6879      	ldr	r1, [r7, #4]
 8010960:	68f8      	ldr	r0, [r7, #12]
 8010962:	f000 ff4d 	bl	8011800 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010966:	2300      	movs	r3, #0
 8010968:	2200      	movs	r2, #0
 801096a:	2100      	movs	r1, #0
 801096c:	68f8      	ldr	r0, [r7, #12]
 801096e:	f001 fbad 	bl	80120cc <USBD_LL_PrepareReceive>
 8010972:	e03b      	b.n	80109ec <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010974:	693b      	ldr	r3, [r7, #16]
 8010976:	68da      	ldr	r2, [r3, #12]
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	689b      	ldr	r3, [r3, #8]
 801097c:	429a      	cmp	r2, r3
 801097e:	d11c      	bne.n	80109ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	685a      	ldr	r2, [r3, #4]
 8010984:	693b      	ldr	r3, [r7, #16]
 8010986:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010988:	429a      	cmp	r2, r3
 801098a:	d316      	bcc.n	80109ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	685a      	ldr	r2, [r3, #4]
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010996:	429a      	cmp	r2, r3
 8010998:	d20f      	bcs.n	80109ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801099a:	2200      	movs	r2, #0
 801099c:	2100      	movs	r1, #0
 801099e:	68f8      	ldr	r0, [r7, #12]
 80109a0:	f000 ff2e 	bl	8011800 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2200      	movs	r2, #0
 80109a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80109ac:	2300      	movs	r3, #0
 80109ae:	2200      	movs	r2, #0
 80109b0:	2100      	movs	r1, #0
 80109b2:	68f8      	ldr	r0, [r7, #12]
 80109b4:	f001 fb8a 	bl	80120cc <USBD_LL_PrepareReceive>
 80109b8:	e018      	b.n	80109ec <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80109c0:	b2db      	uxtb	r3, r3
 80109c2:	2b03      	cmp	r3, #3
 80109c4:	d10b      	bne.n	80109de <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80109cc:	68db      	ldr	r3, [r3, #12]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d005      	beq.n	80109de <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80109d8:	68db      	ldr	r3, [r3, #12]
 80109da:	68f8      	ldr	r0, [r7, #12]
 80109dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80109de:	2180      	movs	r1, #128	@ 0x80
 80109e0:	68f8      	ldr	r0, [r7, #12]
 80109e2:	f001 fac9 	bl	8011f78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80109e6:	68f8      	ldr	r0, [r7, #12]
 80109e8:	f000 ff5c 	bl	80118a4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80109f2:	2b01      	cmp	r3, #1
 80109f4:	d122      	bne.n	8010a3c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80109f6:	68f8      	ldr	r0, [r7, #12]
 80109f8:	f7ff fe98 	bl	801072c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	2200      	movs	r2, #0
 8010a00:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010a04:	e01a      	b.n	8010a3c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a0c:	b2db      	uxtb	r3, r3
 8010a0e:	2b03      	cmp	r3, #3
 8010a10:	d114      	bne.n	8010a3c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a18:	695b      	ldr	r3, [r3, #20]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d00e      	beq.n	8010a3c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a24:	695b      	ldr	r3, [r3, #20]
 8010a26:	7afa      	ldrb	r2, [r7, #11]
 8010a28:	4611      	mov	r1, r2
 8010a2a:	68f8      	ldr	r0, [r7, #12]
 8010a2c:	4798      	blx	r3
 8010a2e:	4603      	mov	r3, r0
 8010a30:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010a32:	7dfb      	ldrb	r3, [r7, #23]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d001      	beq.n	8010a3c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010a38:	7dfb      	ldrb	r3, [r7, #23]
 8010a3a:	e000      	b.n	8010a3e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8010a3c:	2300      	movs	r3, #0
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3718      	adds	r7, #24
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}

08010a46 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010a46:	b580      	push	{r7, lr}
 8010a48:	b082      	sub	sp, #8
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2201      	movs	r2, #1
 8010a52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2200      	movs	r2, #0
 8010a62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2200      	movs	r2, #0
 8010a68:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d101      	bne.n	8010a7a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010a76:	2303      	movs	r3, #3
 8010a78:	e02f      	b.n	8010ada <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d00f      	beq.n	8010aa4 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a8a:	685b      	ldr	r3, [r3, #4]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d009      	beq.n	8010aa4 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a96:	685b      	ldr	r3, [r3, #4]
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	6852      	ldr	r2, [r2, #4]
 8010a9c:	b2d2      	uxtb	r2, r2
 8010a9e:	4611      	mov	r1, r2
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010aa4:	2340      	movs	r3, #64	@ 0x40
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	2100      	movs	r1, #0
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f001 fa3e 	bl	8011f2c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2201      	movs	r2, #1
 8010ab4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2240      	movs	r2, #64	@ 0x40
 8010abc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010ac0:	2340      	movs	r3, #64	@ 0x40
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	2180      	movs	r1, #128	@ 0x80
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f001 fa30 	bl	8011f2c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2201      	movs	r2, #1
 8010ad0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2240      	movs	r2, #64	@ 0x40
 8010ad6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010ad8:	2300      	movs	r3, #0
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3708      	adds	r7, #8
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}

08010ae2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010ae2:	b480      	push	{r7}
 8010ae4:	b083      	sub	sp, #12
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	6078      	str	r0, [r7, #4]
 8010aea:	460b      	mov	r3, r1
 8010aec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	78fa      	ldrb	r2, [r7, #3]
 8010af2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010af4:	2300      	movs	r3, #0
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	370c      	adds	r7, #12
 8010afa:	46bd      	mov	sp, r7
 8010afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b00:	4770      	bx	lr

08010b02 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010b02:	b480      	push	{r7}
 8010b04:	b083      	sub	sp, #12
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b10:	b2da      	uxtb	r2, r3
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2204      	movs	r2, #4
 8010b1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010b20:	2300      	movs	r3, #0
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	370c      	adds	r7, #12
 8010b26:	46bd      	mov	sp, r7
 8010b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2c:	4770      	bx	lr

08010b2e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010b2e:	b480      	push	{r7}
 8010b30:	b083      	sub	sp, #12
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b3c:	b2db      	uxtb	r3, r3
 8010b3e:	2b04      	cmp	r3, #4
 8010b40:	d106      	bne.n	8010b50 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010b48:	b2da      	uxtb	r2, r3
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010b50:	2300      	movs	r3, #0
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	370c      	adds	r7, #12
 8010b56:	46bd      	mov	sp, r7
 8010b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5c:	4770      	bx	lr

08010b5e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010b5e:	b580      	push	{r7, lr}
 8010b60:	b082      	sub	sp, #8
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d101      	bne.n	8010b74 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010b70:	2303      	movs	r3, #3
 8010b72:	e012      	b.n	8010b9a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b7a:	b2db      	uxtb	r3, r3
 8010b7c:	2b03      	cmp	r3, #3
 8010b7e:	d10b      	bne.n	8010b98 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b86:	69db      	ldr	r3, [r3, #28]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d005      	beq.n	8010b98 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b92:	69db      	ldr	r3, [r3, #28]
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010b98:	2300      	movs	r3, #0
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3708      	adds	r7, #8
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}

08010ba2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010ba2:	b480      	push	{r7}
 8010ba4:	b087      	sub	sp, #28
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	781b      	ldrb	r3, [r3, #0]
 8010bb2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010bc0:	8a3b      	ldrh	r3, [r7, #16]
 8010bc2:	021b      	lsls	r3, r3, #8
 8010bc4:	b21a      	sxth	r2, r3
 8010bc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010bca:	4313      	orrs	r3, r2
 8010bcc:	b21b      	sxth	r3, r3
 8010bce:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010bd0:	89fb      	ldrh	r3, [r7, #14]
}
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	371c      	adds	r7, #28
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bdc:	4770      	bx	lr
	...

08010be0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010bea:	2300      	movs	r3, #0
 8010bec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010bf6:	2b40      	cmp	r3, #64	@ 0x40
 8010bf8:	d005      	beq.n	8010c06 <USBD_StdDevReq+0x26>
 8010bfa:	2b40      	cmp	r3, #64	@ 0x40
 8010bfc:	d853      	bhi.n	8010ca6 <USBD_StdDevReq+0xc6>
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d00b      	beq.n	8010c1a <USBD_StdDevReq+0x3a>
 8010c02:	2b20      	cmp	r3, #32
 8010c04:	d14f      	bne.n	8010ca6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c0c:	689b      	ldr	r3, [r3, #8]
 8010c0e:	6839      	ldr	r1, [r7, #0]
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	4798      	blx	r3
 8010c14:	4603      	mov	r3, r0
 8010c16:	73fb      	strb	r3, [r7, #15]
      break;
 8010c18:	e04a      	b.n	8010cb0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	785b      	ldrb	r3, [r3, #1]
 8010c1e:	2b09      	cmp	r3, #9
 8010c20:	d83b      	bhi.n	8010c9a <USBD_StdDevReq+0xba>
 8010c22:	a201      	add	r2, pc, #4	@ (adr r2, 8010c28 <USBD_StdDevReq+0x48>)
 8010c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c28:	08010c7d 	.word	0x08010c7d
 8010c2c:	08010c91 	.word	0x08010c91
 8010c30:	08010c9b 	.word	0x08010c9b
 8010c34:	08010c87 	.word	0x08010c87
 8010c38:	08010c9b 	.word	0x08010c9b
 8010c3c:	08010c5b 	.word	0x08010c5b
 8010c40:	08010c51 	.word	0x08010c51
 8010c44:	08010c9b 	.word	0x08010c9b
 8010c48:	08010c73 	.word	0x08010c73
 8010c4c:	08010c65 	.word	0x08010c65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010c50:	6839      	ldr	r1, [r7, #0]
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f000 f9de 	bl	8011014 <USBD_GetDescriptor>
          break;
 8010c58:	e024      	b.n	8010ca4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010c5a:	6839      	ldr	r1, [r7, #0]
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f000 fb7f 	bl	8011360 <USBD_SetAddress>
          break;
 8010c62:	e01f      	b.n	8010ca4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010c64:	6839      	ldr	r1, [r7, #0]
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f000 fbbe 	bl	80113e8 <USBD_SetConfig>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	73fb      	strb	r3, [r7, #15]
          break;
 8010c70:	e018      	b.n	8010ca4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010c72:	6839      	ldr	r1, [r7, #0]
 8010c74:	6878      	ldr	r0, [r7, #4]
 8010c76:	f000 fc5d 	bl	8011534 <USBD_GetConfig>
          break;
 8010c7a:	e013      	b.n	8010ca4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010c7c:	6839      	ldr	r1, [r7, #0]
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	f000 fc8e 	bl	80115a0 <USBD_GetStatus>
          break;
 8010c84:	e00e      	b.n	8010ca4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010c86:	6839      	ldr	r1, [r7, #0]
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f000 fcbd 	bl	8011608 <USBD_SetFeature>
          break;
 8010c8e:	e009      	b.n	8010ca4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010c90:	6839      	ldr	r1, [r7, #0]
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	f000 fccc 	bl	8011630 <USBD_ClrFeature>
          break;
 8010c98:	e004      	b.n	8010ca4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8010c9a:	6839      	ldr	r1, [r7, #0]
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f000 fd23 	bl	80116e8 <USBD_CtlError>
          break;
 8010ca2:	bf00      	nop
      }
      break;
 8010ca4:	e004      	b.n	8010cb0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8010ca6:	6839      	ldr	r1, [r7, #0]
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f000 fd1d 	bl	80116e8 <USBD_CtlError>
      break;
 8010cae:	bf00      	nop
  }

  return ret;
 8010cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3710      	adds	r7, #16
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop

08010cbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b084      	sub	sp, #16
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	781b      	ldrb	r3, [r3, #0]
 8010cce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010cd2:	2b40      	cmp	r3, #64	@ 0x40
 8010cd4:	d005      	beq.n	8010ce2 <USBD_StdItfReq+0x26>
 8010cd6:	2b40      	cmp	r3, #64	@ 0x40
 8010cd8:	d82f      	bhi.n	8010d3a <USBD_StdItfReq+0x7e>
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d001      	beq.n	8010ce2 <USBD_StdItfReq+0x26>
 8010cde:	2b20      	cmp	r3, #32
 8010ce0:	d12b      	bne.n	8010d3a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ce8:	b2db      	uxtb	r3, r3
 8010cea:	3b01      	subs	r3, #1
 8010cec:	2b02      	cmp	r3, #2
 8010cee:	d81d      	bhi.n	8010d2c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	889b      	ldrh	r3, [r3, #4]
 8010cf4:	b2db      	uxtb	r3, r3
 8010cf6:	2b01      	cmp	r3, #1
 8010cf8:	d813      	bhi.n	8010d22 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d00:	689b      	ldr	r3, [r3, #8]
 8010d02:	6839      	ldr	r1, [r7, #0]
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	4798      	blx	r3
 8010d08:	4603      	mov	r3, r0
 8010d0a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	88db      	ldrh	r3, [r3, #6]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d110      	bne.n	8010d36 <USBD_StdItfReq+0x7a>
 8010d14:	7bfb      	ldrb	r3, [r7, #15]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d10d      	bne.n	8010d36 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f000 fdaf 	bl	801187e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010d20:	e009      	b.n	8010d36 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8010d22:	6839      	ldr	r1, [r7, #0]
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f000 fcdf 	bl	80116e8 <USBD_CtlError>
          break;
 8010d2a:	e004      	b.n	8010d36 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8010d2c:	6839      	ldr	r1, [r7, #0]
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f000 fcda 	bl	80116e8 <USBD_CtlError>
          break;
 8010d34:	e000      	b.n	8010d38 <USBD_StdItfReq+0x7c>
          break;
 8010d36:	bf00      	nop
      }
      break;
 8010d38:	e004      	b.n	8010d44 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8010d3a:	6839      	ldr	r1, [r7, #0]
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f000 fcd3 	bl	80116e8 <USBD_CtlError>
      break;
 8010d42:	bf00      	nop
  }

  return ret;
 8010d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3710      	adds	r7, #16
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}

08010d4e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d4e:	b580      	push	{r7, lr}
 8010d50:	b084      	sub	sp, #16
 8010d52:	af00      	add	r7, sp, #0
 8010d54:	6078      	str	r0, [r7, #4]
 8010d56:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	889b      	ldrh	r3, [r3, #4]
 8010d60:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010d6a:	2b40      	cmp	r3, #64	@ 0x40
 8010d6c:	d007      	beq.n	8010d7e <USBD_StdEPReq+0x30>
 8010d6e:	2b40      	cmp	r3, #64	@ 0x40
 8010d70:	f200 8145 	bhi.w	8010ffe <USBD_StdEPReq+0x2b0>
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d00c      	beq.n	8010d92 <USBD_StdEPReq+0x44>
 8010d78:	2b20      	cmp	r3, #32
 8010d7a:	f040 8140 	bne.w	8010ffe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d84:	689b      	ldr	r3, [r3, #8]
 8010d86:	6839      	ldr	r1, [r7, #0]
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	4798      	blx	r3
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8010d90:	e13a      	b.n	8011008 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	785b      	ldrb	r3, [r3, #1]
 8010d96:	2b03      	cmp	r3, #3
 8010d98:	d007      	beq.n	8010daa <USBD_StdEPReq+0x5c>
 8010d9a:	2b03      	cmp	r3, #3
 8010d9c:	f300 8129 	bgt.w	8010ff2 <USBD_StdEPReq+0x2a4>
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d07f      	beq.n	8010ea4 <USBD_StdEPReq+0x156>
 8010da4:	2b01      	cmp	r3, #1
 8010da6:	d03c      	beq.n	8010e22 <USBD_StdEPReq+0xd4>
 8010da8:	e123      	b.n	8010ff2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010db0:	b2db      	uxtb	r3, r3
 8010db2:	2b02      	cmp	r3, #2
 8010db4:	d002      	beq.n	8010dbc <USBD_StdEPReq+0x6e>
 8010db6:	2b03      	cmp	r3, #3
 8010db8:	d016      	beq.n	8010de8 <USBD_StdEPReq+0x9a>
 8010dba:	e02c      	b.n	8010e16 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010dbc:	7bbb      	ldrb	r3, [r7, #14]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d00d      	beq.n	8010dde <USBD_StdEPReq+0x90>
 8010dc2:	7bbb      	ldrb	r3, [r7, #14]
 8010dc4:	2b80      	cmp	r3, #128	@ 0x80
 8010dc6:	d00a      	beq.n	8010dde <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010dc8:	7bbb      	ldrb	r3, [r7, #14]
 8010dca:	4619      	mov	r1, r3
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f001 f8d3 	bl	8011f78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010dd2:	2180      	movs	r1, #128	@ 0x80
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f001 f8cf 	bl	8011f78 <USBD_LL_StallEP>
 8010dda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010ddc:	e020      	b.n	8010e20 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8010dde:	6839      	ldr	r1, [r7, #0]
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f000 fc81 	bl	80116e8 <USBD_CtlError>
              break;
 8010de6:	e01b      	b.n	8010e20 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	885b      	ldrh	r3, [r3, #2]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d10e      	bne.n	8010e0e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010df0:	7bbb      	ldrb	r3, [r7, #14]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d00b      	beq.n	8010e0e <USBD_StdEPReq+0xc0>
 8010df6:	7bbb      	ldrb	r3, [r7, #14]
 8010df8:	2b80      	cmp	r3, #128	@ 0x80
 8010dfa:	d008      	beq.n	8010e0e <USBD_StdEPReq+0xc0>
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	88db      	ldrh	r3, [r3, #6]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d104      	bne.n	8010e0e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010e04:	7bbb      	ldrb	r3, [r7, #14]
 8010e06:	4619      	mov	r1, r3
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f001 f8b5 	bl	8011f78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f000 fd35 	bl	801187e <USBD_CtlSendStatus>

              break;
 8010e14:	e004      	b.n	8010e20 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8010e16:	6839      	ldr	r1, [r7, #0]
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f000 fc65 	bl	80116e8 <USBD_CtlError>
              break;
 8010e1e:	bf00      	nop
          }
          break;
 8010e20:	e0ec      	b.n	8010ffc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e28:	b2db      	uxtb	r3, r3
 8010e2a:	2b02      	cmp	r3, #2
 8010e2c:	d002      	beq.n	8010e34 <USBD_StdEPReq+0xe6>
 8010e2e:	2b03      	cmp	r3, #3
 8010e30:	d016      	beq.n	8010e60 <USBD_StdEPReq+0x112>
 8010e32:	e030      	b.n	8010e96 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010e34:	7bbb      	ldrb	r3, [r7, #14]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d00d      	beq.n	8010e56 <USBD_StdEPReq+0x108>
 8010e3a:	7bbb      	ldrb	r3, [r7, #14]
 8010e3c:	2b80      	cmp	r3, #128	@ 0x80
 8010e3e:	d00a      	beq.n	8010e56 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010e40:	7bbb      	ldrb	r3, [r7, #14]
 8010e42:	4619      	mov	r1, r3
 8010e44:	6878      	ldr	r0, [r7, #4]
 8010e46:	f001 f897 	bl	8011f78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010e4a:	2180      	movs	r1, #128	@ 0x80
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f001 f893 	bl	8011f78 <USBD_LL_StallEP>
 8010e52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010e54:	e025      	b.n	8010ea2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8010e56:	6839      	ldr	r1, [r7, #0]
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f000 fc45 	bl	80116e8 <USBD_CtlError>
              break;
 8010e5e:	e020      	b.n	8010ea2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	885b      	ldrh	r3, [r3, #2]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d11b      	bne.n	8010ea0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010e68:	7bbb      	ldrb	r3, [r7, #14]
 8010e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d004      	beq.n	8010e7c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010e72:	7bbb      	ldrb	r3, [r7, #14]
 8010e74:	4619      	mov	r1, r3
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f001 f89d 	bl	8011fb6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f000 fcfe 	bl	801187e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e88:	689b      	ldr	r3, [r3, #8]
 8010e8a:	6839      	ldr	r1, [r7, #0]
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	4798      	blx	r3
 8010e90:	4603      	mov	r3, r0
 8010e92:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8010e94:	e004      	b.n	8010ea0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8010e96:	6839      	ldr	r1, [r7, #0]
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f000 fc25 	bl	80116e8 <USBD_CtlError>
              break;
 8010e9e:	e000      	b.n	8010ea2 <USBD_StdEPReq+0x154>
              break;
 8010ea0:	bf00      	nop
          }
          break;
 8010ea2:	e0ab      	b.n	8010ffc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010eaa:	b2db      	uxtb	r3, r3
 8010eac:	2b02      	cmp	r3, #2
 8010eae:	d002      	beq.n	8010eb6 <USBD_StdEPReq+0x168>
 8010eb0:	2b03      	cmp	r3, #3
 8010eb2:	d032      	beq.n	8010f1a <USBD_StdEPReq+0x1cc>
 8010eb4:	e097      	b.n	8010fe6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010eb6:	7bbb      	ldrb	r3, [r7, #14]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d007      	beq.n	8010ecc <USBD_StdEPReq+0x17e>
 8010ebc:	7bbb      	ldrb	r3, [r7, #14]
 8010ebe:	2b80      	cmp	r3, #128	@ 0x80
 8010ec0:	d004      	beq.n	8010ecc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8010ec2:	6839      	ldr	r1, [r7, #0]
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f000 fc0f 	bl	80116e8 <USBD_CtlError>
                break;
 8010eca:	e091      	b.n	8010ff0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	da0b      	bge.n	8010eec <USBD_StdEPReq+0x19e>
 8010ed4:	7bbb      	ldrb	r3, [r7, #14]
 8010ed6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010eda:	4613      	mov	r3, r2
 8010edc:	009b      	lsls	r3, r3, #2
 8010ede:	4413      	add	r3, r2
 8010ee0:	009b      	lsls	r3, r3, #2
 8010ee2:	3310      	adds	r3, #16
 8010ee4:	687a      	ldr	r2, [r7, #4]
 8010ee6:	4413      	add	r3, r2
 8010ee8:	3304      	adds	r3, #4
 8010eea:	e00b      	b.n	8010f04 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010eec:	7bbb      	ldrb	r3, [r7, #14]
 8010eee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ef2:	4613      	mov	r3, r2
 8010ef4:	009b      	lsls	r3, r3, #2
 8010ef6:	4413      	add	r3, r2
 8010ef8:	009b      	lsls	r3, r3, #2
 8010efa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010efe:	687a      	ldr	r2, [r7, #4]
 8010f00:	4413      	add	r3, r2
 8010f02:	3304      	adds	r3, #4
 8010f04:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	2200      	movs	r2, #0
 8010f0a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	2202      	movs	r2, #2
 8010f10:	4619      	mov	r1, r3
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f000 fc59 	bl	80117ca <USBD_CtlSendData>
              break;
 8010f18:	e06a      	b.n	8010ff0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010f1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	da11      	bge.n	8010f46 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010f22:	7bbb      	ldrb	r3, [r7, #14]
 8010f24:	f003 020f 	and.w	r2, r3, #15
 8010f28:	6879      	ldr	r1, [r7, #4]
 8010f2a:	4613      	mov	r3, r2
 8010f2c:	009b      	lsls	r3, r3, #2
 8010f2e:	4413      	add	r3, r2
 8010f30:	009b      	lsls	r3, r3, #2
 8010f32:	440b      	add	r3, r1
 8010f34:	3324      	adds	r3, #36	@ 0x24
 8010f36:	881b      	ldrh	r3, [r3, #0]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d117      	bne.n	8010f6c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010f3c:	6839      	ldr	r1, [r7, #0]
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 fbd2 	bl	80116e8 <USBD_CtlError>
                  break;
 8010f44:	e054      	b.n	8010ff0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010f46:	7bbb      	ldrb	r3, [r7, #14]
 8010f48:	f003 020f 	and.w	r2, r3, #15
 8010f4c:	6879      	ldr	r1, [r7, #4]
 8010f4e:	4613      	mov	r3, r2
 8010f50:	009b      	lsls	r3, r3, #2
 8010f52:	4413      	add	r3, r2
 8010f54:	009b      	lsls	r3, r3, #2
 8010f56:	440b      	add	r3, r1
 8010f58:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010f5c:	881b      	ldrh	r3, [r3, #0]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d104      	bne.n	8010f6c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010f62:	6839      	ldr	r1, [r7, #0]
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f000 fbbf 	bl	80116e8 <USBD_CtlError>
                  break;
 8010f6a:	e041      	b.n	8010ff0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010f6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	da0b      	bge.n	8010f8c <USBD_StdEPReq+0x23e>
 8010f74:	7bbb      	ldrb	r3, [r7, #14]
 8010f76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010f7a:	4613      	mov	r3, r2
 8010f7c:	009b      	lsls	r3, r3, #2
 8010f7e:	4413      	add	r3, r2
 8010f80:	009b      	lsls	r3, r3, #2
 8010f82:	3310      	adds	r3, #16
 8010f84:	687a      	ldr	r2, [r7, #4]
 8010f86:	4413      	add	r3, r2
 8010f88:	3304      	adds	r3, #4
 8010f8a:	e00b      	b.n	8010fa4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010f8c:	7bbb      	ldrb	r3, [r7, #14]
 8010f8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010f92:	4613      	mov	r3, r2
 8010f94:	009b      	lsls	r3, r3, #2
 8010f96:	4413      	add	r3, r2
 8010f98:	009b      	lsls	r3, r3, #2
 8010f9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010f9e:	687a      	ldr	r2, [r7, #4]
 8010fa0:	4413      	add	r3, r2
 8010fa2:	3304      	adds	r3, #4
 8010fa4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010fa6:	7bbb      	ldrb	r3, [r7, #14]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d002      	beq.n	8010fb2 <USBD_StdEPReq+0x264>
 8010fac:	7bbb      	ldrb	r3, [r7, #14]
 8010fae:	2b80      	cmp	r3, #128	@ 0x80
 8010fb0:	d103      	bne.n	8010fba <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	601a      	str	r2, [r3, #0]
 8010fb8:	e00e      	b.n	8010fd8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010fba:	7bbb      	ldrb	r3, [r7, #14]
 8010fbc:	4619      	mov	r1, r3
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f001 f818 	bl	8011ff4 <USBD_LL_IsStallEP>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d003      	beq.n	8010fd2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	2201      	movs	r2, #1
 8010fce:	601a      	str	r2, [r3, #0]
 8010fd0:	e002      	b.n	8010fd8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	2202      	movs	r2, #2
 8010fdc:	4619      	mov	r1, r3
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f000 fbf3 	bl	80117ca <USBD_CtlSendData>
              break;
 8010fe4:	e004      	b.n	8010ff0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8010fe6:	6839      	ldr	r1, [r7, #0]
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f000 fb7d 	bl	80116e8 <USBD_CtlError>
              break;
 8010fee:	bf00      	nop
          }
          break;
 8010ff0:	e004      	b.n	8010ffc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010ff2:	6839      	ldr	r1, [r7, #0]
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f000 fb77 	bl	80116e8 <USBD_CtlError>
          break;
 8010ffa:	bf00      	nop
      }
      break;
 8010ffc:	e004      	b.n	8011008 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8010ffe:	6839      	ldr	r1, [r7, #0]
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f000 fb71 	bl	80116e8 <USBD_CtlError>
      break;
 8011006:	bf00      	nop
  }

  return ret;
 8011008:	7bfb      	ldrb	r3, [r7, #15]
}
 801100a:	4618      	mov	r0, r3
 801100c:	3710      	adds	r7, #16
 801100e:	46bd      	mov	sp, r7
 8011010:	bd80      	pop	{r7, pc}
	...

08011014 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b084      	sub	sp, #16
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
 801101c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801101e:	2300      	movs	r3, #0
 8011020:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011022:	2300      	movs	r3, #0
 8011024:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011026:	2300      	movs	r3, #0
 8011028:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	885b      	ldrh	r3, [r3, #2]
 801102e:	0a1b      	lsrs	r3, r3, #8
 8011030:	b29b      	uxth	r3, r3
 8011032:	3b01      	subs	r3, #1
 8011034:	2b0e      	cmp	r3, #14
 8011036:	f200 8165 	bhi.w	8011304 <USBD_GetDescriptor+0x2f0>
 801103a:	a201      	add	r2, pc, #4	@ (adr r2, 8011040 <USBD_GetDescriptor+0x2c>)
 801103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011040:	080110b1 	.word	0x080110b1
 8011044:	080110c9 	.word	0x080110c9
 8011048:	08011109 	.word	0x08011109
 801104c:	08011305 	.word	0x08011305
 8011050:	08011305 	.word	0x08011305
 8011054:	080112a5 	.word	0x080112a5
 8011058:	080112d1 	.word	0x080112d1
 801105c:	08011305 	.word	0x08011305
 8011060:	08011305 	.word	0x08011305
 8011064:	08011305 	.word	0x08011305
 8011068:	08011305 	.word	0x08011305
 801106c:	08011305 	.word	0x08011305
 8011070:	08011305 	.word	0x08011305
 8011074:	08011305 	.word	0x08011305
 8011078:	0801107d 	.word	0x0801107d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011082:	69db      	ldr	r3, [r3, #28]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d00b      	beq.n	80110a0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801108e:	69db      	ldr	r3, [r3, #28]
 8011090:	687a      	ldr	r2, [r7, #4]
 8011092:	7c12      	ldrb	r2, [r2, #16]
 8011094:	f107 0108 	add.w	r1, r7, #8
 8011098:	4610      	mov	r0, r2
 801109a:	4798      	blx	r3
 801109c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801109e:	e139      	b.n	8011314 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80110a0:	6839      	ldr	r1, [r7, #0]
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f000 fb20 	bl	80116e8 <USBD_CtlError>
        err++;
 80110a8:	7afb      	ldrb	r3, [r7, #11]
 80110aa:	3301      	adds	r3, #1
 80110ac:	72fb      	strb	r3, [r7, #11]
      break;
 80110ae:	e131      	b.n	8011314 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	687a      	ldr	r2, [r7, #4]
 80110ba:	7c12      	ldrb	r2, [r2, #16]
 80110bc:	f107 0108 	add.w	r1, r7, #8
 80110c0:	4610      	mov	r0, r2
 80110c2:	4798      	blx	r3
 80110c4:	60f8      	str	r0, [r7, #12]
      break;
 80110c6:	e125      	b.n	8011314 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	7c1b      	ldrb	r3, [r3, #16]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d10d      	bne.n	80110ec <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80110d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110d8:	f107 0208 	add.w	r2, r7, #8
 80110dc:	4610      	mov	r0, r2
 80110de:	4798      	blx	r3
 80110e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	3301      	adds	r3, #1
 80110e6:	2202      	movs	r2, #2
 80110e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80110ea:	e113      	b.n	8011314 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80110f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110f4:	f107 0208 	add.w	r2, r7, #8
 80110f8:	4610      	mov	r0, r2
 80110fa:	4798      	blx	r3
 80110fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	3301      	adds	r3, #1
 8011102:	2202      	movs	r2, #2
 8011104:	701a      	strb	r2, [r3, #0]
      break;
 8011106:	e105      	b.n	8011314 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	885b      	ldrh	r3, [r3, #2]
 801110c:	b2db      	uxtb	r3, r3
 801110e:	2b05      	cmp	r3, #5
 8011110:	f200 80ac 	bhi.w	801126c <USBD_GetDescriptor+0x258>
 8011114:	a201      	add	r2, pc, #4	@ (adr r2, 801111c <USBD_GetDescriptor+0x108>)
 8011116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801111a:	bf00      	nop
 801111c:	08011135 	.word	0x08011135
 8011120:	08011169 	.word	0x08011169
 8011124:	0801119d 	.word	0x0801119d
 8011128:	080111d1 	.word	0x080111d1
 801112c:	08011205 	.word	0x08011205
 8011130:	08011239 	.word	0x08011239
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801113a:	685b      	ldr	r3, [r3, #4]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d00b      	beq.n	8011158 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011146:	685b      	ldr	r3, [r3, #4]
 8011148:	687a      	ldr	r2, [r7, #4]
 801114a:	7c12      	ldrb	r2, [r2, #16]
 801114c:	f107 0108 	add.w	r1, r7, #8
 8011150:	4610      	mov	r0, r2
 8011152:	4798      	blx	r3
 8011154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011156:	e0a4      	b.n	80112a2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8011158:	6839      	ldr	r1, [r7, #0]
 801115a:	6878      	ldr	r0, [r7, #4]
 801115c:	f000 fac4 	bl	80116e8 <USBD_CtlError>
            err++;
 8011160:	7afb      	ldrb	r3, [r7, #11]
 8011162:	3301      	adds	r3, #1
 8011164:	72fb      	strb	r3, [r7, #11]
          break;
 8011166:	e09c      	b.n	80112a2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801116e:	689b      	ldr	r3, [r3, #8]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d00b      	beq.n	801118c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801117a:	689b      	ldr	r3, [r3, #8]
 801117c:	687a      	ldr	r2, [r7, #4]
 801117e:	7c12      	ldrb	r2, [r2, #16]
 8011180:	f107 0108 	add.w	r1, r7, #8
 8011184:	4610      	mov	r0, r2
 8011186:	4798      	blx	r3
 8011188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801118a:	e08a      	b.n	80112a2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 801118c:	6839      	ldr	r1, [r7, #0]
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f000 faaa 	bl	80116e8 <USBD_CtlError>
            err++;
 8011194:	7afb      	ldrb	r3, [r7, #11]
 8011196:	3301      	adds	r3, #1
 8011198:	72fb      	strb	r3, [r7, #11]
          break;
 801119a:	e082      	b.n	80112a2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80111a2:	68db      	ldr	r3, [r3, #12]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d00b      	beq.n	80111c0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80111ae:	68db      	ldr	r3, [r3, #12]
 80111b0:	687a      	ldr	r2, [r7, #4]
 80111b2:	7c12      	ldrb	r2, [r2, #16]
 80111b4:	f107 0108 	add.w	r1, r7, #8
 80111b8:	4610      	mov	r0, r2
 80111ba:	4798      	blx	r3
 80111bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80111be:	e070      	b.n	80112a2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80111c0:	6839      	ldr	r1, [r7, #0]
 80111c2:	6878      	ldr	r0, [r7, #4]
 80111c4:	f000 fa90 	bl	80116e8 <USBD_CtlError>
            err++;
 80111c8:	7afb      	ldrb	r3, [r7, #11]
 80111ca:	3301      	adds	r3, #1
 80111cc:	72fb      	strb	r3, [r7, #11]
          break;
 80111ce:	e068      	b.n	80112a2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80111d6:	691b      	ldr	r3, [r3, #16]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d00b      	beq.n	80111f4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80111e2:	691b      	ldr	r3, [r3, #16]
 80111e4:	687a      	ldr	r2, [r7, #4]
 80111e6:	7c12      	ldrb	r2, [r2, #16]
 80111e8:	f107 0108 	add.w	r1, r7, #8
 80111ec:	4610      	mov	r0, r2
 80111ee:	4798      	blx	r3
 80111f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80111f2:	e056      	b.n	80112a2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80111f4:	6839      	ldr	r1, [r7, #0]
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f000 fa76 	bl	80116e8 <USBD_CtlError>
            err++;
 80111fc:	7afb      	ldrb	r3, [r7, #11]
 80111fe:	3301      	adds	r3, #1
 8011200:	72fb      	strb	r3, [r7, #11]
          break;
 8011202:	e04e      	b.n	80112a2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801120a:	695b      	ldr	r3, [r3, #20]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d00b      	beq.n	8011228 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011216:	695b      	ldr	r3, [r3, #20]
 8011218:	687a      	ldr	r2, [r7, #4]
 801121a:	7c12      	ldrb	r2, [r2, #16]
 801121c:	f107 0108 	add.w	r1, r7, #8
 8011220:	4610      	mov	r0, r2
 8011222:	4798      	blx	r3
 8011224:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011226:	e03c      	b.n	80112a2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8011228:	6839      	ldr	r1, [r7, #0]
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f000 fa5c 	bl	80116e8 <USBD_CtlError>
            err++;
 8011230:	7afb      	ldrb	r3, [r7, #11]
 8011232:	3301      	adds	r3, #1
 8011234:	72fb      	strb	r3, [r7, #11]
          break;
 8011236:	e034      	b.n	80112a2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801123e:	699b      	ldr	r3, [r3, #24]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d00b      	beq.n	801125c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801124a:	699b      	ldr	r3, [r3, #24]
 801124c:	687a      	ldr	r2, [r7, #4]
 801124e:	7c12      	ldrb	r2, [r2, #16]
 8011250:	f107 0108 	add.w	r1, r7, #8
 8011254:	4610      	mov	r0, r2
 8011256:	4798      	blx	r3
 8011258:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801125a:	e022      	b.n	80112a2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 801125c:	6839      	ldr	r1, [r7, #0]
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f000 fa42 	bl	80116e8 <USBD_CtlError>
            err++;
 8011264:	7afb      	ldrb	r3, [r7, #11]
 8011266:	3301      	adds	r3, #1
 8011268:	72fb      	strb	r3, [r7, #11]
          break;
 801126a:	e01a      	b.n	80112a2 <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011274:	2b00      	cmp	r3, #0
 8011276:	d00c      	beq.n	8011292 <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801127e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011280:	683a      	ldr	r2, [r7, #0]
 8011282:	8852      	ldrh	r2, [r2, #2]
 8011284:	b2d1      	uxtb	r1, r2
 8011286:	f107 0208 	add.w	r2, r7, #8
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	4798      	blx	r3
 801128e:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8011290:	e006      	b.n	80112a0 <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 8011292:	6839      	ldr	r1, [r7, #0]
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f000 fa27 	bl	80116e8 <USBD_CtlError>
            err++;
 801129a:	7afb      	ldrb	r3, [r7, #11]
 801129c:	3301      	adds	r3, #1
 801129e:	72fb      	strb	r3, [r7, #11]
          break;
 80112a0:	bf00      	nop
      }
      break;
 80112a2:	e037      	b.n	8011314 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	7c1b      	ldrb	r3, [r3, #16]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d109      	bne.n	80112c0 <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112b4:	f107 0208 	add.w	r2, r7, #8
 80112b8:	4610      	mov	r0, r2
 80112ba:	4798      	blx	r3
 80112bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80112be:	e029      	b.n	8011314 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80112c0:	6839      	ldr	r1, [r7, #0]
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f000 fa10 	bl	80116e8 <USBD_CtlError>
        err++;
 80112c8:	7afb      	ldrb	r3, [r7, #11]
 80112ca:	3301      	adds	r3, #1
 80112cc:	72fb      	strb	r3, [r7, #11]
      break;
 80112ce:	e021      	b.n	8011314 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	7c1b      	ldrb	r3, [r3, #16]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d10d      	bne.n	80112f4 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80112e0:	f107 0208 	add.w	r2, r7, #8
 80112e4:	4610      	mov	r0, r2
 80112e6:	4798      	blx	r3
 80112e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	3301      	adds	r3, #1
 80112ee:	2207      	movs	r2, #7
 80112f0:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80112f2:	e00f      	b.n	8011314 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80112f4:	6839      	ldr	r1, [r7, #0]
 80112f6:	6878      	ldr	r0, [r7, #4]
 80112f8:	f000 f9f6 	bl	80116e8 <USBD_CtlError>
        err++;
 80112fc:	7afb      	ldrb	r3, [r7, #11]
 80112fe:	3301      	adds	r3, #1
 8011300:	72fb      	strb	r3, [r7, #11]
      break;
 8011302:	e007      	b.n	8011314 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 8011304:	6839      	ldr	r1, [r7, #0]
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f000 f9ee 	bl	80116e8 <USBD_CtlError>
      err++;
 801130c:	7afb      	ldrb	r3, [r7, #11]
 801130e:	3301      	adds	r3, #1
 8011310:	72fb      	strb	r3, [r7, #11]
      break;
 8011312:	bf00      	nop
  }

  if (err != 0U)
 8011314:	7afb      	ldrb	r3, [r7, #11]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d11e      	bne.n	8011358 <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	88db      	ldrh	r3, [r3, #6]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d016      	beq.n	8011350 <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 8011322:	893b      	ldrh	r3, [r7, #8]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d00e      	beq.n	8011346 <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	88da      	ldrh	r2, [r3, #6]
 801132c:	893b      	ldrh	r3, [r7, #8]
 801132e:	4293      	cmp	r3, r2
 8011330:	bf28      	it	cs
 8011332:	4613      	movcs	r3, r2
 8011334:	b29b      	uxth	r3, r3
 8011336:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011338:	893b      	ldrh	r3, [r7, #8]
 801133a:	461a      	mov	r2, r3
 801133c:	68f9      	ldr	r1, [r7, #12]
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f000 fa43 	bl	80117ca <USBD_CtlSendData>
 8011344:	e009      	b.n	801135a <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011346:	6839      	ldr	r1, [r7, #0]
 8011348:	6878      	ldr	r0, [r7, #4]
 801134a:	f000 f9cd 	bl	80116e8 <USBD_CtlError>
 801134e:	e004      	b.n	801135a <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f000 fa94 	bl	801187e <USBD_CtlSendStatus>
 8011356:	e000      	b.n	801135a <USBD_GetDescriptor+0x346>
    return;
 8011358:	bf00      	nop
  }
}
 801135a:	3710      	adds	r7, #16
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}

08011360 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b084      	sub	sp, #16
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	889b      	ldrh	r3, [r3, #4]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d131      	bne.n	80113d6 <USBD_SetAddress+0x76>
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	88db      	ldrh	r3, [r3, #6]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d12d      	bne.n	80113d6 <USBD_SetAddress+0x76>
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	885b      	ldrh	r3, [r3, #2]
 801137e:	2b7f      	cmp	r3, #127	@ 0x7f
 8011380:	d829      	bhi.n	80113d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	885b      	ldrh	r3, [r3, #2]
 8011386:	b2db      	uxtb	r3, r3
 8011388:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801138c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011394:	b2db      	uxtb	r3, r3
 8011396:	2b03      	cmp	r3, #3
 8011398:	d104      	bne.n	80113a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801139a:	6839      	ldr	r1, [r7, #0]
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f000 f9a3 	bl	80116e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113a2:	e01d      	b.n	80113e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	7bfa      	ldrb	r2, [r7, #15]
 80113a8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80113ac:	7bfb      	ldrb	r3, [r7, #15]
 80113ae:	4619      	mov	r1, r3
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f000 fe4b 	bl	801204c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f000 fa61 	bl	801187e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80113bc:	7bfb      	ldrb	r3, [r7, #15]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d004      	beq.n	80113cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	2202      	movs	r2, #2
 80113c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113ca:	e009      	b.n	80113e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2201      	movs	r2, #1
 80113d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113d4:	e004      	b.n	80113e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80113d6:	6839      	ldr	r1, [r7, #0]
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f000 f985 	bl	80116e8 <USBD_CtlError>
  }
}
 80113de:	bf00      	nop
 80113e0:	bf00      	nop
 80113e2:	3710      	adds	r7, #16
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b084      	sub	sp, #16
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80113f2:	2300      	movs	r3, #0
 80113f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	885b      	ldrh	r3, [r3, #2]
 80113fa:	b2da      	uxtb	r2, r3
 80113fc:	4b4c      	ldr	r3, [pc, #304]	@ (8011530 <USBD_SetConfig+0x148>)
 80113fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011400:	4b4b      	ldr	r3, [pc, #300]	@ (8011530 <USBD_SetConfig+0x148>)
 8011402:	781b      	ldrb	r3, [r3, #0]
 8011404:	2b01      	cmp	r3, #1
 8011406:	d905      	bls.n	8011414 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011408:	6839      	ldr	r1, [r7, #0]
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f000 f96c 	bl	80116e8 <USBD_CtlError>
    return USBD_FAIL;
 8011410:	2303      	movs	r3, #3
 8011412:	e088      	b.n	8011526 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801141a:	b2db      	uxtb	r3, r3
 801141c:	2b02      	cmp	r3, #2
 801141e:	d002      	beq.n	8011426 <USBD_SetConfig+0x3e>
 8011420:	2b03      	cmp	r3, #3
 8011422:	d025      	beq.n	8011470 <USBD_SetConfig+0x88>
 8011424:	e071      	b.n	801150a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011426:	4b42      	ldr	r3, [pc, #264]	@ (8011530 <USBD_SetConfig+0x148>)
 8011428:	781b      	ldrb	r3, [r3, #0]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d01c      	beq.n	8011468 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801142e:	4b40      	ldr	r3, [pc, #256]	@ (8011530 <USBD_SetConfig+0x148>)
 8011430:	781b      	ldrb	r3, [r3, #0]
 8011432:	461a      	mov	r2, r3
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011438:	4b3d      	ldr	r3, [pc, #244]	@ (8011530 <USBD_SetConfig+0x148>)
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	4619      	mov	r1, r3
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f7ff f97f 	bl	8010742 <USBD_SetClassConfig>
 8011444:	4603      	mov	r3, r0
 8011446:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011448:	7bfb      	ldrb	r3, [r7, #15]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d004      	beq.n	8011458 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801144e:	6839      	ldr	r1, [r7, #0]
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f000 f949 	bl	80116e8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011456:	e065      	b.n	8011524 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f000 fa10 	bl	801187e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2203      	movs	r2, #3
 8011462:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011466:	e05d      	b.n	8011524 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f000 fa08 	bl	801187e <USBD_CtlSendStatus>
      break;
 801146e:	e059      	b.n	8011524 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011470:	4b2f      	ldr	r3, [pc, #188]	@ (8011530 <USBD_SetConfig+0x148>)
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d112      	bne.n	801149e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2202      	movs	r2, #2
 801147c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011480:	4b2b      	ldr	r3, [pc, #172]	@ (8011530 <USBD_SetConfig+0x148>)
 8011482:	781b      	ldrb	r3, [r3, #0]
 8011484:	461a      	mov	r2, r3
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801148a:	4b29      	ldr	r3, [pc, #164]	@ (8011530 <USBD_SetConfig+0x148>)
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	4619      	mov	r1, r3
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f7ff f972 	bl	801077a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f000 f9f1 	bl	801187e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801149c:	e042      	b.n	8011524 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801149e:	4b24      	ldr	r3, [pc, #144]	@ (8011530 <USBD_SetConfig+0x148>)
 80114a0:	781b      	ldrb	r3, [r3, #0]
 80114a2:	461a      	mov	r2, r3
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	429a      	cmp	r2, r3
 80114aa:	d02a      	beq.n	8011502 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	b2db      	uxtb	r3, r3
 80114b2:	4619      	mov	r1, r3
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f7ff f960 	bl	801077a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80114ba:	4b1d      	ldr	r3, [pc, #116]	@ (8011530 <USBD_SetConfig+0x148>)
 80114bc:	781b      	ldrb	r3, [r3, #0]
 80114be:	461a      	mov	r2, r3
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80114c4:	4b1a      	ldr	r3, [pc, #104]	@ (8011530 <USBD_SetConfig+0x148>)
 80114c6:	781b      	ldrb	r3, [r3, #0]
 80114c8:	4619      	mov	r1, r3
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f7ff f939 	bl	8010742 <USBD_SetClassConfig>
 80114d0:	4603      	mov	r3, r0
 80114d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80114d4:	7bfb      	ldrb	r3, [r7, #15]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d00f      	beq.n	80114fa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80114da:	6839      	ldr	r1, [r7, #0]
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f000 f903 	bl	80116e8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	685b      	ldr	r3, [r3, #4]
 80114e6:	b2db      	uxtb	r3, r3
 80114e8:	4619      	mov	r1, r3
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	f7ff f945 	bl	801077a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2202      	movs	r2, #2
 80114f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80114f8:	e014      	b.n	8011524 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80114fa:	6878      	ldr	r0, [r7, #4]
 80114fc:	f000 f9bf 	bl	801187e <USBD_CtlSendStatus>
      break;
 8011500:	e010      	b.n	8011524 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	f000 f9bb 	bl	801187e <USBD_CtlSendStatus>
      break;
 8011508:	e00c      	b.n	8011524 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801150a:	6839      	ldr	r1, [r7, #0]
 801150c:	6878      	ldr	r0, [r7, #4]
 801150e:	f000 f8eb 	bl	80116e8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011512:	4b07      	ldr	r3, [pc, #28]	@ (8011530 <USBD_SetConfig+0x148>)
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	4619      	mov	r1, r3
 8011518:	6878      	ldr	r0, [r7, #4]
 801151a:	f7ff f92e 	bl	801077a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801151e:	2303      	movs	r3, #3
 8011520:	73fb      	strb	r3, [r7, #15]
      break;
 8011522:	bf00      	nop
  }

  return ret;
 8011524:	7bfb      	ldrb	r3, [r7, #15]
}
 8011526:	4618      	mov	r0, r3
 8011528:	3710      	adds	r7, #16
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}
 801152e:	bf00      	nop
 8011530:	20000a0f 	.word	0x20000a0f

08011534 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b082      	sub	sp, #8
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
 801153c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	88db      	ldrh	r3, [r3, #6]
 8011542:	2b01      	cmp	r3, #1
 8011544:	d004      	beq.n	8011550 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011546:	6839      	ldr	r1, [r7, #0]
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f000 f8cd 	bl	80116e8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801154e:	e023      	b.n	8011598 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011556:	b2db      	uxtb	r3, r3
 8011558:	2b02      	cmp	r3, #2
 801155a:	dc02      	bgt.n	8011562 <USBD_GetConfig+0x2e>
 801155c:	2b00      	cmp	r3, #0
 801155e:	dc03      	bgt.n	8011568 <USBD_GetConfig+0x34>
 8011560:	e015      	b.n	801158e <USBD_GetConfig+0x5a>
 8011562:	2b03      	cmp	r3, #3
 8011564:	d00b      	beq.n	801157e <USBD_GetConfig+0x4a>
 8011566:	e012      	b.n	801158e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2200      	movs	r2, #0
 801156c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	3308      	adds	r3, #8
 8011572:	2201      	movs	r2, #1
 8011574:	4619      	mov	r1, r3
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f000 f927 	bl	80117ca <USBD_CtlSendData>
        break;
 801157c:	e00c      	b.n	8011598 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	3304      	adds	r3, #4
 8011582:	2201      	movs	r2, #1
 8011584:	4619      	mov	r1, r3
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f000 f91f 	bl	80117ca <USBD_CtlSendData>
        break;
 801158c:	e004      	b.n	8011598 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801158e:	6839      	ldr	r1, [r7, #0]
 8011590:	6878      	ldr	r0, [r7, #4]
 8011592:	f000 f8a9 	bl	80116e8 <USBD_CtlError>
        break;
 8011596:	bf00      	nop
}
 8011598:	bf00      	nop
 801159a:	3708      	adds	r7, #8
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}

080115a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b082      	sub	sp, #8
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
 80115a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80115b0:	b2db      	uxtb	r3, r3
 80115b2:	3b01      	subs	r3, #1
 80115b4:	2b02      	cmp	r3, #2
 80115b6:	d81e      	bhi.n	80115f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	88db      	ldrh	r3, [r3, #6]
 80115bc:	2b02      	cmp	r3, #2
 80115be:	d004      	beq.n	80115ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80115c0:	6839      	ldr	r1, [r7, #0]
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f000 f890 	bl	80116e8 <USBD_CtlError>
        break;
 80115c8:	e01a      	b.n	8011600 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	2201      	movs	r2, #1
 80115ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d005      	beq.n	80115e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	68db      	ldr	r3, [r3, #12]
 80115de:	f043 0202 	orr.w	r2, r3, #2
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	330c      	adds	r3, #12
 80115ea:	2202      	movs	r2, #2
 80115ec:	4619      	mov	r1, r3
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f000 f8eb 	bl	80117ca <USBD_CtlSendData>
      break;
 80115f4:	e004      	b.n	8011600 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80115f6:	6839      	ldr	r1, [r7, #0]
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f000 f875 	bl	80116e8 <USBD_CtlError>
      break;
 80115fe:	bf00      	nop
  }
}
 8011600:	bf00      	nop
 8011602:	3708      	adds	r7, #8
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}

08011608 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b082      	sub	sp, #8
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
 8011610:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	885b      	ldrh	r3, [r3, #2]
 8011616:	2b01      	cmp	r3, #1
 8011618:	d106      	bne.n	8011628 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	2201      	movs	r2, #1
 801161e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f000 f92b 	bl	801187e <USBD_CtlSendStatus>
  }
}
 8011628:	bf00      	nop
 801162a:	3708      	adds	r7, #8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}

08011630 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b082      	sub	sp, #8
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
 8011638:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011640:	b2db      	uxtb	r3, r3
 8011642:	3b01      	subs	r3, #1
 8011644:	2b02      	cmp	r3, #2
 8011646:	d80b      	bhi.n	8011660 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	885b      	ldrh	r3, [r3, #2]
 801164c:	2b01      	cmp	r3, #1
 801164e:	d10c      	bne.n	801166a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2200      	movs	r2, #0
 8011654:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011658:	6878      	ldr	r0, [r7, #4]
 801165a:	f000 f910 	bl	801187e <USBD_CtlSendStatus>
      }
      break;
 801165e:	e004      	b.n	801166a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011660:	6839      	ldr	r1, [r7, #0]
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f000 f840 	bl	80116e8 <USBD_CtlError>
      break;
 8011668:	e000      	b.n	801166c <USBD_ClrFeature+0x3c>
      break;
 801166a:	bf00      	nop
  }
}
 801166c:	bf00      	nop
 801166e:	3708      	adds	r7, #8
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}

08011674 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b084      	sub	sp, #16
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	781a      	ldrb	r2, [r3, #0]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	3301      	adds	r3, #1
 801168e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	781a      	ldrb	r2, [r3, #0]
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	3301      	adds	r3, #1
 801169c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801169e:	68f8      	ldr	r0, [r7, #12]
 80116a0:	f7ff fa7f 	bl	8010ba2 <SWAPBYTE>
 80116a4:	4603      	mov	r3, r0
 80116a6:	461a      	mov	r2, r3
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	3301      	adds	r3, #1
 80116b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	3301      	adds	r3, #1
 80116b6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80116b8:	68f8      	ldr	r0, [r7, #12]
 80116ba:	f7ff fa72 	bl	8010ba2 <SWAPBYTE>
 80116be:	4603      	mov	r3, r0
 80116c0:	461a      	mov	r2, r3
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	3301      	adds	r3, #1
 80116ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	3301      	adds	r3, #1
 80116d0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80116d2:	68f8      	ldr	r0, [r7, #12]
 80116d4:	f7ff fa65 	bl	8010ba2 <SWAPBYTE>
 80116d8:	4603      	mov	r3, r0
 80116da:	461a      	mov	r2, r3
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	80da      	strh	r2, [r3, #6]
}
 80116e0:	bf00      	nop
 80116e2:	3710      	adds	r7, #16
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}

080116e8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b082      	sub	sp, #8
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
 80116f0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80116f2:	2180      	movs	r1, #128	@ 0x80
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f000 fc3f 	bl	8011f78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80116fa:	2100      	movs	r1, #0
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f000 fc3b 	bl	8011f78 <USBD_LL_StallEP>
}
 8011702:	bf00      	nop
 8011704:	3708      	adds	r7, #8
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}

0801170a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801170a:	b580      	push	{r7, lr}
 801170c:	b086      	sub	sp, #24
 801170e:	af00      	add	r7, sp, #0
 8011710:	60f8      	str	r0, [r7, #12]
 8011712:	60b9      	str	r1, [r7, #8]
 8011714:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011716:	2300      	movs	r3, #0
 8011718:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d036      	beq.n	801178e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011724:	6938      	ldr	r0, [r7, #16]
 8011726:	f000 f836 	bl	8011796 <USBD_GetLen>
 801172a:	4603      	mov	r3, r0
 801172c:	3301      	adds	r3, #1
 801172e:	b29b      	uxth	r3, r3
 8011730:	005b      	lsls	r3, r3, #1
 8011732:	b29a      	uxth	r2, r3
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011738:	7dfb      	ldrb	r3, [r7, #23]
 801173a:	68ba      	ldr	r2, [r7, #8]
 801173c:	4413      	add	r3, r2
 801173e:	687a      	ldr	r2, [r7, #4]
 8011740:	7812      	ldrb	r2, [r2, #0]
 8011742:	701a      	strb	r2, [r3, #0]
  idx++;
 8011744:	7dfb      	ldrb	r3, [r7, #23]
 8011746:	3301      	adds	r3, #1
 8011748:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801174a:	7dfb      	ldrb	r3, [r7, #23]
 801174c:	68ba      	ldr	r2, [r7, #8]
 801174e:	4413      	add	r3, r2
 8011750:	2203      	movs	r2, #3
 8011752:	701a      	strb	r2, [r3, #0]
  idx++;
 8011754:	7dfb      	ldrb	r3, [r7, #23]
 8011756:	3301      	adds	r3, #1
 8011758:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801175a:	e013      	b.n	8011784 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801175c:	7dfb      	ldrb	r3, [r7, #23]
 801175e:	68ba      	ldr	r2, [r7, #8]
 8011760:	4413      	add	r3, r2
 8011762:	693a      	ldr	r2, [r7, #16]
 8011764:	7812      	ldrb	r2, [r2, #0]
 8011766:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	3301      	adds	r3, #1
 801176c:	613b      	str	r3, [r7, #16]
    idx++;
 801176e:	7dfb      	ldrb	r3, [r7, #23]
 8011770:	3301      	adds	r3, #1
 8011772:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011774:	7dfb      	ldrb	r3, [r7, #23]
 8011776:	68ba      	ldr	r2, [r7, #8]
 8011778:	4413      	add	r3, r2
 801177a:	2200      	movs	r2, #0
 801177c:	701a      	strb	r2, [r3, #0]
    idx++;
 801177e:	7dfb      	ldrb	r3, [r7, #23]
 8011780:	3301      	adds	r3, #1
 8011782:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011784:	693b      	ldr	r3, [r7, #16]
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d1e7      	bne.n	801175c <USBD_GetString+0x52>
 801178c:	e000      	b.n	8011790 <USBD_GetString+0x86>
    return;
 801178e:	bf00      	nop
  }
}
 8011790:	3718      	adds	r7, #24
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}

08011796 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011796:	b480      	push	{r7}
 8011798:	b085      	sub	sp, #20
 801179a:	af00      	add	r7, sp, #0
 801179c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801179e:	2300      	movs	r3, #0
 80117a0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80117a6:	e005      	b.n	80117b4 <USBD_GetLen+0x1e>
  {
    len++;
 80117a8:	7bfb      	ldrb	r3, [r7, #15]
 80117aa:	3301      	adds	r3, #1
 80117ac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80117ae:	68bb      	ldr	r3, [r7, #8]
 80117b0:	3301      	adds	r3, #1
 80117b2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80117b4:	68bb      	ldr	r3, [r7, #8]
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d1f5      	bne.n	80117a8 <USBD_GetLen+0x12>
  }

  return len;
 80117bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3714      	adds	r7, #20
 80117c2:	46bd      	mov	sp, r7
 80117c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c8:	4770      	bx	lr

080117ca <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80117ca:	b580      	push	{r7, lr}
 80117cc:	b084      	sub	sp, #16
 80117ce:	af00      	add	r7, sp, #0
 80117d0:	60f8      	str	r0, [r7, #12]
 80117d2:	60b9      	str	r1, [r7, #8]
 80117d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	2202      	movs	r2, #2
 80117da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	687a      	ldr	r2, [r7, #4]
 80117e8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	68ba      	ldr	r2, [r7, #8]
 80117ee:	2100      	movs	r1, #0
 80117f0:	68f8      	ldr	r0, [r7, #12]
 80117f2:	f000 fc4a 	bl	801208a <USBD_LL_Transmit>

  return USBD_OK;
 80117f6:	2300      	movs	r3, #0
}
 80117f8:	4618      	mov	r0, r3
 80117fa:	3710      	adds	r7, #16
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}

08011800 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b084      	sub	sp, #16
 8011804:	af00      	add	r7, sp, #0
 8011806:	60f8      	str	r0, [r7, #12]
 8011808:	60b9      	str	r1, [r7, #8]
 801180a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	68ba      	ldr	r2, [r7, #8]
 8011810:	2100      	movs	r1, #0
 8011812:	68f8      	ldr	r0, [r7, #12]
 8011814:	f000 fc39 	bl	801208a <USBD_LL_Transmit>

  return USBD_OK;
 8011818:	2300      	movs	r3, #0
}
 801181a:	4618      	mov	r0, r3
 801181c:	3710      	adds	r7, #16
 801181e:	46bd      	mov	sp, r7
 8011820:	bd80      	pop	{r7, pc}

08011822 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011822:	b580      	push	{r7, lr}
 8011824:	b084      	sub	sp, #16
 8011826:	af00      	add	r7, sp, #0
 8011828:	60f8      	str	r0, [r7, #12]
 801182a:	60b9      	str	r1, [r7, #8]
 801182c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	2203      	movs	r2, #3
 8011832:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	687a      	ldr	r2, [r7, #4]
 801183a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	687a      	ldr	r2, [r7, #4]
 8011842:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	68ba      	ldr	r2, [r7, #8]
 801184a:	2100      	movs	r1, #0
 801184c:	68f8      	ldr	r0, [r7, #12]
 801184e:	f000 fc3d 	bl	80120cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011852:	2300      	movs	r3, #0
}
 8011854:	4618      	mov	r0, r3
 8011856:	3710      	adds	r7, #16
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}

0801185c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	60f8      	str	r0, [r7, #12]
 8011864:	60b9      	str	r1, [r7, #8]
 8011866:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	68ba      	ldr	r2, [r7, #8]
 801186c:	2100      	movs	r1, #0
 801186e:	68f8      	ldr	r0, [r7, #12]
 8011870:	f000 fc2c 	bl	80120cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011874:	2300      	movs	r3, #0
}
 8011876:	4618      	mov	r0, r3
 8011878:	3710      	adds	r7, #16
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}

0801187e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801187e:	b580      	push	{r7, lr}
 8011880:	b082      	sub	sp, #8
 8011882:	af00      	add	r7, sp, #0
 8011884:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2204      	movs	r2, #4
 801188a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801188e:	2300      	movs	r3, #0
 8011890:	2200      	movs	r2, #0
 8011892:	2100      	movs	r1, #0
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f000 fbf8 	bl	801208a <USBD_LL_Transmit>

  return USBD_OK;
 801189a:	2300      	movs	r3, #0
}
 801189c:	4618      	mov	r0, r3
 801189e:	3708      	adds	r7, #8
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}

080118a4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b082      	sub	sp, #8
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2205      	movs	r2, #5
 80118b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80118b4:	2300      	movs	r3, #0
 80118b6:	2200      	movs	r2, #0
 80118b8:	2100      	movs	r1, #0
 80118ba:	6878      	ldr	r0, [r7, #4]
 80118bc:	f000 fc06 	bl	80120cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80118c0:	2300      	movs	r3, #0
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3708      	adds	r7, #8
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}
	...

080118cc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 80118d0:	2200      	movs	r2, #0
 80118d2:	4912      	ldr	r1, [pc, #72]	@ (801191c <MX_USB_Device_Init+0x50>)
 80118d4:	4812      	ldr	r0, [pc, #72]	@ (8011920 <MX_USB_Device_Init+0x54>)
 80118d6:	f7fe feab 	bl	8010630 <USBD_Init>
 80118da:	4603      	mov	r3, r0
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d001      	beq.n	80118e4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80118e0:	f7f0 ffd4 	bl	800288c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 80118e4:	490f      	ldr	r1, [pc, #60]	@ (8011924 <MX_USB_Device_Init+0x58>)
 80118e6:	480e      	ldr	r0, [pc, #56]	@ (8011920 <MX_USB_Device_Init+0x54>)
 80118e8:	f7fe fed2 	bl	8010690 <USBD_RegisterClass>
 80118ec:	4603      	mov	r3, r0
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d001      	beq.n	80118f6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80118f2:	f7f0 ffcb 	bl	800288c <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 80118f6:	490c      	ldr	r1, [pc, #48]	@ (8011928 <MX_USB_Device_Init+0x5c>)
 80118f8:	4809      	ldr	r0, [pc, #36]	@ (8011920 <MX_USB_Device_Init+0x54>)
 80118fa:	f7fe fb17 	bl	800ff2c <USBD_DFU_RegisterMedia>
 80118fe:	4603      	mov	r3, r0
 8011900:	2b00      	cmp	r3, #0
 8011902:	d001      	beq.n	8011908 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011904:	f7f0 ffc2 	bl	800288c <Error_Handler>
  }
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  if (USBD_LL_BatterryCharging(&hUsbDeviceFS) != USBD_OK) {
 8011908:	4805      	ldr	r0, [pc, #20]	@ (8011920 <MX_USB_Device_Init+0x54>)
 801190a:	f000 fc01 	bl	8012110 <USBD_LL_BatterryCharging>
 801190e:	4603      	mov	r3, r0
 8011910:	2b00      	cmp	r3, #0
 8011912:	d001      	beq.n	8011918 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011914:	f7f0 ffba 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011918:	bf00      	nop
 801191a:	bd80      	pop	{r7, pc}
 801191c:	20000074 	.word	0x20000074
 8011920:	20000a10 	.word	0x20000a10
 8011924:	20000010 	.word	0x20000010
 8011928:	200000c8 	.word	0x200000c8

0801192c <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801192c:	b480      	push	{r7}
 801192e:	b083      	sub	sp, #12
 8011930:	af00      	add	r7, sp, #0
 8011932:	4603      	mov	r3, r0
 8011934:	6039      	str	r1, [r7, #0]
 8011936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	2212      	movs	r2, #18
 801193c:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 801193e:	4b03      	ldr	r3, [pc, #12]	@ (801194c <USBD_DFU_DeviceDescriptor+0x20>)
}
 8011940:	4618      	mov	r0, r3
 8011942:	370c      	adds	r7, #12
 8011944:	46bd      	mov	sp, r7
 8011946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194a:	4770      	bx	lr
 801194c:	20000094 	.word	0x20000094

08011950 <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011950:	b480      	push	{r7}
 8011952:	b083      	sub	sp, #12
 8011954:	af00      	add	r7, sp, #0
 8011956:	4603      	mov	r3, r0
 8011958:	6039      	str	r1, [r7, #0]
 801195a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	2204      	movs	r2, #4
 8011960:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011962:	4b03      	ldr	r3, [pc, #12]	@ (8011970 <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 8011964:	4618      	mov	r0, r3
 8011966:	370c      	adds	r7, #12
 8011968:	46bd      	mov	sp, r7
 801196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196e:	4770      	bx	lr
 8011970:	200000a8 	.word	0x200000a8

08011974 <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b082      	sub	sp, #8
 8011978:	af00      	add	r7, sp, #0
 801197a:	4603      	mov	r3, r0
 801197c:	6039      	str	r1, [r7, #0]
 801197e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011980:	79fb      	ldrb	r3, [r7, #7]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d105      	bne.n	8011992 <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011986:	683a      	ldr	r2, [r7, #0]
 8011988:	4907      	ldr	r1, [pc, #28]	@ (80119a8 <USBD_DFU_ProductStrDescriptor+0x34>)
 801198a:	4808      	ldr	r0, [pc, #32]	@ (80119ac <USBD_DFU_ProductStrDescriptor+0x38>)
 801198c:	f7ff febd 	bl	801170a <USBD_GetString>
 8011990:	e004      	b.n	801199c <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011992:	683a      	ldr	r2, [r7, #0]
 8011994:	4904      	ldr	r1, [pc, #16]	@ (80119a8 <USBD_DFU_ProductStrDescriptor+0x34>)
 8011996:	4805      	ldr	r0, [pc, #20]	@ (80119ac <USBD_DFU_ProductStrDescriptor+0x38>)
 8011998:	f7ff feb7 	bl	801170a <USBD_GetString>
  }
  return USBD_StrDesc;
 801199c:	4b02      	ldr	r3, [pc, #8]	@ (80119a8 <USBD_DFU_ProductStrDescriptor+0x34>)
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3708      	adds	r7, #8
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}
 80119a6:	bf00      	nop
 80119a8:	20000ce0 	.word	0x20000ce0
 80119ac:	080161a4 	.word	0x080161a4

080119b0 <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b082      	sub	sp, #8
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	4603      	mov	r3, r0
 80119b8:	6039      	str	r1, [r7, #0]
 80119ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80119bc:	683a      	ldr	r2, [r7, #0]
 80119be:	4904      	ldr	r1, [pc, #16]	@ (80119d0 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 80119c0:	4804      	ldr	r0, [pc, #16]	@ (80119d4 <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 80119c2:	f7ff fea2 	bl	801170a <USBD_GetString>
  return USBD_StrDesc;
 80119c6:	4b02      	ldr	r3, [pc, #8]	@ (80119d0 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	3708      	adds	r7, #8
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}
 80119d0:	20000ce0 	.word	0x20000ce0
 80119d4:	080161c4 	.word	0x080161c4

080119d8 <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	4603      	mov	r3, r0
 80119e0:	6039      	str	r1, [r7, #0]
 80119e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	221a      	movs	r2, #26
 80119e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80119ea:	f000 f843 	bl	8011a74 <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80119ee:	4b02      	ldr	r3, [pc, #8]	@ (80119f8 <USBD_DFU_SerialStrDescriptor+0x20>)
}
 80119f0:	4618      	mov	r0, r3
 80119f2:	3708      	adds	r7, #8
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bd80      	pop	{r7, pc}
 80119f8:	200000ac 	.word	0x200000ac

080119fc <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b082      	sub	sp, #8
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	4603      	mov	r3, r0
 8011a04:	6039      	str	r1, [r7, #0]
 8011a06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011a08:	79fb      	ldrb	r3, [r7, #7]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d105      	bne.n	8011a1a <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011a0e:	683a      	ldr	r2, [r7, #0]
 8011a10:	4907      	ldr	r1, [pc, #28]	@ (8011a30 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8011a12:	4808      	ldr	r0, [pc, #32]	@ (8011a34 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8011a14:	f7ff fe79 	bl	801170a <USBD_GetString>
 8011a18:	e004      	b.n	8011a24 <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011a1a:	683a      	ldr	r2, [r7, #0]
 8011a1c:	4904      	ldr	r1, [pc, #16]	@ (8011a30 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8011a1e:	4805      	ldr	r0, [pc, #20]	@ (8011a34 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8011a20:	f7ff fe73 	bl	801170a <USBD_GetString>
  }
  return USBD_StrDesc;
 8011a24:	4b02      	ldr	r3, [pc, #8]	@ (8011a30 <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3708      	adds	r7, #8
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	20000ce0 	.word	0x20000ce0
 8011a34:	080161d8 	.word	0x080161d8

08011a38 <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b082      	sub	sp, #8
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	4603      	mov	r3, r0
 8011a40:	6039      	str	r1, [r7, #0]
 8011a42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011a44:	79fb      	ldrb	r3, [r7, #7]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d105      	bne.n	8011a56 <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011a4a:	683a      	ldr	r2, [r7, #0]
 8011a4c:	4907      	ldr	r1, [pc, #28]	@ (8011a6c <USBD_DFU_InterfaceStrDescriptor+0x34>)
 8011a4e:	4808      	ldr	r0, [pc, #32]	@ (8011a70 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8011a50:	f7ff fe5b 	bl	801170a <USBD_GetString>
 8011a54:	e004      	b.n	8011a60 <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011a56:	683a      	ldr	r2, [r7, #0]
 8011a58:	4904      	ldr	r1, [pc, #16]	@ (8011a6c <USBD_DFU_InterfaceStrDescriptor+0x34>)
 8011a5a:	4805      	ldr	r0, [pc, #20]	@ (8011a70 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8011a5c:	f7ff fe55 	bl	801170a <USBD_GetString>
  }
  return USBD_StrDesc;
 8011a60:	4b02      	ldr	r3, [pc, #8]	@ (8011a6c <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3708      	adds	r7, #8
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
 8011a6a:	bf00      	nop
 8011a6c:	20000ce0 	.word	0x20000ce0
 8011a70:	080161e4 	.word	0x080161e4

08011a74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b084      	sub	sp, #16
 8011a78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8011ab8 <Get_SerialNum+0x44>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011a80:	4b0e      	ldr	r3, [pc, #56]	@ (8011abc <Get_SerialNum+0x48>)
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011a86:	4b0e      	ldr	r3, [pc, #56]	@ (8011ac0 <Get_SerialNum+0x4c>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011a8c:	68fa      	ldr	r2, [r7, #12]
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	4413      	add	r3, r2
 8011a92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d009      	beq.n	8011aae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011a9a:	2208      	movs	r2, #8
 8011a9c:	4909      	ldr	r1, [pc, #36]	@ (8011ac4 <Get_SerialNum+0x50>)
 8011a9e:	68f8      	ldr	r0, [r7, #12]
 8011aa0:	f000 f814 	bl	8011acc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011aa4:	2204      	movs	r2, #4
 8011aa6:	4908      	ldr	r1, [pc, #32]	@ (8011ac8 <Get_SerialNum+0x54>)
 8011aa8:	68b8      	ldr	r0, [r7, #8]
 8011aaa:	f000 f80f 	bl	8011acc <IntToUnicode>
  }
}
 8011aae:	bf00      	nop
 8011ab0:	3710      	adds	r7, #16
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}
 8011ab6:	bf00      	nop
 8011ab8:	1fff7590 	.word	0x1fff7590
 8011abc:	1fff7594 	.word	0x1fff7594
 8011ac0:	1fff7598 	.word	0x1fff7598
 8011ac4:	200000ae 	.word	0x200000ae
 8011ac8:	200000be 	.word	0x200000be

08011acc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011acc:	b480      	push	{r7}
 8011ace:	b087      	sub	sp, #28
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	60f8      	str	r0, [r7, #12]
 8011ad4:	60b9      	str	r1, [r7, #8]
 8011ad6:	4613      	mov	r3, r2
 8011ad8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011ada:	2300      	movs	r3, #0
 8011adc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011ade:	2300      	movs	r3, #0
 8011ae0:	75fb      	strb	r3, [r7, #23]
 8011ae2:	e027      	b.n	8011b34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	0f1b      	lsrs	r3, r3, #28
 8011ae8:	2b09      	cmp	r3, #9
 8011aea:	d80b      	bhi.n	8011b04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	0f1b      	lsrs	r3, r3, #28
 8011af0:	b2da      	uxtb	r2, r3
 8011af2:	7dfb      	ldrb	r3, [r7, #23]
 8011af4:	005b      	lsls	r3, r3, #1
 8011af6:	4619      	mov	r1, r3
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	440b      	add	r3, r1
 8011afc:	3230      	adds	r2, #48	@ 0x30
 8011afe:	b2d2      	uxtb	r2, r2
 8011b00:	701a      	strb	r2, [r3, #0]
 8011b02:	e00a      	b.n	8011b1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	0f1b      	lsrs	r3, r3, #28
 8011b08:	b2da      	uxtb	r2, r3
 8011b0a:	7dfb      	ldrb	r3, [r7, #23]
 8011b0c:	005b      	lsls	r3, r3, #1
 8011b0e:	4619      	mov	r1, r3
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	440b      	add	r3, r1
 8011b14:	3237      	adds	r2, #55	@ 0x37
 8011b16:	b2d2      	uxtb	r2, r2
 8011b18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	011b      	lsls	r3, r3, #4
 8011b1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011b20:	7dfb      	ldrb	r3, [r7, #23]
 8011b22:	005b      	lsls	r3, r3, #1
 8011b24:	3301      	adds	r3, #1
 8011b26:	68ba      	ldr	r2, [r7, #8]
 8011b28:	4413      	add	r3, r2
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011b2e:	7dfb      	ldrb	r3, [r7, #23]
 8011b30:	3301      	adds	r3, #1
 8011b32:	75fb      	strb	r3, [r7, #23]
 8011b34:	7dfa      	ldrb	r2, [r7, #23]
 8011b36:	79fb      	ldrb	r3, [r7, #7]
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	d3d3      	bcc.n	8011ae4 <IntToUnicode+0x18>
  }
}
 8011b3c:	bf00      	nop
 8011b3e:	bf00      	nop
 8011b40:	371c      	adds	r7, #28
 8011b42:	46bd      	mov	sp, r7
 8011b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b48:	4770      	bx	lr

08011b4a <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 8011b4a:	b480      	push	{r7}
 8011b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8011b4e:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8011b50:	4618      	mov	r0, r3
 8011b52:	46bd      	mov	sp, r7
 8011b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b58:	4770      	bx	lr

08011b5a <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 8011b5a:	b480      	push	{r7}
 8011b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8011b5e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	46bd      	mov	sp, r7
 8011b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b68:	4770      	bx	lr

08011b6a <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 8011b6a:	b480      	push	{r7}
 8011b6c:	b083      	sub	sp, #12
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 8011b72:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8011b74:	4618      	mov	r0, r3
 8011b76:	370c      	adds	r7, #12
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7e:	4770      	bx	lr

08011b80 <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8011b80:	b480      	push	{r7}
 8011b82:	b085      	sub	sp, #20
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	60f8      	str	r0, [r7, #12]
 8011b88:	60b9      	str	r1, [r7, #8]
 8011b8a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8011b8c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011b8e:	4618      	mov	r0, r3
 8011b90:	3714      	adds	r7, #20
 8011b92:	46bd      	mov	sp, r7
 8011b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b98:	4770      	bx	lr

08011b9a <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8011b9a:	b480      	push	{r7}
 8011b9c:	b085      	sub	sp, #20
 8011b9e:	af00      	add	r7, sp, #0
 8011ba0:	60f8      	str	r0, [r7, #12]
 8011ba2:	60b9      	str	r1, [r7, #8]
 8011ba4:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 8011ba6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  /* USER CODE END 4 */
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	3714      	adds	r7, #20
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb4:	4770      	bx	lr

08011bb6 <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8011bb6:	b480      	push	{r7}
 8011bb8:	b085      	sub	sp, #20
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	60f8      	str	r0, [r7, #12]
 8011bbe:	460b      	mov	r3, r1
 8011bc0:	607a      	str	r2, [r7, #4]
 8011bc2:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8011bc4:	7afb      	ldrb	r3, [r7, #11]
 8011bc6:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8011bc8:	bf00      	nop
  }
  return (USBD_OK);
 8011bca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3714      	adds	r7, #20
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd6:	4770      	bx	lr

08011bd8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b098      	sub	sp, #96	@ 0x60
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011be0:	f107 0310 	add.w	r3, r7, #16
 8011be4:	2250      	movs	r2, #80	@ 0x50
 8011be6:	2100      	movs	r1, #0
 8011be8:	4618      	mov	r0, r3
 8011bea:	f001 fa3b 	bl	8013064 <memset>
  if(pcdHandle->Instance==USB)
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	4a15      	ldr	r2, [pc, #84]	@ (8011c48 <HAL_PCD_MspInit+0x70>)
 8011bf4:	4293      	cmp	r3, r2
 8011bf6:	d122      	bne.n	8011c3e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011bf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011bfc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011c02:	f107 0310 	add.w	r3, r7, #16
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7f7 feae 	bl	8009968 <HAL_RCCEx_PeriphCLKConfig>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d001      	beq.n	8011c16 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8011c12:	f7f0 fe3b 	bl	800288c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011c16:	4b0d      	ldr	r3, [pc, #52]	@ (8011c4c <HAL_PCD_MspInit+0x74>)
 8011c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8011c4c <HAL_PCD_MspInit+0x74>)
 8011c1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8011c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8011c22:	4b0a      	ldr	r3, [pc, #40]	@ (8011c4c <HAL_PCD_MspInit+0x74>)
 8011c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011c26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011c2a:	60fb      	str	r3, [r7, #12]
 8011c2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8011c2e:	2200      	movs	r2, #0
 8011c30:	2100      	movs	r1, #0
 8011c32:	2014      	movs	r0, #20
 8011c34:	f7f4 f856 	bl	8005ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011c38:	2014      	movs	r0, #20
 8011c3a:	f7f4 f86d 	bl	8005d18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8011c3e:	bf00      	nop
 8011c40:	3760      	adds	r7, #96	@ 0x60
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	40005c00 	.word	0x40005c00
 8011c4c:	40021000 	.word	0x40021000

08011c50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b082      	sub	sp, #8
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8011c64:	4619      	mov	r1, r3
 8011c66:	4610      	mov	r0, r2
 8011c68:	f7fe fd9f 	bl	80107aa <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8011c6c:	bf00      	nop
 8011c6e:	3708      	adds	r7, #8
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}

08011c74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b082      	sub	sp, #8
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
 8011c7c:	460b      	mov	r3, r1
 8011c7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8011c86:	78fa      	ldrb	r2, [r7, #3]
 8011c88:	6879      	ldr	r1, [r7, #4]
 8011c8a:	4613      	mov	r3, r2
 8011c8c:	009b      	lsls	r3, r3, #2
 8011c8e:	4413      	add	r3, r2
 8011c90:	00db      	lsls	r3, r3, #3
 8011c92:	440b      	add	r3, r1
 8011c94:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011c98:	681a      	ldr	r2, [r3, #0]
 8011c9a:	78fb      	ldrb	r3, [r7, #3]
 8011c9c:	4619      	mov	r1, r3
 8011c9e:	f7fe fdd9 	bl	8010854 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8011ca2:	bf00      	nop
 8011ca4:	3708      	adds	r7, #8
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}

08011caa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011caa:	b580      	push	{r7, lr}
 8011cac:	b082      	sub	sp, #8
 8011cae:	af00      	add	r7, sp, #0
 8011cb0:	6078      	str	r0, [r7, #4]
 8011cb2:	460b      	mov	r3, r1
 8011cb4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8011cbc:	78fa      	ldrb	r2, [r7, #3]
 8011cbe:	6879      	ldr	r1, [r7, #4]
 8011cc0:	4613      	mov	r3, r2
 8011cc2:	009b      	lsls	r3, r3, #2
 8011cc4:	4413      	add	r3, r2
 8011cc6:	00db      	lsls	r3, r3, #3
 8011cc8:	440b      	add	r3, r1
 8011cca:	3324      	adds	r3, #36	@ 0x24
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	78fb      	ldrb	r3, [r7, #3]
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	f7fe fe22 	bl	801091a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011cd6:	bf00      	nop
 8011cd8:	3708      	adds	r7, #8
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}

08011cde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cde:	b580      	push	{r7, lr}
 8011ce0:	b082      	sub	sp, #8
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7fe ff36 	bl	8010b5e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8011cf2:	bf00      	nop
 8011cf4:	3708      	adds	r7, #8
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}

08011cfa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cfa:	b580      	push	{r7, lr}
 8011cfc:	b084      	sub	sp, #16
 8011cfe:	af00      	add	r7, sp, #0
 8011d00:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011d02:	2301      	movs	r3, #1
 8011d04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	795b      	ldrb	r3, [r3, #5]
 8011d0a:	2b02      	cmp	r3, #2
 8011d0c:	d001      	beq.n	8011d12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011d0e:	f7f0 fdbd 	bl	800288c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011d18:	7bfa      	ldrb	r2, [r7, #15]
 8011d1a:	4611      	mov	r1, r2
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f7fe fee0 	bl	8010ae2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f7fe fe8c 	bl	8010a46 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8011d2e:	bf00      	nop
 8011d30:	3710      	adds	r7, #16
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
	...

08011d38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b082      	sub	sp, #8
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011d46:	4618      	mov	r0, r3
 8011d48:	f7fe fedb 	bl	8010b02 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	7a5b      	ldrb	r3, [r3, #9]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d005      	beq.n	8011d60 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011d54:	4b04      	ldr	r3, [pc, #16]	@ (8011d68 <HAL_PCD_SuspendCallback+0x30>)
 8011d56:	691b      	ldr	r3, [r3, #16]
 8011d58:	4a03      	ldr	r2, [pc, #12]	@ (8011d68 <HAL_PCD_SuspendCallback+0x30>)
 8011d5a:	f043 0306 	orr.w	r3, r3, #6
 8011d5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8011d60:	bf00      	nop
 8011d62:	3708      	adds	r7, #8
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}
 8011d68:	e000ed00 	.word	0xe000ed00

08011d6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b082      	sub	sp, #8
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	7a5b      	ldrb	r3, [r3, #9]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d007      	beq.n	8011d8c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011d7c:	4b08      	ldr	r3, [pc, #32]	@ (8011da0 <HAL_PCD_ResumeCallback+0x34>)
 8011d7e:	691b      	ldr	r3, [r3, #16]
 8011d80:	4a07      	ldr	r2, [pc, #28]	@ (8011da0 <HAL_PCD_ResumeCallback+0x34>)
 8011d82:	f023 0306 	bic.w	r3, r3, #6
 8011d86:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011d88:	f000 fa32 	bl	80121f0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011d92:	4618      	mov	r0, r3
 8011d94:	f7fe fecb 	bl	8010b2e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8011d98:	bf00      	nop
 8011d9a:	3708      	adds	r7, #8
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}
 8011da0:	e000ed00 	.word	0xe000ed00

08011da4 <HAL_PCDEx_BCD_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_BCDCallback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
#else
void HAL_PCDEx_BCD_Callback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b082      	sub	sp, #8
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
 8011dac:	460b      	mov	r3, r1
 8011dae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCDEx_BCD_Callback_PreTreatment */

  /* USER CODE END HAL_PCDEx_BCD_Callback_PreTreatment */
  switch(msg)
 8011db0:	78fb      	ldrb	r3, [r7, #3]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d026      	beq.n	8011e04 <HAL_PCDEx_BCD_Callback+0x60>
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	db34      	blt.n	8011e24 <HAL_PCDEx_BCD_Callback+0x80>
 8011dba:	2bff      	cmp	r3, #255	@ 0xff
 8011dbc:	dc32      	bgt.n	8011e24 <HAL_PCDEx_BCD_Callback+0x80>
 8011dbe:	2bfb      	cmp	r3, #251	@ 0xfb
 8011dc0:	db30      	blt.n	8011e24 <HAL_PCDEx_BCD_Callback+0x80>
 8011dc2:	3bfb      	subs	r3, #251	@ 0xfb
 8011dc4:	2b04      	cmp	r3, #4
 8011dc6:	d82d      	bhi.n	8011e24 <HAL_PCDEx_BCD_Callback+0x80>
 8011dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8011dd0 <HAL_PCDEx_BCD_Callback+0x2c>)
 8011dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dce:	bf00      	nop
 8011dd0:	08011dfd 	.word	0x08011dfd
 8011dd4:	08011df5 	.word	0x08011df5
 8011dd8:	08011ded 	.word	0x08011ded
 8011ddc:	08011de5 	.word	0x08011de5
 8011de0:	08011e1f 	.word	0x08011e1f
  {
    case PCD_BCD_CONTACT_DETECTION:
      USBD_BCD_PortState = USB_BCD_CONTACT_DETECTION;
 8011de4:	4b12      	ldr	r3, [pc, #72]	@ (8011e30 <HAL_PCDEx_BCD_Callback+0x8c>)
 8011de6:	22fe      	movs	r2, #254	@ 0xfe
 8011de8:	701a      	strb	r2, [r3, #0]
    break;
 8011dea:	e01c      	b.n	8011e26 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_STD_DOWNSTREAM_PORT:
      USBD_BCD_PortState = USB_BCD_STD_DOWNSTREAM_PORT;
 8011dec:	4b10      	ldr	r3, [pc, #64]	@ (8011e30 <HAL_PCDEx_BCD_Callback+0x8c>)
 8011dee:	22fd      	movs	r2, #253	@ 0xfd
 8011df0:	701a      	strb	r2, [r3, #0]
    break;
 8011df2:	e018      	b.n	8011e26 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_CHARGING_DOWNSTREAM_PORT:
      USBD_BCD_PortState = USB_BCD_CHARGING_DOWNSTREAM_PORT;
 8011df4:	4b0e      	ldr	r3, [pc, #56]	@ (8011e30 <HAL_PCDEx_BCD_Callback+0x8c>)
 8011df6:	22fc      	movs	r2, #252	@ 0xfc
 8011df8:	701a      	strb	r2, [r3, #0]
    break;
 8011dfa:	e014      	b.n	8011e26 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_DEDICATED_CHARGING_PORT:
      USBD_BCD_PortState = USB_BCD_DEDICATED_CHARGING_PORT;
 8011dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8011e30 <HAL_PCDEx_BCD_Callback+0x8c>)
 8011dfe:	22fb      	movs	r2, #251	@ 0xfb
 8011e00:	701a      	strb	r2, [r3, #0]
    break;
 8011e02:	e010      	b.n	8011e26 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_DISCOVERY_COMPLETED:
      HAL_Delay(20);
 8011e04:	2014      	movs	r0, #20
 8011e06:	f7f2 fd7f 	bl	8004908 <HAL_Delay>
      /* Start USB */
      USBD_Start(hpcd->pData);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7fe fc64 	bl	80106de <USBD_Start>
      USBD_BCD_PortState = USB_BCD_DISCOVERY_COMPLETED;
 8011e16:	4b06      	ldr	r3, [pc, #24]	@ (8011e30 <HAL_PCDEx_BCD_Callback+0x8c>)
 8011e18:	22fa      	movs	r2, #250	@ 0xfa
 8011e1a:	701a      	strb	r2, [r3, #0]
    break;
 8011e1c:	e003      	b.n	8011e26 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_ERROR:
      Error_Handler();
 8011e1e:	f7f0 fd35 	bl	800288c <Error_Handler>
    break;
 8011e22:	e000      	b.n	8011e26 <HAL_PCDEx_BCD_Callback+0x82>

    default:
    break;
 8011e24:	bf00      	nop
  }
  /* USER CODE BEGIN HAL_PCDEx_BCD_Callback_PostTreatment */

  /* USER CODE END HAL_PCDEx_BCD_Callback_PostTreatment */
}
 8011e26:	bf00      	nop
 8011e28:	3708      	adds	r7, #8
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	bd80      	pop	{r7, pc}
 8011e2e:	bf00      	nop
 8011e30:	20000ee0 	.word	0x20000ee0

08011e34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b082      	sub	sp, #8
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8011eb8 <USBD_LL_Init+0x84>)
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	4a1c      	ldr	r2, [pc, #112]	@ (8011eb8 <USBD_LL_Init+0x84>)
 8011e48:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8011e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8011eb8 <USBD_LL_Init+0x84>)
 8011e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8011ebc <USBD_LL_Init+0x88>)
 8011e50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011e52:	4b19      	ldr	r3, [pc, #100]	@ (8011eb8 <USBD_LL_Init+0x84>)
 8011e54:	2208      	movs	r2, #8
 8011e56:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011e58:	4b17      	ldr	r3, [pc, #92]	@ (8011eb8 <USBD_LL_Init+0x84>)
 8011e5a:	2202      	movs	r2, #2
 8011e5c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011e5e:	4b16      	ldr	r3, [pc, #88]	@ (8011eb8 <USBD_LL_Init+0x84>)
 8011e60:	2202      	movs	r2, #2
 8011e62:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011e64:	4b14      	ldr	r3, [pc, #80]	@ (8011eb8 <USBD_LL_Init+0x84>)
 8011e66:	2200      	movs	r2, #0
 8011e68:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011e6a:	4b13      	ldr	r3, [pc, #76]	@ (8011eb8 <USBD_LL_Init+0x84>)
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011e70:	4b11      	ldr	r3, [pc, #68]	@ (8011eb8 <USBD_LL_Init+0x84>)
 8011e72:	2200      	movs	r2, #0
 8011e74:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = ENABLE;
 8011e76:	4b10      	ldr	r3, [pc, #64]	@ (8011eb8 <USBD_LL_Init+0x84>)
 8011e78:	2201      	movs	r2, #1
 8011e7a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011e7c:	480e      	ldr	r0, [pc, #56]	@ (8011eb8 <USBD_LL_Init+0x84>)
 8011e7e:	f7f5 f8ec 	bl	800705a <HAL_PCD_Init>
 8011e82:	4603      	mov	r3, r0
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d001      	beq.n	8011e8c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8011e88:	f7f0 fd00 	bl	800288c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8011e92:	2318      	movs	r3, #24
 8011e94:	2200      	movs	r2, #0
 8011e96:	2100      	movs	r1, #0
 8011e98:	f7f6 fd35 	bl	8008906 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8011ea2:	2358      	movs	r3, #88	@ 0x58
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	2180      	movs	r1, #128	@ 0x80
 8011ea8:	f7f6 fd2d 	bl	8008906 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 8011eac:	2300      	movs	r3, #0
}
 8011eae:	4618      	mov	r0, r3
 8011eb0:	3708      	adds	r7, #8
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd80      	pop	{r7, pc}
 8011eb6:	bf00      	nop
 8011eb8:	20000ee4 	.word	0x20000ee4
 8011ebc:	40005c00 	.word	0x40005c00

08011ec0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b084      	sub	sp, #16
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ecc:	2300      	movs	r3, #0
 8011ece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7f5 f98d 	bl	80071f6 <HAL_PCD_Start>
 8011edc:	4603      	mov	r3, r0
 8011ede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ee0:	7bfb      	ldrb	r3, [r7, #15]
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f000 f98a 	bl	80121fc <USBD_Get_USB_Status>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011eec:	7bbb      	ldrb	r3, [r7, #14]
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	3710      	adds	r7, #16
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}

08011ef6 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8011ef6:	b580      	push	{r7, lr}
 8011ef8:	b084      	sub	sp, #16
 8011efa:	af00      	add	r7, sp, #0
 8011efc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011efe:	2300      	movs	r3, #0
 8011f00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f02:	2300      	movs	r3, #0
 8011f04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f7f5 f994 	bl	800723a <HAL_PCD_Stop>
 8011f12:	4603      	mov	r3, r0
 8011f14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f16:	7bfb      	ldrb	r3, [r7, #15]
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f000 f96f 	bl	80121fc <USBD_Get_USB_Status>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f22:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f24:	4618      	mov	r0, r3
 8011f26:	3710      	adds	r7, #16
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}

08011f2c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b084      	sub	sp, #16
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	4608      	mov	r0, r1
 8011f36:	4611      	mov	r1, r2
 8011f38:	461a      	mov	r2, r3
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	70fb      	strb	r3, [r7, #3]
 8011f3e:	460b      	mov	r3, r1
 8011f40:	70bb      	strb	r3, [r7, #2]
 8011f42:	4613      	mov	r3, r2
 8011f44:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f46:	2300      	movs	r3, #0
 8011f48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8011f54:	78bb      	ldrb	r3, [r7, #2]
 8011f56:	883a      	ldrh	r2, [r7, #0]
 8011f58:	78f9      	ldrb	r1, [r7, #3]
 8011f5a:	f7f5 fadb 	bl	8007514 <HAL_PCD_EP_Open>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f62:	7bfb      	ldrb	r3, [r7, #15]
 8011f64:	4618      	mov	r0, r3
 8011f66:	f000 f949 	bl	80121fc <USBD_Get_USB_Status>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	3710      	adds	r7, #16
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}

08011f78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b084      	sub	sp, #16
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	460b      	mov	r3, r1
 8011f82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f84:	2300      	movs	r3, #0
 8011f86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f88:	2300      	movs	r3, #0
 8011f8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011f92:	78fa      	ldrb	r2, [r7, #3]
 8011f94:	4611      	mov	r1, r2
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7f5 fb83 	bl	80076a2 <HAL_PCD_EP_SetStall>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011fa0:	7bfb      	ldrb	r3, [r7, #15]
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f000 f92a 	bl	80121fc <USBD_Get_USB_Status>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011fac:	7bbb      	ldrb	r3, [r7, #14]
}
 8011fae:	4618      	mov	r0, r3
 8011fb0:	3710      	adds	r7, #16
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd80      	pop	{r7, pc}

08011fb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011fb6:	b580      	push	{r7, lr}
 8011fb8:	b084      	sub	sp, #16
 8011fba:	af00      	add	r7, sp, #0
 8011fbc:	6078      	str	r0, [r7, #4]
 8011fbe:	460b      	mov	r3, r1
 8011fc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011fd0:	78fa      	ldrb	r2, [r7, #3]
 8011fd2:	4611      	mov	r1, r2
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7f5 fbb6 	bl	8007746 <HAL_PCD_EP_ClrStall>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011fde:	7bfb      	ldrb	r3, [r7, #15]
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f000 f90b 	bl	80121fc <USBD_Get_USB_Status>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011fea:	7bbb      	ldrb	r3, [r7, #14]
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	3710      	adds	r7, #16
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}

08011ff4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	b085      	sub	sp, #20
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	460b      	mov	r3, r1
 8011ffe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012006:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801200c:	2b00      	cmp	r3, #0
 801200e:	da0b      	bge.n	8012028 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012010:	78fb      	ldrb	r3, [r7, #3]
 8012012:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012016:	68f9      	ldr	r1, [r7, #12]
 8012018:	4613      	mov	r3, r2
 801201a:	009b      	lsls	r3, r3, #2
 801201c:	4413      	add	r3, r2
 801201e:	00db      	lsls	r3, r3, #3
 8012020:	440b      	add	r3, r1
 8012022:	3312      	adds	r3, #18
 8012024:	781b      	ldrb	r3, [r3, #0]
 8012026:	e00b      	b.n	8012040 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012028:	78fb      	ldrb	r3, [r7, #3]
 801202a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801202e:	68f9      	ldr	r1, [r7, #12]
 8012030:	4613      	mov	r3, r2
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	4413      	add	r3, r2
 8012036:	00db      	lsls	r3, r3, #3
 8012038:	440b      	add	r3, r1
 801203a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 801203e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012040:	4618      	mov	r0, r3
 8012042:	3714      	adds	r7, #20
 8012044:	46bd      	mov	sp, r7
 8012046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204a:	4770      	bx	lr

0801204c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b084      	sub	sp, #16
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
 8012054:	460b      	mov	r3, r1
 8012056:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012058:	2300      	movs	r3, #0
 801205a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801205c:	2300      	movs	r3, #0
 801205e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012066:	78fa      	ldrb	r2, [r7, #3]
 8012068:	4611      	mov	r1, r2
 801206a:	4618      	mov	r0, r3
 801206c:	f7f5 fa2e 	bl	80074cc <HAL_PCD_SetAddress>
 8012070:	4603      	mov	r3, r0
 8012072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012074:	7bfb      	ldrb	r3, [r7, #15]
 8012076:	4618      	mov	r0, r3
 8012078:	f000 f8c0 	bl	80121fc <USBD_Get_USB_Status>
 801207c:	4603      	mov	r3, r0
 801207e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012080:	7bbb      	ldrb	r3, [r7, #14]
}
 8012082:	4618      	mov	r0, r3
 8012084:	3710      	adds	r7, #16
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}

0801208a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801208a:	b580      	push	{r7, lr}
 801208c:	b086      	sub	sp, #24
 801208e:	af00      	add	r7, sp, #0
 8012090:	60f8      	str	r0, [r7, #12]
 8012092:	607a      	str	r2, [r7, #4]
 8012094:	603b      	str	r3, [r7, #0]
 8012096:	460b      	mov	r3, r1
 8012098:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801209a:	2300      	movs	r3, #0
 801209c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801209e:	2300      	movs	r3, #0
 80120a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80120a8:	7af9      	ldrb	r1, [r7, #11]
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	687a      	ldr	r2, [r7, #4]
 80120ae:	f7f5 fac1 	bl	8007634 <HAL_PCD_EP_Transmit>
 80120b2:	4603      	mov	r3, r0
 80120b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120b6:	7dfb      	ldrb	r3, [r7, #23]
 80120b8:	4618      	mov	r0, r3
 80120ba:	f000 f89f 	bl	80121fc <USBD_Get_USB_Status>
 80120be:	4603      	mov	r3, r0
 80120c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80120c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	3718      	adds	r7, #24
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}

080120cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b086      	sub	sp, #24
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	60f8      	str	r0, [r7, #12]
 80120d4:	607a      	str	r2, [r7, #4]
 80120d6:	603b      	str	r3, [r7, #0]
 80120d8:	460b      	mov	r3, r1
 80120da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120dc:	2300      	movs	r3, #0
 80120de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120e0:	2300      	movs	r3, #0
 80120e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80120ea:	7af9      	ldrb	r1, [r7, #11]
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	687a      	ldr	r2, [r7, #4]
 80120f0:	f7f5 fa6f 	bl	80075d2 <HAL_PCD_EP_Receive>
 80120f4:	4603      	mov	r3, r0
 80120f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120f8:	7dfb      	ldrb	r3, [r7, #23]
 80120fa:	4618      	mov	r0, r3
 80120fc:	f000 f87e 	bl	80121fc <USBD_Get_USB_Status>
 8012100:	4603      	mov	r3, r0
 8012102:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012104:	7dbb      	ldrb	r3, [r7, #22]
}
 8012106:	4618      	mov	r0, r3
 8012108:	3718      	adds	r7, #24
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
	...

08012110 <USBD_LL_BatterryCharging>:
  * @brief
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatterryCharging(USBD_HandleTypeDef *pdev)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b082      	sub	sp, #8
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1) == GPIO_PIN_SET)
 8012118:	2102      	movs	r1, #2
 801211a:	480d      	ldr	r0, [pc, #52]	@ (8012150 <USBD_LL_BatterryCharging+0x40>)
 801211c:	f7f4 fab2 	bl	8006684 <HAL_GPIO_ReadPin>
 8012120:	4603      	mov	r3, r0
 8012122:	2b01      	cmp	r3, #1
 8012124:	d10f      	bne.n	8012146 <USBD_LL_BatterryCharging+0x36>
  {
    /*wait for bus stabilization*/
    HAL_Delay(450);
 8012126:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 801212a:	f7f2 fbed 	bl	8004908 <HAL_Delay>
    /*Start BCD Detect*/
    HAL_PCDEx_ActivateBCD (pdev->pData);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012134:	4618      	mov	r0, r3
 8012136:	f7f6 fc29 	bl	800898c <HAL_PCDEx_ActivateBCD>
    HAL_PCDEx_BCD_VBUSDetect(pdev->pData);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012140:	4618      	mov	r0, r3
 8012142:	f7f6 fc79 	bl	8008a38 <HAL_PCDEx_BCD_VBUSDetect>
  }
  return USBD_OK;
 8012146:	2300      	movs	r3, #0
}
 8012148:	4618      	mov	r0, r3
 801214a:	3708      	adds	r7, #8
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}
 8012150:	48001400 	.word	0x48001400

08012154 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b082      	sub	sp, #8
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
 801215c:	460b      	mov	r3, r1
 801215e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8012160:	78fb      	ldrb	r3, [r7, #3]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d002      	beq.n	801216c <HAL_PCDEx_LPM_Callback+0x18>
 8012166:	2b01      	cmp	r3, #1
 8012168:	d013      	beq.n	8012192 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801216a:	e023      	b.n	80121b4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	7a5b      	ldrb	r3, [r3, #9]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d007      	beq.n	8012184 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012174:	f000 f83c 	bl	80121f0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012178:	4b10      	ldr	r3, [pc, #64]	@ (80121bc <HAL_PCDEx_LPM_Callback+0x68>)
 801217a:	691b      	ldr	r3, [r3, #16]
 801217c:	4a0f      	ldr	r2, [pc, #60]	@ (80121bc <HAL_PCDEx_LPM_Callback+0x68>)
 801217e:	f023 0306 	bic.w	r3, r3, #6
 8012182:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801218a:	4618      	mov	r0, r3
 801218c:	f7fe fccf 	bl	8010b2e <USBD_LL_Resume>
    break;
 8012190:	e010      	b.n	80121b4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012198:	4618      	mov	r0, r3
 801219a:	f7fe fcb2 	bl	8010b02 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	7a5b      	ldrb	r3, [r3, #9]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d005      	beq.n	80121b2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80121a6:	4b05      	ldr	r3, [pc, #20]	@ (80121bc <HAL_PCDEx_LPM_Callback+0x68>)
 80121a8:	691b      	ldr	r3, [r3, #16]
 80121aa:	4a04      	ldr	r2, [pc, #16]	@ (80121bc <HAL_PCDEx_LPM_Callback+0x68>)
 80121ac:	f043 0306 	orr.w	r3, r3, #6
 80121b0:	6113      	str	r3, [r2, #16]
    break;
 80121b2:	bf00      	nop
}
 80121b4:	bf00      	nop
 80121b6:	3708      	adds	r7, #8
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}
 80121bc:	e000ed00 	.word	0xe000ed00

080121c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80121c0:	b480      	push	{r7}
 80121c2:	b083      	sub	sp, #12
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80121c8:	4b03      	ldr	r3, [pc, #12]	@ (80121d8 <USBD_static_malloc+0x18>)
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	370c      	adds	r7, #12
 80121ce:	46bd      	mov	sp, r7
 80121d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d4:	4770      	bx	lr
 80121d6:	bf00      	nop
 80121d8:	200011c0 	.word	0x200011c0

080121dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80121dc:	b480      	push	{r7}
 80121de:	b083      	sub	sp, #12
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]

}
 80121e4:	bf00      	nop
 80121e6:	370c      	adds	r7, #12
 80121e8:	46bd      	mov	sp, r7
 80121ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ee:	4770      	bx	lr

080121f0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80121f4:	f7ef fc84 	bl	8001b00 <SystemClock_Config>
}
 80121f8:	bf00      	nop
 80121fa:	bd80      	pop	{r7, pc}

080121fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80121fc:	b480      	push	{r7}
 80121fe:	b085      	sub	sp, #20
 8012200:	af00      	add	r7, sp, #0
 8012202:	4603      	mov	r3, r0
 8012204:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012206:	2300      	movs	r3, #0
 8012208:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801220a:	79fb      	ldrb	r3, [r7, #7]
 801220c:	2b03      	cmp	r3, #3
 801220e:	d817      	bhi.n	8012240 <USBD_Get_USB_Status+0x44>
 8012210:	a201      	add	r2, pc, #4	@ (adr r2, 8012218 <USBD_Get_USB_Status+0x1c>)
 8012212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012216:	bf00      	nop
 8012218:	08012229 	.word	0x08012229
 801221c:	0801222f 	.word	0x0801222f
 8012220:	08012235 	.word	0x08012235
 8012224:	0801223b 	.word	0x0801223b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012228:	2300      	movs	r3, #0
 801222a:	73fb      	strb	r3, [r7, #15]
    break;
 801222c:	e00b      	b.n	8012246 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801222e:	2303      	movs	r3, #3
 8012230:	73fb      	strb	r3, [r7, #15]
    break;
 8012232:	e008      	b.n	8012246 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012234:	2301      	movs	r3, #1
 8012236:	73fb      	strb	r3, [r7, #15]
    break;
 8012238:	e005      	b.n	8012246 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801223a:	2303      	movs	r3, #3
 801223c:	73fb      	strb	r3, [r7, #15]
    break;
 801223e:	e002      	b.n	8012246 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012240:	2303      	movs	r3, #3
 8012242:	73fb      	strb	r3, [r7, #15]
    break;
 8012244:	bf00      	nop
  }
  return usb_status;
 8012246:	7bfb      	ldrb	r3, [r7, #15]
}
 8012248:	4618      	mov	r0, r3
 801224a:	3714      	adds	r7, #20
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr

08012254 <__cvt>:
 8012254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012258:	ec57 6b10 	vmov	r6, r7, d0
 801225c:	2f00      	cmp	r7, #0
 801225e:	460c      	mov	r4, r1
 8012260:	4619      	mov	r1, r3
 8012262:	463b      	mov	r3, r7
 8012264:	bfbb      	ittet	lt
 8012266:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801226a:	461f      	movlt	r7, r3
 801226c:	2300      	movge	r3, #0
 801226e:	232d      	movlt	r3, #45	@ 0x2d
 8012270:	700b      	strb	r3, [r1, #0]
 8012272:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012274:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012278:	4691      	mov	r9, r2
 801227a:	f023 0820 	bic.w	r8, r3, #32
 801227e:	bfbc      	itt	lt
 8012280:	4632      	movlt	r2, r6
 8012282:	4616      	movlt	r6, r2
 8012284:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012288:	d005      	beq.n	8012296 <__cvt+0x42>
 801228a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801228e:	d100      	bne.n	8012292 <__cvt+0x3e>
 8012290:	3401      	adds	r4, #1
 8012292:	2102      	movs	r1, #2
 8012294:	e000      	b.n	8012298 <__cvt+0x44>
 8012296:	2103      	movs	r1, #3
 8012298:	ab03      	add	r3, sp, #12
 801229a:	9301      	str	r3, [sp, #4]
 801229c:	ab02      	add	r3, sp, #8
 801229e:	9300      	str	r3, [sp, #0]
 80122a0:	ec47 6b10 	vmov	d0, r6, r7
 80122a4:	4653      	mov	r3, sl
 80122a6:	4622      	mov	r2, r4
 80122a8:	f000 ffd6 	bl	8013258 <_dtoa_r>
 80122ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80122b0:	4605      	mov	r5, r0
 80122b2:	d119      	bne.n	80122e8 <__cvt+0x94>
 80122b4:	f019 0f01 	tst.w	r9, #1
 80122b8:	d00e      	beq.n	80122d8 <__cvt+0x84>
 80122ba:	eb00 0904 	add.w	r9, r0, r4
 80122be:	2200      	movs	r2, #0
 80122c0:	2300      	movs	r3, #0
 80122c2:	4630      	mov	r0, r6
 80122c4:	4639      	mov	r1, r7
 80122c6:	f7ee fc27 	bl	8000b18 <__aeabi_dcmpeq>
 80122ca:	b108      	cbz	r0, 80122d0 <__cvt+0x7c>
 80122cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80122d0:	2230      	movs	r2, #48	@ 0x30
 80122d2:	9b03      	ldr	r3, [sp, #12]
 80122d4:	454b      	cmp	r3, r9
 80122d6:	d31e      	bcc.n	8012316 <__cvt+0xc2>
 80122d8:	9b03      	ldr	r3, [sp, #12]
 80122da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80122dc:	1b5b      	subs	r3, r3, r5
 80122de:	4628      	mov	r0, r5
 80122e0:	6013      	str	r3, [r2, #0]
 80122e2:	b004      	add	sp, #16
 80122e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80122ec:	eb00 0904 	add.w	r9, r0, r4
 80122f0:	d1e5      	bne.n	80122be <__cvt+0x6a>
 80122f2:	7803      	ldrb	r3, [r0, #0]
 80122f4:	2b30      	cmp	r3, #48	@ 0x30
 80122f6:	d10a      	bne.n	801230e <__cvt+0xba>
 80122f8:	2200      	movs	r2, #0
 80122fa:	2300      	movs	r3, #0
 80122fc:	4630      	mov	r0, r6
 80122fe:	4639      	mov	r1, r7
 8012300:	f7ee fc0a 	bl	8000b18 <__aeabi_dcmpeq>
 8012304:	b918      	cbnz	r0, 801230e <__cvt+0xba>
 8012306:	f1c4 0401 	rsb	r4, r4, #1
 801230a:	f8ca 4000 	str.w	r4, [sl]
 801230e:	f8da 3000 	ldr.w	r3, [sl]
 8012312:	4499      	add	r9, r3
 8012314:	e7d3      	b.n	80122be <__cvt+0x6a>
 8012316:	1c59      	adds	r1, r3, #1
 8012318:	9103      	str	r1, [sp, #12]
 801231a:	701a      	strb	r2, [r3, #0]
 801231c:	e7d9      	b.n	80122d2 <__cvt+0x7e>

0801231e <__exponent>:
 801231e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012320:	2900      	cmp	r1, #0
 8012322:	bfba      	itte	lt
 8012324:	4249      	neglt	r1, r1
 8012326:	232d      	movlt	r3, #45	@ 0x2d
 8012328:	232b      	movge	r3, #43	@ 0x2b
 801232a:	2909      	cmp	r1, #9
 801232c:	7002      	strb	r2, [r0, #0]
 801232e:	7043      	strb	r3, [r0, #1]
 8012330:	dd29      	ble.n	8012386 <__exponent+0x68>
 8012332:	f10d 0307 	add.w	r3, sp, #7
 8012336:	461d      	mov	r5, r3
 8012338:	270a      	movs	r7, #10
 801233a:	461a      	mov	r2, r3
 801233c:	fbb1 f6f7 	udiv	r6, r1, r7
 8012340:	fb07 1416 	mls	r4, r7, r6, r1
 8012344:	3430      	adds	r4, #48	@ 0x30
 8012346:	f802 4c01 	strb.w	r4, [r2, #-1]
 801234a:	460c      	mov	r4, r1
 801234c:	2c63      	cmp	r4, #99	@ 0x63
 801234e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8012352:	4631      	mov	r1, r6
 8012354:	dcf1      	bgt.n	801233a <__exponent+0x1c>
 8012356:	3130      	adds	r1, #48	@ 0x30
 8012358:	1e94      	subs	r4, r2, #2
 801235a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801235e:	1c41      	adds	r1, r0, #1
 8012360:	4623      	mov	r3, r4
 8012362:	42ab      	cmp	r3, r5
 8012364:	d30a      	bcc.n	801237c <__exponent+0x5e>
 8012366:	f10d 0309 	add.w	r3, sp, #9
 801236a:	1a9b      	subs	r3, r3, r2
 801236c:	42ac      	cmp	r4, r5
 801236e:	bf88      	it	hi
 8012370:	2300      	movhi	r3, #0
 8012372:	3302      	adds	r3, #2
 8012374:	4403      	add	r3, r0
 8012376:	1a18      	subs	r0, r3, r0
 8012378:	b003      	add	sp, #12
 801237a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801237c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012380:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012384:	e7ed      	b.n	8012362 <__exponent+0x44>
 8012386:	2330      	movs	r3, #48	@ 0x30
 8012388:	3130      	adds	r1, #48	@ 0x30
 801238a:	7083      	strb	r3, [r0, #2]
 801238c:	70c1      	strb	r1, [r0, #3]
 801238e:	1d03      	adds	r3, r0, #4
 8012390:	e7f1      	b.n	8012376 <__exponent+0x58>
	...

08012394 <_printf_float>:
 8012394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012398:	b08d      	sub	sp, #52	@ 0x34
 801239a:	460c      	mov	r4, r1
 801239c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80123a0:	4616      	mov	r6, r2
 80123a2:	461f      	mov	r7, r3
 80123a4:	4605      	mov	r5, r0
 80123a6:	f000 fe65 	bl	8013074 <_localeconv_r>
 80123aa:	6803      	ldr	r3, [r0, #0]
 80123ac:	9304      	str	r3, [sp, #16]
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7ed ff86 	bl	80002c0 <strlen>
 80123b4:	2300      	movs	r3, #0
 80123b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80123b8:	f8d8 3000 	ldr.w	r3, [r8]
 80123bc:	9005      	str	r0, [sp, #20]
 80123be:	3307      	adds	r3, #7
 80123c0:	f023 0307 	bic.w	r3, r3, #7
 80123c4:	f103 0208 	add.w	r2, r3, #8
 80123c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80123cc:	f8d4 b000 	ldr.w	fp, [r4]
 80123d0:	f8c8 2000 	str.w	r2, [r8]
 80123d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80123d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80123dc:	9307      	str	r3, [sp, #28]
 80123de:	f8cd 8018 	str.w	r8, [sp, #24]
 80123e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80123e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123ea:	4b9c      	ldr	r3, [pc, #624]	@ (801265c <_printf_float+0x2c8>)
 80123ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80123f0:	f7ee fbc4 	bl	8000b7c <__aeabi_dcmpun>
 80123f4:	bb70      	cbnz	r0, 8012454 <_printf_float+0xc0>
 80123f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123fa:	4b98      	ldr	r3, [pc, #608]	@ (801265c <_printf_float+0x2c8>)
 80123fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012400:	f7ee fb9e 	bl	8000b40 <__aeabi_dcmple>
 8012404:	bb30      	cbnz	r0, 8012454 <_printf_float+0xc0>
 8012406:	2200      	movs	r2, #0
 8012408:	2300      	movs	r3, #0
 801240a:	4640      	mov	r0, r8
 801240c:	4649      	mov	r1, r9
 801240e:	f7ee fb8d 	bl	8000b2c <__aeabi_dcmplt>
 8012412:	b110      	cbz	r0, 801241a <_printf_float+0x86>
 8012414:	232d      	movs	r3, #45	@ 0x2d
 8012416:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801241a:	4a91      	ldr	r2, [pc, #580]	@ (8012660 <_printf_float+0x2cc>)
 801241c:	4b91      	ldr	r3, [pc, #580]	@ (8012664 <_printf_float+0x2d0>)
 801241e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012422:	bf94      	ite	ls
 8012424:	4690      	movls	r8, r2
 8012426:	4698      	movhi	r8, r3
 8012428:	2303      	movs	r3, #3
 801242a:	6123      	str	r3, [r4, #16]
 801242c:	f02b 0304 	bic.w	r3, fp, #4
 8012430:	6023      	str	r3, [r4, #0]
 8012432:	f04f 0900 	mov.w	r9, #0
 8012436:	9700      	str	r7, [sp, #0]
 8012438:	4633      	mov	r3, r6
 801243a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801243c:	4621      	mov	r1, r4
 801243e:	4628      	mov	r0, r5
 8012440:	f000 fa7c 	bl	801293c <_printf_common>
 8012444:	3001      	adds	r0, #1
 8012446:	f040 808d 	bne.w	8012564 <_printf_float+0x1d0>
 801244a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801244e:	b00d      	add	sp, #52	@ 0x34
 8012450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012454:	4642      	mov	r2, r8
 8012456:	464b      	mov	r3, r9
 8012458:	4640      	mov	r0, r8
 801245a:	4649      	mov	r1, r9
 801245c:	f7ee fb8e 	bl	8000b7c <__aeabi_dcmpun>
 8012460:	b140      	cbz	r0, 8012474 <_printf_float+0xe0>
 8012462:	464b      	mov	r3, r9
 8012464:	2b00      	cmp	r3, #0
 8012466:	bfbc      	itt	lt
 8012468:	232d      	movlt	r3, #45	@ 0x2d
 801246a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801246e:	4a7e      	ldr	r2, [pc, #504]	@ (8012668 <_printf_float+0x2d4>)
 8012470:	4b7e      	ldr	r3, [pc, #504]	@ (801266c <_printf_float+0x2d8>)
 8012472:	e7d4      	b.n	801241e <_printf_float+0x8a>
 8012474:	6863      	ldr	r3, [r4, #4]
 8012476:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801247a:	9206      	str	r2, [sp, #24]
 801247c:	1c5a      	adds	r2, r3, #1
 801247e:	d13b      	bne.n	80124f8 <_printf_float+0x164>
 8012480:	2306      	movs	r3, #6
 8012482:	6063      	str	r3, [r4, #4]
 8012484:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012488:	2300      	movs	r3, #0
 801248a:	6022      	str	r2, [r4, #0]
 801248c:	9303      	str	r3, [sp, #12]
 801248e:	ab0a      	add	r3, sp, #40	@ 0x28
 8012490:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012494:	ab09      	add	r3, sp, #36	@ 0x24
 8012496:	9300      	str	r3, [sp, #0]
 8012498:	6861      	ldr	r1, [r4, #4]
 801249a:	ec49 8b10 	vmov	d0, r8, r9
 801249e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80124a2:	4628      	mov	r0, r5
 80124a4:	f7ff fed6 	bl	8012254 <__cvt>
 80124a8:	9b06      	ldr	r3, [sp, #24]
 80124aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80124ac:	2b47      	cmp	r3, #71	@ 0x47
 80124ae:	4680      	mov	r8, r0
 80124b0:	d129      	bne.n	8012506 <_printf_float+0x172>
 80124b2:	1cc8      	adds	r0, r1, #3
 80124b4:	db02      	blt.n	80124bc <_printf_float+0x128>
 80124b6:	6863      	ldr	r3, [r4, #4]
 80124b8:	4299      	cmp	r1, r3
 80124ba:	dd41      	ble.n	8012540 <_printf_float+0x1ac>
 80124bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80124c0:	fa5f fa8a 	uxtb.w	sl, sl
 80124c4:	3901      	subs	r1, #1
 80124c6:	4652      	mov	r2, sl
 80124c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80124cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80124ce:	f7ff ff26 	bl	801231e <__exponent>
 80124d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80124d4:	1813      	adds	r3, r2, r0
 80124d6:	2a01      	cmp	r2, #1
 80124d8:	4681      	mov	r9, r0
 80124da:	6123      	str	r3, [r4, #16]
 80124dc:	dc02      	bgt.n	80124e4 <_printf_float+0x150>
 80124de:	6822      	ldr	r2, [r4, #0]
 80124e0:	07d2      	lsls	r2, r2, #31
 80124e2:	d501      	bpl.n	80124e8 <_printf_float+0x154>
 80124e4:	3301      	adds	r3, #1
 80124e6:	6123      	str	r3, [r4, #16]
 80124e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d0a2      	beq.n	8012436 <_printf_float+0xa2>
 80124f0:	232d      	movs	r3, #45	@ 0x2d
 80124f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80124f6:	e79e      	b.n	8012436 <_printf_float+0xa2>
 80124f8:	9a06      	ldr	r2, [sp, #24]
 80124fa:	2a47      	cmp	r2, #71	@ 0x47
 80124fc:	d1c2      	bne.n	8012484 <_printf_float+0xf0>
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d1c0      	bne.n	8012484 <_printf_float+0xf0>
 8012502:	2301      	movs	r3, #1
 8012504:	e7bd      	b.n	8012482 <_printf_float+0xee>
 8012506:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801250a:	d9db      	bls.n	80124c4 <_printf_float+0x130>
 801250c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012510:	d118      	bne.n	8012544 <_printf_float+0x1b0>
 8012512:	2900      	cmp	r1, #0
 8012514:	6863      	ldr	r3, [r4, #4]
 8012516:	dd0b      	ble.n	8012530 <_printf_float+0x19c>
 8012518:	6121      	str	r1, [r4, #16]
 801251a:	b913      	cbnz	r3, 8012522 <_printf_float+0x18e>
 801251c:	6822      	ldr	r2, [r4, #0]
 801251e:	07d0      	lsls	r0, r2, #31
 8012520:	d502      	bpl.n	8012528 <_printf_float+0x194>
 8012522:	3301      	adds	r3, #1
 8012524:	440b      	add	r3, r1
 8012526:	6123      	str	r3, [r4, #16]
 8012528:	65a1      	str	r1, [r4, #88]	@ 0x58
 801252a:	f04f 0900 	mov.w	r9, #0
 801252e:	e7db      	b.n	80124e8 <_printf_float+0x154>
 8012530:	b913      	cbnz	r3, 8012538 <_printf_float+0x1a4>
 8012532:	6822      	ldr	r2, [r4, #0]
 8012534:	07d2      	lsls	r2, r2, #31
 8012536:	d501      	bpl.n	801253c <_printf_float+0x1a8>
 8012538:	3302      	adds	r3, #2
 801253a:	e7f4      	b.n	8012526 <_printf_float+0x192>
 801253c:	2301      	movs	r3, #1
 801253e:	e7f2      	b.n	8012526 <_printf_float+0x192>
 8012540:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012546:	4299      	cmp	r1, r3
 8012548:	db05      	blt.n	8012556 <_printf_float+0x1c2>
 801254a:	6823      	ldr	r3, [r4, #0]
 801254c:	6121      	str	r1, [r4, #16]
 801254e:	07d8      	lsls	r0, r3, #31
 8012550:	d5ea      	bpl.n	8012528 <_printf_float+0x194>
 8012552:	1c4b      	adds	r3, r1, #1
 8012554:	e7e7      	b.n	8012526 <_printf_float+0x192>
 8012556:	2900      	cmp	r1, #0
 8012558:	bfd4      	ite	le
 801255a:	f1c1 0202 	rsble	r2, r1, #2
 801255e:	2201      	movgt	r2, #1
 8012560:	4413      	add	r3, r2
 8012562:	e7e0      	b.n	8012526 <_printf_float+0x192>
 8012564:	6823      	ldr	r3, [r4, #0]
 8012566:	055a      	lsls	r2, r3, #21
 8012568:	d407      	bmi.n	801257a <_printf_float+0x1e6>
 801256a:	6923      	ldr	r3, [r4, #16]
 801256c:	4642      	mov	r2, r8
 801256e:	4631      	mov	r1, r6
 8012570:	4628      	mov	r0, r5
 8012572:	47b8      	blx	r7
 8012574:	3001      	adds	r0, #1
 8012576:	d12b      	bne.n	80125d0 <_printf_float+0x23c>
 8012578:	e767      	b.n	801244a <_printf_float+0xb6>
 801257a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801257e:	f240 80dd 	bls.w	801273c <_printf_float+0x3a8>
 8012582:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012586:	2200      	movs	r2, #0
 8012588:	2300      	movs	r3, #0
 801258a:	f7ee fac5 	bl	8000b18 <__aeabi_dcmpeq>
 801258e:	2800      	cmp	r0, #0
 8012590:	d033      	beq.n	80125fa <_printf_float+0x266>
 8012592:	4a37      	ldr	r2, [pc, #220]	@ (8012670 <_printf_float+0x2dc>)
 8012594:	2301      	movs	r3, #1
 8012596:	4631      	mov	r1, r6
 8012598:	4628      	mov	r0, r5
 801259a:	47b8      	blx	r7
 801259c:	3001      	adds	r0, #1
 801259e:	f43f af54 	beq.w	801244a <_printf_float+0xb6>
 80125a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80125a6:	4543      	cmp	r3, r8
 80125a8:	db02      	blt.n	80125b0 <_printf_float+0x21c>
 80125aa:	6823      	ldr	r3, [r4, #0]
 80125ac:	07d8      	lsls	r0, r3, #31
 80125ae:	d50f      	bpl.n	80125d0 <_printf_float+0x23c>
 80125b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80125b4:	4631      	mov	r1, r6
 80125b6:	4628      	mov	r0, r5
 80125b8:	47b8      	blx	r7
 80125ba:	3001      	adds	r0, #1
 80125bc:	f43f af45 	beq.w	801244a <_printf_float+0xb6>
 80125c0:	f04f 0900 	mov.w	r9, #0
 80125c4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80125c8:	f104 0a1a 	add.w	sl, r4, #26
 80125cc:	45c8      	cmp	r8, r9
 80125ce:	dc09      	bgt.n	80125e4 <_printf_float+0x250>
 80125d0:	6823      	ldr	r3, [r4, #0]
 80125d2:	079b      	lsls	r3, r3, #30
 80125d4:	f100 8103 	bmi.w	80127de <_printf_float+0x44a>
 80125d8:	68e0      	ldr	r0, [r4, #12]
 80125da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80125dc:	4298      	cmp	r0, r3
 80125de:	bfb8      	it	lt
 80125e0:	4618      	movlt	r0, r3
 80125e2:	e734      	b.n	801244e <_printf_float+0xba>
 80125e4:	2301      	movs	r3, #1
 80125e6:	4652      	mov	r2, sl
 80125e8:	4631      	mov	r1, r6
 80125ea:	4628      	mov	r0, r5
 80125ec:	47b8      	blx	r7
 80125ee:	3001      	adds	r0, #1
 80125f0:	f43f af2b 	beq.w	801244a <_printf_float+0xb6>
 80125f4:	f109 0901 	add.w	r9, r9, #1
 80125f8:	e7e8      	b.n	80125cc <_printf_float+0x238>
 80125fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	dc39      	bgt.n	8012674 <_printf_float+0x2e0>
 8012600:	4a1b      	ldr	r2, [pc, #108]	@ (8012670 <_printf_float+0x2dc>)
 8012602:	2301      	movs	r3, #1
 8012604:	4631      	mov	r1, r6
 8012606:	4628      	mov	r0, r5
 8012608:	47b8      	blx	r7
 801260a:	3001      	adds	r0, #1
 801260c:	f43f af1d 	beq.w	801244a <_printf_float+0xb6>
 8012610:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012614:	ea59 0303 	orrs.w	r3, r9, r3
 8012618:	d102      	bne.n	8012620 <_printf_float+0x28c>
 801261a:	6823      	ldr	r3, [r4, #0]
 801261c:	07d9      	lsls	r1, r3, #31
 801261e:	d5d7      	bpl.n	80125d0 <_printf_float+0x23c>
 8012620:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012624:	4631      	mov	r1, r6
 8012626:	4628      	mov	r0, r5
 8012628:	47b8      	blx	r7
 801262a:	3001      	adds	r0, #1
 801262c:	f43f af0d 	beq.w	801244a <_printf_float+0xb6>
 8012630:	f04f 0a00 	mov.w	sl, #0
 8012634:	f104 0b1a 	add.w	fp, r4, #26
 8012638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801263a:	425b      	negs	r3, r3
 801263c:	4553      	cmp	r3, sl
 801263e:	dc01      	bgt.n	8012644 <_printf_float+0x2b0>
 8012640:	464b      	mov	r3, r9
 8012642:	e793      	b.n	801256c <_printf_float+0x1d8>
 8012644:	2301      	movs	r3, #1
 8012646:	465a      	mov	r2, fp
 8012648:	4631      	mov	r1, r6
 801264a:	4628      	mov	r0, r5
 801264c:	47b8      	blx	r7
 801264e:	3001      	adds	r0, #1
 8012650:	f43f aefb 	beq.w	801244a <_printf_float+0xb6>
 8012654:	f10a 0a01 	add.w	sl, sl, #1
 8012658:	e7ee      	b.n	8012638 <_printf_float+0x2a4>
 801265a:	bf00      	nop
 801265c:	7fefffff 	.word	0x7fefffff
 8012660:	080162f4 	.word	0x080162f4
 8012664:	080162f8 	.word	0x080162f8
 8012668:	080162fc 	.word	0x080162fc
 801266c:	08016300 	.word	0x08016300
 8012670:	08016304 	.word	0x08016304
 8012674:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012676:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801267a:	4553      	cmp	r3, sl
 801267c:	bfa8      	it	ge
 801267e:	4653      	movge	r3, sl
 8012680:	2b00      	cmp	r3, #0
 8012682:	4699      	mov	r9, r3
 8012684:	dc36      	bgt.n	80126f4 <_printf_float+0x360>
 8012686:	f04f 0b00 	mov.w	fp, #0
 801268a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801268e:	f104 021a 	add.w	r2, r4, #26
 8012692:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012694:	9306      	str	r3, [sp, #24]
 8012696:	eba3 0309 	sub.w	r3, r3, r9
 801269a:	455b      	cmp	r3, fp
 801269c:	dc31      	bgt.n	8012702 <_printf_float+0x36e>
 801269e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126a0:	459a      	cmp	sl, r3
 80126a2:	dc3a      	bgt.n	801271a <_printf_float+0x386>
 80126a4:	6823      	ldr	r3, [r4, #0]
 80126a6:	07da      	lsls	r2, r3, #31
 80126a8:	d437      	bmi.n	801271a <_printf_float+0x386>
 80126aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126ac:	ebaa 0903 	sub.w	r9, sl, r3
 80126b0:	9b06      	ldr	r3, [sp, #24]
 80126b2:	ebaa 0303 	sub.w	r3, sl, r3
 80126b6:	4599      	cmp	r9, r3
 80126b8:	bfa8      	it	ge
 80126ba:	4699      	movge	r9, r3
 80126bc:	f1b9 0f00 	cmp.w	r9, #0
 80126c0:	dc33      	bgt.n	801272a <_printf_float+0x396>
 80126c2:	f04f 0800 	mov.w	r8, #0
 80126c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80126ca:	f104 0b1a 	add.w	fp, r4, #26
 80126ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126d0:	ebaa 0303 	sub.w	r3, sl, r3
 80126d4:	eba3 0309 	sub.w	r3, r3, r9
 80126d8:	4543      	cmp	r3, r8
 80126da:	f77f af79 	ble.w	80125d0 <_printf_float+0x23c>
 80126de:	2301      	movs	r3, #1
 80126e0:	465a      	mov	r2, fp
 80126e2:	4631      	mov	r1, r6
 80126e4:	4628      	mov	r0, r5
 80126e6:	47b8      	blx	r7
 80126e8:	3001      	adds	r0, #1
 80126ea:	f43f aeae 	beq.w	801244a <_printf_float+0xb6>
 80126ee:	f108 0801 	add.w	r8, r8, #1
 80126f2:	e7ec      	b.n	80126ce <_printf_float+0x33a>
 80126f4:	4642      	mov	r2, r8
 80126f6:	4631      	mov	r1, r6
 80126f8:	4628      	mov	r0, r5
 80126fa:	47b8      	blx	r7
 80126fc:	3001      	adds	r0, #1
 80126fe:	d1c2      	bne.n	8012686 <_printf_float+0x2f2>
 8012700:	e6a3      	b.n	801244a <_printf_float+0xb6>
 8012702:	2301      	movs	r3, #1
 8012704:	4631      	mov	r1, r6
 8012706:	4628      	mov	r0, r5
 8012708:	9206      	str	r2, [sp, #24]
 801270a:	47b8      	blx	r7
 801270c:	3001      	adds	r0, #1
 801270e:	f43f ae9c 	beq.w	801244a <_printf_float+0xb6>
 8012712:	9a06      	ldr	r2, [sp, #24]
 8012714:	f10b 0b01 	add.w	fp, fp, #1
 8012718:	e7bb      	b.n	8012692 <_printf_float+0x2fe>
 801271a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801271e:	4631      	mov	r1, r6
 8012720:	4628      	mov	r0, r5
 8012722:	47b8      	blx	r7
 8012724:	3001      	adds	r0, #1
 8012726:	d1c0      	bne.n	80126aa <_printf_float+0x316>
 8012728:	e68f      	b.n	801244a <_printf_float+0xb6>
 801272a:	9a06      	ldr	r2, [sp, #24]
 801272c:	464b      	mov	r3, r9
 801272e:	4442      	add	r2, r8
 8012730:	4631      	mov	r1, r6
 8012732:	4628      	mov	r0, r5
 8012734:	47b8      	blx	r7
 8012736:	3001      	adds	r0, #1
 8012738:	d1c3      	bne.n	80126c2 <_printf_float+0x32e>
 801273a:	e686      	b.n	801244a <_printf_float+0xb6>
 801273c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012740:	f1ba 0f01 	cmp.w	sl, #1
 8012744:	dc01      	bgt.n	801274a <_printf_float+0x3b6>
 8012746:	07db      	lsls	r3, r3, #31
 8012748:	d536      	bpl.n	80127b8 <_printf_float+0x424>
 801274a:	2301      	movs	r3, #1
 801274c:	4642      	mov	r2, r8
 801274e:	4631      	mov	r1, r6
 8012750:	4628      	mov	r0, r5
 8012752:	47b8      	blx	r7
 8012754:	3001      	adds	r0, #1
 8012756:	f43f ae78 	beq.w	801244a <_printf_float+0xb6>
 801275a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801275e:	4631      	mov	r1, r6
 8012760:	4628      	mov	r0, r5
 8012762:	47b8      	blx	r7
 8012764:	3001      	adds	r0, #1
 8012766:	f43f ae70 	beq.w	801244a <_printf_float+0xb6>
 801276a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801276e:	2200      	movs	r2, #0
 8012770:	2300      	movs	r3, #0
 8012772:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8012776:	f7ee f9cf 	bl	8000b18 <__aeabi_dcmpeq>
 801277a:	b9c0      	cbnz	r0, 80127ae <_printf_float+0x41a>
 801277c:	4653      	mov	r3, sl
 801277e:	f108 0201 	add.w	r2, r8, #1
 8012782:	4631      	mov	r1, r6
 8012784:	4628      	mov	r0, r5
 8012786:	47b8      	blx	r7
 8012788:	3001      	adds	r0, #1
 801278a:	d10c      	bne.n	80127a6 <_printf_float+0x412>
 801278c:	e65d      	b.n	801244a <_printf_float+0xb6>
 801278e:	2301      	movs	r3, #1
 8012790:	465a      	mov	r2, fp
 8012792:	4631      	mov	r1, r6
 8012794:	4628      	mov	r0, r5
 8012796:	47b8      	blx	r7
 8012798:	3001      	adds	r0, #1
 801279a:	f43f ae56 	beq.w	801244a <_printf_float+0xb6>
 801279e:	f108 0801 	add.w	r8, r8, #1
 80127a2:	45d0      	cmp	r8, sl
 80127a4:	dbf3      	blt.n	801278e <_printf_float+0x3fa>
 80127a6:	464b      	mov	r3, r9
 80127a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80127ac:	e6df      	b.n	801256e <_printf_float+0x1da>
 80127ae:	f04f 0800 	mov.w	r8, #0
 80127b2:	f104 0b1a 	add.w	fp, r4, #26
 80127b6:	e7f4      	b.n	80127a2 <_printf_float+0x40e>
 80127b8:	2301      	movs	r3, #1
 80127ba:	4642      	mov	r2, r8
 80127bc:	e7e1      	b.n	8012782 <_printf_float+0x3ee>
 80127be:	2301      	movs	r3, #1
 80127c0:	464a      	mov	r2, r9
 80127c2:	4631      	mov	r1, r6
 80127c4:	4628      	mov	r0, r5
 80127c6:	47b8      	blx	r7
 80127c8:	3001      	adds	r0, #1
 80127ca:	f43f ae3e 	beq.w	801244a <_printf_float+0xb6>
 80127ce:	f108 0801 	add.w	r8, r8, #1
 80127d2:	68e3      	ldr	r3, [r4, #12]
 80127d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80127d6:	1a5b      	subs	r3, r3, r1
 80127d8:	4543      	cmp	r3, r8
 80127da:	dcf0      	bgt.n	80127be <_printf_float+0x42a>
 80127dc:	e6fc      	b.n	80125d8 <_printf_float+0x244>
 80127de:	f04f 0800 	mov.w	r8, #0
 80127e2:	f104 0919 	add.w	r9, r4, #25
 80127e6:	e7f4      	b.n	80127d2 <_printf_float+0x43e>

080127e8 <malloc>:
 80127e8:	4b02      	ldr	r3, [pc, #8]	@ (80127f4 <malloc+0xc>)
 80127ea:	4601      	mov	r1, r0
 80127ec:	6818      	ldr	r0, [r3, #0]
 80127ee:	f000 b825 	b.w	801283c <_malloc_r>
 80127f2:	bf00      	nop
 80127f4:	200000f0 	.word	0x200000f0

080127f8 <sbrk_aligned>:
 80127f8:	b570      	push	{r4, r5, r6, lr}
 80127fa:	4e0f      	ldr	r6, [pc, #60]	@ (8012838 <sbrk_aligned+0x40>)
 80127fc:	460c      	mov	r4, r1
 80127fe:	6831      	ldr	r1, [r6, #0]
 8012800:	4605      	mov	r5, r0
 8012802:	b911      	cbnz	r1, 801280a <sbrk_aligned+0x12>
 8012804:	f000 fc3a 	bl	801307c <_sbrk_r>
 8012808:	6030      	str	r0, [r6, #0]
 801280a:	4621      	mov	r1, r4
 801280c:	4628      	mov	r0, r5
 801280e:	f000 fc35 	bl	801307c <_sbrk_r>
 8012812:	1c43      	adds	r3, r0, #1
 8012814:	d103      	bne.n	801281e <sbrk_aligned+0x26>
 8012816:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801281a:	4620      	mov	r0, r4
 801281c:	bd70      	pop	{r4, r5, r6, pc}
 801281e:	1cc4      	adds	r4, r0, #3
 8012820:	f024 0403 	bic.w	r4, r4, #3
 8012824:	42a0      	cmp	r0, r4
 8012826:	d0f8      	beq.n	801281a <sbrk_aligned+0x22>
 8012828:	1a21      	subs	r1, r4, r0
 801282a:	4628      	mov	r0, r5
 801282c:	f000 fc26 	bl	801307c <_sbrk_r>
 8012830:	3001      	adds	r0, #1
 8012832:	d1f2      	bne.n	801281a <sbrk_aligned+0x22>
 8012834:	e7ef      	b.n	8012816 <sbrk_aligned+0x1e>
 8012836:	bf00      	nop
 8012838:	200015e0 	.word	0x200015e0

0801283c <_malloc_r>:
 801283c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012840:	1ccd      	adds	r5, r1, #3
 8012842:	f025 0503 	bic.w	r5, r5, #3
 8012846:	3508      	adds	r5, #8
 8012848:	2d0c      	cmp	r5, #12
 801284a:	bf38      	it	cc
 801284c:	250c      	movcc	r5, #12
 801284e:	2d00      	cmp	r5, #0
 8012850:	4606      	mov	r6, r0
 8012852:	db01      	blt.n	8012858 <_malloc_r+0x1c>
 8012854:	42a9      	cmp	r1, r5
 8012856:	d904      	bls.n	8012862 <_malloc_r+0x26>
 8012858:	230c      	movs	r3, #12
 801285a:	6033      	str	r3, [r6, #0]
 801285c:	2000      	movs	r0, #0
 801285e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012862:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012938 <_malloc_r+0xfc>
 8012866:	f000 f9f7 	bl	8012c58 <__malloc_lock>
 801286a:	f8d8 3000 	ldr.w	r3, [r8]
 801286e:	461c      	mov	r4, r3
 8012870:	bb44      	cbnz	r4, 80128c4 <_malloc_r+0x88>
 8012872:	4629      	mov	r1, r5
 8012874:	4630      	mov	r0, r6
 8012876:	f7ff ffbf 	bl	80127f8 <sbrk_aligned>
 801287a:	1c43      	adds	r3, r0, #1
 801287c:	4604      	mov	r4, r0
 801287e:	d158      	bne.n	8012932 <_malloc_r+0xf6>
 8012880:	f8d8 4000 	ldr.w	r4, [r8]
 8012884:	4627      	mov	r7, r4
 8012886:	2f00      	cmp	r7, #0
 8012888:	d143      	bne.n	8012912 <_malloc_r+0xd6>
 801288a:	2c00      	cmp	r4, #0
 801288c:	d04b      	beq.n	8012926 <_malloc_r+0xea>
 801288e:	6823      	ldr	r3, [r4, #0]
 8012890:	4639      	mov	r1, r7
 8012892:	4630      	mov	r0, r6
 8012894:	eb04 0903 	add.w	r9, r4, r3
 8012898:	f000 fbf0 	bl	801307c <_sbrk_r>
 801289c:	4581      	cmp	r9, r0
 801289e:	d142      	bne.n	8012926 <_malloc_r+0xea>
 80128a0:	6821      	ldr	r1, [r4, #0]
 80128a2:	1a6d      	subs	r5, r5, r1
 80128a4:	4629      	mov	r1, r5
 80128a6:	4630      	mov	r0, r6
 80128a8:	f7ff ffa6 	bl	80127f8 <sbrk_aligned>
 80128ac:	3001      	adds	r0, #1
 80128ae:	d03a      	beq.n	8012926 <_malloc_r+0xea>
 80128b0:	6823      	ldr	r3, [r4, #0]
 80128b2:	442b      	add	r3, r5
 80128b4:	6023      	str	r3, [r4, #0]
 80128b6:	f8d8 3000 	ldr.w	r3, [r8]
 80128ba:	685a      	ldr	r2, [r3, #4]
 80128bc:	bb62      	cbnz	r2, 8012918 <_malloc_r+0xdc>
 80128be:	f8c8 7000 	str.w	r7, [r8]
 80128c2:	e00f      	b.n	80128e4 <_malloc_r+0xa8>
 80128c4:	6822      	ldr	r2, [r4, #0]
 80128c6:	1b52      	subs	r2, r2, r5
 80128c8:	d420      	bmi.n	801290c <_malloc_r+0xd0>
 80128ca:	2a0b      	cmp	r2, #11
 80128cc:	d917      	bls.n	80128fe <_malloc_r+0xc2>
 80128ce:	1961      	adds	r1, r4, r5
 80128d0:	42a3      	cmp	r3, r4
 80128d2:	6025      	str	r5, [r4, #0]
 80128d4:	bf18      	it	ne
 80128d6:	6059      	strne	r1, [r3, #4]
 80128d8:	6863      	ldr	r3, [r4, #4]
 80128da:	bf08      	it	eq
 80128dc:	f8c8 1000 	streq.w	r1, [r8]
 80128e0:	5162      	str	r2, [r4, r5]
 80128e2:	604b      	str	r3, [r1, #4]
 80128e4:	4630      	mov	r0, r6
 80128e6:	f000 f9bd 	bl	8012c64 <__malloc_unlock>
 80128ea:	f104 000b 	add.w	r0, r4, #11
 80128ee:	1d23      	adds	r3, r4, #4
 80128f0:	f020 0007 	bic.w	r0, r0, #7
 80128f4:	1ac2      	subs	r2, r0, r3
 80128f6:	bf1c      	itt	ne
 80128f8:	1a1b      	subne	r3, r3, r0
 80128fa:	50a3      	strne	r3, [r4, r2]
 80128fc:	e7af      	b.n	801285e <_malloc_r+0x22>
 80128fe:	6862      	ldr	r2, [r4, #4]
 8012900:	42a3      	cmp	r3, r4
 8012902:	bf0c      	ite	eq
 8012904:	f8c8 2000 	streq.w	r2, [r8]
 8012908:	605a      	strne	r2, [r3, #4]
 801290a:	e7eb      	b.n	80128e4 <_malloc_r+0xa8>
 801290c:	4623      	mov	r3, r4
 801290e:	6864      	ldr	r4, [r4, #4]
 8012910:	e7ae      	b.n	8012870 <_malloc_r+0x34>
 8012912:	463c      	mov	r4, r7
 8012914:	687f      	ldr	r7, [r7, #4]
 8012916:	e7b6      	b.n	8012886 <_malloc_r+0x4a>
 8012918:	461a      	mov	r2, r3
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	42a3      	cmp	r3, r4
 801291e:	d1fb      	bne.n	8012918 <_malloc_r+0xdc>
 8012920:	2300      	movs	r3, #0
 8012922:	6053      	str	r3, [r2, #4]
 8012924:	e7de      	b.n	80128e4 <_malloc_r+0xa8>
 8012926:	230c      	movs	r3, #12
 8012928:	6033      	str	r3, [r6, #0]
 801292a:	4630      	mov	r0, r6
 801292c:	f000 f99a 	bl	8012c64 <__malloc_unlock>
 8012930:	e794      	b.n	801285c <_malloc_r+0x20>
 8012932:	6005      	str	r5, [r0, #0]
 8012934:	e7d6      	b.n	80128e4 <_malloc_r+0xa8>
 8012936:	bf00      	nop
 8012938:	200015e4 	.word	0x200015e4

0801293c <_printf_common>:
 801293c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012940:	4616      	mov	r6, r2
 8012942:	4698      	mov	r8, r3
 8012944:	688a      	ldr	r2, [r1, #8]
 8012946:	690b      	ldr	r3, [r1, #16]
 8012948:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801294c:	4293      	cmp	r3, r2
 801294e:	bfb8      	it	lt
 8012950:	4613      	movlt	r3, r2
 8012952:	6033      	str	r3, [r6, #0]
 8012954:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012958:	4607      	mov	r7, r0
 801295a:	460c      	mov	r4, r1
 801295c:	b10a      	cbz	r2, 8012962 <_printf_common+0x26>
 801295e:	3301      	adds	r3, #1
 8012960:	6033      	str	r3, [r6, #0]
 8012962:	6823      	ldr	r3, [r4, #0]
 8012964:	0699      	lsls	r1, r3, #26
 8012966:	bf42      	ittt	mi
 8012968:	6833      	ldrmi	r3, [r6, #0]
 801296a:	3302      	addmi	r3, #2
 801296c:	6033      	strmi	r3, [r6, #0]
 801296e:	6825      	ldr	r5, [r4, #0]
 8012970:	f015 0506 	ands.w	r5, r5, #6
 8012974:	d106      	bne.n	8012984 <_printf_common+0x48>
 8012976:	f104 0a19 	add.w	sl, r4, #25
 801297a:	68e3      	ldr	r3, [r4, #12]
 801297c:	6832      	ldr	r2, [r6, #0]
 801297e:	1a9b      	subs	r3, r3, r2
 8012980:	42ab      	cmp	r3, r5
 8012982:	dc26      	bgt.n	80129d2 <_printf_common+0x96>
 8012984:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012988:	6822      	ldr	r2, [r4, #0]
 801298a:	3b00      	subs	r3, #0
 801298c:	bf18      	it	ne
 801298e:	2301      	movne	r3, #1
 8012990:	0692      	lsls	r2, r2, #26
 8012992:	d42b      	bmi.n	80129ec <_printf_common+0xb0>
 8012994:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012998:	4641      	mov	r1, r8
 801299a:	4638      	mov	r0, r7
 801299c:	47c8      	blx	r9
 801299e:	3001      	adds	r0, #1
 80129a0:	d01e      	beq.n	80129e0 <_printf_common+0xa4>
 80129a2:	6823      	ldr	r3, [r4, #0]
 80129a4:	6922      	ldr	r2, [r4, #16]
 80129a6:	f003 0306 	and.w	r3, r3, #6
 80129aa:	2b04      	cmp	r3, #4
 80129ac:	bf02      	ittt	eq
 80129ae:	68e5      	ldreq	r5, [r4, #12]
 80129b0:	6833      	ldreq	r3, [r6, #0]
 80129b2:	1aed      	subeq	r5, r5, r3
 80129b4:	68a3      	ldr	r3, [r4, #8]
 80129b6:	bf0c      	ite	eq
 80129b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80129bc:	2500      	movne	r5, #0
 80129be:	4293      	cmp	r3, r2
 80129c0:	bfc4      	itt	gt
 80129c2:	1a9b      	subgt	r3, r3, r2
 80129c4:	18ed      	addgt	r5, r5, r3
 80129c6:	2600      	movs	r6, #0
 80129c8:	341a      	adds	r4, #26
 80129ca:	42b5      	cmp	r5, r6
 80129cc:	d11a      	bne.n	8012a04 <_printf_common+0xc8>
 80129ce:	2000      	movs	r0, #0
 80129d0:	e008      	b.n	80129e4 <_printf_common+0xa8>
 80129d2:	2301      	movs	r3, #1
 80129d4:	4652      	mov	r2, sl
 80129d6:	4641      	mov	r1, r8
 80129d8:	4638      	mov	r0, r7
 80129da:	47c8      	blx	r9
 80129dc:	3001      	adds	r0, #1
 80129de:	d103      	bne.n	80129e8 <_printf_common+0xac>
 80129e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80129e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129e8:	3501      	adds	r5, #1
 80129ea:	e7c6      	b.n	801297a <_printf_common+0x3e>
 80129ec:	18e1      	adds	r1, r4, r3
 80129ee:	1c5a      	adds	r2, r3, #1
 80129f0:	2030      	movs	r0, #48	@ 0x30
 80129f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80129f6:	4422      	add	r2, r4
 80129f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80129fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012a00:	3302      	adds	r3, #2
 8012a02:	e7c7      	b.n	8012994 <_printf_common+0x58>
 8012a04:	2301      	movs	r3, #1
 8012a06:	4622      	mov	r2, r4
 8012a08:	4641      	mov	r1, r8
 8012a0a:	4638      	mov	r0, r7
 8012a0c:	47c8      	blx	r9
 8012a0e:	3001      	adds	r0, #1
 8012a10:	d0e6      	beq.n	80129e0 <_printf_common+0xa4>
 8012a12:	3601      	adds	r6, #1
 8012a14:	e7d9      	b.n	80129ca <_printf_common+0x8e>
	...

08012a18 <_printf_i>:
 8012a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a1c:	7e0f      	ldrb	r7, [r1, #24]
 8012a1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012a20:	2f78      	cmp	r7, #120	@ 0x78
 8012a22:	4691      	mov	r9, r2
 8012a24:	4680      	mov	r8, r0
 8012a26:	460c      	mov	r4, r1
 8012a28:	469a      	mov	sl, r3
 8012a2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012a2e:	d807      	bhi.n	8012a40 <_printf_i+0x28>
 8012a30:	2f62      	cmp	r7, #98	@ 0x62
 8012a32:	d80a      	bhi.n	8012a4a <_printf_i+0x32>
 8012a34:	2f00      	cmp	r7, #0
 8012a36:	f000 80d2 	beq.w	8012bde <_printf_i+0x1c6>
 8012a3a:	2f58      	cmp	r7, #88	@ 0x58
 8012a3c:	f000 80b9 	beq.w	8012bb2 <_printf_i+0x19a>
 8012a40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012a44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012a48:	e03a      	b.n	8012ac0 <_printf_i+0xa8>
 8012a4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012a4e:	2b15      	cmp	r3, #21
 8012a50:	d8f6      	bhi.n	8012a40 <_printf_i+0x28>
 8012a52:	a101      	add	r1, pc, #4	@ (adr r1, 8012a58 <_printf_i+0x40>)
 8012a54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012a58:	08012ab1 	.word	0x08012ab1
 8012a5c:	08012ac5 	.word	0x08012ac5
 8012a60:	08012a41 	.word	0x08012a41
 8012a64:	08012a41 	.word	0x08012a41
 8012a68:	08012a41 	.word	0x08012a41
 8012a6c:	08012a41 	.word	0x08012a41
 8012a70:	08012ac5 	.word	0x08012ac5
 8012a74:	08012a41 	.word	0x08012a41
 8012a78:	08012a41 	.word	0x08012a41
 8012a7c:	08012a41 	.word	0x08012a41
 8012a80:	08012a41 	.word	0x08012a41
 8012a84:	08012bc5 	.word	0x08012bc5
 8012a88:	08012aef 	.word	0x08012aef
 8012a8c:	08012b7f 	.word	0x08012b7f
 8012a90:	08012a41 	.word	0x08012a41
 8012a94:	08012a41 	.word	0x08012a41
 8012a98:	08012be7 	.word	0x08012be7
 8012a9c:	08012a41 	.word	0x08012a41
 8012aa0:	08012aef 	.word	0x08012aef
 8012aa4:	08012a41 	.word	0x08012a41
 8012aa8:	08012a41 	.word	0x08012a41
 8012aac:	08012b87 	.word	0x08012b87
 8012ab0:	6833      	ldr	r3, [r6, #0]
 8012ab2:	1d1a      	adds	r2, r3, #4
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	6032      	str	r2, [r6, #0]
 8012ab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012abc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012ac0:	2301      	movs	r3, #1
 8012ac2:	e09d      	b.n	8012c00 <_printf_i+0x1e8>
 8012ac4:	6833      	ldr	r3, [r6, #0]
 8012ac6:	6820      	ldr	r0, [r4, #0]
 8012ac8:	1d19      	adds	r1, r3, #4
 8012aca:	6031      	str	r1, [r6, #0]
 8012acc:	0606      	lsls	r6, r0, #24
 8012ace:	d501      	bpl.n	8012ad4 <_printf_i+0xbc>
 8012ad0:	681d      	ldr	r5, [r3, #0]
 8012ad2:	e003      	b.n	8012adc <_printf_i+0xc4>
 8012ad4:	0645      	lsls	r5, r0, #25
 8012ad6:	d5fb      	bpl.n	8012ad0 <_printf_i+0xb8>
 8012ad8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012adc:	2d00      	cmp	r5, #0
 8012ade:	da03      	bge.n	8012ae8 <_printf_i+0xd0>
 8012ae0:	232d      	movs	r3, #45	@ 0x2d
 8012ae2:	426d      	negs	r5, r5
 8012ae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ae8:	4859      	ldr	r0, [pc, #356]	@ (8012c50 <_printf_i+0x238>)
 8012aea:	230a      	movs	r3, #10
 8012aec:	e011      	b.n	8012b12 <_printf_i+0xfa>
 8012aee:	6821      	ldr	r1, [r4, #0]
 8012af0:	6833      	ldr	r3, [r6, #0]
 8012af2:	0608      	lsls	r0, r1, #24
 8012af4:	f853 5b04 	ldr.w	r5, [r3], #4
 8012af8:	d402      	bmi.n	8012b00 <_printf_i+0xe8>
 8012afa:	0649      	lsls	r1, r1, #25
 8012afc:	bf48      	it	mi
 8012afe:	b2ad      	uxthmi	r5, r5
 8012b00:	2f6f      	cmp	r7, #111	@ 0x6f
 8012b02:	4853      	ldr	r0, [pc, #332]	@ (8012c50 <_printf_i+0x238>)
 8012b04:	6033      	str	r3, [r6, #0]
 8012b06:	bf14      	ite	ne
 8012b08:	230a      	movne	r3, #10
 8012b0a:	2308      	moveq	r3, #8
 8012b0c:	2100      	movs	r1, #0
 8012b0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012b12:	6866      	ldr	r6, [r4, #4]
 8012b14:	60a6      	str	r6, [r4, #8]
 8012b16:	2e00      	cmp	r6, #0
 8012b18:	bfa2      	ittt	ge
 8012b1a:	6821      	ldrge	r1, [r4, #0]
 8012b1c:	f021 0104 	bicge.w	r1, r1, #4
 8012b20:	6021      	strge	r1, [r4, #0]
 8012b22:	b90d      	cbnz	r5, 8012b28 <_printf_i+0x110>
 8012b24:	2e00      	cmp	r6, #0
 8012b26:	d04b      	beq.n	8012bc0 <_printf_i+0x1a8>
 8012b28:	4616      	mov	r6, r2
 8012b2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8012b2e:	fb03 5711 	mls	r7, r3, r1, r5
 8012b32:	5dc7      	ldrb	r7, [r0, r7]
 8012b34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012b38:	462f      	mov	r7, r5
 8012b3a:	42bb      	cmp	r3, r7
 8012b3c:	460d      	mov	r5, r1
 8012b3e:	d9f4      	bls.n	8012b2a <_printf_i+0x112>
 8012b40:	2b08      	cmp	r3, #8
 8012b42:	d10b      	bne.n	8012b5c <_printf_i+0x144>
 8012b44:	6823      	ldr	r3, [r4, #0]
 8012b46:	07df      	lsls	r7, r3, #31
 8012b48:	d508      	bpl.n	8012b5c <_printf_i+0x144>
 8012b4a:	6923      	ldr	r3, [r4, #16]
 8012b4c:	6861      	ldr	r1, [r4, #4]
 8012b4e:	4299      	cmp	r1, r3
 8012b50:	bfde      	ittt	le
 8012b52:	2330      	movle	r3, #48	@ 0x30
 8012b54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012b58:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8012b5c:	1b92      	subs	r2, r2, r6
 8012b5e:	6122      	str	r2, [r4, #16]
 8012b60:	f8cd a000 	str.w	sl, [sp]
 8012b64:	464b      	mov	r3, r9
 8012b66:	aa03      	add	r2, sp, #12
 8012b68:	4621      	mov	r1, r4
 8012b6a:	4640      	mov	r0, r8
 8012b6c:	f7ff fee6 	bl	801293c <_printf_common>
 8012b70:	3001      	adds	r0, #1
 8012b72:	d14a      	bne.n	8012c0a <_printf_i+0x1f2>
 8012b74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012b78:	b004      	add	sp, #16
 8012b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b7e:	6823      	ldr	r3, [r4, #0]
 8012b80:	f043 0320 	orr.w	r3, r3, #32
 8012b84:	6023      	str	r3, [r4, #0]
 8012b86:	4833      	ldr	r0, [pc, #204]	@ (8012c54 <_printf_i+0x23c>)
 8012b88:	2778      	movs	r7, #120	@ 0x78
 8012b8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012b8e:	6823      	ldr	r3, [r4, #0]
 8012b90:	6831      	ldr	r1, [r6, #0]
 8012b92:	061f      	lsls	r7, r3, #24
 8012b94:	f851 5b04 	ldr.w	r5, [r1], #4
 8012b98:	d402      	bmi.n	8012ba0 <_printf_i+0x188>
 8012b9a:	065f      	lsls	r7, r3, #25
 8012b9c:	bf48      	it	mi
 8012b9e:	b2ad      	uxthmi	r5, r5
 8012ba0:	6031      	str	r1, [r6, #0]
 8012ba2:	07d9      	lsls	r1, r3, #31
 8012ba4:	bf44      	itt	mi
 8012ba6:	f043 0320 	orrmi.w	r3, r3, #32
 8012baa:	6023      	strmi	r3, [r4, #0]
 8012bac:	b11d      	cbz	r5, 8012bb6 <_printf_i+0x19e>
 8012bae:	2310      	movs	r3, #16
 8012bb0:	e7ac      	b.n	8012b0c <_printf_i+0xf4>
 8012bb2:	4827      	ldr	r0, [pc, #156]	@ (8012c50 <_printf_i+0x238>)
 8012bb4:	e7e9      	b.n	8012b8a <_printf_i+0x172>
 8012bb6:	6823      	ldr	r3, [r4, #0]
 8012bb8:	f023 0320 	bic.w	r3, r3, #32
 8012bbc:	6023      	str	r3, [r4, #0]
 8012bbe:	e7f6      	b.n	8012bae <_printf_i+0x196>
 8012bc0:	4616      	mov	r6, r2
 8012bc2:	e7bd      	b.n	8012b40 <_printf_i+0x128>
 8012bc4:	6833      	ldr	r3, [r6, #0]
 8012bc6:	6825      	ldr	r5, [r4, #0]
 8012bc8:	6961      	ldr	r1, [r4, #20]
 8012bca:	1d18      	adds	r0, r3, #4
 8012bcc:	6030      	str	r0, [r6, #0]
 8012bce:	062e      	lsls	r6, r5, #24
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	d501      	bpl.n	8012bd8 <_printf_i+0x1c0>
 8012bd4:	6019      	str	r1, [r3, #0]
 8012bd6:	e002      	b.n	8012bde <_printf_i+0x1c6>
 8012bd8:	0668      	lsls	r0, r5, #25
 8012bda:	d5fb      	bpl.n	8012bd4 <_printf_i+0x1bc>
 8012bdc:	8019      	strh	r1, [r3, #0]
 8012bde:	2300      	movs	r3, #0
 8012be0:	6123      	str	r3, [r4, #16]
 8012be2:	4616      	mov	r6, r2
 8012be4:	e7bc      	b.n	8012b60 <_printf_i+0x148>
 8012be6:	6833      	ldr	r3, [r6, #0]
 8012be8:	1d1a      	adds	r2, r3, #4
 8012bea:	6032      	str	r2, [r6, #0]
 8012bec:	681e      	ldr	r6, [r3, #0]
 8012bee:	6862      	ldr	r2, [r4, #4]
 8012bf0:	2100      	movs	r1, #0
 8012bf2:	4630      	mov	r0, r6
 8012bf4:	f7ed fb14 	bl	8000220 <memchr>
 8012bf8:	b108      	cbz	r0, 8012bfe <_printf_i+0x1e6>
 8012bfa:	1b80      	subs	r0, r0, r6
 8012bfc:	6060      	str	r0, [r4, #4]
 8012bfe:	6863      	ldr	r3, [r4, #4]
 8012c00:	6123      	str	r3, [r4, #16]
 8012c02:	2300      	movs	r3, #0
 8012c04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012c08:	e7aa      	b.n	8012b60 <_printf_i+0x148>
 8012c0a:	6923      	ldr	r3, [r4, #16]
 8012c0c:	4632      	mov	r2, r6
 8012c0e:	4649      	mov	r1, r9
 8012c10:	4640      	mov	r0, r8
 8012c12:	47d0      	blx	sl
 8012c14:	3001      	adds	r0, #1
 8012c16:	d0ad      	beq.n	8012b74 <_printf_i+0x15c>
 8012c18:	6823      	ldr	r3, [r4, #0]
 8012c1a:	079b      	lsls	r3, r3, #30
 8012c1c:	d413      	bmi.n	8012c46 <_printf_i+0x22e>
 8012c1e:	68e0      	ldr	r0, [r4, #12]
 8012c20:	9b03      	ldr	r3, [sp, #12]
 8012c22:	4298      	cmp	r0, r3
 8012c24:	bfb8      	it	lt
 8012c26:	4618      	movlt	r0, r3
 8012c28:	e7a6      	b.n	8012b78 <_printf_i+0x160>
 8012c2a:	2301      	movs	r3, #1
 8012c2c:	4632      	mov	r2, r6
 8012c2e:	4649      	mov	r1, r9
 8012c30:	4640      	mov	r0, r8
 8012c32:	47d0      	blx	sl
 8012c34:	3001      	adds	r0, #1
 8012c36:	d09d      	beq.n	8012b74 <_printf_i+0x15c>
 8012c38:	3501      	adds	r5, #1
 8012c3a:	68e3      	ldr	r3, [r4, #12]
 8012c3c:	9903      	ldr	r1, [sp, #12]
 8012c3e:	1a5b      	subs	r3, r3, r1
 8012c40:	42ab      	cmp	r3, r5
 8012c42:	dcf2      	bgt.n	8012c2a <_printf_i+0x212>
 8012c44:	e7eb      	b.n	8012c1e <_printf_i+0x206>
 8012c46:	2500      	movs	r5, #0
 8012c48:	f104 0619 	add.w	r6, r4, #25
 8012c4c:	e7f5      	b.n	8012c3a <_printf_i+0x222>
 8012c4e:	bf00      	nop
 8012c50:	08016306 	.word	0x08016306
 8012c54:	08016317 	.word	0x08016317

08012c58 <__malloc_lock>:
 8012c58:	4801      	ldr	r0, [pc, #4]	@ (8012c60 <__malloc_lock+0x8>)
 8012c5a:	f7f0 bcc6 	b.w	80035ea <__retarget_lock_acquire_recursive>
 8012c5e:	bf00      	nop
 8012c60:	200008c0 	.word	0x200008c0

08012c64 <__malloc_unlock>:
 8012c64:	4801      	ldr	r0, [pc, #4]	@ (8012c6c <__malloc_unlock+0x8>)
 8012c66:	f7f0 bcd5 	b.w	8003614 <__retarget_lock_release_recursive>
 8012c6a:	bf00      	nop
 8012c6c:	200008c0 	.word	0x200008c0

08012c70 <siprintf>:
 8012c70:	b40e      	push	{r1, r2, r3}
 8012c72:	b500      	push	{lr}
 8012c74:	b09c      	sub	sp, #112	@ 0x70
 8012c76:	ab1d      	add	r3, sp, #116	@ 0x74
 8012c78:	9002      	str	r0, [sp, #8]
 8012c7a:	9006      	str	r0, [sp, #24]
 8012c7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012c80:	4809      	ldr	r0, [pc, #36]	@ (8012ca8 <siprintf+0x38>)
 8012c82:	9107      	str	r1, [sp, #28]
 8012c84:	9104      	str	r1, [sp, #16]
 8012c86:	4909      	ldr	r1, [pc, #36]	@ (8012cac <siprintf+0x3c>)
 8012c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c8c:	9105      	str	r1, [sp, #20]
 8012c8e:	6800      	ldr	r0, [r0, #0]
 8012c90:	9301      	str	r3, [sp, #4]
 8012c92:	a902      	add	r1, sp, #8
 8012c94:	f001 f94a 	bl	8013f2c <_svfiprintf_r>
 8012c98:	9b02      	ldr	r3, [sp, #8]
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	701a      	strb	r2, [r3, #0]
 8012c9e:	b01c      	add	sp, #112	@ 0x70
 8012ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ca4:	b003      	add	sp, #12
 8012ca6:	4770      	bx	lr
 8012ca8:	200000f0 	.word	0x200000f0
 8012cac:	ffff0208 	.word	0xffff0208

08012cb0 <std>:
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	b510      	push	{r4, lr}
 8012cb4:	4604      	mov	r4, r0
 8012cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8012cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012cbe:	6083      	str	r3, [r0, #8]
 8012cc0:	8181      	strh	r1, [r0, #12]
 8012cc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8012cc4:	81c2      	strh	r2, [r0, #14]
 8012cc6:	6183      	str	r3, [r0, #24]
 8012cc8:	4619      	mov	r1, r3
 8012cca:	2208      	movs	r2, #8
 8012ccc:	305c      	adds	r0, #92	@ 0x5c
 8012cce:	f000 f9c9 	bl	8013064 <memset>
 8012cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8012d08 <std+0x58>)
 8012cd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8012cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8012d0c <std+0x5c>)
 8012cd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012cda:	4b0d      	ldr	r3, [pc, #52]	@ (8012d10 <std+0x60>)
 8012cdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012cde:	4b0d      	ldr	r3, [pc, #52]	@ (8012d14 <std+0x64>)
 8012ce0:	6323      	str	r3, [r4, #48]	@ 0x30
 8012ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8012d18 <std+0x68>)
 8012ce4:	6224      	str	r4, [r4, #32]
 8012ce6:	429c      	cmp	r4, r3
 8012ce8:	d006      	beq.n	8012cf8 <std+0x48>
 8012cea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012cee:	4294      	cmp	r4, r2
 8012cf0:	d002      	beq.n	8012cf8 <std+0x48>
 8012cf2:	33d0      	adds	r3, #208	@ 0xd0
 8012cf4:	429c      	cmp	r4, r3
 8012cf6:	d105      	bne.n	8012d04 <std+0x54>
 8012cf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d00:	f7f0 bc4c 	b.w	800359c <__retarget_lock_init_recursive>
 8012d04:	bd10      	pop	{r4, pc}
 8012d06:	bf00      	nop
 8012d08:	08014981 	.word	0x08014981
 8012d0c:	080149a3 	.word	0x080149a3
 8012d10:	080149db 	.word	0x080149db
 8012d14:	080149ff 	.word	0x080149ff
 8012d18:	200015e8 	.word	0x200015e8

08012d1c <stdio_exit_handler>:
 8012d1c:	4a02      	ldr	r2, [pc, #8]	@ (8012d28 <stdio_exit_handler+0xc>)
 8012d1e:	4903      	ldr	r1, [pc, #12]	@ (8012d2c <stdio_exit_handler+0x10>)
 8012d20:	4803      	ldr	r0, [pc, #12]	@ (8012d30 <stdio_exit_handler+0x14>)
 8012d22:	f000 b8ed 	b.w	8012f00 <_fwalk_sglue>
 8012d26:	bf00      	nop
 8012d28:	200000e4 	.word	0x200000e4
 8012d2c:	0801422d 	.word	0x0801422d
 8012d30:	200000f4 	.word	0x200000f4

08012d34 <cleanup_stdio>:
 8012d34:	6841      	ldr	r1, [r0, #4]
 8012d36:	4b0c      	ldr	r3, [pc, #48]	@ (8012d68 <cleanup_stdio+0x34>)
 8012d38:	4299      	cmp	r1, r3
 8012d3a:	b510      	push	{r4, lr}
 8012d3c:	4604      	mov	r4, r0
 8012d3e:	d001      	beq.n	8012d44 <cleanup_stdio+0x10>
 8012d40:	f001 fa74 	bl	801422c <_fflush_r>
 8012d44:	68a1      	ldr	r1, [r4, #8]
 8012d46:	4b09      	ldr	r3, [pc, #36]	@ (8012d6c <cleanup_stdio+0x38>)
 8012d48:	4299      	cmp	r1, r3
 8012d4a:	d002      	beq.n	8012d52 <cleanup_stdio+0x1e>
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	f001 fa6d 	bl	801422c <_fflush_r>
 8012d52:	68e1      	ldr	r1, [r4, #12]
 8012d54:	4b06      	ldr	r3, [pc, #24]	@ (8012d70 <cleanup_stdio+0x3c>)
 8012d56:	4299      	cmp	r1, r3
 8012d58:	d004      	beq.n	8012d64 <cleanup_stdio+0x30>
 8012d5a:	4620      	mov	r0, r4
 8012d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d60:	f001 ba64 	b.w	801422c <_fflush_r>
 8012d64:	bd10      	pop	{r4, pc}
 8012d66:	bf00      	nop
 8012d68:	200015e8 	.word	0x200015e8
 8012d6c:	20001650 	.word	0x20001650
 8012d70:	200016b8 	.word	0x200016b8

08012d74 <global_stdio_init.part.0>:
 8012d74:	b510      	push	{r4, lr}
 8012d76:	4b0b      	ldr	r3, [pc, #44]	@ (8012da4 <global_stdio_init.part.0+0x30>)
 8012d78:	4c0b      	ldr	r4, [pc, #44]	@ (8012da8 <global_stdio_init.part.0+0x34>)
 8012d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8012dac <global_stdio_init.part.0+0x38>)
 8012d7c:	601a      	str	r2, [r3, #0]
 8012d7e:	4620      	mov	r0, r4
 8012d80:	2200      	movs	r2, #0
 8012d82:	2104      	movs	r1, #4
 8012d84:	f7ff ff94 	bl	8012cb0 <std>
 8012d88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012d8c:	2201      	movs	r2, #1
 8012d8e:	2109      	movs	r1, #9
 8012d90:	f7ff ff8e 	bl	8012cb0 <std>
 8012d94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012d98:	2202      	movs	r2, #2
 8012d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d9e:	2112      	movs	r1, #18
 8012da0:	f7ff bf86 	b.w	8012cb0 <std>
 8012da4:	20001720 	.word	0x20001720
 8012da8:	200015e8 	.word	0x200015e8
 8012dac:	08012d1d 	.word	0x08012d1d

08012db0 <__sfp_lock_acquire>:
 8012db0:	4801      	ldr	r0, [pc, #4]	@ (8012db8 <__sfp_lock_acquire+0x8>)
 8012db2:	f7f0 bc1a 	b.w	80035ea <__retarget_lock_acquire_recursive>
 8012db6:	bf00      	nop
 8012db8:	200008bc 	.word	0x200008bc

08012dbc <__sfp_lock_release>:
 8012dbc:	4801      	ldr	r0, [pc, #4]	@ (8012dc4 <__sfp_lock_release+0x8>)
 8012dbe:	f7f0 bc29 	b.w	8003614 <__retarget_lock_release_recursive>
 8012dc2:	bf00      	nop
 8012dc4:	200008bc 	.word	0x200008bc

08012dc8 <__sinit>:
 8012dc8:	b510      	push	{r4, lr}
 8012dca:	4604      	mov	r4, r0
 8012dcc:	f7ff fff0 	bl	8012db0 <__sfp_lock_acquire>
 8012dd0:	6a23      	ldr	r3, [r4, #32]
 8012dd2:	b11b      	cbz	r3, 8012ddc <__sinit+0x14>
 8012dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dd8:	f7ff bff0 	b.w	8012dbc <__sfp_lock_release>
 8012ddc:	4b04      	ldr	r3, [pc, #16]	@ (8012df0 <__sinit+0x28>)
 8012dde:	6223      	str	r3, [r4, #32]
 8012de0:	4b04      	ldr	r3, [pc, #16]	@ (8012df4 <__sinit+0x2c>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d1f5      	bne.n	8012dd4 <__sinit+0xc>
 8012de8:	f7ff ffc4 	bl	8012d74 <global_stdio_init.part.0>
 8012dec:	e7f2      	b.n	8012dd4 <__sinit+0xc>
 8012dee:	bf00      	nop
 8012df0:	08012d35 	.word	0x08012d35
 8012df4:	20001720 	.word	0x20001720

08012df8 <_strtol_l.constprop.0>:
 8012df8:	2b24      	cmp	r3, #36	@ 0x24
 8012dfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dfe:	4686      	mov	lr, r0
 8012e00:	4690      	mov	r8, r2
 8012e02:	d801      	bhi.n	8012e08 <_strtol_l.constprop.0+0x10>
 8012e04:	2b01      	cmp	r3, #1
 8012e06:	d106      	bne.n	8012e16 <_strtol_l.constprop.0+0x1e>
 8012e08:	f000 f948 	bl	801309c <__errno>
 8012e0c:	2316      	movs	r3, #22
 8012e0e:	6003      	str	r3, [r0, #0]
 8012e10:	2000      	movs	r0, #0
 8012e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e16:	4834      	ldr	r0, [pc, #208]	@ (8012ee8 <_strtol_l.constprop.0+0xf0>)
 8012e18:	460d      	mov	r5, r1
 8012e1a:	462a      	mov	r2, r5
 8012e1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e20:	5d06      	ldrb	r6, [r0, r4]
 8012e22:	f016 0608 	ands.w	r6, r6, #8
 8012e26:	d1f8      	bne.n	8012e1a <_strtol_l.constprop.0+0x22>
 8012e28:	2c2d      	cmp	r4, #45	@ 0x2d
 8012e2a:	d12d      	bne.n	8012e88 <_strtol_l.constprop.0+0x90>
 8012e2c:	782c      	ldrb	r4, [r5, #0]
 8012e2e:	2601      	movs	r6, #1
 8012e30:	1c95      	adds	r5, r2, #2
 8012e32:	f033 0210 	bics.w	r2, r3, #16
 8012e36:	d109      	bne.n	8012e4c <_strtol_l.constprop.0+0x54>
 8012e38:	2c30      	cmp	r4, #48	@ 0x30
 8012e3a:	d12a      	bne.n	8012e92 <_strtol_l.constprop.0+0x9a>
 8012e3c:	782a      	ldrb	r2, [r5, #0]
 8012e3e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012e42:	2a58      	cmp	r2, #88	@ 0x58
 8012e44:	d125      	bne.n	8012e92 <_strtol_l.constprop.0+0x9a>
 8012e46:	786c      	ldrb	r4, [r5, #1]
 8012e48:	2310      	movs	r3, #16
 8012e4a:	3502      	adds	r5, #2
 8012e4c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012e50:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8012e54:	2200      	movs	r2, #0
 8012e56:	fbbc f9f3 	udiv	r9, ip, r3
 8012e5a:	4610      	mov	r0, r2
 8012e5c:	fb03 ca19 	mls	sl, r3, r9, ip
 8012e60:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012e64:	2f09      	cmp	r7, #9
 8012e66:	d81b      	bhi.n	8012ea0 <_strtol_l.constprop.0+0xa8>
 8012e68:	463c      	mov	r4, r7
 8012e6a:	42a3      	cmp	r3, r4
 8012e6c:	dd27      	ble.n	8012ebe <_strtol_l.constprop.0+0xc6>
 8012e6e:	1c57      	adds	r7, r2, #1
 8012e70:	d007      	beq.n	8012e82 <_strtol_l.constprop.0+0x8a>
 8012e72:	4581      	cmp	r9, r0
 8012e74:	d320      	bcc.n	8012eb8 <_strtol_l.constprop.0+0xc0>
 8012e76:	d101      	bne.n	8012e7c <_strtol_l.constprop.0+0x84>
 8012e78:	45a2      	cmp	sl, r4
 8012e7a:	db1d      	blt.n	8012eb8 <_strtol_l.constprop.0+0xc0>
 8012e7c:	fb00 4003 	mla	r0, r0, r3, r4
 8012e80:	2201      	movs	r2, #1
 8012e82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e86:	e7eb      	b.n	8012e60 <_strtol_l.constprop.0+0x68>
 8012e88:	2c2b      	cmp	r4, #43	@ 0x2b
 8012e8a:	bf04      	itt	eq
 8012e8c:	782c      	ldrbeq	r4, [r5, #0]
 8012e8e:	1c95      	addeq	r5, r2, #2
 8012e90:	e7cf      	b.n	8012e32 <_strtol_l.constprop.0+0x3a>
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d1da      	bne.n	8012e4c <_strtol_l.constprop.0+0x54>
 8012e96:	2c30      	cmp	r4, #48	@ 0x30
 8012e98:	bf0c      	ite	eq
 8012e9a:	2308      	moveq	r3, #8
 8012e9c:	230a      	movne	r3, #10
 8012e9e:	e7d5      	b.n	8012e4c <_strtol_l.constprop.0+0x54>
 8012ea0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012ea4:	2f19      	cmp	r7, #25
 8012ea6:	d801      	bhi.n	8012eac <_strtol_l.constprop.0+0xb4>
 8012ea8:	3c37      	subs	r4, #55	@ 0x37
 8012eaa:	e7de      	b.n	8012e6a <_strtol_l.constprop.0+0x72>
 8012eac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012eb0:	2f19      	cmp	r7, #25
 8012eb2:	d804      	bhi.n	8012ebe <_strtol_l.constprop.0+0xc6>
 8012eb4:	3c57      	subs	r4, #87	@ 0x57
 8012eb6:	e7d8      	b.n	8012e6a <_strtol_l.constprop.0+0x72>
 8012eb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012ebc:	e7e1      	b.n	8012e82 <_strtol_l.constprop.0+0x8a>
 8012ebe:	1c53      	adds	r3, r2, #1
 8012ec0:	d108      	bne.n	8012ed4 <_strtol_l.constprop.0+0xdc>
 8012ec2:	2322      	movs	r3, #34	@ 0x22
 8012ec4:	f8ce 3000 	str.w	r3, [lr]
 8012ec8:	4660      	mov	r0, ip
 8012eca:	f1b8 0f00 	cmp.w	r8, #0
 8012ece:	d0a0      	beq.n	8012e12 <_strtol_l.constprop.0+0x1a>
 8012ed0:	1e69      	subs	r1, r5, #1
 8012ed2:	e006      	b.n	8012ee2 <_strtol_l.constprop.0+0xea>
 8012ed4:	b106      	cbz	r6, 8012ed8 <_strtol_l.constprop.0+0xe0>
 8012ed6:	4240      	negs	r0, r0
 8012ed8:	f1b8 0f00 	cmp.w	r8, #0
 8012edc:	d099      	beq.n	8012e12 <_strtol_l.constprop.0+0x1a>
 8012ede:	2a00      	cmp	r2, #0
 8012ee0:	d1f6      	bne.n	8012ed0 <_strtol_l.constprop.0+0xd8>
 8012ee2:	f8c8 1000 	str.w	r1, [r8]
 8012ee6:	e794      	b.n	8012e12 <_strtol_l.constprop.0+0x1a>
 8012ee8:	0801639a 	.word	0x0801639a

08012eec <strtol>:
 8012eec:	4613      	mov	r3, r2
 8012eee:	460a      	mov	r2, r1
 8012ef0:	4601      	mov	r1, r0
 8012ef2:	4802      	ldr	r0, [pc, #8]	@ (8012efc <strtol+0x10>)
 8012ef4:	6800      	ldr	r0, [r0, #0]
 8012ef6:	f7ff bf7f 	b.w	8012df8 <_strtol_l.constprop.0>
 8012efa:	bf00      	nop
 8012efc:	200000f0 	.word	0x200000f0

08012f00 <_fwalk_sglue>:
 8012f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f04:	4607      	mov	r7, r0
 8012f06:	4688      	mov	r8, r1
 8012f08:	4614      	mov	r4, r2
 8012f0a:	2600      	movs	r6, #0
 8012f0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f10:	f1b9 0901 	subs.w	r9, r9, #1
 8012f14:	d505      	bpl.n	8012f22 <_fwalk_sglue+0x22>
 8012f16:	6824      	ldr	r4, [r4, #0]
 8012f18:	2c00      	cmp	r4, #0
 8012f1a:	d1f7      	bne.n	8012f0c <_fwalk_sglue+0xc>
 8012f1c:	4630      	mov	r0, r6
 8012f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f22:	89ab      	ldrh	r3, [r5, #12]
 8012f24:	2b01      	cmp	r3, #1
 8012f26:	d907      	bls.n	8012f38 <_fwalk_sglue+0x38>
 8012f28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f2c:	3301      	adds	r3, #1
 8012f2e:	d003      	beq.n	8012f38 <_fwalk_sglue+0x38>
 8012f30:	4629      	mov	r1, r5
 8012f32:	4638      	mov	r0, r7
 8012f34:	47c0      	blx	r8
 8012f36:	4306      	orrs	r6, r0
 8012f38:	3568      	adds	r5, #104	@ 0x68
 8012f3a:	e7e9      	b.n	8012f10 <_fwalk_sglue+0x10>

08012f3c <strncat>:
 8012f3c:	b530      	push	{r4, r5, lr}
 8012f3e:	4604      	mov	r4, r0
 8012f40:	7825      	ldrb	r5, [r4, #0]
 8012f42:	4623      	mov	r3, r4
 8012f44:	3401      	adds	r4, #1
 8012f46:	2d00      	cmp	r5, #0
 8012f48:	d1fa      	bne.n	8012f40 <strncat+0x4>
 8012f4a:	3a01      	subs	r2, #1
 8012f4c:	d304      	bcc.n	8012f58 <strncat+0x1c>
 8012f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f52:	f803 4b01 	strb.w	r4, [r3], #1
 8012f56:	b904      	cbnz	r4, 8012f5a <strncat+0x1e>
 8012f58:	bd30      	pop	{r4, r5, pc}
 8012f5a:	2a00      	cmp	r2, #0
 8012f5c:	d1f5      	bne.n	8012f4a <strncat+0xe>
 8012f5e:	701a      	strb	r2, [r3, #0]
 8012f60:	e7f3      	b.n	8012f4a <strncat+0xe>

08012f62 <strncmp>:
 8012f62:	b510      	push	{r4, lr}
 8012f64:	b16a      	cbz	r2, 8012f82 <strncmp+0x20>
 8012f66:	3901      	subs	r1, #1
 8012f68:	1884      	adds	r4, r0, r2
 8012f6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012f72:	429a      	cmp	r2, r3
 8012f74:	d103      	bne.n	8012f7e <strncmp+0x1c>
 8012f76:	42a0      	cmp	r0, r4
 8012f78:	d001      	beq.n	8012f7e <strncmp+0x1c>
 8012f7a:	2a00      	cmp	r2, #0
 8012f7c:	d1f5      	bne.n	8012f6a <strncmp+0x8>
 8012f7e:	1ad0      	subs	r0, r2, r3
 8012f80:	bd10      	pop	{r4, pc}
 8012f82:	4610      	mov	r0, r2
 8012f84:	e7fc      	b.n	8012f80 <strncmp+0x1e>

08012f86 <strncpy>:
 8012f86:	b510      	push	{r4, lr}
 8012f88:	3901      	subs	r1, #1
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	b132      	cbz	r2, 8012f9c <strncpy+0x16>
 8012f8e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012f92:	f803 4b01 	strb.w	r4, [r3], #1
 8012f96:	3a01      	subs	r2, #1
 8012f98:	2c00      	cmp	r4, #0
 8012f9a:	d1f7      	bne.n	8012f8c <strncpy+0x6>
 8012f9c:	441a      	add	r2, r3
 8012f9e:	2100      	movs	r1, #0
 8012fa0:	4293      	cmp	r3, r2
 8012fa2:	d100      	bne.n	8012fa6 <strncpy+0x20>
 8012fa4:	bd10      	pop	{r4, pc}
 8012fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8012faa:	e7f9      	b.n	8012fa0 <strncpy+0x1a>

08012fac <strtok>:
 8012fac:	4b16      	ldr	r3, [pc, #88]	@ (8013008 <strtok+0x5c>)
 8012fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fb2:	681f      	ldr	r7, [r3, #0]
 8012fb4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8012fb6:	4605      	mov	r5, r0
 8012fb8:	460e      	mov	r6, r1
 8012fba:	b9ec      	cbnz	r4, 8012ff8 <strtok+0x4c>
 8012fbc:	2050      	movs	r0, #80	@ 0x50
 8012fbe:	f7ff fc13 	bl	80127e8 <malloc>
 8012fc2:	4602      	mov	r2, r0
 8012fc4:	6478      	str	r0, [r7, #68]	@ 0x44
 8012fc6:	b920      	cbnz	r0, 8012fd2 <strtok+0x26>
 8012fc8:	4b10      	ldr	r3, [pc, #64]	@ (801300c <strtok+0x60>)
 8012fca:	4811      	ldr	r0, [pc, #68]	@ (8013010 <strtok+0x64>)
 8012fcc:	215b      	movs	r1, #91	@ 0x5b
 8012fce:	f000 f89d 	bl	801310c <__assert_func>
 8012fd2:	e9c0 4400 	strd	r4, r4, [r0]
 8012fd6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012fda:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012fde:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8012fe2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8012fe6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8012fea:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8012fee:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8012ff2:	6184      	str	r4, [r0, #24]
 8012ff4:	7704      	strb	r4, [r0, #28]
 8012ff6:	6244      	str	r4, [r0, #36]	@ 0x24
 8012ff8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012ffa:	4631      	mov	r1, r6
 8012ffc:	4628      	mov	r0, r5
 8012ffe:	2301      	movs	r3, #1
 8013000:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013004:	f000 b806 	b.w	8013014 <__strtok_r>
 8013008:	200000f0 	.word	0x200000f0
 801300c:	08016328 	.word	0x08016328
 8013010:	0801633f 	.word	0x0801633f

08013014 <__strtok_r>:
 8013014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013016:	4604      	mov	r4, r0
 8013018:	b908      	cbnz	r0, 801301e <__strtok_r+0xa>
 801301a:	6814      	ldr	r4, [r2, #0]
 801301c:	b144      	cbz	r4, 8013030 <__strtok_r+0x1c>
 801301e:	4620      	mov	r0, r4
 8013020:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013024:	460f      	mov	r7, r1
 8013026:	f817 6b01 	ldrb.w	r6, [r7], #1
 801302a:	b91e      	cbnz	r6, 8013034 <__strtok_r+0x20>
 801302c:	b965      	cbnz	r5, 8013048 <__strtok_r+0x34>
 801302e:	6015      	str	r5, [r2, #0]
 8013030:	2000      	movs	r0, #0
 8013032:	e005      	b.n	8013040 <__strtok_r+0x2c>
 8013034:	42b5      	cmp	r5, r6
 8013036:	d1f6      	bne.n	8013026 <__strtok_r+0x12>
 8013038:	2b00      	cmp	r3, #0
 801303a:	d1f0      	bne.n	801301e <__strtok_r+0xa>
 801303c:	6014      	str	r4, [r2, #0]
 801303e:	7003      	strb	r3, [r0, #0]
 8013040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013042:	461c      	mov	r4, r3
 8013044:	e00c      	b.n	8013060 <__strtok_r+0x4c>
 8013046:	b915      	cbnz	r5, 801304e <__strtok_r+0x3a>
 8013048:	f814 3b01 	ldrb.w	r3, [r4], #1
 801304c:	460e      	mov	r6, r1
 801304e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013052:	42ab      	cmp	r3, r5
 8013054:	d1f7      	bne.n	8013046 <__strtok_r+0x32>
 8013056:	2b00      	cmp	r3, #0
 8013058:	d0f3      	beq.n	8013042 <__strtok_r+0x2e>
 801305a:	2300      	movs	r3, #0
 801305c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013060:	6014      	str	r4, [r2, #0]
 8013062:	e7ed      	b.n	8013040 <__strtok_r+0x2c>

08013064 <memset>:
 8013064:	4402      	add	r2, r0
 8013066:	4603      	mov	r3, r0
 8013068:	4293      	cmp	r3, r2
 801306a:	d100      	bne.n	801306e <memset+0xa>
 801306c:	4770      	bx	lr
 801306e:	f803 1b01 	strb.w	r1, [r3], #1
 8013072:	e7f9      	b.n	8013068 <memset+0x4>

08013074 <_localeconv_r>:
 8013074:	4800      	ldr	r0, [pc, #0]	@ (8013078 <_localeconv_r+0x4>)
 8013076:	4770      	bx	lr
 8013078:	20000230 	.word	0x20000230

0801307c <_sbrk_r>:
 801307c:	b538      	push	{r3, r4, r5, lr}
 801307e:	4d06      	ldr	r5, [pc, #24]	@ (8013098 <_sbrk_r+0x1c>)
 8013080:	2300      	movs	r3, #0
 8013082:	4604      	mov	r4, r0
 8013084:	4608      	mov	r0, r1
 8013086:	602b      	str	r3, [r5, #0]
 8013088:	f7f0 f99c 	bl	80033c4 <_sbrk>
 801308c:	1c43      	adds	r3, r0, #1
 801308e:	d102      	bne.n	8013096 <_sbrk_r+0x1a>
 8013090:	682b      	ldr	r3, [r5, #0]
 8013092:	b103      	cbz	r3, 8013096 <_sbrk_r+0x1a>
 8013094:	6023      	str	r3, [r4, #0]
 8013096:	bd38      	pop	{r3, r4, r5, pc}
 8013098:	20001724 	.word	0x20001724

0801309c <__errno>:
 801309c:	4b01      	ldr	r3, [pc, #4]	@ (80130a4 <__errno+0x8>)
 801309e:	6818      	ldr	r0, [r3, #0]
 80130a0:	4770      	bx	lr
 80130a2:	bf00      	nop
 80130a4:	200000f0 	.word	0x200000f0

080130a8 <__libc_init_array>:
 80130a8:	b570      	push	{r4, r5, r6, lr}
 80130aa:	4d0d      	ldr	r5, [pc, #52]	@ (80130e0 <__libc_init_array+0x38>)
 80130ac:	4c0d      	ldr	r4, [pc, #52]	@ (80130e4 <__libc_init_array+0x3c>)
 80130ae:	1b64      	subs	r4, r4, r5
 80130b0:	10a4      	asrs	r4, r4, #2
 80130b2:	2600      	movs	r6, #0
 80130b4:	42a6      	cmp	r6, r4
 80130b6:	d109      	bne.n	80130cc <__libc_init_array+0x24>
 80130b8:	4d0b      	ldr	r5, [pc, #44]	@ (80130e8 <__libc_init_array+0x40>)
 80130ba:	4c0c      	ldr	r4, [pc, #48]	@ (80130ec <__libc_init_array+0x44>)
 80130bc:	f002 ff80 	bl	8015fc0 <_init>
 80130c0:	1b64      	subs	r4, r4, r5
 80130c2:	10a4      	asrs	r4, r4, #2
 80130c4:	2600      	movs	r6, #0
 80130c6:	42a6      	cmp	r6, r4
 80130c8:	d105      	bne.n	80130d6 <__libc_init_array+0x2e>
 80130ca:	bd70      	pop	{r4, r5, r6, pc}
 80130cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80130d0:	4798      	blx	r3
 80130d2:	3601      	adds	r6, #1
 80130d4:	e7ee      	b.n	80130b4 <__libc_init_array+0xc>
 80130d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80130da:	4798      	blx	r3
 80130dc:	3601      	adds	r6, #1
 80130de:	e7f2      	b.n	80130c6 <__libc_init_array+0x1e>
 80130e0:	08016700 	.word	0x08016700
 80130e4:	08016700 	.word	0x08016700
 80130e8:	08016700 	.word	0x08016700
 80130ec:	08016704 	.word	0x08016704

080130f0 <memcpy>:
 80130f0:	440a      	add	r2, r1
 80130f2:	4291      	cmp	r1, r2
 80130f4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80130f8:	d100      	bne.n	80130fc <memcpy+0xc>
 80130fa:	4770      	bx	lr
 80130fc:	b510      	push	{r4, lr}
 80130fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013106:	4291      	cmp	r1, r2
 8013108:	d1f9      	bne.n	80130fe <memcpy+0xe>
 801310a:	bd10      	pop	{r4, pc}

0801310c <__assert_func>:
 801310c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801310e:	4614      	mov	r4, r2
 8013110:	461a      	mov	r2, r3
 8013112:	4b09      	ldr	r3, [pc, #36]	@ (8013138 <__assert_func+0x2c>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	4605      	mov	r5, r0
 8013118:	68d8      	ldr	r0, [r3, #12]
 801311a:	b954      	cbnz	r4, 8013132 <__assert_func+0x26>
 801311c:	4b07      	ldr	r3, [pc, #28]	@ (801313c <__assert_func+0x30>)
 801311e:	461c      	mov	r4, r3
 8013120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013124:	9100      	str	r1, [sp, #0]
 8013126:	462b      	mov	r3, r5
 8013128:	4905      	ldr	r1, [pc, #20]	@ (8013140 <__assert_func+0x34>)
 801312a:	f001 fc6d 	bl	8014a08 <fiprintf>
 801312e:	f001 fd0b 	bl	8014b48 <abort>
 8013132:	4b04      	ldr	r3, [pc, #16]	@ (8013144 <__assert_func+0x38>)
 8013134:	e7f4      	b.n	8013120 <__assert_func+0x14>
 8013136:	bf00      	nop
 8013138:	200000f0 	.word	0x200000f0
 801313c:	080164d5 	.word	0x080164d5
 8013140:	080164a7 	.word	0x080164a7
 8013144:	0801649a 	.word	0x0801649a

08013148 <quorem>:
 8013148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801314c:	6903      	ldr	r3, [r0, #16]
 801314e:	690c      	ldr	r4, [r1, #16]
 8013150:	42a3      	cmp	r3, r4
 8013152:	4607      	mov	r7, r0
 8013154:	db7e      	blt.n	8013254 <quorem+0x10c>
 8013156:	3c01      	subs	r4, #1
 8013158:	f101 0814 	add.w	r8, r1, #20
 801315c:	00a3      	lsls	r3, r4, #2
 801315e:	f100 0514 	add.w	r5, r0, #20
 8013162:	9300      	str	r3, [sp, #0]
 8013164:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013168:	9301      	str	r3, [sp, #4]
 801316a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801316e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013172:	3301      	adds	r3, #1
 8013174:	429a      	cmp	r2, r3
 8013176:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801317a:	fbb2 f6f3 	udiv	r6, r2, r3
 801317e:	d32e      	bcc.n	80131de <quorem+0x96>
 8013180:	f04f 0a00 	mov.w	sl, #0
 8013184:	46c4      	mov	ip, r8
 8013186:	46ae      	mov	lr, r5
 8013188:	46d3      	mov	fp, sl
 801318a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801318e:	b298      	uxth	r0, r3
 8013190:	fb06 a000 	mla	r0, r6, r0, sl
 8013194:	0c02      	lsrs	r2, r0, #16
 8013196:	0c1b      	lsrs	r3, r3, #16
 8013198:	fb06 2303 	mla	r3, r6, r3, r2
 801319c:	f8de 2000 	ldr.w	r2, [lr]
 80131a0:	b280      	uxth	r0, r0
 80131a2:	b292      	uxth	r2, r2
 80131a4:	1a12      	subs	r2, r2, r0
 80131a6:	445a      	add	r2, fp
 80131a8:	f8de 0000 	ldr.w	r0, [lr]
 80131ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80131b0:	b29b      	uxth	r3, r3
 80131b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80131b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80131ba:	b292      	uxth	r2, r2
 80131bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80131c0:	45e1      	cmp	r9, ip
 80131c2:	f84e 2b04 	str.w	r2, [lr], #4
 80131c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80131ca:	d2de      	bcs.n	801318a <quorem+0x42>
 80131cc:	9b00      	ldr	r3, [sp, #0]
 80131ce:	58eb      	ldr	r3, [r5, r3]
 80131d0:	b92b      	cbnz	r3, 80131de <quorem+0x96>
 80131d2:	9b01      	ldr	r3, [sp, #4]
 80131d4:	3b04      	subs	r3, #4
 80131d6:	429d      	cmp	r5, r3
 80131d8:	461a      	mov	r2, r3
 80131da:	d32f      	bcc.n	801323c <quorem+0xf4>
 80131dc:	613c      	str	r4, [r7, #16]
 80131de:	4638      	mov	r0, r7
 80131e0:	f001 fac6 	bl	8014770 <__mcmp>
 80131e4:	2800      	cmp	r0, #0
 80131e6:	db25      	blt.n	8013234 <quorem+0xec>
 80131e8:	4629      	mov	r1, r5
 80131ea:	2000      	movs	r0, #0
 80131ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80131f0:	f8d1 c000 	ldr.w	ip, [r1]
 80131f4:	fa1f fe82 	uxth.w	lr, r2
 80131f8:	fa1f f38c 	uxth.w	r3, ip
 80131fc:	eba3 030e 	sub.w	r3, r3, lr
 8013200:	4403      	add	r3, r0
 8013202:	0c12      	lsrs	r2, r2, #16
 8013204:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013208:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801320c:	b29b      	uxth	r3, r3
 801320e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013212:	45c1      	cmp	r9, r8
 8013214:	f841 3b04 	str.w	r3, [r1], #4
 8013218:	ea4f 4022 	mov.w	r0, r2, asr #16
 801321c:	d2e6      	bcs.n	80131ec <quorem+0xa4>
 801321e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013222:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013226:	b922      	cbnz	r2, 8013232 <quorem+0xea>
 8013228:	3b04      	subs	r3, #4
 801322a:	429d      	cmp	r5, r3
 801322c:	461a      	mov	r2, r3
 801322e:	d30b      	bcc.n	8013248 <quorem+0x100>
 8013230:	613c      	str	r4, [r7, #16]
 8013232:	3601      	adds	r6, #1
 8013234:	4630      	mov	r0, r6
 8013236:	b003      	add	sp, #12
 8013238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801323c:	6812      	ldr	r2, [r2, #0]
 801323e:	3b04      	subs	r3, #4
 8013240:	2a00      	cmp	r2, #0
 8013242:	d1cb      	bne.n	80131dc <quorem+0x94>
 8013244:	3c01      	subs	r4, #1
 8013246:	e7c6      	b.n	80131d6 <quorem+0x8e>
 8013248:	6812      	ldr	r2, [r2, #0]
 801324a:	3b04      	subs	r3, #4
 801324c:	2a00      	cmp	r2, #0
 801324e:	d1ef      	bne.n	8013230 <quorem+0xe8>
 8013250:	3c01      	subs	r4, #1
 8013252:	e7ea      	b.n	801322a <quorem+0xe2>
 8013254:	2000      	movs	r0, #0
 8013256:	e7ee      	b.n	8013236 <quorem+0xee>

08013258 <_dtoa_r>:
 8013258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801325c:	69c7      	ldr	r7, [r0, #28]
 801325e:	b099      	sub	sp, #100	@ 0x64
 8013260:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013264:	ec55 4b10 	vmov	r4, r5, d0
 8013268:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801326a:	9109      	str	r1, [sp, #36]	@ 0x24
 801326c:	4683      	mov	fp, r0
 801326e:	920e      	str	r2, [sp, #56]	@ 0x38
 8013270:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013272:	b97f      	cbnz	r7, 8013294 <_dtoa_r+0x3c>
 8013274:	2010      	movs	r0, #16
 8013276:	f7ff fab7 	bl	80127e8 <malloc>
 801327a:	4602      	mov	r2, r0
 801327c:	f8cb 001c 	str.w	r0, [fp, #28]
 8013280:	b920      	cbnz	r0, 801328c <_dtoa_r+0x34>
 8013282:	4ba7      	ldr	r3, [pc, #668]	@ (8013520 <_dtoa_r+0x2c8>)
 8013284:	21ef      	movs	r1, #239	@ 0xef
 8013286:	48a7      	ldr	r0, [pc, #668]	@ (8013524 <_dtoa_r+0x2cc>)
 8013288:	f7ff ff40 	bl	801310c <__assert_func>
 801328c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013290:	6007      	str	r7, [r0, #0]
 8013292:	60c7      	str	r7, [r0, #12]
 8013294:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013298:	6819      	ldr	r1, [r3, #0]
 801329a:	b159      	cbz	r1, 80132b4 <_dtoa_r+0x5c>
 801329c:	685a      	ldr	r2, [r3, #4]
 801329e:	604a      	str	r2, [r1, #4]
 80132a0:	2301      	movs	r3, #1
 80132a2:	4093      	lsls	r3, r2
 80132a4:	608b      	str	r3, [r1, #8]
 80132a6:	4658      	mov	r0, fp
 80132a8:	f001 f828 	bl	80142fc <_Bfree>
 80132ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80132b0:	2200      	movs	r2, #0
 80132b2:	601a      	str	r2, [r3, #0]
 80132b4:	1e2b      	subs	r3, r5, #0
 80132b6:	bfb9      	ittee	lt
 80132b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80132bc:	9303      	strlt	r3, [sp, #12]
 80132be:	2300      	movge	r3, #0
 80132c0:	6033      	strge	r3, [r6, #0]
 80132c2:	9f03      	ldr	r7, [sp, #12]
 80132c4:	4b98      	ldr	r3, [pc, #608]	@ (8013528 <_dtoa_r+0x2d0>)
 80132c6:	bfbc      	itt	lt
 80132c8:	2201      	movlt	r2, #1
 80132ca:	6032      	strlt	r2, [r6, #0]
 80132cc:	43bb      	bics	r3, r7
 80132ce:	d112      	bne.n	80132f6 <_dtoa_r+0x9e>
 80132d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80132d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80132d6:	6013      	str	r3, [r2, #0]
 80132d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80132dc:	4323      	orrs	r3, r4
 80132de:	f000 854d 	beq.w	8013d7c <_dtoa_r+0xb24>
 80132e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80132e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801353c <_dtoa_r+0x2e4>
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	f000 854f 	beq.w	8013d8c <_dtoa_r+0xb34>
 80132ee:	f10a 0303 	add.w	r3, sl, #3
 80132f2:	f000 bd49 	b.w	8013d88 <_dtoa_r+0xb30>
 80132f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80132fa:	2200      	movs	r2, #0
 80132fc:	ec51 0b17 	vmov	r0, r1, d7
 8013300:	2300      	movs	r3, #0
 8013302:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8013306:	f7ed fc07 	bl	8000b18 <__aeabi_dcmpeq>
 801330a:	4680      	mov	r8, r0
 801330c:	b158      	cbz	r0, 8013326 <_dtoa_r+0xce>
 801330e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013310:	2301      	movs	r3, #1
 8013312:	6013      	str	r3, [r2, #0]
 8013314:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013316:	b113      	cbz	r3, 801331e <_dtoa_r+0xc6>
 8013318:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801331a:	4b84      	ldr	r3, [pc, #528]	@ (801352c <_dtoa_r+0x2d4>)
 801331c:	6013      	str	r3, [r2, #0]
 801331e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013540 <_dtoa_r+0x2e8>
 8013322:	f000 bd33 	b.w	8013d8c <_dtoa_r+0xb34>
 8013326:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801332a:	aa16      	add	r2, sp, #88	@ 0x58
 801332c:	a917      	add	r1, sp, #92	@ 0x5c
 801332e:	4658      	mov	r0, fp
 8013330:	f001 face 	bl	80148d0 <__d2b>
 8013334:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013338:	4681      	mov	r9, r0
 801333a:	2e00      	cmp	r6, #0
 801333c:	d077      	beq.n	801342e <_dtoa_r+0x1d6>
 801333e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013340:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8013344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013348:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801334c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013350:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013354:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013358:	4619      	mov	r1, r3
 801335a:	2200      	movs	r2, #0
 801335c:	4b74      	ldr	r3, [pc, #464]	@ (8013530 <_dtoa_r+0x2d8>)
 801335e:	f7ec ffbb 	bl	80002d8 <__aeabi_dsub>
 8013362:	a369      	add	r3, pc, #420	@ (adr r3, 8013508 <_dtoa_r+0x2b0>)
 8013364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013368:	f7ed f96e 	bl	8000648 <__aeabi_dmul>
 801336c:	a368      	add	r3, pc, #416	@ (adr r3, 8013510 <_dtoa_r+0x2b8>)
 801336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013372:	f7ec ffb3 	bl	80002dc <__adddf3>
 8013376:	4604      	mov	r4, r0
 8013378:	4630      	mov	r0, r6
 801337a:	460d      	mov	r5, r1
 801337c:	f7ed f8fa 	bl	8000574 <__aeabi_i2d>
 8013380:	a365      	add	r3, pc, #404	@ (adr r3, 8013518 <_dtoa_r+0x2c0>)
 8013382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013386:	f7ed f95f 	bl	8000648 <__aeabi_dmul>
 801338a:	4602      	mov	r2, r0
 801338c:	460b      	mov	r3, r1
 801338e:	4620      	mov	r0, r4
 8013390:	4629      	mov	r1, r5
 8013392:	f7ec ffa3 	bl	80002dc <__adddf3>
 8013396:	4604      	mov	r4, r0
 8013398:	460d      	mov	r5, r1
 801339a:	f7ed fc05 	bl	8000ba8 <__aeabi_d2iz>
 801339e:	2200      	movs	r2, #0
 80133a0:	4607      	mov	r7, r0
 80133a2:	2300      	movs	r3, #0
 80133a4:	4620      	mov	r0, r4
 80133a6:	4629      	mov	r1, r5
 80133a8:	f7ed fbc0 	bl	8000b2c <__aeabi_dcmplt>
 80133ac:	b140      	cbz	r0, 80133c0 <_dtoa_r+0x168>
 80133ae:	4638      	mov	r0, r7
 80133b0:	f7ed f8e0 	bl	8000574 <__aeabi_i2d>
 80133b4:	4622      	mov	r2, r4
 80133b6:	462b      	mov	r3, r5
 80133b8:	f7ed fbae 	bl	8000b18 <__aeabi_dcmpeq>
 80133bc:	b900      	cbnz	r0, 80133c0 <_dtoa_r+0x168>
 80133be:	3f01      	subs	r7, #1
 80133c0:	2f16      	cmp	r7, #22
 80133c2:	d851      	bhi.n	8013468 <_dtoa_r+0x210>
 80133c4:	4b5b      	ldr	r3, [pc, #364]	@ (8013534 <_dtoa_r+0x2dc>)
 80133c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80133ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80133d2:	f7ed fbab 	bl	8000b2c <__aeabi_dcmplt>
 80133d6:	2800      	cmp	r0, #0
 80133d8:	d048      	beq.n	801346c <_dtoa_r+0x214>
 80133da:	3f01      	subs	r7, #1
 80133dc:	2300      	movs	r3, #0
 80133de:	9312      	str	r3, [sp, #72]	@ 0x48
 80133e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80133e2:	1b9b      	subs	r3, r3, r6
 80133e4:	1e5a      	subs	r2, r3, #1
 80133e6:	bf44      	itt	mi
 80133e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80133ec:	2300      	movmi	r3, #0
 80133ee:	9208      	str	r2, [sp, #32]
 80133f0:	bf54      	ite	pl
 80133f2:	f04f 0800 	movpl.w	r8, #0
 80133f6:	9308      	strmi	r3, [sp, #32]
 80133f8:	2f00      	cmp	r7, #0
 80133fa:	db39      	blt.n	8013470 <_dtoa_r+0x218>
 80133fc:	9b08      	ldr	r3, [sp, #32]
 80133fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013400:	443b      	add	r3, r7
 8013402:	9308      	str	r3, [sp, #32]
 8013404:	2300      	movs	r3, #0
 8013406:	930a      	str	r3, [sp, #40]	@ 0x28
 8013408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801340a:	2b09      	cmp	r3, #9
 801340c:	d864      	bhi.n	80134d8 <_dtoa_r+0x280>
 801340e:	2b05      	cmp	r3, #5
 8013410:	bfc4      	itt	gt
 8013412:	3b04      	subgt	r3, #4
 8013414:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8013416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013418:	f1a3 0302 	sub.w	r3, r3, #2
 801341c:	bfcc      	ite	gt
 801341e:	2400      	movgt	r4, #0
 8013420:	2401      	movle	r4, #1
 8013422:	2b03      	cmp	r3, #3
 8013424:	d863      	bhi.n	80134ee <_dtoa_r+0x296>
 8013426:	e8df f003 	tbb	[pc, r3]
 801342a:	372a      	.short	0x372a
 801342c:	5535      	.short	0x5535
 801342e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8013432:	441e      	add	r6, r3
 8013434:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013438:	2b20      	cmp	r3, #32
 801343a:	bfc1      	itttt	gt
 801343c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013440:	409f      	lslgt	r7, r3
 8013442:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013446:	fa24 f303 	lsrgt.w	r3, r4, r3
 801344a:	bfd6      	itet	le
 801344c:	f1c3 0320 	rsble	r3, r3, #32
 8013450:	ea47 0003 	orrgt.w	r0, r7, r3
 8013454:	fa04 f003 	lslle.w	r0, r4, r3
 8013458:	f7ed f87c 	bl	8000554 <__aeabi_ui2d>
 801345c:	2201      	movs	r2, #1
 801345e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013462:	3e01      	subs	r6, #1
 8013464:	9214      	str	r2, [sp, #80]	@ 0x50
 8013466:	e777      	b.n	8013358 <_dtoa_r+0x100>
 8013468:	2301      	movs	r3, #1
 801346a:	e7b8      	b.n	80133de <_dtoa_r+0x186>
 801346c:	9012      	str	r0, [sp, #72]	@ 0x48
 801346e:	e7b7      	b.n	80133e0 <_dtoa_r+0x188>
 8013470:	427b      	negs	r3, r7
 8013472:	930a      	str	r3, [sp, #40]	@ 0x28
 8013474:	2300      	movs	r3, #0
 8013476:	eba8 0807 	sub.w	r8, r8, r7
 801347a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801347c:	e7c4      	b.n	8013408 <_dtoa_r+0x1b0>
 801347e:	2300      	movs	r3, #0
 8013480:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013484:	2b00      	cmp	r3, #0
 8013486:	dc35      	bgt.n	80134f4 <_dtoa_r+0x29c>
 8013488:	2301      	movs	r3, #1
 801348a:	9300      	str	r3, [sp, #0]
 801348c:	9307      	str	r3, [sp, #28]
 801348e:	461a      	mov	r2, r3
 8013490:	920e      	str	r2, [sp, #56]	@ 0x38
 8013492:	e00b      	b.n	80134ac <_dtoa_r+0x254>
 8013494:	2301      	movs	r3, #1
 8013496:	e7f3      	b.n	8013480 <_dtoa_r+0x228>
 8013498:	2300      	movs	r3, #0
 801349a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801349c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801349e:	18fb      	adds	r3, r7, r3
 80134a0:	9300      	str	r3, [sp, #0]
 80134a2:	3301      	adds	r3, #1
 80134a4:	2b01      	cmp	r3, #1
 80134a6:	9307      	str	r3, [sp, #28]
 80134a8:	bfb8      	it	lt
 80134aa:	2301      	movlt	r3, #1
 80134ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 80134b0:	2100      	movs	r1, #0
 80134b2:	2204      	movs	r2, #4
 80134b4:	f102 0514 	add.w	r5, r2, #20
 80134b8:	429d      	cmp	r5, r3
 80134ba:	d91f      	bls.n	80134fc <_dtoa_r+0x2a4>
 80134bc:	6041      	str	r1, [r0, #4]
 80134be:	4658      	mov	r0, fp
 80134c0:	f000 fedc 	bl	801427c <_Balloc>
 80134c4:	4682      	mov	sl, r0
 80134c6:	2800      	cmp	r0, #0
 80134c8:	d13c      	bne.n	8013544 <_dtoa_r+0x2ec>
 80134ca:	4b1b      	ldr	r3, [pc, #108]	@ (8013538 <_dtoa_r+0x2e0>)
 80134cc:	4602      	mov	r2, r0
 80134ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80134d2:	e6d8      	b.n	8013286 <_dtoa_r+0x2e>
 80134d4:	2301      	movs	r3, #1
 80134d6:	e7e0      	b.n	801349a <_dtoa_r+0x242>
 80134d8:	2401      	movs	r4, #1
 80134da:	2300      	movs	r3, #0
 80134dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80134de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80134e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80134e4:	9300      	str	r3, [sp, #0]
 80134e6:	9307      	str	r3, [sp, #28]
 80134e8:	2200      	movs	r2, #0
 80134ea:	2312      	movs	r3, #18
 80134ec:	e7d0      	b.n	8013490 <_dtoa_r+0x238>
 80134ee:	2301      	movs	r3, #1
 80134f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80134f2:	e7f5      	b.n	80134e0 <_dtoa_r+0x288>
 80134f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80134f6:	9300      	str	r3, [sp, #0]
 80134f8:	9307      	str	r3, [sp, #28]
 80134fa:	e7d7      	b.n	80134ac <_dtoa_r+0x254>
 80134fc:	3101      	adds	r1, #1
 80134fe:	0052      	lsls	r2, r2, #1
 8013500:	e7d8      	b.n	80134b4 <_dtoa_r+0x25c>
 8013502:	bf00      	nop
 8013504:	f3af 8000 	nop.w
 8013508:	636f4361 	.word	0x636f4361
 801350c:	3fd287a7 	.word	0x3fd287a7
 8013510:	8b60c8b3 	.word	0x8b60c8b3
 8013514:	3fc68a28 	.word	0x3fc68a28
 8013518:	509f79fb 	.word	0x509f79fb
 801351c:	3fd34413 	.word	0x3fd34413
 8013520:	08016328 	.word	0x08016328
 8013524:	080164e3 	.word	0x080164e3
 8013528:	7ff00000 	.word	0x7ff00000
 801352c:	08016305 	.word	0x08016305
 8013530:	3ff80000 	.word	0x3ff80000
 8013534:	080165f0 	.word	0x080165f0
 8013538:	0801653b 	.word	0x0801653b
 801353c:	080164df 	.word	0x080164df
 8013540:	08016304 	.word	0x08016304
 8013544:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013548:	6018      	str	r0, [r3, #0]
 801354a:	9b07      	ldr	r3, [sp, #28]
 801354c:	2b0e      	cmp	r3, #14
 801354e:	f200 80a4 	bhi.w	801369a <_dtoa_r+0x442>
 8013552:	2c00      	cmp	r4, #0
 8013554:	f000 80a1 	beq.w	801369a <_dtoa_r+0x442>
 8013558:	2f00      	cmp	r7, #0
 801355a:	dd33      	ble.n	80135c4 <_dtoa_r+0x36c>
 801355c:	4bad      	ldr	r3, [pc, #692]	@ (8013814 <_dtoa_r+0x5bc>)
 801355e:	f007 020f 	and.w	r2, r7, #15
 8013562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013566:	ed93 7b00 	vldr	d7, [r3]
 801356a:	05f8      	lsls	r0, r7, #23
 801356c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013570:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013574:	d516      	bpl.n	80135a4 <_dtoa_r+0x34c>
 8013576:	4ba8      	ldr	r3, [pc, #672]	@ (8013818 <_dtoa_r+0x5c0>)
 8013578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801357c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013580:	f7ed f98c 	bl	800089c <__aeabi_ddiv>
 8013584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013588:	f004 040f 	and.w	r4, r4, #15
 801358c:	2603      	movs	r6, #3
 801358e:	4da2      	ldr	r5, [pc, #648]	@ (8013818 <_dtoa_r+0x5c0>)
 8013590:	b954      	cbnz	r4, 80135a8 <_dtoa_r+0x350>
 8013592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801359a:	f7ed f97f 	bl	800089c <__aeabi_ddiv>
 801359e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135a2:	e028      	b.n	80135f6 <_dtoa_r+0x39e>
 80135a4:	2602      	movs	r6, #2
 80135a6:	e7f2      	b.n	801358e <_dtoa_r+0x336>
 80135a8:	07e1      	lsls	r1, r4, #31
 80135aa:	d508      	bpl.n	80135be <_dtoa_r+0x366>
 80135ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80135b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80135b4:	f7ed f848 	bl	8000648 <__aeabi_dmul>
 80135b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80135bc:	3601      	adds	r6, #1
 80135be:	1064      	asrs	r4, r4, #1
 80135c0:	3508      	adds	r5, #8
 80135c2:	e7e5      	b.n	8013590 <_dtoa_r+0x338>
 80135c4:	f000 80d2 	beq.w	801376c <_dtoa_r+0x514>
 80135c8:	427c      	negs	r4, r7
 80135ca:	4b92      	ldr	r3, [pc, #584]	@ (8013814 <_dtoa_r+0x5bc>)
 80135cc:	4d92      	ldr	r5, [pc, #584]	@ (8013818 <_dtoa_r+0x5c0>)
 80135ce:	f004 020f 	and.w	r2, r4, #15
 80135d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80135d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80135de:	f7ed f833 	bl	8000648 <__aeabi_dmul>
 80135e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135e6:	1124      	asrs	r4, r4, #4
 80135e8:	2300      	movs	r3, #0
 80135ea:	2602      	movs	r6, #2
 80135ec:	2c00      	cmp	r4, #0
 80135ee:	f040 80b2 	bne.w	8013756 <_dtoa_r+0x4fe>
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d1d3      	bne.n	801359e <_dtoa_r+0x346>
 80135f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80135f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	f000 80b7 	beq.w	8013770 <_dtoa_r+0x518>
 8013602:	4b86      	ldr	r3, [pc, #536]	@ (801381c <_dtoa_r+0x5c4>)
 8013604:	2200      	movs	r2, #0
 8013606:	4620      	mov	r0, r4
 8013608:	4629      	mov	r1, r5
 801360a:	f7ed fa8f 	bl	8000b2c <__aeabi_dcmplt>
 801360e:	2800      	cmp	r0, #0
 8013610:	f000 80ae 	beq.w	8013770 <_dtoa_r+0x518>
 8013614:	9b07      	ldr	r3, [sp, #28]
 8013616:	2b00      	cmp	r3, #0
 8013618:	f000 80aa 	beq.w	8013770 <_dtoa_r+0x518>
 801361c:	9b00      	ldr	r3, [sp, #0]
 801361e:	2b00      	cmp	r3, #0
 8013620:	dd37      	ble.n	8013692 <_dtoa_r+0x43a>
 8013622:	1e7b      	subs	r3, r7, #1
 8013624:	9304      	str	r3, [sp, #16]
 8013626:	4620      	mov	r0, r4
 8013628:	4b7d      	ldr	r3, [pc, #500]	@ (8013820 <_dtoa_r+0x5c8>)
 801362a:	2200      	movs	r2, #0
 801362c:	4629      	mov	r1, r5
 801362e:	f7ed f80b 	bl	8000648 <__aeabi_dmul>
 8013632:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013636:	9c00      	ldr	r4, [sp, #0]
 8013638:	3601      	adds	r6, #1
 801363a:	4630      	mov	r0, r6
 801363c:	f7ec ff9a 	bl	8000574 <__aeabi_i2d>
 8013640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013644:	f7ed f800 	bl	8000648 <__aeabi_dmul>
 8013648:	4b76      	ldr	r3, [pc, #472]	@ (8013824 <_dtoa_r+0x5cc>)
 801364a:	2200      	movs	r2, #0
 801364c:	f7ec fe46 	bl	80002dc <__adddf3>
 8013650:	4605      	mov	r5, r0
 8013652:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013656:	2c00      	cmp	r4, #0
 8013658:	f040 808d 	bne.w	8013776 <_dtoa_r+0x51e>
 801365c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013660:	4b71      	ldr	r3, [pc, #452]	@ (8013828 <_dtoa_r+0x5d0>)
 8013662:	2200      	movs	r2, #0
 8013664:	f7ec fe38 	bl	80002d8 <__aeabi_dsub>
 8013668:	4602      	mov	r2, r0
 801366a:	460b      	mov	r3, r1
 801366c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013670:	462a      	mov	r2, r5
 8013672:	4633      	mov	r3, r6
 8013674:	f7ed fa78 	bl	8000b68 <__aeabi_dcmpgt>
 8013678:	2800      	cmp	r0, #0
 801367a:	f040 828b 	bne.w	8013b94 <_dtoa_r+0x93c>
 801367e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013682:	462a      	mov	r2, r5
 8013684:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013688:	f7ed fa50 	bl	8000b2c <__aeabi_dcmplt>
 801368c:	2800      	cmp	r0, #0
 801368e:	f040 8128 	bne.w	80138e2 <_dtoa_r+0x68a>
 8013692:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013696:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801369a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801369c:	2b00      	cmp	r3, #0
 801369e:	f2c0 815a 	blt.w	8013956 <_dtoa_r+0x6fe>
 80136a2:	2f0e      	cmp	r7, #14
 80136a4:	f300 8157 	bgt.w	8013956 <_dtoa_r+0x6fe>
 80136a8:	4b5a      	ldr	r3, [pc, #360]	@ (8013814 <_dtoa_r+0x5bc>)
 80136aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80136ae:	ed93 7b00 	vldr	d7, [r3]
 80136b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	ed8d 7b00 	vstr	d7, [sp]
 80136ba:	da03      	bge.n	80136c4 <_dtoa_r+0x46c>
 80136bc:	9b07      	ldr	r3, [sp, #28]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	f340 8101 	ble.w	80138c6 <_dtoa_r+0x66e>
 80136c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80136c8:	4656      	mov	r6, sl
 80136ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80136ce:	4620      	mov	r0, r4
 80136d0:	4629      	mov	r1, r5
 80136d2:	f7ed f8e3 	bl	800089c <__aeabi_ddiv>
 80136d6:	f7ed fa67 	bl	8000ba8 <__aeabi_d2iz>
 80136da:	4680      	mov	r8, r0
 80136dc:	f7ec ff4a 	bl	8000574 <__aeabi_i2d>
 80136e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80136e4:	f7ec ffb0 	bl	8000648 <__aeabi_dmul>
 80136e8:	4602      	mov	r2, r0
 80136ea:	460b      	mov	r3, r1
 80136ec:	4620      	mov	r0, r4
 80136ee:	4629      	mov	r1, r5
 80136f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80136f4:	f7ec fdf0 	bl	80002d8 <__aeabi_dsub>
 80136f8:	f806 4b01 	strb.w	r4, [r6], #1
 80136fc:	9d07      	ldr	r5, [sp, #28]
 80136fe:	eba6 040a 	sub.w	r4, r6, sl
 8013702:	42a5      	cmp	r5, r4
 8013704:	4602      	mov	r2, r0
 8013706:	460b      	mov	r3, r1
 8013708:	f040 8117 	bne.w	801393a <_dtoa_r+0x6e2>
 801370c:	f7ec fde6 	bl	80002dc <__adddf3>
 8013710:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013714:	4604      	mov	r4, r0
 8013716:	460d      	mov	r5, r1
 8013718:	f7ed fa26 	bl	8000b68 <__aeabi_dcmpgt>
 801371c:	2800      	cmp	r0, #0
 801371e:	f040 80f9 	bne.w	8013914 <_dtoa_r+0x6bc>
 8013722:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013726:	4620      	mov	r0, r4
 8013728:	4629      	mov	r1, r5
 801372a:	f7ed f9f5 	bl	8000b18 <__aeabi_dcmpeq>
 801372e:	b118      	cbz	r0, 8013738 <_dtoa_r+0x4e0>
 8013730:	f018 0f01 	tst.w	r8, #1
 8013734:	f040 80ee 	bne.w	8013914 <_dtoa_r+0x6bc>
 8013738:	4649      	mov	r1, r9
 801373a:	4658      	mov	r0, fp
 801373c:	f000 fdde 	bl	80142fc <_Bfree>
 8013740:	2300      	movs	r3, #0
 8013742:	7033      	strb	r3, [r6, #0]
 8013744:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013746:	3701      	adds	r7, #1
 8013748:	601f      	str	r7, [r3, #0]
 801374a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801374c:	2b00      	cmp	r3, #0
 801374e:	f000 831d 	beq.w	8013d8c <_dtoa_r+0xb34>
 8013752:	601e      	str	r6, [r3, #0]
 8013754:	e31a      	b.n	8013d8c <_dtoa_r+0xb34>
 8013756:	07e2      	lsls	r2, r4, #31
 8013758:	d505      	bpl.n	8013766 <_dtoa_r+0x50e>
 801375a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801375e:	f7ec ff73 	bl	8000648 <__aeabi_dmul>
 8013762:	3601      	adds	r6, #1
 8013764:	2301      	movs	r3, #1
 8013766:	1064      	asrs	r4, r4, #1
 8013768:	3508      	adds	r5, #8
 801376a:	e73f      	b.n	80135ec <_dtoa_r+0x394>
 801376c:	2602      	movs	r6, #2
 801376e:	e742      	b.n	80135f6 <_dtoa_r+0x39e>
 8013770:	9c07      	ldr	r4, [sp, #28]
 8013772:	9704      	str	r7, [sp, #16]
 8013774:	e761      	b.n	801363a <_dtoa_r+0x3e2>
 8013776:	4b27      	ldr	r3, [pc, #156]	@ (8013814 <_dtoa_r+0x5bc>)
 8013778:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801377a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801377e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013782:	4454      	add	r4, sl
 8013784:	2900      	cmp	r1, #0
 8013786:	d053      	beq.n	8013830 <_dtoa_r+0x5d8>
 8013788:	4928      	ldr	r1, [pc, #160]	@ (801382c <_dtoa_r+0x5d4>)
 801378a:	2000      	movs	r0, #0
 801378c:	f7ed f886 	bl	800089c <__aeabi_ddiv>
 8013790:	4633      	mov	r3, r6
 8013792:	462a      	mov	r2, r5
 8013794:	f7ec fda0 	bl	80002d8 <__aeabi_dsub>
 8013798:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801379c:	4656      	mov	r6, sl
 801379e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80137a2:	f7ed fa01 	bl	8000ba8 <__aeabi_d2iz>
 80137a6:	4605      	mov	r5, r0
 80137a8:	f7ec fee4 	bl	8000574 <__aeabi_i2d>
 80137ac:	4602      	mov	r2, r0
 80137ae:	460b      	mov	r3, r1
 80137b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80137b4:	f7ec fd90 	bl	80002d8 <__aeabi_dsub>
 80137b8:	3530      	adds	r5, #48	@ 0x30
 80137ba:	4602      	mov	r2, r0
 80137bc:	460b      	mov	r3, r1
 80137be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80137c2:	f806 5b01 	strb.w	r5, [r6], #1
 80137c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80137ca:	f7ed f9af 	bl	8000b2c <__aeabi_dcmplt>
 80137ce:	2800      	cmp	r0, #0
 80137d0:	d171      	bne.n	80138b6 <_dtoa_r+0x65e>
 80137d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80137d6:	4911      	ldr	r1, [pc, #68]	@ (801381c <_dtoa_r+0x5c4>)
 80137d8:	2000      	movs	r0, #0
 80137da:	f7ec fd7d 	bl	80002d8 <__aeabi_dsub>
 80137de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80137e2:	f7ed f9a3 	bl	8000b2c <__aeabi_dcmplt>
 80137e6:	2800      	cmp	r0, #0
 80137e8:	f040 8095 	bne.w	8013916 <_dtoa_r+0x6be>
 80137ec:	42a6      	cmp	r6, r4
 80137ee:	f43f af50 	beq.w	8013692 <_dtoa_r+0x43a>
 80137f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80137f6:	4b0a      	ldr	r3, [pc, #40]	@ (8013820 <_dtoa_r+0x5c8>)
 80137f8:	2200      	movs	r2, #0
 80137fa:	f7ec ff25 	bl	8000648 <__aeabi_dmul>
 80137fe:	4b08      	ldr	r3, [pc, #32]	@ (8013820 <_dtoa_r+0x5c8>)
 8013800:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013804:	2200      	movs	r2, #0
 8013806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801380a:	f7ec ff1d 	bl	8000648 <__aeabi_dmul>
 801380e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013812:	e7c4      	b.n	801379e <_dtoa_r+0x546>
 8013814:	080165f0 	.word	0x080165f0
 8013818:	080165c8 	.word	0x080165c8
 801381c:	3ff00000 	.word	0x3ff00000
 8013820:	40240000 	.word	0x40240000
 8013824:	401c0000 	.word	0x401c0000
 8013828:	40140000 	.word	0x40140000
 801382c:	3fe00000 	.word	0x3fe00000
 8013830:	4631      	mov	r1, r6
 8013832:	4628      	mov	r0, r5
 8013834:	f7ec ff08 	bl	8000648 <__aeabi_dmul>
 8013838:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801383c:	9415      	str	r4, [sp, #84]	@ 0x54
 801383e:	4656      	mov	r6, sl
 8013840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013844:	f7ed f9b0 	bl	8000ba8 <__aeabi_d2iz>
 8013848:	4605      	mov	r5, r0
 801384a:	f7ec fe93 	bl	8000574 <__aeabi_i2d>
 801384e:	4602      	mov	r2, r0
 8013850:	460b      	mov	r3, r1
 8013852:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013856:	f7ec fd3f 	bl	80002d8 <__aeabi_dsub>
 801385a:	3530      	adds	r5, #48	@ 0x30
 801385c:	f806 5b01 	strb.w	r5, [r6], #1
 8013860:	4602      	mov	r2, r0
 8013862:	460b      	mov	r3, r1
 8013864:	42a6      	cmp	r6, r4
 8013866:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801386a:	f04f 0200 	mov.w	r2, #0
 801386e:	d124      	bne.n	80138ba <_dtoa_r+0x662>
 8013870:	4bac      	ldr	r3, [pc, #688]	@ (8013b24 <_dtoa_r+0x8cc>)
 8013872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013876:	f7ec fd31 	bl	80002dc <__adddf3>
 801387a:	4602      	mov	r2, r0
 801387c:	460b      	mov	r3, r1
 801387e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013882:	f7ed f971 	bl	8000b68 <__aeabi_dcmpgt>
 8013886:	2800      	cmp	r0, #0
 8013888:	d145      	bne.n	8013916 <_dtoa_r+0x6be>
 801388a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801388e:	49a5      	ldr	r1, [pc, #660]	@ (8013b24 <_dtoa_r+0x8cc>)
 8013890:	2000      	movs	r0, #0
 8013892:	f7ec fd21 	bl	80002d8 <__aeabi_dsub>
 8013896:	4602      	mov	r2, r0
 8013898:	460b      	mov	r3, r1
 801389a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801389e:	f7ed f945 	bl	8000b2c <__aeabi_dcmplt>
 80138a2:	2800      	cmp	r0, #0
 80138a4:	f43f aef5 	beq.w	8013692 <_dtoa_r+0x43a>
 80138a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80138aa:	1e73      	subs	r3, r6, #1
 80138ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80138ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80138b2:	2b30      	cmp	r3, #48	@ 0x30
 80138b4:	d0f8      	beq.n	80138a8 <_dtoa_r+0x650>
 80138b6:	9f04      	ldr	r7, [sp, #16]
 80138b8:	e73e      	b.n	8013738 <_dtoa_r+0x4e0>
 80138ba:	4b9b      	ldr	r3, [pc, #620]	@ (8013b28 <_dtoa_r+0x8d0>)
 80138bc:	f7ec fec4 	bl	8000648 <__aeabi_dmul>
 80138c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80138c4:	e7bc      	b.n	8013840 <_dtoa_r+0x5e8>
 80138c6:	d10c      	bne.n	80138e2 <_dtoa_r+0x68a>
 80138c8:	4b98      	ldr	r3, [pc, #608]	@ (8013b2c <_dtoa_r+0x8d4>)
 80138ca:	2200      	movs	r2, #0
 80138cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138d0:	f7ec feba 	bl	8000648 <__aeabi_dmul>
 80138d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80138d8:	f7ed f93c 	bl	8000b54 <__aeabi_dcmpge>
 80138dc:	2800      	cmp	r0, #0
 80138de:	f000 8157 	beq.w	8013b90 <_dtoa_r+0x938>
 80138e2:	2400      	movs	r4, #0
 80138e4:	4625      	mov	r5, r4
 80138e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138e8:	43db      	mvns	r3, r3
 80138ea:	9304      	str	r3, [sp, #16]
 80138ec:	4656      	mov	r6, sl
 80138ee:	2700      	movs	r7, #0
 80138f0:	4621      	mov	r1, r4
 80138f2:	4658      	mov	r0, fp
 80138f4:	f000 fd02 	bl	80142fc <_Bfree>
 80138f8:	2d00      	cmp	r5, #0
 80138fa:	d0dc      	beq.n	80138b6 <_dtoa_r+0x65e>
 80138fc:	b12f      	cbz	r7, 801390a <_dtoa_r+0x6b2>
 80138fe:	42af      	cmp	r7, r5
 8013900:	d003      	beq.n	801390a <_dtoa_r+0x6b2>
 8013902:	4639      	mov	r1, r7
 8013904:	4658      	mov	r0, fp
 8013906:	f000 fcf9 	bl	80142fc <_Bfree>
 801390a:	4629      	mov	r1, r5
 801390c:	4658      	mov	r0, fp
 801390e:	f000 fcf5 	bl	80142fc <_Bfree>
 8013912:	e7d0      	b.n	80138b6 <_dtoa_r+0x65e>
 8013914:	9704      	str	r7, [sp, #16]
 8013916:	4633      	mov	r3, r6
 8013918:	461e      	mov	r6, r3
 801391a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801391e:	2a39      	cmp	r2, #57	@ 0x39
 8013920:	d107      	bne.n	8013932 <_dtoa_r+0x6da>
 8013922:	459a      	cmp	sl, r3
 8013924:	d1f8      	bne.n	8013918 <_dtoa_r+0x6c0>
 8013926:	9a04      	ldr	r2, [sp, #16]
 8013928:	3201      	adds	r2, #1
 801392a:	9204      	str	r2, [sp, #16]
 801392c:	2230      	movs	r2, #48	@ 0x30
 801392e:	f88a 2000 	strb.w	r2, [sl]
 8013932:	781a      	ldrb	r2, [r3, #0]
 8013934:	3201      	adds	r2, #1
 8013936:	701a      	strb	r2, [r3, #0]
 8013938:	e7bd      	b.n	80138b6 <_dtoa_r+0x65e>
 801393a:	4b7b      	ldr	r3, [pc, #492]	@ (8013b28 <_dtoa_r+0x8d0>)
 801393c:	2200      	movs	r2, #0
 801393e:	f7ec fe83 	bl	8000648 <__aeabi_dmul>
 8013942:	2200      	movs	r2, #0
 8013944:	2300      	movs	r3, #0
 8013946:	4604      	mov	r4, r0
 8013948:	460d      	mov	r5, r1
 801394a:	f7ed f8e5 	bl	8000b18 <__aeabi_dcmpeq>
 801394e:	2800      	cmp	r0, #0
 8013950:	f43f aebb 	beq.w	80136ca <_dtoa_r+0x472>
 8013954:	e6f0      	b.n	8013738 <_dtoa_r+0x4e0>
 8013956:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013958:	2a00      	cmp	r2, #0
 801395a:	f000 80db 	beq.w	8013b14 <_dtoa_r+0x8bc>
 801395e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013960:	2a01      	cmp	r2, #1
 8013962:	f300 80bf 	bgt.w	8013ae4 <_dtoa_r+0x88c>
 8013966:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013968:	2a00      	cmp	r2, #0
 801396a:	f000 80b7 	beq.w	8013adc <_dtoa_r+0x884>
 801396e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013972:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013974:	4646      	mov	r6, r8
 8013976:	9a08      	ldr	r2, [sp, #32]
 8013978:	2101      	movs	r1, #1
 801397a:	441a      	add	r2, r3
 801397c:	4658      	mov	r0, fp
 801397e:	4498      	add	r8, r3
 8013980:	9208      	str	r2, [sp, #32]
 8013982:	f000 fd6f 	bl	8014464 <__i2b>
 8013986:	4605      	mov	r5, r0
 8013988:	b15e      	cbz	r6, 80139a2 <_dtoa_r+0x74a>
 801398a:	9b08      	ldr	r3, [sp, #32]
 801398c:	2b00      	cmp	r3, #0
 801398e:	dd08      	ble.n	80139a2 <_dtoa_r+0x74a>
 8013990:	42b3      	cmp	r3, r6
 8013992:	9a08      	ldr	r2, [sp, #32]
 8013994:	bfa8      	it	ge
 8013996:	4633      	movge	r3, r6
 8013998:	eba8 0803 	sub.w	r8, r8, r3
 801399c:	1af6      	subs	r6, r6, r3
 801399e:	1ad3      	subs	r3, r2, r3
 80139a0:	9308      	str	r3, [sp, #32]
 80139a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80139a4:	b1f3      	cbz	r3, 80139e4 <_dtoa_r+0x78c>
 80139a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	f000 80b7 	beq.w	8013b1c <_dtoa_r+0x8c4>
 80139ae:	b18c      	cbz	r4, 80139d4 <_dtoa_r+0x77c>
 80139b0:	4629      	mov	r1, r5
 80139b2:	4622      	mov	r2, r4
 80139b4:	4658      	mov	r0, fp
 80139b6:	f000 fe15 	bl	80145e4 <__pow5mult>
 80139ba:	464a      	mov	r2, r9
 80139bc:	4601      	mov	r1, r0
 80139be:	4605      	mov	r5, r0
 80139c0:	4658      	mov	r0, fp
 80139c2:	f000 fd65 	bl	8014490 <__multiply>
 80139c6:	4649      	mov	r1, r9
 80139c8:	9004      	str	r0, [sp, #16]
 80139ca:	4658      	mov	r0, fp
 80139cc:	f000 fc96 	bl	80142fc <_Bfree>
 80139d0:	9b04      	ldr	r3, [sp, #16]
 80139d2:	4699      	mov	r9, r3
 80139d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80139d6:	1b1a      	subs	r2, r3, r4
 80139d8:	d004      	beq.n	80139e4 <_dtoa_r+0x78c>
 80139da:	4649      	mov	r1, r9
 80139dc:	4658      	mov	r0, fp
 80139de:	f000 fe01 	bl	80145e4 <__pow5mult>
 80139e2:	4681      	mov	r9, r0
 80139e4:	2101      	movs	r1, #1
 80139e6:	4658      	mov	r0, fp
 80139e8:	f000 fd3c 	bl	8014464 <__i2b>
 80139ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80139ee:	4604      	mov	r4, r0
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	f000 81cf 	beq.w	8013d94 <_dtoa_r+0xb3c>
 80139f6:	461a      	mov	r2, r3
 80139f8:	4601      	mov	r1, r0
 80139fa:	4658      	mov	r0, fp
 80139fc:	f000 fdf2 	bl	80145e4 <__pow5mult>
 8013a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a02:	2b01      	cmp	r3, #1
 8013a04:	4604      	mov	r4, r0
 8013a06:	f300 8095 	bgt.w	8013b34 <_dtoa_r+0x8dc>
 8013a0a:	9b02      	ldr	r3, [sp, #8]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	f040 8087 	bne.w	8013b20 <_dtoa_r+0x8c8>
 8013a12:	9b03      	ldr	r3, [sp, #12]
 8013a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	f040 8089 	bne.w	8013b30 <_dtoa_r+0x8d8>
 8013a1e:	9b03      	ldr	r3, [sp, #12]
 8013a20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013a24:	0d1b      	lsrs	r3, r3, #20
 8013a26:	051b      	lsls	r3, r3, #20
 8013a28:	b12b      	cbz	r3, 8013a36 <_dtoa_r+0x7de>
 8013a2a:	9b08      	ldr	r3, [sp, #32]
 8013a2c:	3301      	adds	r3, #1
 8013a2e:	9308      	str	r3, [sp, #32]
 8013a30:	f108 0801 	add.w	r8, r8, #1
 8013a34:	2301      	movs	r3, #1
 8013a36:	930a      	str	r3, [sp, #40]	@ 0x28
 8013a38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	f000 81b0 	beq.w	8013da0 <_dtoa_r+0xb48>
 8013a40:	6923      	ldr	r3, [r4, #16]
 8013a42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013a46:	6918      	ldr	r0, [r3, #16]
 8013a48:	f000 fcc0 	bl	80143cc <__hi0bits>
 8013a4c:	f1c0 0020 	rsb	r0, r0, #32
 8013a50:	9b08      	ldr	r3, [sp, #32]
 8013a52:	4418      	add	r0, r3
 8013a54:	f010 001f 	ands.w	r0, r0, #31
 8013a58:	d077      	beq.n	8013b4a <_dtoa_r+0x8f2>
 8013a5a:	f1c0 0320 	rsb	r3, r0, #32
 8013a5e:	2b04      	cmp	r3, #4
 8013a60:	dd6b      	ble.n	8013b3a <_dtoa_r+0x8e2>
 8013a62:	9b08      	ldr	r3, [sp, #32]
 8013a64:	f1c0 001c 	rsb	r0, r0, #28
 8013a68:	4403      	add	r3, r0
 8013a6a:	4480      	add	r8, r0
 8013a6c:	4406      	add	r6, r0
 8013a6e:	9308      	str	r3, [sp, #32]
 8013a70:	f1b8 0f00 	cmp.w	r8, #0
 8013a74:	dd05      	ble.n	8013a82 <_dtoa_r+0x82a>
 8013a76:	4649      	mov	r1, r9
 8013a78:	4642      	mov	r2, r8
 8013a7a:	4658      	mov	r0, fp
 8013a7c:	f000 fe0c 	bl	8014698 <__lshift>
 8013a80:	4681      	mov	r9, r0
 8013a82:	9b08      	ldr	r3, [sp, #32]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	dd05      	ble.n	8013a94 <_dtoa_r+0x83c>
 8013a88:	4621      	mov	r1, r4
 8013a8a:	461a      	mov	r2, r3
 8013a8c:	4658      	mov	r0, fp
 8013a8e:	f000 fe03 	bl	8014698 <__lshift>
 8013a92:	4604      	mov	r4, r0
 8013a94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d059      	beq.n	8013b4e <_dtoa_r+0x8f6>
 8013a9a:	4621      	mov	r1, r4
 8013a9c:	4648      	mov	r0, r9
 8013a9e:	f000 fe67 	bl	8014770 <__mcmp>
 8013aa2:	2800      	cmp	r0, #0
 8013aa4:	da53      	bge.n	8013b4e <_dtoa_r+0x8f6>
 8013aa6:	1e7b      	subs	r3, r7, #1
 8013aa8:	9304      	str	r3, [sp, #16]
 8013aaa:	4649      	mov	r1, r9
 8013aac:	2300      	movs	r3, #0
 8013aae:	220a      	movs	r2, #10
 8013ab0:	4658      	mov	r0, fp
 8013ab2:	f000 fc45 	bl	8014340 <__multadd>
 8013ab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ab8:	4681      	mov	r9, r0
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	f000 8172 	beq.w	8013da4 <_dtoa_r+0xb4c>
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	4629      	mov	r1, r5
 8013ac4:	220a      	movs	r2, #10
 8013ac6:	4658      	mov	r0, fp
 8013ac8:	f000 fc3a 	bl	8014340 <__multadd>
 8013acc:	9b00      	ldr	r3, [sp, #0]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	4605      	mov	r5, r0
 8013ad2:	dc67      	bgt.n	8013ba4 <_dtoa_r+0x94c>
 8013ad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ad6:	2b02      	cmp	r3, #2
 8013ad8:	dc41      	bgt.n	8013b5e <_dtoa_r+0x906>
 8013ada:	e063      	b.n	8013ba4 <_dtoa_r+0x94c>
 8013adc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013ade:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013ae2:	e746      	b.n	8013972 <_dtoa_r+0x71a>
 8013ae4:	9b07      	ldr	r3, [sp, #28]
 8013ae6:	1e5c      	subs	r4, r3, #1
 8013ae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013aea:	42a3      	cmp	r3, r4
 8013aec:	bfbf      	itttt	lt
 8013aee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013af0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8013af2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8013af4:	1ae3      	sublt	r3, r4, r3
 8013af6:	bfb4      	ite	lt
 8013af8:	18d2      	addlt	r2, r2, r3
 8013afa:	1b1c      	subge	r4, r3, r4
 8013afc:	9b07      	ldr	r3, [sp, #28]
 8013afe:	bfbc      	itt	lt
 8013b00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8013b02:	2400      	movlt	r4, #0
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	bfb5      	itete	lt
 8013b08:	eba8 0603 	sublt.w	r6, r8, r3
 8013b0c:	9b07      	ldrge	r3, [sp, #28]
 8013b0e:	2300      	movlt	r3, #0
 8013b10:	4646      	movge	r6, r8
 8013b12:	e730      	b.n	8013976 <_dtoa_r+0x71e>
 8013b14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013b16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013b18:	4646      	mov	r6, r8
 8013b1a:	e735      	b.n	8013988 <_dtoa_r+0x730>
 8013b1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013b1e:	e75c      	b.n	80139da <_dtoa_r+0x782>
 8013b20:	2300      	movs	r3, #0
 8013b22:	e788      	b.n	8013a36 <_dtoa_r+0x7de>
 8013b24:	3fe00000 	.word	0x3fe00000
 8013b28:	40240000 	.word	0x40240000
 8013b2c:	40140000 	.word	0x40140000
 8013b30:	9b02      	ldr	r3, [sp, #8]
 8013b32:	e780      	b.n	8013a36 <_dtoa_r+0x7de>
 8013b34:	2300      	movs	r3, #0
 8013b36:	930a      	str	r3, [sp, #40]	@ 0x28
 8013b38:	e782      	b.n	8013a40 <_dtoa_r+0x7e8>
 8013b3a:	d099      	beq.n	8013a70 <_dtoa_r+0x818>
 8013b3c:	9a08      	ldr	r2, [sp, #32]
 8013b3e:	331c      	adds	r3, #28
 8013b40:	441a      	add	r2, r3
 8013b42:	4498      	add	r8, r3
 8013b44:	441e      	add	r6, r3
 8013b46:	9208      	str	r2, [sp, #32]
 8013b48:	e792      	b.n	8013a70 <_dtoa_r+0x818>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	e7f6      	b.n	8013b3c <_dtoa_r+0x8e4>
 8013b4e:	9b07      	ldr	r3, [sp, #28]
 8013b50:	9704      	str	r7, [sp, #16]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	dc20      	bgt.n	8013b98 <_dtoa_r+0x940>
 8013b56:	9300      	str	r3, [sp, #0]
 8013b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b5a:	2b02      	cmp	r3, #2
 8013b5c:	dd1e      	ble.n	8013b9c <_dtoa_r+0x944>
 8013b5e:	9b00      	ldr	r3, [sp, #0]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	f47f aec0 	bne.w	80138e6 <_dtoa_r+0x68e>
 8013b66:	4621      	mov	r1, r4
 8013b68:	2205      	movs	r2, #5
 8013b6a:	4658      	mov	r0, fp
 8013b6c:	f000 fbe8 	bl	8014340 <__multadd>
 8013b70:	4601      	mov	r1, r0
 8013b72:	4604      	mov	r4, r0
 8013b74:	4648      	mov	r0, r9
 8013b76:	f000 fdfb 	bl	8014770 <__mcmp>
 8013b7a:	2800      	cmp	r0, #0
 8013b7c:	f77f aeb3 	ble.w	80138e6 <_dtoa_r+0x68e>
 8013b80:	4656      	mov	r6, sl
 8013b82:	2331      	movs	r3, #49	@ 0x31
 8013b84:	f806 3b01 	strb.w	r3, [r6], #1
 8013b88:	9b04      	ldr	r3, [sp, #16]
 8013b8a:	3301      	adds	r3, #1
 8013b8c:	9304      	str	r3, [sp, #16]
 8013b8e:	e6ae      	b.n	80138ee <_dtoa_r+0x696>
 8013b90:	9c07      	ldr	r4, [sp, #28]
 8013b92:	9704      	str	r7, [sp, #16]
 8013b94:	4625      	mov	r5, r4
 8013b96:	e7f3      	b.n	8013b80 <_dtoa_r+0x928>
 8013b98:	9b07      	ldr	r3, [sp, #28]
 8013b9a:	9300      	str	r3, [sp, #0]
 8013b9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	f000 8104 	beq.w	8013dac <_dtoa_r+0xb54>
 8013ba4:	2e00      	cmp	r6, #0
 8013ba6:	dd05      	ble.n	8013bb4 <_dtoa_r+0x95c>
 8013ba8:	4629      	mov	r1, r5
 8013baa:	4632      	mov	r2, r6
 8013bac:	4658      	mov	r0, fp
 8013bae:	f000 fd73 	bl	8014698 <__lshift>
 8013bb2:	4605      	mov	r5, r0
 8013bb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d05a      	beq.n	8013c70 <_dtoa_r+0xa18>
 8013bba:	6869      	ldr	r1, [r5, #4]
 8013bbc:	4658      	mov	r0, fp
 8013bbe:	f000 fb5d 	bl	801427c <_Balloc>
 8013bc2:	4606      	mov	r6, r0
 8013bc4:	b928      	cbnz	r0, 8013bd2 <_dtoa_r+0x97a>
 8013bc6:	4b84      	ldr	r3, [pc, #528]	@ (8013dd8 <_dtoa_r+0xb80>)
 8013bc8:	4602      	mov	r2, r0
 8013bca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013bce:	f7ff bb5a 	b.w	8013286 <_dtoa_r+0x2e>
 8013bd2:	692a      	ldr	r2, [r5, #16]
 8013bd4:	3202      	adds	r2, #2
 8013bd6:	0092      	lsls	r2, r2, #2
 8013bd8:	f105 010c 	add.w	r1, r5, #12
 8013bdc:	300c      	adds	r0, #12
 8013bde:	f7ff fa87 	bl	80130f0 <memcpy>
 8013be2:	2201      	movs	r2, #1
 8013be4:	4631      	mov	r1, r6
 8013be6:	4658      	mov	r0, fp
 8013be8:	f000 fd56 	bl	8014698 <__lshift>
 8013bec:	f10a 0301 	add.w	r3, sl, #1
 8013bf0:	9307      	str	r3, [sp, #28]
 8013bf2:	9b00      	ldr	r3, [sp, #0]
 8013bf4:	4453      	add	r3, sl
 8013bf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013bf8:	9b02      	ldr	r3, [sp, #8]
 8013bfa:	f003 0301 	and.w	r3, r3, #1
 8013bfe:	462f      	mov	r7, r5
 8013c00:	930a      	str	r3, [sp, #40]	@ 0x28
 8013c02:	4605      	mov	r5, r0
 8013c04:	9b07      	ldr	r3, [sp, #28]
 8013c06:	4621      	mov	r1, r4
 8013c08:	3b01      	subs	r3, #1
 8013c0a:	4648      	mov	r0, r9
 8013c0c:	9300      	str	r3, [sp, #0]
 8013c0e:	f7ff fa9b 	bl	8013148 <quorem>
 8013c12:	4639      	mov	r1, r7
 8013c14:	9002      	str	r0, [sp, #8]
 8013c16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013c1a:	4648      	mov	r0, r9
 8013c1c:	f000 fda8 	bl	8014770 <__mcmp>
 8013c20:	462a      	mov	r2, r5
 8013c22:	9008      	str	r0, [sp, #32]
 8013c24:	4621      	mov	r1, r4
 8013c26:	4658      	mov	r0, fp
 8013c28:	f000 fdbe 	bl	80147a8 <__mdiff>
 8013c2c:	68c2      	ldr	r2, [r0, #12]
 8013c2e:	4606      	mov	r6, r0
 8013c30:	bb02      	cbnz	r2, 8013c74 <_dtoa_r+0xa1c>
 8013c32:	4601      	mov	r1, r0
 8013c34:	4648      	mov	r0, r9
 8013c36:	f000 fd9b 	bl	8014770 <__mcmp>
 8013c3a:	4602      	mov	r2, r0
 8013c3c:	4631      	mov	r1, r6
 8013c3e:	4658      	mov	r0, fp
 8013c40:	920e      	str	r2, [sp, #56]	@ 0x38
 8013c42:	f000 fb5b 	bl	80142fc <_Bfree>
 8013c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013c4a:	9e07      	ldr	r6, [sp, #28]
 8013c4c:	ea43 0102 	orr.w	r1, r3, r2
 8013c50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c52:	4319      	orrs	r1, r3
 8013c54:	d110      	bne.n	8013c78 <_dtoa_r+0xa20>
 8013c56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013c5a:	d029      	beq.n	8013cb0 <_dtoa_r+0xa58>
 8013c5c:	9b08      	ldr	r3, [sp, #32]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	dd02      	ble.n	8013c68 <_dtoa_r+0xa10>
 8013c62:	9b02      	ldr	r3, [sp, #8]
 8013c64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013c68:	9b00      	ldr	r3, [sp, #0]
 8013c6a:	f883 8000 	strb.w	r8, [r3]
 8013c6e:	e63f      	b.n	80138f0 <_dtoa_r+0x698>
 8013c70:	4628      	mov	r0, r5
 8013c72:	e7bb      	b.n	8013bec <_dtoa_r+0x994>
 8013c74:	2201      	movs	r2, #1
 8013c76:	e7e1      	b.n	8013c3c <_dtoa_r+0x9e4>
 8013c78:	9b08      	ldr	r3, [sp, #32]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	db04      	blt.n	8013c88 <_dtoa_r+0xa30>
 8013c7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013c80:	430b      	orrs	r3, r1
 8013c82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013c84:	430b      	orrs	r3, r1
 8013c86:	d120      	bne.n	8013cca <_dtoa_r+0xa72>
 8013c88:	2a00      	cmp	r2, #0
 8013c8a:	dded      	ble.n	8013c68 <_dtoa_r+0xa10>
 8013c8c:	4649      	mov	r1, r9
 8013c8e:	2201      	movs	r2, #1
 8013c90:	4658      	mov	r0, fp
 8013c92:	f000 fd01 	bl	8014698 <__lshift>
 8013c96:	4621      	mov	r1, r4
 8013c98:	4681      	mov	r9, r0
 8013c9a:	f000 fd69 	bl	8014770 <__mcmp>
 8013c9e:	2800      	cmp	r0, #0
 8013ca0:	dc03      	bgt.n	8013caa <_dtoa_r+0xa52>
 8013ca2:	d1e1      	bne.n	8013c68 <_dtoa_r+0xa10>
 8013ca4:	f018 0f01 	tst.w	r8, #1
 8013ca8:	d0de      	beq.n	8013c68 <_dtoa_r+0xa10>
 8013caa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013cae:	d1d8      	bne.n	8013c62 <_dtoa_r+0xa0a>
 8013cb0:	9a00      	ldr	r2, [sp, #0]
 8013cb2:	2339      	movs	r3, #57	@ 0x39
 8013cb4:	7013      	strb	r3, [r2, #0]
 8013cb6:	4633      	mov	r3, r6
 8013cb8:	461e      	mov	r6, r3
 8013cba:	3b01      	subs	r3, #1
 8013cbc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013cc0:	2a39      	cmp	r2, #57	@ 0x39
 8013cc2:	d052      	beq.n	8013d6a <_dtoa_r+0xb12>
 8013cc4:	3201      	adds	r2, #1
 8013cc6:	701a      	strb	r2, [r3, #0]
 8013cc8:	e612      	b.n	80138f0 <_dtoa_r+0x698>
 8013cca:	2a00      	cmp	r2, #0
 8013ccc:	dd07      	ble.n	8013cde <_dtoa_r+0xa86>
 8013cce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013cd2:	d0ed      	beq.n	8013cb0 <_dtoa_r+0xa58>
 8013cd4:	9a00      	ldr	r2, [sp, #0]
 8013cd6:	f108 0301 	add.w	r3, r8, #1
 8013cda:	7013      	strb	r3, [r2, #0]
 8013cdc:	e608      	b.n	80138f0 <_dtoa_r+0x698>
 8013cde:	9b07      	ldr	r3, [sp, #28]
 8013ce0:	9a07      	ldr	r2, [sp, #28]
 8013ce2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8013ce6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ce8:	4293      	cmp	r3, r2
 8013cea:	d028      	beq.n	8013d3e <_dtoa_r+0xae6>
 8013cec:	4649      	mov	r1, r9
 8013cee:	2300      	movs	r3, #0
 8013cf0:	220a      	movs	r2, #10
 8013cf2:	4658      	mov	r0, fp
 8013cf4:	f000 fb24 	bl	8014340 <__multadd>
 8013cf8:	42af      	cmp	r7, r5
 8013cfa:	4681      	mov	r9, r0
 8013cfc:	f04f 0300 	mov.w	r3, #0
 8013d00:	f04f 020a 	mov.w	r2, #10
 8013d04:	4639      	mov	r1, r7
 8013d06:	4658      	mov	r0, fp
 8013d08:	d107      	bne.n	8013d1a <_dtoa_r+0xac2>
 8013d0a:	f000 fb19 	bl	8014340 <__multadd>
 8013d0e:	4607      	mov	r7, r0
 8013d10:	4605      	mov	r5, r0
 8013d12:	9b07      	ldr	r3, [sp, #28]
 8013d14:	3301      	adds	r3, #1
 8013d16:	9307      	str	r3, [sp, #28]
 8013d18:	e774      	b.n	8013c04 <_dtoa_r+0x9ac>
 8013d1a:	f000 fb11 	bl	8014340 <__multadd>
 8013d1e:	4629      	mov	r1, r5
 8013d20:	4607      	mov	r7, r0
 8013d22:	2300      	movs	r3, #0
 8013d24:	220a      	movs	r2, #10
 8013d26:	4658      	mov	r0, fp
 8013d28:	f000 fb0a 	bl	8014340 <__multadd>
 8013d2c:	4605      	mov	r5, r0
 8013d2e:	e7f0      	b.n	8013d12 <_dtoa_r+0xaba>
 8013d30:	9b00      	ldr	r3, [sp, #0]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	bfcc      	ite	gt
 8013d36:	461e      	movgt	r6, r3
 8013d38:	2601      	movle	r6, #1
 8013d3a:	4456      	add	r6, sl
 8013d3c:	2700      	movs	r7, #0
 8013d3e:	4649      	mov	r1, r9
 8013d40:	2201      	movs	r2, #1
 8013d42:	4658      	mov	r0, fp
 8013d44:	f000 fca8 	bl	8014698 <__lshift>
 8013d48:	4621      	mov	r1, r4
 8013d4a:	4681      	mov	r9, r0
 8013d4c:	f000 fd10 	bl	8014770 <__mcmp>
 8013d50:	2800      	cmp	r0, #0
 8013d52:	dcb0      	bgt.n	8013cb6 <_dtoa_r+0xa5e>
 8013d54:	d102      	bne.n	8013d5c <_dtoa_r+0xb04>
 8013d56:	f018 0f01 	tst.w	r8, #1
 8013d5a:	d1ac      	bne.n	8013cb6 <_dtoa_r+0xa5e>
 8013d5c:	4633      	mov	r3, r6
 8013d5e:	461e      	mov	r6, r3
 8013d60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013d64:	2a30      	cmp	r2, #48	@ 0x30
 8013d66:	d0fa      	beq.n	8013d5e <_dtoa_r+0xb06>
 8013d68:	e5c2      	b.n	80138f0 <_dtoa_r+0x698>
 8013d6a:	459a      	cmp	sl, r3
 8013d6c:	d1a4      	bne.n	8013cb8 <_dtoa_r+0xa60>
 8013d6e:	9b04      	ldr	r3, [sp, #16]
 8013d70:	3301      	adds	r3, #1
 8013d72:	9304      	str	r3, [sp, #16]
 8013d74:	2331      	movs	r3, #49	@ 0x31
 8013d76:	f88a 3000 	strb.w	r3, [sl]
 8013d7a:	e5b9      	b.n	80138f0 <_dtoa_r+0x698>
 8013d7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013d7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8013ddc <_dtoa_r+0xb84>
 8013d82:	b11b      	cbz	r3, 8013d8c <_dtoa_r+0xb34>
 8013d84:	f10a 0308 	add.w	r3, sl, #8
 8013d88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013d8a:	6013      	str	r3, [r2, #0]
 8013d8c:	4650      	mov	r0, sl
 8013d8e:	b019      	add	sp, #100	@ 0x64
 8013d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d96:	2b01      	cmp	r3, #1
 8013d98:	f77f ae37 	ble.w	8013a0a <_dtoa_r+0x7b2>
 8013d9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013d9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013da0:	2001      	movs	r0, #1
 8013da2:	e655      	b.n	8013a50 <_dtoa_r+0x7f8>
 8013da4:	9b00      	ldr	r3, [sp, #0]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	f77f aed6 	ble.w	8013b58 <_dtoa_r+0x900>
 8013dac:	4656      	mov	r6, sl
 8013dae:	4621      	mov	r1, r4
 8013db0:	4648      	mov	r0, r9
 8013db2:	f7ff f9c9 	bl	8013148 <quorem>
 8013db6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013dba:	f806 8b01 	strb.w	r8, [r6], #1
 8013dbe:	9b00      	ldr	r3, [sp, #0]
 8013dc0:	eba6 020a 	sub.w	r2, r6, sl
 8013dc4:	4293      	cmp	r3, r2
 8013dc6:	ddb3      	ble.n	8013d30 <_dtoa_r+0xad8>
 8013dc8:	4649      	mov	r1, r9
 8013dca:	2300      	movs	r3, #0
 8013dcc:	220a      	movs	r2, #10
 8013dce:	4658      	mov	r0, fp
 8013dd0:	f000 fab6 	bl	8014340 <__multadd>
 8013dd4:	4681      	mov	r9, r0
 8013dd6:	e7ea      	b.n	8013dae <_dtoa_r+0xb56>
 8013dd8:	0801653b 	.word	0x0801653b
 8013ddc:	080164d6 	.word	0x080164d6

08013de0 <_free_r>:
 8013de0:	b538      	push	{r3, r4, r5, lr}
 8013de2:	4605      	mov	r5, r0
 8013de4:	2900      	cmp	r1, #0
 8013de6:	d041      	beq.n	8013e6c <_free_r+0x8c>
 8013de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013dec:	1f0c      	subs	r4, r1, #4
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	bfb8      	it	lt
 8013df2:	18e4      	addlt	r4, r4, r3
 8013df4:	f7fe ff30 	bl	8012c58 <__malloc_lock>
 8013df8:	4a1d      	ldr	r2, [pc, #116]	@ (8013e70 <_free_r+0x90>)
 8013dfa:	6813      	ldr	r3, [r2, #0]
 8013dfc:	b933      	cbnz	r3, 8013e0c <_free_r+0x2c>
 8013dfe:	6063      	str	r3, [r4, #4]
 8013e00:	6014      	str	r4, [r2, #0]
 8013e02:	4628      	mov	r0, r5
 8013e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e08:	f7fe bf2c 	b.w	8012c64 <__malloc_unlock>
 8013e0c:	42a3      	cmp	r3, r4
 8013e0e:	d908      	bls.n	8013e22 <_free_r+0x42>
 8013e10:	6820      	ldr	r0, [r4, #0]
 8013e12:	1821      	adds	r1, r4, r0
 8013e14:	428b      	cmp	r3, r1
 8013e16:	bf01      	itttt	eq
 8013e18:	6819      	ldreq	r1, [r3, #0]
 8013e1a:	685b      	ldreq	r3, [r3, #4]
 8013e1c:	1809      	addeq	r1, r1, r0
 8013e1e:	6021      	streq	r1, [r4, #0]
 8013e20:	e7ed      	b.n	8013dfe <_free_r+0x1e>
 8013e22:	461a      	mov	r2, r3
 8013e24:	685b      	ldr	r3, [r3, #4]
 8013e26:	b10b      	cbz	r3, 8013e2c <_free_r+0x4c>
 8013e28:	42a3      	cmp	r3, r4
 8013e2a:	d9fa      	bls.n	8013e22 <_free_r+0x42>
 8013e2c:	6811      	ldr	r1, [r2, #0]
 8013e2e:	1850      	adds	r0, r2, r1
 8013e30:	42a0      	cmp	r0, r4
 8013e32:	d10b      	bne.n	8013e4c <_free_r+0x6c>
 8013e34:	6820      	ldr	r0, [r4, #0]
 8013e36:	4401      	add	r1, r0
 8013e38:	1850      	adds	r0, r2, r1
 8013e3a:	4283      	cmp	r3, r0
 8013e3c:	6011      	str	r1, [r2, #0]
 8013e3e:	d1e0      	bne.n	8013e02 <_free_r+0x22>
 8013e40:	6818      	ldr	r0, [r3, #0]
 8013e42:	685b      	ldr	r3, [r3, #4]
 8013e44:	6053      	str	r3, [r2, #4]
 8013e46:	4408      	add	r0, r1
 8013e48:	6010      	str	r0, [r2, #0]
 8013e4a:	e7da      	b.n	8013e02 <_free_r+0x22>
 8013e4c:	d902      	bls.n	8013e54 <_free_r+0x74>
 8013e4e:	230c      	movs	r3, #12
 8013e50:	602b      	str	r3, [r5, #0]
 8013e52:	e7d6      	b.n	8013e02 <_free_r+0x22>
 8013e54:	6820      	ldr	r0, [r4, #0]
 8013e56:	1821      	adds	r1, r4, r0
 8013e58:	428b      	cmp	r3, r1
 8013e5a:	bf04      	itt	eq
 8013e5c:	6819      	ldreq	r1, [r3, #0]
 8013e5e:	685b      	ldreq	r3, [r3, #4]
 8013e60:	6063      	str	r3, [r4, #4]
 8013e62:	bf04      	itt	eq
 8013e64:	1809      	addeq	r1, r1, r0
 8013e66:	6021      	streq	r1, [r4, #0]
 8013e68:	6054      	str	r4, [r2, #4]
 8013e6a:	e7ca      	b.n	8013e02 <_free_r+0x22>
 8013e6c:	bd38      	pop	{r3, r4, r5, pc}
 8013e6e:	bf00      	nop
 8013e70:	200015e4 	.word	0x200015e4

08013e74 <__ssputs_r>:
 8013e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e78:	688e      	ldr	r6, [r1, #8]
 8013e7a:	461f      	mov	r7, r3
 8013e7c:	42be      	cmp	r6, r7
 8013e7e:	680b      	ldr	r3, [r1, #0]
 8013e80:	4682      	mov	sl, r0
 8013e82:	460c      	mov	r4, r1
 8013e84:	4690      	mov	r8, r2
 8013e86:	d82d      	bhi.n	8013ee4 <__ssputs_r+0x70>
 8013e88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013e8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013e90:	d026      	beq.n	8013ee0 <__ssputs_r+0x6c>
 8013e92:	6965      	ldr	r5, [r4, #20]
 8013e94:	6909      	ldr	r1, [r1, #16]
 8013e96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013e9a:	eba3 0901 	sub.w	r9, r3, r1
 8013e9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013ea2:	1c7b      	adds	r3, r7, #1
 8013ea4:	444b      	add	r3, r9
 8013ea6:	106d      	asrs	r5, r5, #1
 8013ea8:	429d      	cmp	r5, r3
 8013eaa:	bf38      	it	cc
 8013eac:	461d      	movcc	r5, r3
 8013eae:	0553      	lsls	r3, r2, #21
 8013eb0:	d527      	bpl.n	8013f02 <__ssputs_r+0x8e>
 8013eb2:	4629      	mov	r1, r5
 8013eb4:	f7fe fcc2 	bl	801283c <_malloc_r>
 8013eb8:	4606      	mov	r6, r0
 8013eba:	b360      	cbz	r0, 8013f16 <__ssputs_r+0xa2>
 8013ebc:	6921      	ldr	r1, [r4, #16]
 8013ebe:	464a      	mov	r2, r9
 8013ec0:	f7ff f916 	bl	80130f0 <memcpy>
 8013ec4:	89a3      	ldrh	r3, [r4, #12]
 8013ec6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013ece:	81a3      	strh	r3, [r4, #12]
 8013ed0:	6126      	str	r6, [r4, #16]
 8013ed2:	6165      	str	r5, [r4, #20]
 8013ed4:	444e      	add	r6, r9
 8013ed6:	eba5 0509 	sub.w	r5, r5, r9
 8013eda:	6026      	str	r6, [r4, #0]
 8013edc:	60a5      	str	r5, [r4, #8]
 8013ede:	463e      	mov	r6, r7
 8013ee0:	42be      	cmp	r6, r7
 8013ee2:	d900      	bls.n	8013ee6 <__ssputs_r+0x72>
 8013ee4:	463e      	mov	r6, r7
 8013ee6:	6820      	ldr	r0, [r4, #0]
 8013ee8:	4632      	mov	r2, r6
 8013eea:	4641      	mov	r1, r8
 8013eec:	f000 fdcc 	bl	8014a88 <memmove>
 8013ef0:	68a3      	ldr	r3, [r4, #8]
 8013ef2:	1b9b      	subs	r3, r3, r6
 8013ef4:	60a3      	str	r3, [r4, #8]
 8013ef6:	6823      	ldr	r3, [r4, #0]
 8013ef8:	4433      	add	r3, r6
 8013efa:	6023      	str	r3, [r4, #0]
 8013efc:	2000      	movs	r0, #0
 8013efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f02:	462a      	mov	r2, r5
 8013f04:	f000 fd92 	bl	8014a2c <_realloc_r>
 8013f08:	4606      	mov	r6, r0
 8013f0a:	2800      	cmp	r0, #0
 8013f0c:	d1e0      	bne.n	8013ed0 <__ssputs_r+0x5c>
 8013f0e:	6921      	ldr	r1, [r4, #16]
 8013f10:	4650      	mov	r0, sl
 8013f12:	f7ff ff65 	bl	8013de0 <_free_r>
 8013f16:	230c      	movs	r3, #12
 8013f18:	f8ca 3000 	str.w	r3, [sl]
 8013f1c:	89a3      	ldrh	r3, [r4, #12]
 8013f1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013f22:	81a3      	strh	r3, [r4, #12]
 8013f24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f28:	e7e9      	b.n	8013efe <__ssputs_r+0x8a>
	...

08013f2c <_svfiprintf_r>:
 8013f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f30:	4698      	mov	r8, r3
 8013f32:	898b      	ldrh	r3, [r1, #12]
 8013f34:	061b      	lsls	r3, r3, #24
 8013f36:	b09d      	sub	sp, #116	@ 0x74
 8013f38:	4607      	mov	r7, r0
 8013f3a:	460d      	mov	r5, r1
 8013f3c:	4614      	mov	r4, r2
 8013f3e:	d510      	bpl.n	8013f62 <_svfiprintf_r+0x36>
 8013f40:	690b      	ldr	r3, [r1, #16]
 8013f42:	b973      	cbnz	r3, 8013f62 <_svfiprintf_r+0x36>
 8013f44:	2140      	movs	r1, #64	@ 0x40
 8013f46:	f7fe fc79 	bl	801283c <_malloc_r>
 8013f4a:	6028      	str	r0, [r5, #0]
 8013f4c:	6128      	str	r0, [r5, #16]
 8013f4e:	b930      	cbnz	r0, 8013f5e <_svfiprintf_r+0x32>
 8013f50:	230c      	movs	r3, #12
 8013f52:	603b      	str	r3, [r7, #0]
 8013f54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f58:	b01d      	add	sp, #116	@ 0x74
 8013f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f5e:	2340      	movs	r3, #64	@ 0x40
 8013f60:	616b      	str	r3, [r5, #20]
 8013f62:	2300      	movs	r3, #0
 8013f64:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f66:	2320      	movs	r3, #32
 8013f68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013f6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f70:	2330      	movs	r3, #48	@ 0x30
 8013f72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014110 <_svfiprintf_r+0x1e4>
 8013f76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013f7a:	f04f 0901 	mov.w	r9, #1
 8013f7e:	4623      	mov	r3, r4
 8013f80:	469a      	mov	sl, r3
 8013f82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f86:	b10a      	cbz	r2, 8013f8c <_svfiprintf_r+0x60>
 8013f88:	2a25      	cmp	r2, #37	@ 0x25
 8013f8a:	d1f9      	bne.n	8013f80 <_svfiprintf_r+0x54>
 8013f8c:	ebba 0b04 	subs.w	fp, sl, r4
 8013f90:	d00b      	beq.n	8013faa <_svfiprintf_r+0x7e>
 8013f92:	465b      	mov	r3, fp
 8013f94:	4622      	mov	r2, r4
 8013f96:	4629      	mov	r1, r5
 8013f98:	4638      	mov	r0, r7
 8013f9a:	f7ff ff6b 	bl	8013e74 <__ssputs_r>
 8013f9e:	3001      	adds	r0, #1
 8013fa0:	f000 80a7 	beq.w	80140f2 <_svfiprintf_r+0x1c6>
 8013fa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013fa6:	445a      	add	r2, fp
 8013fa8:	9209      	str	r2, [sp, #36]	@ 0x24
 8013faa:	f89a 3000 	ldrb.w	r3, [sl]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	f000 809f 	beq.w	80140f2 <_svfiprintf_r+0x1c6>
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013fba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013fbe:	f10a 0a01 	add.w	sl, sl, #1
 8013fc2:	9304      	str	r3, [sp, #16]
 8013fc4:	9307      	str	r3, [sp, #28]
 8013fc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013fca:	931a      	str	r3, [sp, #104]	@ 0x68
 8013fcc:	4654      	mov	r4, sl
 8013fce:	2205      	movs	r2, #5
 8013fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fd4:	484e      	ldr	r0, [pc, #312]	@ (8014110 <_svfiprintf_r+0x1e4>)
 8013fd6:	f7ec f923 	bl	8000220 <memchr>
 8013fda:	9a04      	ldr	r2, [sp, #16]
 8013fdc:	b9d8      	cbnz	r0, 8014016 <_svfiprintf_r+0xea>
 8013fde:	06d0      	lsls	r0, r2, #27
 8013fe0:	bf44      	itt	mi
 8013fe2:	2320      	movmi	r3, #32
 8013fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013fe8:	0711      	lsls	r1, r2, #28
 8013fea:	bf44      	itt	mi
 8013fec:	232b      	movmi	r3, #43	@ 0x2b
 8013fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8013ff6:	2b2a      	cmp	r3, #42	@ 0x2a
 8013ff8:	d015      	beq.n	8014026 <_svfiprintf_r+0xfa>
 8013ffa:	9a07      	ldr	r2, [sp, #28]
 8013ffc:	4654      	mov	r4, sl
 8013ffe:	2000      	movs	r0, #0
 8014000:	f04f 0c0a 	mov.w	ip, #10
 8014004:	4621      	mov	r1, r4
 8014006:	f811 3b01 	ldrb.w	r3, [r1], #1
 801400a:	3b30      	subs	r3, #48	@ 0x30
 801400c:	2b09      	cmp	r3, #9
 801400e:	d94b      	bls.n	80140a8 <_svfiprintf_r+0x17c>
 8014010:	b1b0      	cbz	r0, 8014040 <_svfiprintf_r+0x114>
 8014012:	9207      	str	r2, [sp, #28]
 8014014:	e014      	b.n	8014040 <_svfiprintf_r+0x114>
 8014016:	eba0 0308 	sub.w	r3, r0, r8
 801401a:	fa09 f303 	lsl.w	r3, r9, r3
 801401e:	4313      	orrs	r3, r2
 8014020:	9304      	str	r3, [sp, #16]
 8014022:	46a2      	mov	sl, r4
 8014024:	e7d2      	b.n	8013fcc <_svfiprintf_r+0xa0>
 8014026:	9b03      	ldr	r3, [sp, #12]
 8014028:	1d19      	adds	r1, r3, #4
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	9103      	str	r1, [sp, #12]
 801402e:	2b00      	cmp	r3, #0
 8014030:	bfbb      	ittet	lt
 8014032:	425b      	neglt	r3, r3
 8014034:	f042 0202 	orrlt.w	r2, r2, #2
 8014038:	9307      	strge	r3, [sp, #28]
 801403a:	9307      	strlt	r3, [sp, #28]
 801403c:	bfb8      	it	lt
 801403e:	9204      	strlt	r2, [sp, #16]
 8014040:	7823      	ldrb	r3, [r4, #0]
 8014042:	2b2e      	cmp	r3, #46	@ 0x2e
 8014044:	d10a      	bne.n	801405c <_svfiprintf_r+0x130>
 8014046:	7863      	ldrb	r3, [r4, #1]
 8014048:	2b2a      	cmp	r3, #42	@ 0x2a
 801404a:	d132      	bne.n	80140b2 <_svfiprintf_r+0x186>
 801404c:	9b03      	ldr	r3, [sp, #12]
 801404e:	1d1a      	adds	r2, r3, #4
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	9203      	str	r2, [sp, #12]
 8014054:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014058:	3402      	adds	r4, #2
 801405a:	9305      	str	r3, [sp, #20]
 801405c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014120 <_svfiprintf_r+0x1f4>
 8014060:	7821      	ldrb	r1, [r4, #0]
 8014062:	2203      	movs	r2, #3
 8014064:	4650      	mov	r0, sl
 8014066:	f7ec f8db 	bl	8000220 <memchr>
 801406a:	b138      	cbz	r0, 801407c <_svfiprintf_r+0x150>
 801406c:	9b04      	ldr	r3, [sp, #16]
 801406e:	eba0 000a 	sub.w	r0, r0, sl
 8014072:	2240      	movs	r2, #64	@ 0x40
 8014074:	4082      	lsls	r2, r0
 8014076:	4313      	orrs	r3, r2
 8014078:	3401      	adds	r4, #1
 801407a:	9304      	str	r3, [sp, #16]
 801407c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014080:	4824      	ldr	r0, [pc, #144]	@ (8014114 <_svfiprintf_r+0x1e8>)
 8014082:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014086:	2206      	movs	r2, #6
 8014088:	f7ec f8ca 	bl	8000220 <memchr>
 801408c:	2800      	cmp	r0, #0
 801408e:	d036      	beq.n	80140fe <_svfiprintf_r+0x1d2>
 8014090:	4b21      	ldr	r3, [pc, #132]	@ (8014118 <_svfiprintf_r+0x1ec>)
 8014092:	bb1b      	cbnz	r3, 80140dc <_svfiprintf_r+0x1b0>
 8014094:	9b03      	ldr	r3, [sp, #12]
 8014096:	3307      	adds	r3, #7
 8014098:	f023 0307 	bic.w	r3, r3, #7
 801409c:	3308      	adds	r3, #8
 801409e:	9303      	str	r3, [sp, #12]
 80140a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140a2:	4433      	add	r3, r6
 80140a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80140a6:	e76a      	b.n	8013f7e <_svfiprintf_r+0x52>
 80140a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80140ac:	460c      	mov	r4, r1
 80140ae:	2001      	movs	r0, #1
 80140b0:	e7a8      	b.n	8014004 <_svfiprintf_r+0xd8>
 80140b2:	2300      	movs	r3, #0
 80140b4:	3401      	adds	r4, #1
 80140b6:	9305      	str	r3, [sp, #20]
 80140b8:	4619      	mov	r1, r3
 80140ba:	f04f 0c0a 	mov.w	ip, #10
 80140be:	4620      	mov	r0, r4
 80140c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80140c4:	3a30      	subs	r2, #48	@ 0x30
 80140c6:	2a09      	cmp	r2, #9
 80140c8:	d903      	bls.n	80140d2 <_svfiprintf_r+0x1a6>
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d0c6      	beq.n	801405c <_svfiprintf_r+0x130>
 80140ce:	9105      	str	r1, [sp, #20]
 80140d0:	e7c4      	b.n	801405c <_svfiprintf_r+0x130>
 80140d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80140d6:	4604      	mov	r4, r0
 80140d8:	2301      	movs	r3, #1
 80140da:	e7f0      	b.n	80140be <_svfiprintf_r+0x192>
 80140dc:	ab03      	add	r3, sp, #12
 80140de:	9300      	str	r3, [sp, #0]
 80140e0:	462a      	mov	r2, r5
 80140e2:	4b0e      	ldr	r3, [pc, #56]	@ (801411c <_svfiprintf_r+0x1f0>)
 80140e4:	a904      	add	r1, sp, #16
 80140e6:	4638      	mov	r0, r7
 80140e8:	f7fe f954 	bl	8012394 <_printf_float>
 80140ec:	1c42      	adds	r2, r0, #1
 80140ee:	4606      	mov	r6, r0
 80140f0:	d1d6      	bne.n	80140a0 <_svfiprintf_r+0x174>
 80140f2:	89ab      	ldrh	r3, [r5, #12]
 80140f4:	065b      	lsls	r3, r3, #25
 80140f6:	f53f af2d 	bmi.w	8013f54 <_svfiprintf_r+0x28>
 80140fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80140fc:	e72c      	b.n	8013f58 <_svfiprintf_r+0x2c>
 80140fe:	ab03      	add	r3, sp, #12
 8014100:	9300      	str	r3, [sp, #0]
 8014102:	462a      	mov	r2, r5
 8014104:	4b05      	ldr	r3, [pc, #20]	@ (801411c <_svfiprintf_r+0x1f0>)
 8014106:	a904      	add	r1, sp, #16
 8014108:	4638      	mov	r0, r7
 801410a:	f7fe fc85 	bl	8012a18 <_printf_i>
 801410e:	e7ed      	b.n	80140ec <_svfiprintf_r+0x1c0>
 8014110:	0801654c 	.word	0x0801654c
 8014114:	08016556 	.word	0x08016556
 8014118:	08012395 	.word	0x08012395
 801411c:	08013e75 	.word	0x08013e75
 8014120:	08016552 	.word	0x08016552

08014124 <__sflush_r>:
 8014124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801412c:	0716      	lsls	r6, r2, #28
 801412e:	4605      	mov	r5, r0
 8014130:	460c      	mov	r4, r1
 8014132:	d454      	bmi.n	80141de <__sflush_r+0xba>
 8014134:	684b      	ldr	r3, [r1, #4]
 8014136:	2b00      	cmp	r3, #0
 8014138:	dc02      	bgt.n	8014140 <__sflush_r+0x1c>
 801413a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801413c:	2b00      	cmp	r3, #0
 801413e:	dd48      	ble.n	80141d2 <__sflush_r+0xae>
 8014140:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014142:	2e00      	cmp	r6, #0
 8014144:	d045      	beq.n	80141d2 <__sflush_r+0xae>
 8014146:	2300      	movs	r3, #0
 8014148:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801414c:	682f      	ldr	r7, [r5, #0]
 801414e:	6a21      	ldr	r1, [r4, #32]
 8014150:	602b      	str	r3, [r5, #0]
 8014152:	d030      	beq.n	80141b6 <__sflush_r+0x92>
 8014154:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014156:	89a3      	ldrh	r3, [r4, #12]
 8014158:	0759      	lsls	r1, r3, #29
 801415a:	d505      	bpl.n	8014168 <__sflush_r+0x44>
 801415c:	6863      	ldr	r3, [r4, #4]
 801415e:	1ad2      	subs	r2, r2, r3
 8014160:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014162:	b10b      	cbz	r3, 8014168 <__sflush_r+0x44>
 8014164:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014166:	1ad2      	subs	r2, r2, r3
 8014168:	2300      	movs	r3, #0
 801416a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801416c:	6a21      	ldr	r1, [r4, #32]
 801416e:	4628      	mov	r0, r5
 8014170:	47b0      	blx	r6
 8014172:	1c43      	adds	r3, r0, #1
 8014174:	89a3      	ldrh	r3, [r4, #12]
 8014176:	d106      	bne.n	8014186 <__sflush_r+0x62>
 8014178:	6829      	ldr	r1, [r5, #0]
 801417a:	291d      	cmp	r1, #29
 801417c:	d82b      	bhi.n	80141d6 <__sflush_r+0xb2>
 801417e:	4a2a      	ldr	r2, [pc, #168]	@ (8014228 <__sflush_r+0x104>)
 8014180:	410a      	asrs	r2, r1
 8014182:	07d6      	lsls	r6, r2, #31
 8014184:	d427      	bmi.n	80141d6 <__sflush_r+0xb2>
 8014186:	2200      	movs	r2, #0
 8014188:	6062      	str	r2, [r4, #4]
 801418a:	04d9      	lsls	r1, r3, #19
 801418c:	6922      	ldr	r2, [r4, #16]
 801418e:	6022      	str	r2, [r4, #0]
 8014190:	d504      	bpl.n	801419c <__sflush_r+0x78>
 8014192:	1c42      	adds	r2, r0, #1
 8014194:	d101      	bne.n	801419a <__sflush_r+0x76>
 8014196:	682b      	ldr	r3, [r5, #0]
 8014198:	b903      	cbnz	r3, 801419c <__sflush_r+0x78>
 801419a:	6560      	str	r0, [r4, #84]	@ 0x54
 801419c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801419e:	602f      	str	r7, [r5, #0]
 80141a0:	b1b9      	cbz	r1, 80141d2 <__sflush_r+0xae>
 80141a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80141a6:	4299      	cmp	r1, r3
 80141a8:	d002      	beq.n	80141b0 <__sflush_r+0x8c>
 80141aa:	4628      	mov	r0, r5
 80141ac:	f7ff fe18 	bl	8013de0 <_free_r>
 80141b0:	2300      	movs	r3, #0
 80141b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80141b4:	e00d      	b.n	80141d2 <__sflush_r+0xae>
 80141b6:	2301      	movs	r3, #1
 80141b8:	4628      	mov	r0, r5
 80141ba:	47b0      	blx	r6
 80141bc:	4602      	mov	r2, r0
 80141be:	1c50      	adds	r0, r2, #1
 80141c0:	d1c9      	bne.n	8014156 <__sflush_r+0x32>
 80141c2:	682b      	ldr	r3, [r5, #0]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d0c6      	beq.n	8014156 <__sflush_r+0x32>
 80141c8:	2b1d      	cmp	r3, #29
 80141ca:	d001      	beq.n	80141d0 <__sflush_r+0xac>
 80141cc:	2b16      	cmp	r3, #22
 80141ce:	d11e      	bne.n	801420e <__sflush_r+0xea>
 80141d0:	602f      	str	r7, [r5, #0]
 80141d2:	2000      	movs	r0, #0
 80141d4:	e022      	b.n	801421c <__sflush_r+0xf8>
 80141d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141da:	b21b      	sxth	r3, r3
 80141dc:	e01b      	b.n	8014216 <__sflush_r+0xf2>
 80141de:	690f      	ldr	r7, [r1, #16]
 80141e0:	2f00      	cmp	r7, #0
 80141e2:	d0f6      	beq.n	80141d2 <__sflush_r+0xae>
 80141e4:	0793      	lsls	r3, r2, #30
 80141e6:	680e      	ldr	r6, [r1, #0]
 80141e8:	bf08      	it	eq
 80141ea:	694b      	ldreq	r3, [r1, #20]
 80141ec:	600f      	str	r7, [r1, #0]
 80141ee:	bf18      	it	ne
 80141f0:	2300      	movne	r3, #0
 80141f2:	eba6 0807 	sub.w	r8, r6, r7
 80141f6:	608b      	str	r3, [r1, #8]
 80141f8:	f1b8 0f00 	cmp.w	r8, #0
 80141fc:	dde9      	ble.n	80141d2 <__sflush_r+0xae>
 80141fe:	6a21      	ldr	r1, [r4, #32]
 8014200:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014202:	4643      	mov	r3, r8
 8014204:	463a      	mov	r2, r7
 8014206:	4628      	mov	r0, r5
 8014208:	47b0      	blx	r6
 801420a:	2800      	cmp	r0, #0
 801420c:	dc08      	bgt.n	8014220 <__sflush_r+0xfc>
 801420e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014216:	81a3      	strh	r3, [r4, #12]
 8014218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801421c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014220:	4407      	add	r7, r0
 8014222:	eba8 0800 	sub.w	r8, r8, r0
 8014226:	e7e7      	b.n	80141f8 <__sflush_r+0xd4>
 8014228:	dfbffffe 	.word	0xdfbffffe

0801422c <_fflush_r>:
 801422c:	b538      	push	{r3, r4, r5, lr}
 801422e:	690b      	ldr	r3, [r1, #16]
 8014230:	4605      	mov	r5, r0
 8014232:	460c      	mov	r4, r1
 8014234:	b913      	cbnz	r3, 801423c <_fflush_r+0x10>
 8014236:	2500      	movs	r5, #0
 8014238:	4628      	mov	r0, r5
 801423a:	bd38      	pop	{r3, r4, r5, pc}
 801423c:	b118      	cbz	r0, 8014246 <_fflush_r+0x1a>
 801423e:	6a03      	ldr	r3, [r0, #32]
 8014240:	b90b      	cbnz	r3, 8014246 <_fflush_r+0x1a>
 8014242:	f7fe fdc1 	bl	8012dc8 <__sinit>
 8014246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d0f3      	beq.n	8014236 <_fflush_r+0xa>
 801424e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014250:	07d0      	lsls	r0, r2, #31
 8014252:	d404      	bmi.n	801425e <_fflush_r+0x32>
 8014254:	0599      	lsls	r1, r3, #22
 8014256:	d402      	bmi.n	801425e <_fflush_r+0x32>
 8014258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801425a:	f7ef f9c6 	bl	80035ea <__retarget_lock_acquire_recursive>
 801425e:	4628      	mov	r0, r5
 8014260:	4621      	mov	r1, r4
 8014262:	f7ff ff5f 	bl	8014124 <__sflush_r>
 8014266:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014268:	07da      	lsls	r2, r3, #31
 801426a:	4605      	mov	r5, r0
 801426c:	d4e4      	bmi.n	8014238 <_fflush_r+0xc>
 801426e:	89a3      	ldrh	r3, [r4, #12]
 8014270:	059b      	lsls	r3, r3, #22
 8014272:	d4e1      	bmi.n	8014238 <_fflush_r+0xc>
 8014274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014276:	f7ef f9cd 	bl	8003614 <__retarget_lock_release_recursive>
 801427a:	e7dd      	b.n	8014238 <_fflush_r+0xc>

0801427c <_Balloc>:
 801427c:	b570      	push	{r4, r5, r6, lr}
 801427e:	69c6      	ldr	r6, [r0, #28]
 8014280:	4604      	mov	r4, r0
 8014282:	460d      	mov	r5, r1
 8014284:	b976      	cbnz	r6, 80142a4 <_Balloc+0x28>
 8014286:	2010      	movs	r0, #16
 8014288:	f7fe faae 	bl	80127e8 <malloc>
 801428c:	4602      	mov	r2, r0
 801428e:	61e0      	str	r0, [r4, #28]
 8014290:	b920      	cbnz	r0, 801429c <_Balloc+0x20>
 8014292:	4b18      	ldr	r3, [pc, #96]	@ (80142f4 <_Balloc+0x78>)
 8014294:	4818      	ldr	r0, [pc, #96]	@ (80142f8 <_Balloc+0x7c>)
 8014296:	216b      	movs	r1, #107	@ 0x6b
 8014298:	f7fe ff38 	bl	801310c <__assert_func>
 801429c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80142a0:	6006      	str	r6, [r0, #0]
 80142a2:	60c6      	str	r6, [r0, #12]
 80142a4:	69e6      	ldr	r6, [r4, #28]
 80142a6:	68f3      	ldr	r3, [r6, #12]
 80142a8:	b183      	cbz	r3, 80142cc <_Balloc+0x50>
 80142aa:	69e3      	ldr	r3, [r4, #28]
 80142ac:	68db      	ldr	r3, [r3, #12]
 80142ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80142b2:	b9b8      	cbnz	r0, 80142e4 <_Balloc+0x68>
 80142b4:	2101      	movs	r1, #1
 80142b6:	fa01 f605 	lsl.w	r6, r1, r5
 80142ba:	1d72      	adds	r2, r6, #5
 80142bc:	0092      	lsls	r2, r2, #2
 80142be:	4620      	mov	r0, r4
 80142c0:	f000 fc49 	bl	8014b56 <_calloc_r>
 80142c4:	b160      	cbz	r0, 80142e0 <_Balloc+0x64>
 80142c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80142ca:	e00e      	b.n	80142ea <_Balloc+0x6e>
 80142cc:	2221      	movs	r2, #33	@ 0x21
 80142ce:	2104      	movs	r1, #4
 80142d0:	4620      	mov	r0, r4
 80142d2:	f000 fc40 	bl	8014b56 <_calloc_r>
 80142d6:	69e3      	ldr	r3, [r4, #28]
 80142d8:	60f0      	str	r0, [r6, #12]
 80142da:	68db      	ldr	r3, [r3, #12]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d1e4      	bne.n	80142aa <_Balloc+0x2e>
 80142e0:	2000      	movs	r0, #0
 80142e2:	bd70      	pop	{r4, r5, r6, pc}
 80142e4:	6802      	ldr	r2, [r0, #0]
 80142e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80142ea:	2300      	movs	r3, #0
 80142ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80142f0:	e7f7      	b.n	80142e2 <_Balloc+0x66>
 80142f2:	bf00      	nop
 80142f4:	08016328 	.word	0x08016328
 80142f8:	0801655d 	.word	0x0801655d

080142fc <_Bfree>:
 80142fc:	b570      	push	{r4, r5, r6, lr}
 80142fe:	69c6      	ldr	r6, [r0, #28]
 8014300:	4605      	mov	r5, r0
 8014302:	460c      	mov	r4, r1
 8014304:	b976      	cbnz	r6, 8014324 <_Bfree+0x28>
 8014306:	2010      	movs	r0, #16
 8014308:	f7fe fa6e 	bl	80127e8 <malloc>
 801430c:	4602      	mov	r2, r0
 801430e:	61e8      	str	r0, [r5, #28]
 8014310:	b920      	cbnz	r0, 801431c <_Bfree+0x20>
 8014312:	4b09      	ldr	r3, [pc, #36]	@ (8014338 <_Bfree+0x3c>)
 8014314:	4809      	ldr	r0, [pc, #36]	@ (801433c <_Bfree+0x40>)
 8014316:	218f      	movs	r1, #143	@ 0x8f
 8014318:	f7fe fef8 	bl	801310c <__assert_func>
 801431c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014320:	6006      	str	r6, [r0, #0]
 8014322:	60c6      	str	r6, [r0, #12]
 8014324:	b13c      	cbz	r4, 8014336 <_Bfree+0x3a>
 8014326:	69eb      	ldr	r3, [r5, #28]
 8014328:	6862      	ldr	r2, [r4, #4]
 801432a:	68db      	ldr	r3, [r3, #12]
 801432c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014330:	6021      	str	r1, [r4, #0]
 8014332:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014336:	bd70      	pop	{r4, r5, r6, pc}
 8014338:	08016328 	.word	0x08016328
 801433c:	0801655d 	.word	0x0801655d

08014340 <__multadd>:
 8014340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014344:	690d      	ldr	r5, [r1, #16]
 8014346:	4607      	mov	r7, r0
 8014348:	460c      	mov	r4, r1
 801434a:	461e      	mov	r6, r3
 801434c:	f101 0c14 	add.w	ip, r1, #20
 8014350:	2000      	movs	r0, #0
 8014352:	f8dc 3000 	ldr.w	r3, [ip]
 8014356:	b299      	uxth	r1, r3
 8014358:	fb02 6101 	mla	r1, r2, r1, r6
 801435c:	0c1e      	lsrs	r6, r3, #16
 801435e:	0c0b      	lsrs	r3, r1, #16
 8014360:	fb02 3306 	mla	r3, r2, r6, r3
 8014364:	b289      	uxth	r1, r1
 8014366:	3001      	adds	r0, #1
 8014368:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801436c:	4285      	cmp	r5, r0
 801436e:	f84c 1b04 	str.w	r1, [ip], #4
 8014372:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014376:	dcec      	bgt.n	8014352 <__multadd+0x12>
 8014378:	b30e      	cbz	r6, 80143be <__multadd+0x7e>
 801437a:	68a3      	ldr	r3, [r4, #8]
 801437c:	42ab      	cmp	r3, r5
 801437e:	dc19      	bgt.n	80143b4 <__multadd+0x74>
 8014380:	6861      	ldr	r1, [r4, #4]
 8014382:	4638      	mov	r0, r7
 8014384:	3101      	adds	r1, #1
 8014386:	f7ff ff79 	bl	801427c <_Balloc>
 801438a:	4680      	mov	r8, r0
 801438c:	b928      	cbnz	r0, 801439a <__multadd+0x5a>
 801438e:	4602      	mov	r2, r0
 8014390:	4b0c      	ldr	r3, [pc, #48]	@ (80143c4 <__multadd+0x84>)
 8014392:	480d      	ldr	r0, [pc, #52]	@ (80143c8 <__multadd+0x88>)
 8014394:	21ba      	movs	r1, #186	@ 0xba
 8014396:	f7fe feb9 	bl	801310c <__assert_func>
 801439a:	6922      	ldr	r2, [r4, #16]
 801439c:	3202      	adds	r2, #2
 801439e:	f104 010c 	add.w	r1, r4, #12
 80143a2:	0092      	lsls	r2, r2, #2
 80143a4:	300c      	adds	r0, #12
 80143a6:	f7fe fea3 	bl	80130f0 <memcpy>
 80143aa:	4621      	mov	r1, r4
 80143ac:	4638      	mov	r0, r7
 80143ae:	f7ff ffa5 	bl	80142fc <_Bfree>
 80143b2:	4644      	mov	r4, r8
 80143b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80143b8:	3501      	adds	r5, #1
 80143ba:	615e      	str	r6, [r3, #20]
 80143bc:	6125      	str	r5, [r4, #16]
 80143be:	4620      	mov	r0, r4
 80143c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143c4:	0801653b 	.word	0x0801653b
 80143c8:	0801655d 	.word	0x0801655d

080143cc <__hi0bits>:
 80143cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80143d0:	4603      	mov	r3, r0
 80143d2:	bf36      	itet	cc
 80143d4:	0403      	lslcc	r3, r0, #16
 80143d6:	2000      	movcs	r0, #0
 80143d8:	2010      	movcc	r0, #16
 80143da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80143de:	bf3c      	itt	cc
 80143e0:	021b      	lslcc	r3, r3, #8
 80143e2:	3008      	addcc	r0, #8
 80143e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80143e8:	bf3c      	itt	cc
 80143ea:	011b      	lslcc	r3, r3, #4
 80143ec:	3004      	addcc	r0, #4
 80143ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80143f2:	bf3c      	itt	cc
 80143f4:	009b      	lslcc	r3, r3, #2
 80143f6:	3002      	addcc	r0, #2
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	db05      	blt.n	8014408 <__hi0bits+0x3c>
 80143fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014400:	f100 0001 	add.w	r0, r0, #1
 8014404:	bf08      	it	eq
 8014406:	2020      	moveq	r0, #32
 8014408:	4770      	bx	lr

0801440a <__lo0bits>:
 801440a:	6803      	ldr	r3, [r0, #0]
 801440c:	4602      	mov	r2, r0
 801440e:	f013 0007 	ands.w	r0, r3, #7
 8014412:	d00b      	beq.n	801442c <__lo0bits+0x22>
 8014414:	07d9      	lsls	r1, r3, #31
 8014416:	d421      	bmi.n	801445c <__lo0bits+0x52>
 8014418:	0798      	lsls	r0, r3, #30
 801441a:	bf49      	itett	mi
 801441c:	085b      	lsrmi	r3, r3, #1
 801441e:	089b      	lsrpl	r3, r3, #2
 8014420:	2001      	movmi	r0, #1
 8014422:	6013      	strmi	r3, [r2, #0]
 8014424:	bf5c      	itt	pl
 8014426:	6013      	strpl	r3, [r2, #0]
 8014428:	2002      	movpl	r0, #2
 801442a:	4770      	bx	lr
 801442c:	b299      	uxth	r1, r3
 801442e:	b909      	cbnz	r1, 8014434 <__lo0bits+0x2a>
 8014430:	0c1b      	lsrs	r3, r3, #16
 8014432:	2010      	movs	r0, #16
 8014434:	b2d9      	uxtb	r1, r3
 8014436:	b909      	cbnz	r1, 801443c <__lo0bits+0x32>
 8014438:	3008      	adds	r0, #8
 801443a:	0a1b      	lsrs	r3, r3, #8
 801443c:	0719      	lsls	r1, r3, #28
 801443e:	bf04      	itt	eq
 8014440:	091b      	lsreq	r3, r3, #4
 8014442:	3004      	addeq	r0, #4
 8014444:	0799      	lsls	r1, r3, #30
 8014446:	bf04      	itt	eq
 8014448:	089b      	lsreq	r3, r3, #2
 801444a:	3002      	addeq	r0, #2
 801444c:	07d9      	lsls	r1, r3, #31
 801444e:	d403      	bmi.n	8014458 <__lo0bits+0x4e>
 8014450:	085b      	lsrs	r3, r3, #1
 8014452:	f100 0001 	add.w	r0, r0, #1
 8014456:	d003      	beq.n	8014460 <__lo0bits+0x56>
 8014458:	6013      	str	r3, [r2, #0]
 801445a:	4770      	bx	lr
 801445c:	2000      	movs	r0, #0
 801445e:	4770      	bx	lr
 8014460:	2020      	movs	r0, #32
 8014462:	4770      	bx	lr

08014464 <__i2b>:
 8014464:	b510      	push	{r4, lr}
 8014466:	460c      	mov	r4, r1
 8014468:	2101      	movs	r1, #1
 801446a:	f7ff ff07 	bl	801427c <_Balloc>
 801446e:	4602      	mov	r2, r0
 8014470:	b928      	cbnz	r0, 801447e <__i2b+0x1a>
 8014472:	4b05      	ldr	r3, [pc, #20]	@ (8014488 <__i2b+0x24>)
 8014474:	4805      	ldr	r0, [pc, #20]	@ (801448c <__i2b+0x28>)
 8014476:	f240 1145 	movw	r1, #325	@ 0x145
 801447a:	f7fe fe47 	bl	801310c <__assert_func>
 801447e:	2301      	movs	r3, #1
 8014480:	6144      	str	r4, [r0, #20]
 8014482:	6103      	str	r3, [r0, #16]
 8014484:	bd10      	pop	{r4, pc}
 8014486:	bf00      	nop
 8014488:	0801653b 	.word	0x0801653b
 801448c:	0801655d 	.word	0x0801655d

08014490 <__multiply>:
 8014490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014494:	4614      	mov	r4, r2
 8014496:	690a      	ldr	r2, [r1, #16]
 8014498:	6923      	ldr	r3, [r4, #16]
 801449a:	429a      	cmp	r2, r3
 801449c:	bfa8      	it	ge
 801449e:	4623      	movge	r3, r4
 80144a0:	460f      	mov	r7, r1
 80144a2:	bfa4      	itt	ge
 80144a4:	460c      	movge	r4, r1
 80144a6:	461f      	movge	r7, r3
 80144a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80144ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80144b0:	68a3      	ldr	r3, [r4, #8]
 80144b2:	6861      	ldr	r1, [r4, #4]
 80144b4:	eb0a 0609 	add.w	r6, sl, r9
 80144b8:	42b3      	cmp	r3, r6
 80144ba:	b085      	sub	sp, #20
 80144bc:	bfb8      	it	lt
 80144be:	3101      	addlt	r1, #1
 80144c0:	f7ff fedc 	bl	801427c <_Balloc>
 80144c4:	b930      	cbnz	r0, 80144d4 <__multiply+0x44>
 80144c6:	4602      	mov	r2, r0
 80144c8:	4b44      	ldr	r3, [pc, #272]	@ (80145dc <__multiply+0x14c>)
 80144ca:	4845      	ldr	r0, [pc, #276]	@ (80145e0 <__multiply+0x150>)
 80144cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80144d0:	f7fe fe1c 	bl	801310c <__assert_func>
 80144d4:	f100 0514 	add.w	r5, r0, #20
 80144d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80144dc:	462b      	mov	r3, r5
 80144de:	2200      	movs	r2, #0
 80144e0:	4543      	cmp	r3, r8
 80144e2:	d321      	bcc.n	8014528 <__multiply+0x98>
 80144e4:	f107 0114 	add.w	r1, r7, #20
 80144e8:	f104 0214 	add.w	r2, r4, #20
 80144ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80144f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80144f4:	9302      	str	r3, [sp, #8]
 80144f6:	1b13      	subs	r3, r2, r4
 80144f8:	3b15      	subs	r3, #21
 80144fa:	f023 0303 	bic.w	r3, r3, #3
 80144fe:	3304      	adds	r3, #4
 8014500:	f104 0715 	add.w	r7, r4, #21
 8014504:	42ba      	cmp	r2, r7
 8014506:	bf38      	it	cc
 8014508:	2304      	movcc	r3, #4
 801450a:	9301      	str	r3, [sp, #4]
 801450c:	9b02      	ldr	r3, [sp, #8]
 801450e:	9103      	str	r1, [sp, #12]
 8014510:	428b      	cmp	r3, r1
 8014512:	d80c      	bhi.n	801452e <__multiply+0x9e>
 8014514:	2e00      	cmp	r6, #0
 8014516:	dd03      	ble.n	8014520 <__multiply+0x90>
 8014518:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801451c:	2b00      	cmp	r3, #0
 801451e:	d05b      	beq.n	80145d8 <__multiply+0x148>
 8014520:	6106      	str	r6, [r0, #16]
 8014522:	b005      	add	sp, #20
 8014524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014528:	f843 2b04 	str.w	r2, [r3], #4
 801452c:	e7d8      	b.n	80144e0 <__multiply+0x50>
 801452e:	f8b1 a000 	ldrh.w	sl, [r1]
 8014532:	f1ba 0f00 	cmp.w	sl, #0
 8014536:	d024      	beq.n	8014582 <__multiply+0xf2>
 8014538:	f104 0e14 	add.w	lr, r4, #20
 801453c:	46a9      	mov	r9, r5
 801453e:	f04f 0c00 	mov.w	ip, #0
 8014542:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014546:	f8d9 3000 	ldr.w	r3, [r9]
 801454a:	fa1f fb87 	uxth.w	fp, r7
 801454e:	b29b      	uxth	r3, r3
 8014550:	fb0a 330b 	mla	r3, sl, fp, r3
 8014554:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014558:	f8d9 7000 	ldr.w	r7, [r9]
 801455c:	4463      	add	r3, ip
 801455e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014562:	fb0a c70b 	mla	r7, sl, fp, ip
 8014566:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801456a:	b29b      	uxth	r3, r3
 801456c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014570:	4572      	cmp	r2, lr
 8014572:	f849 3b04 	str.w	r3, [r9], #4
 8014576:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801457a:	d8e2      	bhi.n	8014542 <__multiply+0xb2>
 801457c:	9b01      	ldr	r3, [sp, #4]
 801457e:	f845 c003 	str.w	ip, [r5, r3]
 8014582:	9b03      	ldr	r3, [sp, #12]
 8014584:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014588:	3104      	adds	r1, #4
 801458a:	f1b9 0f00 	cmp.w	r9, #0
 801458e:	d021      	beq.n	80145d4 <__multiply+0x144>
 8014590:	682b      	ldr	r3, [r5, #0]
 8014592:	f104 0c14 	add.w	ip, r4, #20
 8014596:	46ae      	mov	lr, r5
 8014598:	f04f 0a00 	mov.w	sl, #0
 801459c:	f8bc b000 	ldrh.w	fp, [ip]
 80145a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80145a4:	fb09 770b 	mla	r7, r9, fp, r7
 80145a8:	4457      	add	r7, sl
 80145aa:	b29b      	uxth	r3, r3
 80145ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80145b0:	f84e 3b04 	str.w	r3, [lr], #4
 80145b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80145b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80145bc:	f8be 3000 	ldrh.w	r3, [lr]
 80145c0:	fb09 330a 	mla	r3, r9, sl, r3
 80145c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80145c8:	4562      	cmp	r2, ip
 80145ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80145ce:	d8e5      	bhi.n	801459c <__multiply+0x10c>
 80145d0:	9f01      	ldr	r7, [sp, #4]
 80145d2:	51eb      	str	r3, [r5, r7]
 80145d4:	3504      	adds	r5, #4
 80145d6:	e799      	b.n	801450c <__multiply+0x7c>
 80145d8:	3e01      	subs	r6, #1
 80145da:	e79b      	b.n	8014514 <__multiply+0x84>
 80145dc:	0801653b 	.word	0x0801653b
 80145e0:	0801655d 	.word	0x0801655d

080145e4 <__pow5mult>:
 80145e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145e8:	4615      	mov	r5, r2
 80145ea:	f012 0203 	ands.w	r2, r2, #3
 80145ee:	4607      	mov	r7, r0
 80145f0:	460e      	mov	r6, r1
 80145f2:	d007      	beq.n	8014604 <__pow5mult+0x20>
 80145f4:	4c25      	ldr	r4, [pc, #148]	@ (801468c <__pow5mult+0xa8>)
 80145f6:	3a01      	subs	r2, #1
 80145f8:	2300      	movs	r3, #0
 80145fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80145fe:	f7ff fe9f 	bl	8014340 <__multadd>
 8014602:	4606      	mov	r6, r0
 8014604:	10ad      	asrs	r5, r5, #2
 8014606:	d03d      	beq.n	8014684 <__pow5mult+0xa0>
 8014608:	69fc      	ldr	r4, [r7, #28]
 801460a:	b97c      	cbnz	r4, 801462c <__pow5mult+0x48>
 801460c:	2010      	movs	r0, #16
 801460e:	f7fe f8eb 	bl	80127e8 <malloc>
 8014612:	4602      	mov	r2, r0
 8014614:	61f8      	str	r0, [r7, #28]
 8014616:	b928      	cbnz	r0, 8014624 <__pow5mult+0x40>
 8014618:	4b1d      	ldr	r3, [pc, #116]	@ (8014690 <__pow5mult+0xac>)
 801461a:	481e      	ldr	r0, [pc, #120]	@ (8014694 <__pow5mult+0xb0>)
 801461c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014620:	f7fe fd74 	bl	801310c <__assert_func>
 8014624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014628:	6004      	str	r4, [r0, #0]
 801462a:	60c4      	str	r4, [r0, #12]
 801462c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014634:	b94c      	cbnz	r4, 801464a <__pow5mult+0x66>
 8014636:	f240 2171 	movw	r1, #625	@ 0x271
 801463a:	4638      	mov	r0, r7
 801463c:	f7ff ff12 	bl	8014464 <__i2b>
 8014640:	2300      	movs	r3, #0
 8014642:	f8c8 0008 	str.w	r0, [r8, #8]
 8014646:	4604      	mov	r4, r0
 8014648:	6003      	str	r3, [r0, #0]
 801464a:	f04f 0900 	mov.w	r9, #0
 801464e:	07eb      	lsls	r3, r5, #31
 8014650:	d50a      	bpl.n	8014668 <__pow5mult+0x84>
 8014652:	4631      	mov	r1, r6
 8014654:	4622      	mov	r2, r4
 8014656:	4638      	mov	r0, r7
 8014658:	f7ff ff1a 	bl	8014490 <__multiply>
 801465c:	4631      	mov	r1, r6
 801465e:	4680      	mov	r8, r0
 8014660:	4638      	mov	r0, r7
 8014662:	f7ff fe4b 	bl	80142fc <_Bfree>
 8014666:	4646      	mov	r6, r8
 8014668:	106d      	asrs	r5, r5, #1
 801466a:	d00b      	beq.n	8014684 <__pow5mult+0xa0>
 801466c:	6820      	ldr	r0, [r4, #0]
 801466e:	b938      	cbnz	r0, 8014680 <__pow5mult+0x9c>
 8014670:	4622      	mov	r2, r4
 8014672:	4621      	mov	r1, r4
 8014674:	4638      	mov	r0, r7
 8014676:	f7ff ff0b 	bl	8014490 <__multiply>
 801467a:	6020      	str	r0, [r4, #0]
 801467c:	f8c0 9000 	str.w	r9, [r0]
 8014680:	4604      	mov	r4, r0
 8014682:	e7e4      	b.n	801464e <__pow5mult+0x6a>
 8014684:	4630      	mov	r0, r6
 8014686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801468a:	bf00      	nop
 801468c:	080165b8 	.word	0x080165b8
 8014690:	08016328 	.word	0x08016328
 8014694:	0801655d 	.word	0x0801655d

08014698 <__lshift>:
 8014698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801469c:	460c      	mov	r4, r1
 801469e:	6849      	ldr	r1, [r1, #4]
 80146a0:	6923      	ldr	r3, [r4, #16]
 80146a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80146a6:	68a3      	ldr	r3, [r4, #8]
 80146a8:	4607      	mov	r7, r0
 80146aa:	4691      	mov	r9, r2
 80146ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80146b0:	f108 0601 	add.w	r6, r8, #1
 80146b4:	42b3      	cmp	r3, r6
 80146b6:	db0b      	blt.n	80146d0 <__lshift+0x38>
 80146b8:	4638      	mov	r0, r7
 80146ba:	f7ff fddf 	bl	801427c <_Balloc>
 80146be:	4605      	mov	r5, r0
 80146c0:	b948      	cbnz	r0, 80146d6 <__lshift+0x3e>
 80146c2:	4602      	mov	r2, r0
 80146c4:	4b28      	ldr	r3, [pc, #160]	@ (8014768 <__lshift+0xd0>)
 80146c6:	4829      	ldr	r0, [pc, #164]	@ (801476c <__lshift+0xd4>)
 80146c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80146cc:	f7fe fd1e 	bl	801310c <__assert_func>
 80146d0:	3101      	adds	r1, #1
 80146d2:	005b      	lsls	r3, r3, #1
 80146d4:	e7ee      	b.n	80146b4 <__lshift+0x1c>
 80146d6:	2300      	movs	r3, #0
 80146d8:	f100 0114 	add.w	r1, r0, #20
 80146dc:	f100 0210 	add.w	r2, r0, #16
 80146e0:	4618      	mov	r0, r3
 80146e2:	4553      	cmp	r3, sl
 80146e4:	db33      	blt.n	801474e <__lshift+0xb6>
 80146e6:	6920      	ldr	r0, [r4, #16]
 80146e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80146ec:	f104 0314 	add.w	r3, r4, #20
 80146f0:	f019 091f 	ands.w	r9, r9, #31
 80146f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80146f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80146fc:	d02b      	beq.n	8014756 <__lshift+0xbe>
 80146fe:	f1c9 0e20 	rsb	lr, r9, #32
 8014702:	468a      	mov	sl, r1
 8014704:	2200      	movs	r2, #0
 8014706:	6818      	ldr	r0, [r3, #0]
 8014708:	fa00 f009 	lsl.w	r0, r0, r9
 801470c:	4310      	orrs	r0, r2
 801470e:	f84a 0b04 	str.w	r0, [sl], #4
 8014712:	f853 2b04 	ldr.w	r2, [r3], #4
 8014716:	459c      	cmp	ip, r3
 8014718:	fa22 f20e 	lsr.w	r2, r2, lr
 801471c:	d8f3      	bhi.n	8014706 <__lshift+0x6e>
 801471e:	ebac 0304 	sub.w	r3, ip, r4
 8014722:	3b15      	subs	r3, #21
 8014724:	f023 0303 	bic.w	r3, r3, #3
 8014728:	3304      	adds	r3, #4
 801472a:	f104 0015 	add.w	r0, r4, #21
 801472e:	4584      	cmp	ip, r0
 8014730:	bf38      	it	cc
 8014732:	2304      	movcc	r3, #4
 8014734:	50ca      	str	r2, [r1, r3]
 8014736:	b10a      	cbz	r2, 801473c <__lshift+0xa4>
 8014738:	f108 0602 	add.w	r6, r8, #2
 801473c:	3e01      	subs	r6, #1
 801473e:	4638      	mov	r0, r7
 8014740:	612e      	str	r6, [r5, #16]
 8014742:	4621      	mov	r1, r4
 8014744:	f7ff fdda 	bl	80142fc <_Bfree>
 8014748:	4628      	mov	r0, r5
 801474a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801474e:	f842 0f04 	str.w	r0, [r2, #4]!
 8014752:	3301      	adds	r3, #1
 8014754:	e7c5      	b.n	80146e2 <__lshift+0x4a>
 8014756:	3904      	subs	r1, #4
 8014758:	f853 2b04 	ldr.w	r2, [r3], #4
 801475c:	f841 2f04 	str.w	r2, [r1, #4]!
 8014760:	459c      	cmp	ip, r3
 8014762:	d8f9      	bhi.n	8014758 <__lshift+0xc0>
 8014764:	e7ea      	b.n	801473c <__lshift+0xa4>
 8014766:	bf00      	nop
 8014768:	0801653b 	.word	0x0801653b
 801476c:	0801655d 	.word	0x0801655d

08014770 <__mcmp>:
 8014770:	690a      	ldr	r2, [r1, #16]
 8014772:	4603      	mov	r3, r0
 8014774:	6900      	ldr	r0, [r0, #16]
 8014776:	1a80      	subs	r0, r0, r2
 8014778:	b530      	push	{r4, r5, lr}
 801477a:	d10e      	bne.n	801479a <__mcmp+0x2a>
 801477c:	3314      	adds	r3, #20
 801477e:	3114      	adds	r1, #20
 8014780:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014784:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014788:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801478c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014790:	4295      	cmp	r5, r2
 8014792:	d003      	beq.n	801479c <__mcmp+0x2c>
 8014794:	d205      	bcs.n	80147a2 <__mcmp+0x32>
 8014796:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801479a:	bd30      	pop	{r4, r5, pc}
 801479c:	42a3      	cmp	r3, r4
 801479e:	d3f3      	bcc.n	8014788 <__mcmp+0x18>
 80147a0:	e7fb      	b.n	801479a <__mcmp+0x2a>
 80147a2:	2001      	movs	r0, #1
 80147a4:	e7f9      	b.n	801479a <__mcmp+0x2a>
	...

080147a8 <__mdiff>:
 80147a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147ac:	4689      	mov	r9, r1
 80147ae:	4606      	mov	r6, r0
 80147b0:	4611      	mov	r1, r2
 80147b2:	4648      	mov	r0, r9
 80147b4:	4614      	mov	r4, r2
 80147b6:	f7ff ffdb 	bl	8014770 <__mcmp>
 80147ba:	1e05      	subs	r5, r0, #0
 80147bc:	d112      	bne.n	80147e4 <__mdiff+0x3c>
 80147be:	4629      	mov	r1, r5
 80147c0:	4630      	mov	r0, r6
 80147c2:	f7ff fd5b 	bl	801427c <_Balloc>
 80147c6:	4602      	mov	r2, r0
 80147c8:	b928      	cbnz	r0, 80147d6 <__mdiff+0x2e>
 80147ca:	4b3f      	ldr	r3, [pc, #252]	@ (80148c8 <__mdiff+0x120>)
 80147cc:	f240 2137 	movw	r1, #567	@ 0x237
 80147d0:	483e      	ldr	r0, [pc, #248]	@ (80148cc <__mdiff+0x124>)
 80147d2:	f7fe fc9b 	bl	801310c <__assert_func>
 80147d6:	2301      	movs	r3, #1
 80147d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80147dc:	4610      	mov	r0, r2
 80147de:	b003      	add	sp, #12
 80147e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147e4:	bfbc      	itt	lt
 80147e6:	464b      	movlt	r3, r9
 80147e8:	46a1      	movlt	r9, r4
 80147ea:	4630      	mov	r0, r6
 80147ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80147f0:	bfba      	itte	lt
 80147f2:	461c      	movlt	r4, r3
 80147f4:	2501      	movlt	r5, #1
 80147f6:	2500      	movge	r5, #0
 80147f8:	f7ff fd40 	bl	801427c <_Balloc>
 80147fc:	4602      	mov	r2, r0
 80147fe:	b918      	cbnz	r0, 8014808 <__mdiff+0x60>
 8014800:	4b31      	ldr	r3, [pc, #196]	@ (80148c8 <__mdiff+0x120>)
 8014802:	f240 2145 	movw	r1, #581	@ 0x245
 8014806:	e7e3      	b.n	80147d0 <__mdiff+0x28>
 8014808:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801480c:	6926      	ldr	r6, [r4, #16]
 801480e:	60c5      	str	r5, [r0, #12]
 8014810:	f109 0310 	add.w	r3, r9, #16
 8014814:	f109 0514 	add.w	r5, r9, #20
 8014818:	f104 0e14 	add.w	lr, r4, #20
 801481c:	f100 0b14 	add.w	fp, r0, #20
 8014820:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014824:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014828:	9301      	str	r3, [sp, #4]
 801482a:	46d9      	mov	r9, fp
 801482c:	f04f 0c00 	mov.w	ip, #0
 8014830:	9b01      	ldr	r3, [sp, #4]
 8014832:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014836:	f853 af04 	ldr.w	sl, [r3, #4]!
 801483a:	9301      	str	r3, [sp, #4]
 801483c:	fa1f f38a 	uxth.w	r3, sl
 8014840:	4619      	mov	r1, r3
 8014842:	b283      	uxth	r3, r0
 8014844:	1acb      	subs	r3, r1, r3
 8014846:	0c00      	lsrs	r0, r0, #16
 8014848:	4463      	add	r3, ip
 801484a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801484e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014852:	b29b      	uxth	r3, r3
 8014854:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014858:	4576      	cmp	r6, lr
 801485a:	f849 3b04 	str.w	r3, [r9], #4
 801485e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014862:	d8e5      	bhi.n	8014830 <__mdiff+0x88>
 8014864:	1b33      	subs	r3, r6, r4
 8014866:	3b15      	subs	r3, #21
 8014868:	f023 0303 	bic.w	r3, r3, #3
 801486c:	3415      	adds	r4, #21
 801486e:	3304      	adds	r3, #4
 8014870:	42a6      	cmp	r6, r4
 8014872:	bf38      	it	cc
 8014874:	2304      	movcc	r3, #4
 8014876:	441d      	add	r5, r3
 8014878:	445b      	add	r3, fp
 801487a:	461e      	mov	r6, r3
 801487c:	462c      	mov	r4, r5
 801487e:	4544      	cmp	r4, r8
 8014880:	d30e      	bcc.n	80148a0 <__mdiff+0xf8>
 8014882:	f108 0103 	add.w	r1, r8, #3
 8014886:	1b49      	subs	r1, r1, r5
 8014888:	f021 0103 	bic.w	r1, r1, #3
 801488c:	3d03      	subs	r5, #3
 801488e:	45a8      	cmp	r8, r5
 8014890:	bf38      	it	cc
 8014892:	2100      	movcc	r1, #0
 8014894:	440b      	add	r3, r1
 8014896:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801489a:	b191      	cbz	r1, 80148c2 <__mdiff+0x11a>
 801489c:	6117      	str	r7, [r2, #16]
 801489e:	e79d      	b.n	80147dc <__mdiff+0x34>
 80148a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80148a4:	46e6      	mov	lr, ip
 80148a6:	0c08      	lsrs	r0, r1, #16
 80148a8:	fa1c fc81 	uxtah	ip, ip, r1
 80148ac:	4471      	add	r1, lr
 80148ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80148b2:	b289      	uxth	r1, r1
 80148b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80148b8:	f846 1b04 	str.w	r1, [r6], #4
 80148bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80148c0:	e7dd      	b.n	801487e <__mdiff+0xd6>
 80148c2:	3f01      	subs	r7, #1
 80148c4:	e7e7      	b.n	8014896 <__mdiff+0xee>
 80148c6:	bf00      	nop
 80148c8:	0801653b 	.word	0x0801653b
 80148cc:	0801655d 	.word	0x0801655d

080148d0 <__d2b>:
 80148d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80148d4:	460f      	mov	r7, r1
 80148d6:	2101      	movs	r1, #1
 80148d8:	ec59 8b10 	vmov	r8, r9, d0
 80148dc:	4616      	mov	r6, r2
 80148de:	f7ff fccd 	bl	801427c <_Balloc>
 80148e2:	4604      	mov	r4, r0
 80148e4:	b930      	cbnz	r0, 80148f4 <__d2b+0x24>
 80148e6:	4602      	mov	r2, r0
 80148e8:	4b23      	ldr	r3, [pc, #140]	@ (8014978 <__d2b+0xa8>)
 80148ea:	4824      	ldr	r0, [pc, #144]	@ (801497c <__d2b+0xac>)
 80148ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80148f0:	f7fe fc0c 	bl	801310c <__assert_func>
 80148f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80148f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80148fc:	b10d      	cbz	r5, 8014902 <__d2b+0x32>
 80148fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014902:	9301      	str	r3, [sp, #4]
 8014904:	f1b8 0300 	subs.w	r3, r8, #0
 8014908:	d023      	beq.n	8014952 <__d2b+0x82>
 801490a:	4668      	mov	r0, sp
 801490c:	9300      	str	r3, [sp, #0]
 801490e:	f7ff fd7c 	bl	801440a <__lo0bits>
 8014912:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014916:	b1d0      	cbz	r0, 801494e <__d2b+0x7e>
 8014918:	f1c0 0320 	rsb	r3, r0, #32
 801491c:	fa02 f303 	lsl.w	r3, r2, r3
 8014920:	430b      	orrs	r3, r1
 8014922:	40c2      	lsrs	r2, r0
 8014924:	6163      	str	r3, [r4, #20]
 8014926:	9201      	str	r2, [sp, #4]
 8014928:	9b01      	ldr	r3, [sp, #4]
 801492a:	61a3      	str	r3, [r4, #24]
 801492c:	2b00      	cmp	r3, #0
 801492e:	bf0c      	ite	eq
 8014930:	2201      	moveq	r2, #1
 8014932:	2202      	movne	r2, #2
 8014934:	6122      	str	r2, [r4, #16]
 8014936:	b1a5      	cbz	r5, 8014962 <__d2b+0x92>
 8014938:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801493c:	4405      	add	r5, r0
 801493e:	603d      	str	r5, [r7, #0]
 8014940:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014944:	6030      	str	r0, [r6, #0]
 8014946:	4620      	mov	r0, r4
 8014948:	b003      	add	sp, #12
 801494a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801494e:	6161      	str	r1, [r4, #20]
 8014950:	e7ea      	b.n	8014928 <__d2b+0x58>
 8014952:	a801      	add	r0, sp, #4
 8014954:	f7ff fd59 	bl	801440a <__lo0bits>
 8014958:	9b01      	ldr	r3, [sp, #4]
 801495a:	6163      	str	r3, [r4, #20]
 801495c:	3020      	adds	r0, #32
 801495e:	2201      	movs	r2, #1
 8014960:	e7e8      	b.n	8014934 <__d2b+0x64>
 8014962:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014966:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801496a:	6038      	str	r0, [r7, #0]
 801496c:	6918      	ldr	r0, [r3, #16]
 801496e:	f7ff fd2d 	bl	80143cc <__hi0bits>
 8014972:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014976:	e7e5      	b.n	8014944 <__d2b+0x74>
 8014978:	0801653b 	.word	0x0801653b
 801497c:	0801655d 	.word	0x0801655d

08014980 <__sread>:
 8014980:	b510      	push	{r4, lr}
 8014982:	460c      	mov	r4, r1
 8014984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014988:	f000 f8ba 	bl	8014b00 <_read_r>
 801498c:	2800      	cmp	r0, #0
 801498e:	bfab      	itete	ge
 8014990:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014992:	89a3      	ldrhlt	r3, [r4, #12]
 8014994:	181b      	addge	r3, r3, r0
 8014996:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801499a:	bfac      	ite	ge
 801499c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801499e:	81a3      	strhlt	r3, [r4, #12]
 80149a0:	bd10      	pop	{r4, pc}

080149a2 <__swrite>:
 80149a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149a6:	461f      	mov	r7, r3
 80149a8:	898b      	ldrh	r3, [r1, #12]
 80149aa:	05db      	lsls	r3, r3, #23
 80149ac:	4605      	mov	r5, r0
 80149ae:	460c      	mov	r4, r1
 80149b0:	4616      	mov	r6, r2
 80149b2:	d505      	bpl.n	80149c0 <__swrite+0x1e>
 80149b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149b8:	2302      	movs	r3, #2
 80149ba:	2200      	movs	r2, #0
 80149bc:	f000 f88e 	bl	8014adc <_lseek_r>
 80149c0:	89a3      	ldrh	r3, [r4, #12]
 80149c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80149ca:	81a3      	strh	r3, [r4, #12]
 80149cc:	4632      	mov	r2, r6
 80149ce:	463b      	mov	r3, r7
 80149d0:	4628      	mov	r0, r5
 80149d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149d6:	f000 b8a5 	b.w	8014b24 <_write_r>

080149da <__sseek>:
 80149da:	b510      	push	{r4, lr}
 80149dc:	460c      	mov	r4, r1
 80149de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149e2:	f000 f87b 	bl	8014adc <_lseek_r>
 80149e6:	1c43      	adds	r3, r0, #1
 80149e8:	89a3      	ldrh	r3, [r4, #12]
 80149ea:	bf15      	itete	ne
 80149ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80149ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80149f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80149f6:	81a3      	strheq	r3, [r4, #12]
 80149f8:	bf18      	it	ne
 80149fa:	81a3      	strhne	r3, [r4, #12]
 80149fc:	bd10      	pop	{r4, pc}

080149fe <__sclose>:
 80149fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a02:	f000 b85b 	b.w	8014abc <_close_r>
	...

08014a08 <fiprintf>:
 8014a08:	b40e      	push	{r1, r2, r3}
 8014a0a:	b503      	push	{r0, r1, lr}
 8014a0c:	4601      	mov	r1, r0
 8014a0e:	ab03      	add	r3, sp, #12
 8014a10:	4805      	ldr	r0, [pc, #20]	@ (8014a28 <fiprintf+0x20>)
 8014a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a16:	6800      	ldr	r0, [r0, #0]
 8014a18:	9301      	str	r3, [sp, #4]
 8014a1a:	f000 f8d9 	bl	8014bd0 <_vfiprintf_r>
 8014a1e:	b002      	add	sp, #8
 8014a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a24:	b003      	add	sp, #12
 8014a26:	4770      	bx	lr
 8014a28:	200000f0 	.word	0x200000f0

08014a2c <_realloc_r>:
 8014a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a30:	4680      	mov	r8, r0
 8014a32:	4615      	mov	r5, r2
 8014a34:	460c      	mov	r4, r1
 8014a36:	b921      	cbnz	r1, 8014a42 <_realloc_r+0x16>
 8014a38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a3c:	4611      	mov	r1, r2
 8014a3e:	f7fd befd 	b.w	801283c <_malloc_r>
 8014a42:	b92a      	cbnz	r2, 8014a50 <_realloc_r+0x24>
 8014a44:	f7ff f9cc 	bl	8013de0 <_free_r>
 8014a48:	2400      	movs	r4, #0
 8014a4a:	4620      	mov	r0, r4
 8014a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a50:	f000 f9e8 	bl	8014e24 <_malloc_usable_size_r>
 8014a54:	4285      	cmp	r5, r0
 8014a56:	4606      	mov	r6, r0
 8014a58:	d802      	bhi.n	8014a60 <_realloc_r+0x34>
 8014a5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014a5e:	d8f4      	bhi.n	8014a4a <_realloc_r+0x1e>
 8014a60:	4629      	mov	r1, r5
 8014a62:	4640      	mov	r0, r8
 8014a64:	f7fd feea 	bl	801283c <_malloc_r>
 8014a68:	4607      	mov	r7, r0
 8014a6a:	2800      	cmp	r0, #0
 8014a6c:	d0ec      	beq.n	8014a48 <_realloc_r+0x1c>
 8014a6e:	42b5      	cmp	r5, r6
 8014a70:	462a      	mov	r2, r5
 8014a72:	4621      	mov	r1, r4
 8014a74:	bf28      	it	cs
 8014a76:	4632      	movcs	r2, r6
 8014a78:	f7fe fb3a 	bl	80130f0 <memcpy>
 8014a7c:	4621      	mov	r1, r4
 8014a7e:	4640      	mov	r0, r8
 8014a80:	f7ff f9ae 	bl	8013de0 <_free_r>
 8014a84:	463c      	mov	r4, r7
 8014a86:	e7e0      	b.n	8014a4a <_realloc_r+0x1e>

08014a88 <memmove>:
 8014a88:	4288      	cmp	r0, r1
 8014a8a:	b510      	push	{r4, lr}
 8014a8c:	eb01 0402 	add.w	r4, r1, r2
 8014a90:	d902      	bls.n	8014a98 <memmove+0x10>
 8014a92:	4284      	cmp	r4, r0
 8014a94:	4623      	mov	r3, r4
 8014a96:	d807      	bhi.n	8014aa8 <memmove+0x20>
 8014a98:	1e43      	subs	r3, r0, #1
 8014a9a:	42a1      	cmp	r1, r4
 8014a9c:	d008      	beq.n	8014ab0 <memmove+0x28>
 8014a9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014aa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014aa6:	e7f8      	b.n	8014a9a <memmove+0x12>
 8014aa8:	4402      	add	r2, r0
 8014aaa:	4601      	mov	r1, r0
 8014aac:	428a      	cmp	r2, r1
 8014aae:	d100      	bne.n	8014ab2 <memmove+0x2a>
 8014ab0:	bd10      	pop	{r4, pc}
 8014ab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014aba:	e7f7      	b.n	8014aac <memmove+0x24>

08014abc <_close_r>:
 8014abc:	b538      	push	{r3, r4, r5, lr}
 8014abe:	4d06      	ldr	r5, [pc, #24]	@ (8014ad8 <_close_r+0x1c>)
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	4604      	mov	r4, r0
 8014ac4:	4608      	mov	r0, r1
 8014ac6:	602b      	str	r3, [r5, #0]
 8014ac8:	f7ee fc48 	bl	800335c <_close>
 8014acc:	1c43      	adds	r3, r0, #1
 8014ace:	d102      	bne.n	8014ad6 <_close_r+0x1a>
 8014ad0:	682b      	ldr	r3, [r5, #0]
 8014ad2:	b103      	cbz	r3, 8014ad6 <_close_r+0x1a>
 8014ad4:	6023      	str	r3, [r4, #0]
 8014ad6:	bd38      	pop	{r3, r4, r5, pc}
 8014ad8:	20001724 	.word	0x20001724

08014adc <_lseek_r>:
 8014adc:	b538      	push	{r3, r4, r5, lr}
 8014ade:	4d07      	ldr	r5, [pc, #28]	@ (8014afc <_lseek_r+0x20>)
 8014ae0:	4604      	mov	r4, r0
 8014ae2:	4608      	mov	r0, r1
 8014ae4:	4611      	mov	r1, r2
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	602a      	str	r2, [r5, #0]
 8014aea:	461a      	mov	r2, r3
 8014aec:	f7ee fc5d 	bl	80033aa <_lseek>
 8014af0:	1c43      	adds	r3, r0, #1
 8014af2:	d102      	bne.n	8014afa <_lseek_r+0x1e>
 8014af4:	682b      	ldr	r3, [r5, #0]
 8014af6:	b103      	cbz	r3, 8014afa <_lseek_r+0x1e>
 8014af8:	6023      	str	r3, [r4, #0]
 8014afa:	bd38      	pop	{r3, r4, r5, pc}
 8014afc:	20001724 	.word	0x20001724

08014b00 <_read_r>:
 8014b00:	b538      	push	{r3, r4, r5, lr}
 8014b02:	4d07      	ldr	r5, [pc, #28]	@ (8014b20 <_read_r+0x20>)
 8014b04:	4604      	mov	r4, r0
 8014b06:	4608      	mov	r0, r1
 8014b08:	4611      	mov	r1, r2
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	602a      	str	r2, [r5, #0]
 8014b0e:	461a      	mov	r2, r3
 8014b10:	f7ee fc07 	bl	8003322 <_read>
 8014b14:	1c43      	adds	r3, r0, #1
 8014b16:	d102      	bne.n	8014b1e <_read_r+0x1e>
 8014b18:	682b      	ldr	r3, [r5, #0]
 8014b1a:	b103      	cbz	r3, 8014b1e <_read_r+0x1e>
 8014b1c:	6023      	str	r3, [r4, #0]
 8014b1e:	bd38      	pop	{r3, r4, r5, pc}
 8014b20:	20001724 	.word	0x20001724

08014b24 <_write_r>:
 8014b24:	b538      	push	{r3, r4, r5, lr}
 8014b26:	4d07      	ldr	r5, [pc, #28]	@ (8014b44 <_write_r+0x20>)
 8014b28:	4604      	mov	r4, r0
 8014b2a:	4608      	mov	r0, r1
 8014b2c:	4611      	mov	r1, r2
 8014b2e:	2200      	movs	r2, #0
 8014b30:	602a      	str	r2, [r5, #0]
 8014b32:	461a      	mov	r2, r3
 8014b34:	f7ec fd4a 	bl	80015cc <_write>
 8014b38:	1c43      	adds	r3, r0, #1
 8014b3a:	d102      	bne.n	8014b42 <_write_r+0x1e>
 8014b3c:	682b      	ldr	r3, [r5, #0]
 8014b3e:	b103      	cbz	r3, 8014b42 <_write_r+0x1e>
 8014b40:	6023      	str	r3, [r4, #0]
 8014b42:	bd38      	pop	{r3, r4, r5, pc}
 8014b44:	20001724 	.word	0x20001724

08014b48 <abort>:
 8014b48:	b508      	push	{r3, lr}
 8014b4a:	2006      	movs	r0, #6
 8014b4c:	f000 fac0 	bl	80150d0 <raise>
 8014b50:	2001      	movs	r0, #1
 8014b52:	f7ee fbdb 	bl	800330c <_exit>

08014b56 <_calloc_r>:
 8014b56:	b570      	push	{r4, r5, r6, lr}
 8014b58:	fba1 5402 	umull	r5, r4, r1, r2
 8014b5c:	b93c      	cbnz	r4, 8014b6e <_calloc_r+0x18>
 8014b5e:	4629      	mov	r1, r5
 8014b60:	f7fd fe6c 	bl	801283c <_malloc_r>
 8014b64:	4606      	mov	r6, r0
 8014b66:	b928      	cbnz	r0, 8014b74 <_calloc_r+0x1e>
 8014b68:	2600      	movs	r6, #0
 8014b6a:	4630      	mov	r0, r6
 8014b6c:	bd70      	pop	{r4, r5, r6, pc}
 8014b6e:	220c      	movs	r2, #12
 8014b70:	6002      	str	r2, [r0, #0]
 8014b72:	e7f9      	b.n	8014b68 <_calloc_r+0x12>
 8014b74:	462a      	mov	r2, r5
 8014b76:	4621      	mov	r1, r4
 8014b78:	f7fe fa74 	bl	8013064 <memset>
 8014b7c:	e7f5      	b.n	8014b6a <_calloc_r+0x14>

08014b7e <__sfputc_r>:
 8014b7e:	6893      	ldr	r3, [r2, #8]
 8014b80:	3b01      	subs	r3, #1
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	b410      	push	{r4}
 8014b86:	6093      	str	r3, [r2, #8]
 8014b88:	da08      	bge.n	8014b9c <__sfputc_r+0x1e>
 8014b8a:	6994      	ldr	r4, [r2, #24]
 8014b8c:	42a3      	cmp	r3, r4
 8014b8e:	db01      	blt.n	8014b94 <__sfputc_r+0x16>
 8014b90:	290a      	cmp	r1, #10
 8014b92:	d103      	bne.n	8014b9c <__sfputc_r+0x1e>
 8014b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b98:	f000 b94c 	b.w	8014e34 <__swbuf_r>
 8014b9c:	6813      	ldr	r3, [r2, #0]
 8014b9e:	1c58      	adds	r0, r3, #1
 8014ba0:	6010      	str	r0, [r2, #0]
 8014ba2:	7019      	strb	r1, [r3, #0]
 8014ba4:	4608      	mov	r0, r1
 8014ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014baa:	4770      	bx	lr

08014bac <__sfputs_r>:
 8014bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bae:	4606      	mov	r6, r0
 8014bb0:	460f      	mov	r7, r1
 8014bb2:	4614      	mov	r4, r2
 8014bb4:	18d5      	adds	r5, r2, r3
 8014bb6:	42ac      	cmp	r4, r5
 8014bb8:	d101      	bne.n	8014bbe <__sfputs_r+0x12>
 8014bba:	2000      	movs	r0, #0
 8014bbc:	e007      	b.n	8014bce <__sfputs_r+0x22>
 8014bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bc2:	463a      	mov	r2, r7
 8014bc4:	4630      	mov	r0, r6
 8014bc6:	f7ff ffda 	bl	8014b7e <__sfputc_r>
 8014bca:	1c43      	adds	r3, r0, #1
 8014bcc:	d1f3      	bne.n	8014bb6 <__sfputs_r+0xa>
 8014bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014bd0 <_vfiprintf_r>:
 8014bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bd4:	460d      	mov	r5, r1
 8014bd6:	b09d      	sub	sp, #116	@ 0x74
 8014bd8:	4614      	mov	r4, r2
 8014bda:	4698      	mov	r8, r3
 8014bdc:	4606      	mov	r6, r0
 8014bde:	b118      	cbz	r0, 8014be8 <_vfiprintf_r+0x18>
 8014be0:	6a03      	ldr	r3, [r0, #32]
 8014be2:	b90b      	cbnz	r3, 8014be8 <_vfiprintf_r+0x18>
 8014be4:	f7fe f8f0 	bl	8012dc8 <__sinit>
 8014be8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014bea:	07d9      	lsls	r1, r3, #31
 8014bec:	d405      	bmi.n	8014bfa <_vfiprintf_r+0x2a>
 8014bee:	89ab      	ldrh	r3, [r5, #12]
 8014bf0:	059a      	lsls	r2, r3, #22
 8014bf2:	d402      	bmi.n	8014bfa <_vfiprintf_r+0x2a>
 8014bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014bf6:	f7ee fcf8 	bl	80035ea <__retarget_lock_acquire_recursive>
 8014bfa:	89ab      	ldrh	r3, [r5, #12]
 8014bfc:	071b      	lsls	r3, r3, #28
 8014bfe:	d501      	bpl.n	8014c04 <_vfiprintf_r+0x34>
 8014c00:	692b      	ldr	r3, [r5, #16]
 8014c02:	b99b      	cbnz	r3, 8014c2c <_vfiprintf_r+0x5c>
 8014c04:	4629      	mov	r1, r5
 8014c06:	4630      	mov	r0, r6
 8014c08:	f000 f952 	bl	8014eb0 <__swsetup_r>
 8014c0c:	b170      	cbz	r0, 8014c2c <_vfiprintf_r+0x5c>
 8014c0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014c10:	07dc      	lsls	r4, r3, #31
 8014c12:	d504      	bpl.n	8014c1e <_vfiprintf_r+0x4e>
 8014c14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c18:	b01d      	add	sp, #116	@ 0x74
 8014c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c1e:	89ab      	ldrh	r3, [r5, #12]
 8014c20:	0598      	lsls	r0, r3, #22
 8014c22:	d4f7      	bmi.n	8014c14 <_vfiprintf_r+0x44>
 8014c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014c26:	f7ee fcf5 	bl	8003614 <__retarget_lock_release_recursive>
 8014c2a:	e7f3      	b.n	8014c14 <_vfiprintf_r+0x44>
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c30:	2320      	movs	r3, #32
 8014c32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014c36:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c3a:	2330      	movs	r3, #48	@ 0x30
 8014c3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014dec <_vfiprintf_r+0x21c>
 8014c40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014c44:	f04f 0901 	mov.w	r9, #1
 8014c48:	4623      	mov	r3, r4
 8014c4a:	469a      	mov	sl, r3
 8014c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c50:	b10a      	cbz	r2, 8014c56 <_vfiprintf_r+0x86>
 8014c52:	2a25      	cmp	r2, #37	@ 0x25
 8014c54:	d1f9      	bne.n	8014c4a <_vfiprintf_r+0x7a>
 8014c56:	ebba 0b04 	subs.w	fp, sl, r4
 8014c5a:	d00b      	beq.n	8014c74 <_vfiprintf_r+0xa4>
 8014c5c:	465b      	mov	r3, fp
 8014c5e:	4622      	mov	r2, r4
 8014c60:	4629      	mov	r1, r5
 8014c62:	4630      	mov	r0, r6
 8014c64:	f7ff ffa2 	bl	8014bac <__sfputs_r>
 8014c68:	3001      	adds	r0, #1
 8014c6a:	f000 80a7 	beq.w	8014dbc <_vfiprintf_r+0x1ec>
 8014c6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014c70:	445a      	add	r2, fp
 8014c72:	9209      	str	r2, [sp, #36]	@ 0x24
 8014c74:	f89a 3000 	ldrb.w	r3, [sl]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	f000 809f 	beq.w	8014dbc <_vfiprintf_r+0x1ec>
 8014c7e:	2300      	movs	r3, #0
 8014c80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014c84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c88:	f10a 0a01 	add.w	sl, sl, #1
 8014c8c:	9304      	str	r3, [sp, #16]
 8014c8e:	9307      	str	r3, [sp, #28]
 8014c90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014c94:	931a      	str	r3, [sp, #104]	@ 0x68
 8014c96:	4654      	mov	r4, sl
 8014c98:	2205      	movs	r2, #5
 8014c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c9e:	4853      	ldr	r0, [pc, #332]	@ (8014dec <_vfiprintf_r+0x21c>)
 8014ca0:	f7eb fabe 	bl	8000220 <memchr>
 8014ca4:	9a04      	ldr	r2, [sp, #16]
 8014ca6:	b9d8      	cbnz	r0, 8014ce0 <_vfiprintf_r+0x110>
 8014ca8:	06d1      	lsls	r1, r2, #27
 8014caa:	bf44      	itt	mi
 8014cac:	2320      	movmi	r3, #32
 8014cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014cb2:	0713      	lsls	r3, r2, #28
 8014cb4:	bf44      	itt	mi
 8014cb6:	232b      	movmi	r3, #43	@ 0x2b
 8014cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8014cc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8014cc2:	d015      	beq.n	8014cf0 <_vfiprintf_r+0x120>
 8014cc4:	9a07      	ldr	r2, [sp, #28]
 8014cc6:	4654      	mov	r4, sl
 8014cc8:	2000      	movs	r0, #0
 8014cca:	f04f 0c0a 	mov.w	ip, #10
 8014cce:	4621      	mov	r1, r4
 8014cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014cd4:	3b30      	subs	r3, #48	@ 0x30
 8014cd6:	2b09      	cmp	r3, #9
 8014cd8:	d94b      	bls.n	8014d72 <_vfiprintf_r+0x1a2>
 8014cda:	b1b0      	cbz	r0, 8014d0a <_vfiprintf_r+0x13a>
 8014cdc:	9207      	str	r2, [sp, #28]
 8014cde:	e014      	b.n	8014d0a <_vfiprintf_r+0x13a>
 8014ce0:	eba0 0308 	sub.w	r3, r0, r8
 8014ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8014ce8:	4313      	orrs	r3, r2
 8014cea:	9304      	str	r3, [sp, #16]
 8014cec:	46a2      	mov	sl, r4
 8014cee:	e7d2      	b.n	8014c96 <_vfiprintf_r+0xc6>
 8014cf0:	9b03      	ldr	r3, [sp, #12]
 8014cf2:	1d19      	adds	r1, r3, #4
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	9103      	str	r1, [sp, #12]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	bfbb      	ittet	lt
 8014cfc:	425b      	neglt	r3, r3
 8014cfe:	f042 0202 	orrlt.w	r2, r2, #2
 8014d02:	9307      	strge	r3, [sp, #28]
 8014d04:	9307      	strlt	r3, [sp, #28]
 8014d06:	bfb8      	it	lt
 8014d08:	9204      	strlt	r2, [sp, #16]
 8014d0a:	7823      	ldrb	r3, [r4, #0]
 8014d0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8014d0e:	d10a      	bne.n	8014d26 <_vfiprintf_r+0x156>
 8014d10:	7863      	ldrb	r3, [r4, #1]
 8014d12:	2b2a      	cmp	r3, #42	@ 0x2a
 8014d14:	d132      	bne.n	8014d7c <_vfiprintf_r+0x1ac>
 8014d16:	9b03      	ldr	r3, [sp, #12]
 8014d18:	1d1a      	adds	r2, r3, #4
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	9203      	str	r2, [sp, #12]
 8014d1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014d22:	3402      	adds	r4, #2
 8014d24:	9305      	str	r3, [sp, #20]
 8014d26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014dfc <_vfiprintf_r+0x22c>
 8014d2a:	7821      	ldrb	r1, [r4, #0]
 8014d2c:	2203      	movs	r2, #3
 8014d2e:	4650      	mov	r0, sl
 8014d30:	f7eb fa76 	bl	8000220 <memchr>
 8014d34:	b138      	cbz	r0, 8014d46 <_vfiprintf_r+0x176>
 8014d36:	9b04      	ldr	r3, [sp, #16]
 8014d38:	eba0 000a 	sub.w	r0, r0, sl
 8014d3c:	2240      	movs	r2, #64	@ 0x40
 8014d3e:	4082      	lsls	r2, r0
 8014d40:	4313      	orrs	r3, r2
 8014d42:	3401      	adds	r4, #1
 8014d44:	9304      	str	r3, [sp, #16]
 8014d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d4a:	4829      	ldr	r0, [pc, #164]	@ (8014df0 <_vfiprintf_r+0x220>)
 8014d4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014d50:	2206      	movs	r2, #6
 8014d52:	f7eb fa65 	bl	8000220 <memchr>
 8014d56:	2800      	cmp	r0, #0
 8014d58:	d03f      	beq.n	8014dda <_vfiprintf_r+0x20a>
 8014d5a:	4b26      	ldr	r3, [pc, #152]	@ (8014df4 <_vfiprintf_r+0x224>)
 8014d5c:	bb1b      	cbnz	r3, 8014da6 <_vfiprintf_r+0x1d6>
 8014d5e:	9b03      	ldr	r3, [sp, #12]
 8014d60:	3307      	adds	r3, #7
 8014d62:	f023 0307 	bic.w	r3, r3, #7
 8014d66:	3308      	adds	r3, #8
 8014d68:	9303      	str	r3, [sp, #12]
 8014d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d6c:	443b      	add	r3, r7
 8014d6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d70:	e76a      	b.n	8014c48 <_vfiprintf_r+0x78>
 8014d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d76:	460c      	mov	r4, r1
 8014d78:	2001      	movs	r0, #1
 8014d7a:	e7a8      	b.n	8014cce <_vfiprintf_r+0xfe>
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	3401      	adds	r4, #1
 8014d80:	9305      	str	r3, [sp, #20]
 8014d82:	4619      	mov	r1, r3
 8014d84:	f04f 0c0a 	mov.w	ip, #10
 8014d88:	4620      	mov	r0, r4
 8014d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d8e:	3a30      	subs	r2, #48	@ 0x30
 8014d90:	2a09      	cmp	r2, #9
 8014d92:	d903      	bls.n	8014d9c <_vfiprintf_r+0x1cc>
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d0c6      	beq.n	8014d26 <_vfiprintf_r+0x156>
 8014d98:	9105      	str	r1, [sp, #20]
 8014d9a:	e7c4      	b.n	8014d26 <_vfiprintf_r+0x156>
 8014d9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014da0:	4604      	mov	r4, r0
 8014da2:	2301      	movs	r3, #1
 8014da4:	e7f0      	b.n	8014d88 <_vfiprintf_r+0x1b8>
 8014da6:	ab03      	add	r3, sp, #12
 8014da8:	9300      	str	r3, [sp, #0]
 8014daa:	462a      	mov	r2, r5
 8014dac:	4b12      	ldr	r3, [pc, #72]	@ (8014df8 <_vfiprintf_r+0x228>)
 8014dae:	a904      	add	r1, sp, #16
 8014db0:	4630      	mov	r0, r6
 8014db2:	f7fd faef 	bl	8012394 <_printf_float>
 8014db6:	4607      	mov	r7, r0
 8014db8:	1c78      	adds	r0, r7, #1
 8014dba:	d1d6      	bne.n	8014d6a <_vfiprintf_r+0x19a>
 8014dbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014dbe:	07d9      	lsls	r1, r3, #31
 8014dc0:	d405      	bmi.n	8014dce <_vfiprintf_r+0x1fe>
 8014dc2:	89ab      	ldrh	r3, [r5, #12]
 8014dc4:	059a      	lsls	r2, r3, #22
 8014dc6:	d402      	bmi.n	8014dce <_vfiprintf_r+0x1fe>
 8014dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014dca:	f7ee fc23 	bl	8003614 <__retarget_lock_release_recursive>
 8014dce:	89ab      	ldrh	r3, [r5, #12]
 8014dd0:	065b      	lsls	r3, r3, #25
 8014dd2:	f53f af1f 	bmi.w	8014c14 <_vfiprintf_r+0x44>
 8014dd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014dd8:	e71e      	b.n	8014c18 <_vfiprintf_r+0x48>
 8014dda:	ab03      	add	r3, sp, #12
 8014ddc:	9300      	str	r3, [sp, #0]
 8014dde:	462a      	mov	r2, r5
 8014de0:	4b05      	ldr	r3, [pc, #20]	@ (8014df8 <_vfiprintf_r+0x228>)
 8014de2:	a904      	add	r1, sp, #16
 8014de4:	4630      	mov	r0, r6
 8014de6:	f7fd fe17 	bl	8012a18 <_printf_i>
 8014dea:	e7e4      	b.n	8014db6 <_vfiprintf_r+0x1e6>
 8014dec:	0801654c 	.word	0x0801654c
 8014df0:	08016556 	.word	0x08016556
 8014df4:	08012395 	.word	0x08012395
 8014df8:	08014bad 	.word	0x08014bad
 8014dfc:	08016552 	.word	0x08016552

08014e00 <__ascii_mbtowc>:
 8014e00:	b082      	sub	sp, #8
 8014e02:	b901      	cbnz	r1, 8014e06 <__ascii_mbtowc+0x6>
 8014e04:	a901      	add	r1, sp, #4
 8014e06:	b142      	cbz	r2, 8014e1a <__ascii_mbtowc+0x1a>
 8014e08:	b14b      	cbz	r3, 8014e1e <__ascii_mbtowc+0x1e>
 8014e0a:	7813      	ldrb	r3, [r2, #0]
 8014e0c:	600b      	str	r3, [r1, #0]
 8014e0e:	7812      	ldrb	r2, [r2, #0]
 8014e10:	1e10      	subs	r0, r2, #0
 8014e12:	bf18      	it	ne
 8014e14:	2001      	movne	r0, #1
 8014e16:	b002      	add	sp, #8
 8014e18:	4770      	bx	lr
 8014e1a:	4610      	mov	r0, r2
 8014e1c:	e7fb      	b.n	8014e16 <__ascii_mbtowc+0x16>
 8014e1e:	f06f 0001 	mvn.w	r0, #1
 8014e22:	e7f8      	b.n	8014e16 <__ascii_mbtowc+0x16>

08014e24 <_malloc_usable_size_r>:
 8014e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e28:	1f18      	subs	r0, r3, #4
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	bfbc      	itt	lt
 8014e2e:	580b      	ldrlt	r3, [r1, r0]
 8014e30:	18c0      	addlt	r0, r0, r3
 8014e32:	4770      	bx	lr

08014e34 <__swbuf_r>:
 8014e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e36:	460e      	mov	r6, r1
 8014e38:	4614      	mov	r4, r2
 8014e3a:	4605      	mov	r5, r0
 8014e3c:	b118      	cbz	r0, 8014e46 <__swbuf_r+0x12>
 8014e3e:	6a03      	ldr	r3, [r0, #32]
 8014e40:	b90b      	cbnz	r3, 8014e46 <__swbuf_r+0x12>
 8014e42:	f7fd ffc1 	bl	8012dc8 <__sinit>
 8014e46:	69a3      	ldr	r3, [r4, #24]
 8014e48:	60a3      	str	r3, [r4, #8]
 8014e4a:	89a3      	ldrh	r3, [r4, #12]
 8014e4c:	071a      	lsls	r2, r3, #28
 8014e4e:	d501      	bpl.n	8014e54 <__swbuf_r+0x20>
 8014e50:	6923      	ldr	r3, [r4, #16]
 8014e52:	b943      	cbnz	r3, 8014e66 <__swbuf_r+0x32>
 8014e54:	4621      	mov	r1, r4
 8014e56:	4628      	mov	r0, r5
 8014e58:	f000 f82a 	bl	8014eb0 <__swsetup_r>
 8014e5c:	b118      	cbz	r0, 8014e66 <__swbuf_r+0x32>
 8014e5e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014e62:	4638      	mov	r0, r7
 8014e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e66:	6823      	ldr	r3, [r4, #0]
 8014e68:	6922      	ldr	r2, [r4, #16]
 8014e6a:	1a98      	subs	r0, r3, r2
 8014e6c:	6963      	ldr	r3, [r4, #20]
 8014e6e:	b2f6      	uxtb	r6, r6
 8014e70:	4283      	cmp	r3, r0
 8014e72:	4637      	mov	r7, r6
 8014e74:	dc05      	bgt.n	8014e82 <__swbuf_r+0x4e>
 8014e76:	4621      	mov	r1, r4
 8014e78:	4628      	mov	r0, r5
 8014e7a:	f7ff f9d7 	bl	801422c <_fflush_r>
 8014e7e:	2800      	cmp	r0, #0
 8014e80:	d1ed      	bne.n	8014e5e <__swbuf_r+0x2a>
 8014e82:	68a3      	ldr	r3, [r4, #8]
 8014e84:	3b01      	subs	r3, #1
 8014e86:	60a3      	str	r3, [r4, #8]
 8014e88:	6823      	ldr	r3, [r4, #0]
 8014e8a:	1c5a      	adds	r2, r3, #1
 8014e8c:	6022      	str	r2, [r4, #0]
 8014e8e:	701e      	strb	r6, [r3, #0]
 8014e90:	6962      	ldr	r2, [r4, #20]
 8014e92:	1c43      	adds	r3, r0, #1
 8014e94:	429a      	cmp	r2, r3
 8014e96:	d004      	beq.n	8014ea2 <__swbuf_r+0x6e>
 8014e98:	89a3      	ldrh	r3, [r4, #12]
 8014e9a:	07db      	lsls	r3, r3, #31
 8014e9c:	d5e1      	bpl.n	8014e62 <__swbuf_r+0x2e>
 8014e9e:	2e0a      	cmp	r6, #10
 8014ea0:	d1df      	bne.n	8014e62 <__swbuf_r+0x2e>
 8014ea2:	4621      	mov	r1, r4
 8014ea4:	4628      	mov	r0, r5
 8014ea6:	f7ff f9c1 	bl	801422c <_fflush_r>
 8014eaa:	2800      	cmp	r0, #0
 8014eac:	d0d9      	beq.n	8014e62 <__swbuf_r+0x2e>
 8014eae:	e7d6      	b.n	8014e5e <__swbuf_r+0x2a>

08014eb0 <__swsetup_r>:
 8014eb0:	b538      	push	{r3, r4, r5, lr}
 8014eb2:	4b29      	ldr	r3, [pc, #164]	@ (8014f58 <__swsetup_r+0xa8>)
 8014eb4:	4605      	mov	r5, r0
 8014eb6:	6818      	ldr	r0, [r3, #0]
 8014eb8:	460c      	mov	r4, r1
 8014eba:	b118      	cbz	r0, 8014ec4 <__swsetup_r+0x14>
 8014ebc:	6a03      	ldr	r3, [r0, #32]
 8014ebe:	b90b      	cbnz	r3, 8014ec4 <__swsetup_r+0x14>
 8014ec0:	f7fd ff82 	bl	8012dc8 <__sinit>
 8014ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ec8:	0719      	lsls	r1, r3, #28
 8014eca:	d422      	bmi.n	8014f12 <__swsetup_r+0x62>
 8014ecc:	06da      	lsls	r2, r3, #27
 8014ece:	d407      	bmi.n	8014ee0 <__swsetup_r+0x30>
 8014ed0:	2209      	movs	r2, #9
 8014ed2:	602a      	str	r2, [r5, #0]
 8014ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ed8:	81a3      	strh	r3, [r4, #12]
 8014eda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014ede:	e033      	b.n	8014f48 <__swsetup_r+0x98>
 8014ee0:	0758      	lsls	r0, r3, #29
 8014ee2:	d512      	bpl.n	8014f0a <__swsetup_r+0x5a>
 8014ee4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014ee6:	b141      	cbz	r1, 8014efa <__swsetup_r+0x4a>
 8014ee8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014eec:	4299      	cmp	r1, r3
 8014eee:	d002      	beq.n	8014ef6 <__swsetup_r+0x46>
 8014ef0:	4628      	mov	r0, r5
 8014ef2:	f7fe ff75 	bl	8013de0 <_free_r>
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	6363      	str	r3, [r4, #52]	@ 0x34
 8014efa:	89a3      	ldrh	r3, [r4, #12]
 8014efc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014f00:	81a3      	strh	r3, [r4, #12]
 8014f02:	2300      	movs	r3, #0
 8014f04:	6063      	str	r3, [r4, #4]
 8014f06:	6923      	ldr	r3, [r4, #16]
 8014f08:	6023      	str	r3, [r4, #0]
 8014f0a:	89a3      	ldrh	r3, [r4, #12]
 8014f0c:	f043 0308 	orr.w	r3, r3, #8
 8014f10:	81a3      	strh	r3, [r4, #12]
 8014f12:	6923      	ldr	r3, [r4, #16]
 8014f14:	b94b      	cbnz	r3, 8014f2a <__swsetup_r+0x7a>
 8014f16:	89a3      	ldrh	r3, [r4, #12]
 8014f18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014f20:	d003      	beq.n	8014f2a <__swsetup_r+0x7a>
 8014f22:	4621      	mov	r1, r4
 8014f24:	4628      	mov	r0, r5
 8014f26:	f000 f84c 	bl	8014fc2 <__smakebuf_r>
 8014f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f2e:	f013 0201 	ands.w	r2, r3, #1
 8014f32:	d00a      	beq.n	8014f4a <__swsetup_r+0x9a>
 8014f34:	2200      	movs	r2, #0
 8014f36:	60a2      	str	r2, [r4, #8]
 8014f38:	6962      	ldr	r2, [r4, #20]
 8014f3a:	4252      	negs	r2, r2
 8014f3c:	61a2      	str	r2, [r4, #24]
 8014f3e:	6922      	ldr	r2, [r4, #16]
 8014f40:	b942      	cbnz	r2, 8014f54 <__swsetup_r+0xa4>
 8014f42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014f46:	d1c5      	bne.n	8014ed4 <__swsetup_r+0x24>
 8014f48:	bd38      	pop	{r3, r4, r5, pc}
 8014f4a:	0799      	lsls	r1, r3, #30
 8014f4c:	bf58      	it	pl
 8014f4e:	6962      	ldrpl	r2, [r4, #20]
 8014f50:	60a2      	str	r2, [r4, #8]
 8014f52:	e7f4      	b.n	8014f3e <__swsetup_r+0x8e>
 8014f54:	2000      	movs	r0, #0
 8014f56:	e7f7      	b.n	8014f48 <__swsetup_r+0x98>
 8014f58:	200000f0 	.word	0x200000f0

08014f5c <__ascii_wctomb>:
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	4608      	mov	r0, r1
 8014f60:	b141      	cbz	r1, 8014f74 <__ascii_wctomb+0x18>
 8014f62:	2aff      	cmp	r2, #255	@ 0xff
 8014f64:	d904      	bls.n	8014f70 <__ascii_wctomb+0x14>
 8014f66:	228a      	movs	r2, #138	@ 0x8a
 8014f68:	601a      	str	r2, [r3, #0]
 8014f6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014f6e:	4770      	bx	lr
 8014f70:	700a      	strb	r2, [r1, #0]
 8014f72:	2001      	movs	r0, #1
 8014f74:	4770      	bx	lr

08014f76 <__swhatbuf_r>:
 8014f76:	b570      	push	{r4, r5, r6, lr}
 8014f78:	460c      	mov	r4, r1
 8014f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f7e:	2900      	cmp	r1, #0
 8014f80:	b096      	sub	sp, #88	@ 0x58
 8014f82:	4615      	mov	r5, r2
 8014f84:	461e      	mov	r6, r3
 8014f86:	da0d      	bge.n	8014fa4 <__swhatbuf_r+0x2e>
 8014f88:	89a3      	ldrh	r3, [r4, #12]
 8014f8a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014f8e:	f04f 0100 	mov.w	r1, #0
 8014f92:	bf14      	ite	ne
 8014f94:	2340      	movne	r3, #64	@ 0x40
 8014f96:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014f9a:	2000      	movs	r0, #0
 8014f9c:	6031      	str	r1, [r6, #0]
 8014f9e:	602b      	str	r3, [r5, #0]
 8014fa0:	b016      	add	sp, #88	@ 0x58
 8014fa2:	bd70      	pop	{r4, r5, r6, pc}
 8014fa4:	466a      	mov	r2, sp
 8014fa6:	f000 f849 	bl	801503c <_fstat_r>
 8014faa:	2800      	cmp	r0, #0
 8014fac:	dbec      	blt.n	8014f88 <__swhatbuf_r+0x12>
 8014fae:	9901      	ldr	r1, [sp, #4]
 8014fb0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014fb4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014fb8:	4259      	negs	r1, r3
 8014fba:	4159      	adcs	r1, r3
 8014fbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014fc0:	e7eb      	b.n	8014f9a <__swhatbuf_r+0x24>

08014fc2 <__smakebuf_r>:
 8014fc2:	898b      	ldrh	r3, [r1, #12]
 8014fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014fc6:	079d      	lsls	r5, r3, #30
 8014fc8:	4606      	mov	r6, r0
 8014fca:	460c      	mov	r4, r1
 8014fcc:	d507      	bpl.n	8014fde <__smakebuf_r+0x1c>
 8014fce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014fd2:	6023      	str	r3, [r4, #0]
 8014fd4:	6123      	str	r3, [r4, #16]
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	6163      	str	r3, [r4, #20]
 8014fda:	b003      	add	sp, #12
 8014fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fde:	ab01      	add	r3, sp, #4
 8014fe0:	466a      	mov	r2, sp
 8014fe2:	f7ff ffc8 	bl	8014f76 <__swhatbuf_r>
 8014fe6:	9f00      	ldr	r7, [sp, #0]
 8014fe8:	4605      	mov	r5, r0
 8014fea:	4639      	mov	r1, r7
 8014fec:	4630      	mov	r0, r6
 8014fee:	f7fd fc25 	bl	801283c <_malloc_r>
 8014ff2:	b948      	cbnz	r0, 8015008 <__smakebuf_r+0x46>
 8014ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ff8:	059a      	lsls	r2, r3, #22
 8014ffa:	d4ee      	bmi.n	8014fda <__smakebuf_r+0x18>
 8014ffc:	f023 0303 	bic.w	r3, r3, #3
 8015000:	f043 0302 	orr.w	r3, r3, #2
 8015004:	81a3      	strh	r3, [r4, #12]
 8015006:	e7e2      	b.n	8014fce <__smakebuf_r+0xc>
 8015008:	89a3      	ldrh	r3, [r4, #12]
 801500a:	6020      	str	r0, [r4, #0]
 801500c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015010:	81a3      	strh	r3, [r4, #12]
 8015012:	9b01      	ldr	r3, [sp, #4]
 8015014:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015018:	b15b      	cbz	r3, 8015032 <__smakebuf_r+0x70>
 801501a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801501e:	4630      	mov	r0, r6
 8015020:	f000 f81e 	bl	8015060 <_isatty_r>
 8015024:	b128      	cbz	r0, 8015032 <__smakebuf_r+0x70>
 8015026:	89a3      	ldrh	r3, [r4, #12]
 8015028:	f023 0303 	bic.w	r3, r3, #3
 801502c:	f043 0301 	orr.w	r3, r3, #1
 8015030:	81a3      	strh	r3, [r4, #12]
 8015032:	89a3      	ldrh	r3, [r4, #12]
 8015034:	431d      	orrs	r5, r3
 8015036:	81a5      	strh	r5, [r4, #12]
 8015038:	e7cf      	b.n	8014fda <__smakebuf_r+0x18>
	...

0801503c <_fstat_r>:
 801503c:	b538      	push	{r3, r4, r5, lr}
 801503e:	4d07      	ldr	r5, [pc, #28]	@ (801505c <_fstat_r+0x20>)
 8015040:	2300      	movs	r3, #0
 8015042:	4604      	mov	r4, r0
 8015044:	4608      	mov	r0, r1
 8015046:	4611      	mov	r1, r2
 8015048:	602b      	str	r3, [r5, #0]
 801504a:	f7ee f993 	bl	8003374 <_fstat>
 801504e:	1c43      	adds	r3, r0, #1
 8015050:	d102      	bne.n	8015058 <_fstat_r+0x1c>
 8015052:	682b      	ldr	r3, [r5, #0]
 8015054:	b103      	cbz	r3, 8015058 <_fstat_r+0x1c>
 8015056:	6023      	str	r3, [r4, #0]
 8015058:	bd38      	pop	{r3, r4, r5, pc}
 801505a:	bf00      	nop
 801505c:	20001724 	.word	0x20001724

08015060 <_isatty_r>:
 8015060:	b538      	push	{r3, r4, r5, lr}
 8015062:	4d06      	ldr	r5, [pc, #24]	@ (801507c <_isatty_r+0x1c>)
 8015064:	2300      	movs	r3, #0
 8015066:	4604      	mov	r4, r0
 8015068:	4608      	mov	r0, r1
 801506a:	602b      	str	r3, [r5, #0]
 801506c:	f7ee f992 	bl	8003394 <_isatty>
 8015070:	1c43      	adds	r3, r0, #1
 8015072:	d102      	bne.n	801507a <_isatty_r+0x1a>
 8015074:	682b      	ldr	r3, [r5, #0]
 8015076:	b103      	cbz	r3, 801507a <_isatty_r+0x1a>
 8015078:	6023      	str	r3, [r4, #0]
 801507a:	bd38      	pop	{r3, r4, r5, pc}
 801507c:	20001724 	.word	0x20001724

08015080 <_raise_r>:
 8015080:	291f      	cmp	r1, #31
 8015082:	b538      	push	{r3, r4, r5, lr}
 8015084:	4605      	mov	r5, r0
 8015086:	460c      	mov	r4, r1
 8015088:	d904      	bls.n	8015094 <_raise_r+0x14>
 801508a:	2316      	movs	r3, #22
 801508c:	6003      	str	r3, [r0, #0]
 801508e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015092:	bd38      	pop	{r3, r4, r5, pc}
 8015094:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015096:	b112      	cbz	r2, 801509e <_raise_r+0x1e>
 8015098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801509c:	b94b      	cbnz	r3, 80150b2 <_raise_r+0x32>
 801509e:	4628      	mov	r0, r5
 80150a0:	f000 f830 	bl	8015104 <_getpid_r>
 80150a4:	4622      	mov	r2, r4
 80150a6:	4601      	mov	r1, r0
 80150a8:	4628      	mov	r0, r5
 80150aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80150ae:	f000 b817 	b.w	80150e0 <_kill_r>
 80150b2:	2b01      	cmp	r3, #1
 80150b4:	d00a      	beq.n	80150cc <_raise_r+0x4c>
 80150b6:	1c59      	adds	r1, r3, #1
 80150b8:	d103      	bne.n	80150c2 <_raise_r+0x42>
 80150ba:	2316      	movs	r3, #22
 80150bc:	6003      	str	r3, [r0, #0]
 80150be:	2001      	movs	r0, #1
 80150c0:	e7e7      	b.n	8015092 <_raise_r+0x12>
 80150c2:	2100      	movs	r1, #0
 80150c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80150c8:	4620      	mov	r0, r4
 80150ca:	4798      	blx	r3
 80150cc:	2000      	movs	r0, #0
 80150ce:	e7e0      	b.n	8015092 <_raise_r+0x12>

080150d0 <raise>:
 80150d0:	4b02      	ldr	r3, [pc, #8]	@ (80150dc <raise+0xc>)
 80150d2:	4601      	mov	r1, r0
 80150d4:	6818      	ldr	r0, [r3, #0]
 80150d6:	f7ff bfd3 	b.w	8015080 <_raise_r>
 80150da:	bf00      	nop
 80150dc:	200000f0 	.word	0x200000f0

080150e0 <_kill_r>:
 80150e0:	b538      	push	{r3, r4, r5, lr}
 80150e2:	4d07      	ldr	r5, [pc, #28]	@ (8015100 <_kill_r+0x20>)
 80150e4:	2300      	movs	r3, #0
 80150e6:	4604      	mov	r4, r0
 80150e8:	4608      	mov	r0, r1
 80150ea:	4611      	mov	r1, r2
 80150ec:	602b      	str	r3, [r5, #0]
 80150ee:	f7ee f8fd 	bl	80032ec <_kill>
 80150f2:	1c43      	adds	r3, r0, #1
 80150f4:	d102      	bne.n	80150fc <_kill_r+0x1c>
 80150f6:	682b      	ldr	r3, [r5, #0]
 80150f8:	b103      	cbz	r3, 80150fc <_kill_r+0x1c>
 80150fa:	6023      	str	r3, [r4, #0]
 80150fc:	bd38      	pop	{r3, r4, r5, pc}
 80150fe:	bf00      	nop
 8015100:	20001724 	.word	0x20001724

08015104 <_getpid_r>:
 8015104:	f7ee b8ea 	b.w	80032dc <_getpid>

08015108 <pow>:
 8015108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801510a:	ed2d 8b02 	vpush	{d8}
 801510e:	eeb0 8a40 	vmov.f32	s16, s0
 8015112:	eef0 8a60 	vmov.f32	s17, s1
 8015116:	ec55 4b11 	vmov	r4, r5, d1
 801511a:	f000 f871 	bl	8015200 <__ieee754_pow>
 801511e:	4622      	mov	r2, r4
 8015120:	462b      	mov	r3, r5
 8015122:	4620      	mov	r0, r4
 8015124:	4629      	mov	r1, r5
 8015126:	ec57 6b10 	vmov	r6, r7, d0
 801512a:	f7eb fd27 	bl	8000b7c <__aeabi_dcmpun>
 801512e:	2800      	cmp	r0, #0
 8015130:	d13b      	bne.n	80151aa <pow+0xa2>
 8015132:	ec51 0b18 	vmov	r0, r1, d8
 8015136:	2200      	movs	r2, #0
 8015138:	2300      	movs	r3, #0
 801513a:	f7eb fced 	bl	8000b18 <__aeabi_dcmpeq>
 801513e:	b1b8      	cbz	r0, 8015170 <pow+0x68>
 8015140:	2200      	movs	r2, #0
 8015142:	2300      	movs	r3, #0
 8015144:	4620      	mov	r0, r4
 8015146:	4629      	mov	r1, r5
 8015148:	f7eb fce6 	bl	8000b18 <__aeabi_dcmpeq>
 801514c:	2800      	cmp	r0, #0
 801514e:	d146      	bne.n	80151de <pow+0xd6>
 8015150:	ec45 4b10 	vmov	d0, r4, r5
 8015154:	f000 f848 	bl	80151e8 <finite>
 8015158:	b338      	cbz	r0, 80151aa <pow+0xa2>
 801515a:	2200      	movs	r2, #0
 801515c:	2300      	movs	r3, #0
 801515e:	4620      	mov	r0, r4
 8015160:	4629      	mov	r1, r5
 8015162:	f7eb fce3 	bl	8000b2c <__aeabi_dcmplt>
 8015166:	b300      	cbz	r0, 80151aa <pow+0xa2>
 8015168:	f7fd ff98 	bl	801309c <__errno>
 801516c:	2322      	movs	r3, #34	@ 0x22
 801516e:	e01b      	b.n	80151a8 <pow+0xa0>
 8015170:	ec47 6b10 	vmov	d0, r6, r7
 8015174:	f000 f838 	bl	80151e8 <finite>
 8015178:	b9e0      	cbnz	r0, 80151b4 <pow+0xac>
 801517a:	eeb0 0a48 	vmov.f32	s0, s16
 801517e:	eef0 0a68 	vmov.f32	s1, s17
 8015182:	f000 f831 	bl	80151e8 <finite>
 8015186:	b1a8      	cbz	r0, 80151b4 <pow+0xac>
 8015188:	ec45 4b10 	vmov	d0, r4, r5
 801518c:	f000 f82c 	bl	80151e8 <finite>
 8015190:	b180      	cbz	r0, 80151b4 <pow+0xac>
 8015192:	4632      	mov	r2, r6
 8015194:	463b      	mov	r3, r7
 8015196:	4630      	mov	r0, r6
 8015198:	4639      	mov	r1, r7
 801519a:	f7eb fcef 	bl	8000b7c <__aeabi_dcmpun>
 801519e:	2800      	cmp	r0, #0
 80151a0:	d0e2      	beq.n	8015168 <pow+0x60>
 80151a2:	f7fd ff7b 	bl	801309c <__errno>
 80151a6:	2321      	movs	r3, #33	@ 0x21
 80151a8:	6003      	str	r3, [r0, #0]
 80151aa:	ecbd 8b02 	vpop	{d8}
 80151ae:	ec47 6b10 	vmov	d0, r6, r7
 80151b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151b4:	2200      	movs	r2, #0
 80151b6:	2300      	movs	r3, #0
 80151b8:	4630      	mov	r0, r6
 80151ba:	4639      	mov	r1, r7
 80151bc:	f7eb fcac 	bl	8000b18 <__aeabi_dcmpeq>
 80151c0:	2800      	cmp	r0, #0
 80151c2:	d0f2      	beq.n	80151aa <pow+0xa2>
 80151c4:	eeb0 0a48 	vmov.f32	s0, s16
 80151c8:	eef0 0a68 	vmov.f32	s1, s17
 80151cc:	f000 f80c 	bl	80151e8 <finite>
 80151d0:	2800      	cmp	r0, #0
 80151d2:	d0ea      	beq.n	80151aa <pow+0xa2>
 80151d4:	ec45 4b10 	vmov	d0, r4, r5
 80151d8:	f000 f806 	bl	80151e8 <finite>
 80151dc:	e7c3      	b.n	8015166 <pow+0x5e>
 80151de:	4f01      	ldr	r7, [pc, #4]	@ (80151e4 <pow+0xdc>)
 80151e0:	2600      	movs	r6, #0
 80151e2:	e7e2      	b.n	80151aa <pow+0xa2>
 80151e4:	3ff00000 	.word	0x3ff00000

080151e8 <finite>:
 80151e8:	b082      	sub	sp, #8
 80151ea:	ed8d 0b00 	vstr	d0, [sp]
 80151ee:	9801      	ldr	r0, [sp, #4]
 80151f0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80151f4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80151f8:	0fc0      	lsrs	r0, r0, #31
 80151fa:	b002      	add	sp, #8
 80151fc:	4770      	bx	lr
	...

08015200 <__ieee754_pow>:
 8015200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015204:	b091      	sub	sp, #68	@ 0x44
 8015206:	ed8d 1b00 	vstr	d1, [sp]
 801520a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801520e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8015212:	ea5a 0001 	orrs.w	r0, sl, r1
 8015216:	ec57 6b10 	vmov	r6, r7, d0
 801521a:	d113      	bne.n	8015244 <__ieee754_pow+0x44>
 801521c:	19b3      	adds	r3, r6, r6
 801521e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8015222:	4152      	adcs	r2, r2
 8015224:	4298      	cmp	r0, r3
 8015226:	4b98      	ldr	r3, [pc, #608]	@ (8015488 <__ieee754_pow+0x288>)
 8015228:	4193      	sbcs	r3, r2
 801522a:	f080 84ea 	bcs.w	8015c02 <__ieee754_pow+0xa02>
 801522e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015232:	4630      	mov	r0, r6
 8015234:	4639      	mov	r1, r7
 8015236:	f7eb f851 	bl	80002dc <__adddf3>
 801523a:	ec41 0b10 	vmov	d0, r0, r1
 801523e:	b011      	add	sp, #68	@ 0x44
 8015240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015244:	4a91      	ldr	r2, [pc, #580]	@ (801548c <__ieee754_pow+0x28c>)
 8015246:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801524a:	4590      	cmp	r8, r2
 801524c:	463d      	mov	r5, r7
 801524e:	4633      	mov	r3, r6
 8015250:	d806      	bhi.n	8015260 <__ieee754_pow+0x60>
 8015252:	d101      	bne.n	8015258 <__ieee754_pow+0x58>
 8015254:	2e00      	cmp	r6, #0
 8015256:	d1ea      	bne.n	801522e <__ieee754_pow+0x2e>
 8015258:	4592      	cmp	sl, r2
 801525a:	d801      	bhi.n	8015260 <__ieee754_pow+0x60>
 801525c:	d10e      	bne.n	801527c <__ieee754_pow+0x7c>
 801525e:	b169      	cbz	r1, 801527c <__ieee754_pow+0x7c>
 8015260:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8015264:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8015268:	431d      	orrs	r5, r3
 801526a:	d1e0      	bne.n	801522e <__ieee754_pow+0x2e>
 801526c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015270:	18db      	adds	r3, r3, r3
 8015272:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8015276:	4152      	adcs	r2, r2
 8015278:	429d      	cmp	r5, r3
 801527a:	e7d4      	b.n	8015226 <__ieee754_pow+0x26>
 801527c:	2d00      	cmp	r5, #0
 801527e:	46c3      	mov	fp, r8
 8015280:	da3a      	bge.n	80152f8 <__ieee754_pow+0xf8>
 8015282:	4a83      	ldr	r2, [pc, #524]	@ (8015490 <__ieee754_pow+0x290>)
 8015284:	4592      	cmp	sl, r2
 8015286:	d84d      	bhi.n	8015324 <__ieee754_pow+0x124>
 8015288:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801528c:	4592      	cmp	sl, r2
 801528e:	f240 84c7 	bls.w	8015c20 <__ieee754_pow+0xa20>
 8015292:	ea4f 522a 	mov.w	r2, sl, asr #20
 8015296:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801529a:	2a14      	cmp	r2, #20
 801529c:	dd0f      	ble.n	80152be <__ieee754_pow+0xbe>
 801529e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80152a2:	fa21 f402 	lsr.w	r4, r1, r2
 80152a6:	fa04 f202 	lsl.w	r2, r4, r2
 80152aa:	428a      	cmp	r2, r1
 80152ac:	f040 84b8 	bne.w	8015c20 <__ieee754_pow+0xa20>
 80152b0:	f004 0401 	and.w	r4, r4, #1
 80152b4:	f1c4 0402 	rsb	r4, r4, #2
 80152b8:	2900      	cmp	r1, #0
 80152ba:	d158      	bne.n	801536e <__ieee754_pow+0x16e>
 80152bc:	e00e      	b.n	80152dc <__ieee754_pow+0xdc>
 80152be:	2900      	cmp	r1, #0
 80152c0:	d154      	bne.n	801536c <__ieee754_pow+0x16c>
 80152c2:	f1c2 0214 	rsb	r2, r2, #20
 80152c6:	fa4a f402 	asr.w	r4, sl, r2
 80152ca:	fa04 f202 	lsl.w	r2, r4, r2
 80152ce:	4552      	cmp	r2, sl
 80152d0:	f040 84a3 	bne.w	8015c1a <__ieee754_pow+0xa1a>
 80152d4:	f004 0401 	and.w	r4, r4, #1
 80152d8:	f1c4 0402 	rsb	r4, r4, #2
 80152dc:	4a6d      	ldr	r2, [pc, #436]	@ (8015494 <__ieee754_pow+0x294>)
 80152de:	4592      	cmp	sl, r2
 80152e0:	d12e      	bne.n	8015340 <__ieee754_pow+0x140>
 80152e2:	f1b9 0f00 	cmp.w	r9, #0
 80152e6:	f280 8494 	bge.w	8015c12 <__ieee754_pow+0xa12>
 80152ea:	496a      	ldr	r1, [pc, #424]	@ (8015494 <__ieee754_pow+0x294>)
 80152ec:	4632      	mov	r2, r6
 80152ee:	463b      	mov	r3, r7
 80152f0:	2000      	movs	r0, #0
 80152f2:	f7eb fad3 	bl	800089c <__aeabi_ddiv>
 80152f6:	e7a0      	b.n	801523a <__ieee754_pow+0x3a>
 80152f8:	2400      	movs	r4, #0
 80152fa:	bbc1      	cbnz	r1, 801536e <__ieee754_pow+0x16e>
 80152fc:	4a63      	ldr	r2, [pc, #396]	@ (801548c <__ieee754_pow+0x28c>)
 80152fe:	4592      	cmp	sl, r2
 8015300:	d1ec      	bne.n	80152dc <__ieee754_pow+0xdc>
 8015302:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8015306:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801530a:	431a      	orrs	r2, r3
 801530c:	f000 8479 	beq.w	8015c02 <__ieee754_pow+0xa02>
 8015310:	4b61      	ldr	r3, [pc, #388]	@ (8015498 <__ieee754_pow+0x298>)
 8015312:	4598      	cmp	r8, r3
 8015314:	d908      	bls.n	8015328 <__ieee754_pow+0x128>
 8015316:	f1b9 0f00 	cmp.w	r9, #0
 801531a:	f2c0 8476 	blt.w	8015c0a <__ieee754_pow+0xa0a>
 801531e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015322:	e78a      	b.n	801523a <__ieee754_pow+0x3a>
 8015324:	2402      	movs	r4, #2
 8015326:	e7e8      	b.n	80152fa <__ieee754_pow+0xfa>
 8015328:	f1b9 0f00 	cmp.w	r9, #0
 801532c:	f04f 0000 	mov.w	r0, #0
 8015330:	f04f 0100 	mov.w	r1, #0
 8015334:	da81      	bge.n	801523a <__ieee754_pow+0x3a>
 8015336:	e9dd 0300 	ldrd	r0, r3, [sp]
 801533a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801533e:	e77c      	b.n	801523a <__ieee754_pow+0x3a>
 8015340:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8015344:	d106      	bne.n	8015354 <__ieee754_pow+0x154>
 8015346:	4632      	mov	r2, r6
 8015348:	463b      	mov	r3, r7
 801534a:	4630      	mov	r0, r6
 801534c:	4639      	mov	r1, r7
 801534e:	f7eb f97b 	bl	8000648 <__aeabi_dmul>
 8015352:	e772      	b.n	801523a <__ieee754_pow+0x3a>
 8015354:	4a51      	ldr	r2, [pc, #324]	@ (801549c <__ieee754_pow+0x29c>)
 8015356:	4591      	cmp	r9, r2
 8015358:	d109      	bne.n	801536e <__ieee754_pow+0x16e>
 801535a:	2d00      	cmp	r5, #0
 801535c:	db07      	blt.n	801536e <__ieee754_pow+0x16e>
 801535e:	ec47 6b10 	vmov	d0, r6, r7
 8015362:	b011      	add	sp, #68	@ 0x44
 8015364:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015368:	f000 bd50 	b.w	8015e0c <__ieee754_sqrt>
 801536c:	2400      	movs	r4, #0
 801536e:	ec47 6b10 	vmov	d0, r6, r7
 8015372:	9302      	str	r3, [sp, #8]
 8015374:	f000 fcc4 	bl	8015d00 <fabs>
 8015378:	9b02      	ldr	r3, [sp, #8]
 801537a:	ec51 0b10 	vmov	r0, r1, d0
 801537e:	bb53      	cbnz	r3, 80153d6 <__ieee754_pow+0x1d6>
 8015380:	4b44      	ldr	r3, [pc, #272]	@ (8015494 <__ieee754_pow+0x294>)
 8015382:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8015386:	429a      	cmp	r2, r3
 8015388:	d002      	beq.n	8015390 <__ieee754_pow+0x190>
 801538a:	f1b8 0f00 	cmp.w	r8, #0
 801538e:	d122      	bne.n	80153d6 <__ieee754_pow+0x1d6>
 8015390:	f1b9 0f00 	cmp.w	r9, #0
 8015394:	da05      	bge.n	80153a2 <__ieee754_pow+0x1a2>
 8015396:	4602      	mov	r2, r0
 8015398:	460b      	mov	r3, r1
 801539a:	2000      	movs	r0, #0
 801539c:	493d      	ldr	r1, [pc, #244]	@ (8015494 <__ieee754_pow+0x294>)
 801539e:	f7eb fa7d 	bl	800089c <__aeabi_ddiv>
 80153a2:	2d00      	cmp	r5, #0
 80153a4:	f6bf af49 	bge.w	801523a <__ieee754_pow+0x3a>
 80153a8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80153ac:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80153b0:	ea58 0804 	orrs.w	r8, r8, r4
 80153b4:	d108      	bne.n	80153c8 <__ieee754_pow+0x1c8>
 80153b6:	4602      	mov	r2, r0
 80153b8:	460b      	mov	r3, r1
 80153ba:	4610      	mov	r0, r2
 80153bc:	4619      	mov	r1, r3
 80153be:	f7ea ff8b 	bl	80002d8 <__aeabi_dsub>
 80153c2:	4602      	mov	r2, r0
 80153c4:	460b      	mov	r3, r1
 80153c6:	e794      	b.n	80152f2 <__ieee754_pow+0xf2>
 80153c8:	2c01      	cmp	r4, #1
 80153ca:	f47f af36 	bne.w	801523a <__ieee754_pow+0x3a>
 80153ce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80153d2:	4619      	mov	r1, r3
 80153d4:	e731      	b.n	801523a <__ieee754_pow+0x3a>
 80153d6:	0feb      	lsrs	r3, r5, #31
 80153d8:	3b01      	subs	r3, #1
 80153da:	ea53 0204 	orrs.w	r2, r3, r4
 80153de:	d102      	bne.n	80153e6 <__ieee754_pow+0x1e6>
 80153e0:	4632      	mov	r2, r6
 80153e2:	463b      	mov	r3, r7
 80153e4:	e7e9      	b.n	80153ba <__ieee754_pow+0x1ba>
 80153e6:	3c01      	subs	r4, #1
 80153e8:	431c      	orrs	r4, r3
 80153ea:	d016      	beq.n	801541a <__ieee754_pow+0x21a>
 80153ec:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8015478 <__ieee754_pow+0x278>
 80153f0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80153f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80153f8:	f240 8112 	bls.w	8015620 <__ieee754_pow+0x420>
 80153fc:	4b28      	ldr	r3, [pc, #160]	@ (80154a0 <__ieee754_pow+0x2a0>)
 80153fe:	459a      	cmp	sl, r3
 8015400:	4b25      	ldr	r3, [pc, #148]	@ (8015498 <__ieee754_pow+0x298>)
 8015402:	d916      	bls.n	8015432 <__ieee754_pow+0x232>
 8015404:	4598      	cmp	r8, r3
 8015406:	d80b      	bhi.n	8015420 <__ieee754_pow+0x220>
 8015408:	f1b9 0f00 	cmp.w	r9, #0
 801540c:	da0b      	bge.n	8015426 <__ieee754_pow+0x226>
 801540e:	2000      	movs	r0, #0
 8015410:	b011      	add	sp, #68	@ 0x44
 8015412:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015416:	f000 bc6b 	b.w	8015cf0 <__math_oflow>
 801541a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8015480 <__ieee754_pow+0x280>
 801541e:	e7e7      	b.n	80153f0 <__ieee754_pow+0x1f0>
 8015420:	f1b9 0f00 	cmp.w	r9, #0
 8015424:	dcf3      	bgt.n	801540e <__ieee754_pow+0x20e>
 8015426:	2000      	movs	r0, #0
 8015428:	b011      	add	sp, #68	@ 0x44
 801542a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801542e:	f000 bc57 	b.w	8015ce0 <__math_uflow>
 8015432:	4598      	cmp	r8, r3
 8015434:	d20c      	bcs.n	8015450 <__ieee754_pow+0x250>
 8015436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801543a:	2200      	movs	r2, #0
 801543c:	2300      	movs	r3, #0
 801543e:	f7eb fb75 	bl	8000b2c <__aeabi_dcmplt>
 8015442:	3800      	subs	r0, #0
 8015444:	bf18      	it	ne
 8015446:	2001      	movne	r0, #1
 8015448:	f1b9 0f00 	cmp.w	r9, #0
 801544c:	daec      	bge.n	8015428 <__ieee754_pow+0x228>
 801544e:	e7df      	b.n	8015410 <__ieee754_pow+0x210>
 8015450:	4b10      	ldr	r3, [pc, #64]	@ (8015494 <__ieee754_pow+0x294>)
 8015452:	4598      	cmp	r8, r3
 8015454:	f04f 0200 	mov.w	r2, #0
 8015458:	d924      	bls.n	80154a4 <__ieee754_pow+0x2a4>
 801545a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801545e:	2300      	movs	r3, #0
 8015460:	f7eb fb64 	bl	8000b2c <__aeabi_dcmplt>
 8015464:	3800      	subs	r0, #0
 8015466:	bf18      	it	ne
 8015468:	2001      	movne	r0, #1
 801546a:	f1b9 0f00 	cmp.w	r9, #0
 801546e:	dccf      	bgt.n	8015410 <__ieee754_pow+0x210>
 8015470:	e7da      	b.n	8015428 <__ieee754_pow+0x228>
 8015472:	bf00      	nop
 8015474:	f3af 8000 	nop.w
 8015478:	00000000 	.word	0x00000000
 801547c:	3ff00000 	.word	0x3ff00000
 8015480:	00000000 	.word	0x00000000
 8015484:	bff00000 	.word	0xbff00000
 8015488:	fff00000 	.word	0xfff00000
 801548c:	7ff00000 	.word	0x7ff00000
 8015490:	433fffff 	.word	0x433fffff
 8015494:	3ff00000 	.word	0x3ff00000
 8015498:	3fefffff 	.word	0x3fefffff
 801549c:	3fe00000 	.word	0x3fe00000
 80154a0:	43f00000 	.word	0x43f00000
 80154a4:	4b5a      	ldr	r3, [pc, #360]	@ (8015610 <__ieee754_pow+0x410>)
 80154a6:	f7ea ff17 	bl	80002d8 <__aeabi_dsub>
 80154aa:	a351      	add	r3, pc, #324	@ (adr r3, 80155f0 <__ieee754_pow+0x3f0>)
 80154ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b0:	4604      	mov	r4, r0
 80154b2:	460d      	mov	r5, r1
 80154b4:	f7eb f8c8 	bl	8000648 <__aeabi_dmul>
 80154b8:	a34f      	add	r3, pc, #316	@ (adr r3, 80155f8 <__ieee754_pow+0x3f8>)
 80154ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154be:	4606      	mov	r6, r0
 80154c0:	460f      	mov	r7, r1
 80154c2:	4620      	mov	r0, r4
 80154c4:	4629      	mov	r1, r5
 80154c6:	f7eb f8bf 	bl	8000648 <__aeabi_dmul>
 80154ca:	4b52      	ldr	r3, [pc, #328]	@ (8015614 <__ieee754_pow+0x414>)
 80154cc:	4682      	mov	sl, r0
 80154ce:	468b      	mov	fp, r1
 80154d0:	2200      	movs	r2, #0
 80154d2:	4620      	mov	r0, r4
 80154d4:	4629      	mov	r1, r5
 80154d6:	f7eb f8b7 	bl	8000648 <__aeabi_dmul>
 80154da:	4602      	mov	r2, r0
 80154dc:	460b      	mov	r3, r1
 80154de:	a148      	add	r1, pc, #288	@ (adr r1, 8015600 <__ieee754_pow+0x400>)
 80154e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154e4:	f7ea fef8 	bl	80002d8 <__aeabi_dsub>
 80154e8:	4622      	mov	r2, r4
 80154ea:	462b      	mov	r3, r5
 80154ec:	f7eb f8ac 	bl	8000648 <__aeabi_dmul>
 80154f0:	4602      	mov	r2, r0
 80154f2:	460b      	mov	r3, r1
 80154f4:	2000      	movs	r0, #0
 80154f6:	4948      	ldr	r1, [pc, #288]	@ (8015618 <__ieee754_pow+0x418>)
 80154f8:	f7ea feee 	bl	80002d8 <__aeabi_dsub>
 80154fc:	4622      	mov	r2, r4
 80154fe:	4680      	mov	r8, r0
 8015500:	4689      	mov	r9, r1
 8015502:	462b      	mov	r3, r5
 8015504:	4620      	mov	r0, r4
 8015506:	4629      	mov	r1, r5
 8015508:	f7eb f89e 	bl	8000648 <__aeabi_dmul>
 801550c:	4602      	mov	r2, r0
 801550e:	460b      	mov	r3, r1
 8015510:	4640      	mov	r0, r8
 8015512:	4649      	mov	r1, r9
 8015514:	f7eb f898 	bl	8000648 <__aeabi_dmul>
 8015518:	a33b      	add	r3, pc, #236	@ (adr r3, 8015608 <__ieee754_pow+0x408>)
 801551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801551e:	f7eb f893 	bl	8000648 <__aeabi_dmul>
 8015522:	4602      	mov	r2, r0
 8015524:	460b      	mov	r3, r1
 8015526:	4650      	mov	r0, sl
 8015528:	4659      	mov	r1, fp
 801552a:	f7ea fed5 	bl	80002d8 <__aeabi_dsub>
 801552e:	4602      	mov	r2, r0
 8015530:	460b      	mov	r3, r1
 8015532:	4680      	mov	r8, r0
 8015534:	4689      	mov	r9, r1
 8015536:	4630      	mov	r0, r6
 8015538:	4639      	mov	r1, r7
 801553a:	f7ea fecf 	bl	80002dc <__adddf3>
 801553e:	2400      	movs	r4, #0
 8015540:	4632      	mov	r2, r6
 8015542:	463b      	mov	r3, r7
 8015544:	4620      	mov	r0, r4
 8015546:	460d      	mov	r5, r1
 8015548:	f7ea fec6 	bl	80002d8 <__aeabi_dsub>
 801554c:	4602      	mov	r2, r0
 801554e:	460b      	mov	r3, r1
 8015550:	4640      	mov	r0, r8
 8015552:	4649      	mov	r1, r9
 8015554:	f7ea fec0 	bl	80002d8 <__aeabi_dsub>
 8015558:	e9dd 2300 	ldrd	r2, r3, [sp]
 801555c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015560:	2300      	movs	r3, #0
 8015562:	9304      	str	r3, [sp, #16]
 8015564:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8015568:	4606      	mov	r6, r0
 801556a:	460f      	mov	r7, r1
 801556c:	4652      	mov	r2, sl
 801556e:	465b      	mov	r3, fp
 8015570:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015574:	f7ea feb0 	bl	80002d8 <__aeabi_dsub>
 8015578:	4622      	mov	r2, r4
 801557a:	462b      	mov	r3, r5
 801557c:	f7eb f864 	bl	8000648 <__aeabi_dmul>
 8015580:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015584:	4680      	mov	r8, r0
 8015586:	4689      	mov	r9, r1
 8015588:	4630      	mov	r0, r6
 801558a:	4639      	mov	r1, r7
 801558c:	f7eb f85c 	bl	8000648 <__aeabi_dmul>
 8015590:	4602      	mov	r2, r0
 8015592:	460b      	mov	r3, r1
 8015594:	4640      	mov	r0, r8
 8015596:	4649      	mov	r1, r9
 8015598:	f7ea fea0 	bl	80002dc <__adddf3>
 801559c:	4652      	mov	r2, sl
 801559e:	465b      	mov	r3, fp
 80155a0:	4606      	mov	r6, r0
 80155a2:	460f      	mov	r7, r1
 80155a4:	4620      	mov	r0, r4
 80155a6:	4629      	mov	r1, r5
 80155a8:	f7eb f84e 	bl	8000648 <__aeabi_dmul>
 80155ac:	460b      	mov	r3, r1
 80155ae:	4602      	mov	r2, r0
 80155b0:	4680      	mov	r8, r0
 80155b2:	4689      	mov	r9, r1
 80155b4:	4630      	mov	r0, r6
 80155b6:	4639      	mov	r1, r7
 80155b8:	f7ea fe90 	bl	80002dc <__adddf3>
 80155bc:	4b17      	ldr	r3, [pc, #92]	@ (801561c <__ieee754_pow+0x41c>)
 80155be:	4299      	cmp	r1, r3
 80155c0:	4604      	mov	r4, r0
 80155c2:	460d      	mov	r5, r1
 80155c4:	468a      	mov	sl, r1
 80155c6:	468b      	mov	fp, r1
 80155c8:	f340 82ef 	ble.w	8015baa <__ieee754_pow+0x9aa>
 80155cc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80155d0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80155d4:	4303      	orrs	r3, r0
 80155d6:	f000 81e8 	beq.w	80159aa <__ieee754_pow+0x7aa>
 80155da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80155de:	2200      	movs	r2, #0
 80155e0:	2300      	movs	r3, #0
 80155e2:	f7eb faa3 	bl	8000b2c <__aeabi_dcmplt>
 80155e6:	3800      	subs	r0, #0
 80155e8:	bf18      	it	ne
 80155ea:	2001      	movne	r0, #1
 80155ec:	e710      	b.n	8015410 <__ieee754_pow+0x210>
 80155ee:	bf00      	nop
 80155f0:	60000000 	.word	0x60000000
 80155f4:	3ff71547 	.word	0x3ff71547
 80155f8:	f85ddf44 	.word	0xf85ddf44
 80155fc:	3e54ae0b 	.word	0x3e54ae0b
 8015600:	55555555 	.word	0x55555555
 8015604:	3fd55555 	.word	0x3fd55555
 8015608:	652b82fe 	.word	0x652b82fe
 801560c:	3ff71547 	.word	0x3ff71547
 8015610:	3ff00000 	.word	0x3ff00000
 8015614:	3fd00000 	.word	0x3fd00000
 8015618:	3fe00000 	.word	0x3fe00000
 801561c:	408fffff 	.word	0x408fffff
 8015620:	4bd5      	ldr	r3, [pc, #852]	@ (8015978 <__ieee754_pow+0x778>)
 8015622:	402b      	ands	r3, r5
 8015624:	2200      	movs	r2, #0
 8015626:	b92b      	cbnz	r3, 8015634 <__ieee754_pow+0x434>
 8015628:	4bd4      	ldr	r3, [pc, #848]	@ (801597c <__ieee754_pow+0x77c>)
 801562a:	f7eb f80d 	bl	8000648 <__aeabi_dmul>
 801562e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8015632:	468b      	mov	fp, r1
 8015634:	ea4f 532b 	mov.w	r3, fp, asr #20
 8015638:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801563c:	4413      	add	r3, r2
 801563e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015640:	4bcf      	ldr	r3, [pc, #828]	@ (8015980 <__ieee754_pow+0x780>)
 8015642:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8015646:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801564a:	459b      	cmp	fp, r3
 801564c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8015650:	dd08      	ble.n	8015664 <__ieee754_pow+0x464>
 8015652:	4bcc      	ldr	r3, [pc, #816]	@ (8015984 <__ieee754_pow+0x784>)
 8015654:	459b      	cmp	fp, r3
 8015656:	f340 81a5 	ble.w	80159a4 <__ieee754_pow+0x7a4>
 801565a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801565c:	3301      	adds	r3, #1
 801565e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015660:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8015664:	f04f 0a00 	mov.w	sl, #0
 8015668:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801566c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801566e:	4bc6      	ldr	r3, [pc, #792]	@ (8015988 <__ieee754_pow+0x788>)
 8015670:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015674:	ed93 7b00 	vldr	d7, [r3]
 8015678:	4629      	mov	r1, r5
 801567a:	ec53 2b17 	vmov	r2, r3, d7
 801567e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015682:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015686:	f7ea fe27 	bl	80002d8 <__aeabi_dsub>
 801568a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801568e:	4606      	mov	r6, r0
 8015690:	460f      	mov	r7, r1
 8015692:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015696:	f7ea fe21 	bl	80002dc <__adddf3>
 801569a:	4602      	mov	r2, r0
 801569c:	460b      	mov	r3, r1
 801569e:	2000      	movs	r0, #0
 80156a0:	49ba      	ldr	r1, [pc, #744]	@ (801598c <__ieee754_pow+0x78c>)
 80156a2:	f7eb f8fb 	bl	800089c <__aeabi_ddiv>
 80156a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80156aa:	4602      	mov	r2, r0
 80156ac:	460b      	mov	r3, r1
 80156ae:	4630      	mov	r0, r6
 80156b0:	4639      	mov	r1, r7
 80156b2:	f7ea ffc9 	bl	8000648 <__aeabi_dmul>
 80156b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80156ba:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80156be:	106d      	asrs	r5, r5, #1
 80156c0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80156c4:	f04f 0b00 	mov.w	fp, #0
 80156c8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80156cc:	4661      	mov	r1, ip
 80156ce:	2200      	movs	r2, #0
 80156d0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80156d4:	4658      	mov	r0, fp
 80156d6:	46e1      	mov	r9, ip
 80156d8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80156dc:	4614      	mov	r4, r2
 80156de:	461d      	mov	r5, r3
 80156e0:	f7ea ffb2 	bl	8000648 <__aeabi_dmul>
 80156e4:	4602      	mov	r2, r0
 80156e6:	460b      	mov	r3, r1
 80156e8:	4630      	mov	r0, r6
 80156ea:	4639      	mov	r1, r7
 80156ec:	f7ea fdf4 	bl	80002d8 <__aeabi_dsub>
 80156f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80156f4:	4606      	mov	r6, r0
 80156f6:	460f      	mov	r7, r1
 80156f8:	4620      	mov	r0, r4
 80156fa:	4629      	mov	r1, r5
 80156fc:	f7ea fdec 	bl	80002d8 <__aeabi_dsub>
 8015700:	4602      	mov	r2, r0
 8015702:	460b      	mov	r3, r1
 8015704:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015708:	f7ea fde6 	bl	80002d8 <__aeabi_dsub>
 801570c:	465a      	mov	r2, fp
 801570e:	464b      	mov	r3, r9
 8015710:	f7ea ff9a 	bl	8000648 <__aeabi_dmul>
 8015714:	4602      	mov	r2, r0
 8015716:	460b      	mov	r3, r1
 8015718:	4630      	mov	r0, r6
 801571a:	4639      	mov	r1, r7
 801571c:	f7ea fddc 	bl	80002d8 <__aeabi_dsub>
 8015720:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015724:	f7ea ff90 	bl	8000648 <__aeabi_dmul>
 8015728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801572c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015730:	4610      	mov	r0, r2
 8015732:	4619      	mov	r1, r3
 8015734:	f7ea ff88 	bl	8000648 <__aeabi_dmul>
 8015738:	a37d      	add	r3, pc, #500	@ (adr r3, 8015930 <__ieee754_pow+0x730>)
 801573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801573e:	4604      	mov	r4, r0
 8015740:	460d      	mov	r5, r1
 8015742:	f7ea ff81 	bl	8000648 <__aeabi_dmul>
 8015746:	a37c      	add	r3, pc, #496	@ (adr r3, 8015938 <__ieee754_pow+0x738>)
 8015748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801574c:	f7ea fdc6 	bl	80002dc <__adddf3>
 8015750:	4622      	mov	r2, r4
 8015752:	462b      	mov	r3, r5
 8015754:	f7ea ff78 	bl	8000648 <__aeabi_dmul>
 8015758:	a379      	add	r3, pc, #484	@ (adr r3, 8015940 <__ieee754_pow+0x740>)
 801575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801575e:	f7ea fdbd 	bl	80002dc <__adddf3>
 8015762:	4622      	mov	r2, r4
 8015764:	462b      	mov	r3, r5
 8015766:	f7ea ff6f 	bl	8000648 <__aeabi_dmul>
 801576a:	a377      	add	r3, pc, #476	@ (adr r3, 8015948 <__ieee754_pow+0x748>)
 801576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015770:	f7ea fdb4 	bl	80002dc <__adddf3>
 8015774:	4622      	mov	r2, r4
 8015776:	462b      	mov	r3, r5
 8015778:	f7ea ff66 	bl	8000648 <__aeabi_dmul>
 801577c:	a374      	add	r3, pc, #464	@ (adr r3, 8015950 <__ieee754_pow+0x750>)
 801577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015782:	f7ea fdab 	bl	80002dc <__adddf3>
 8015786:	4622      	mov	r2, r4
 8015788:	462b      	mov	r3, r5
 801578a:	f7ea ff5d 	bl	8000648 <__aeabi_dmul>
 801578e:	a372      	add	r3, pc, #456	@ (adr r3, 8015958 <__ieee754_pow+0x758>)
 8015790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015794:	f7ea fda2 	bl	80002dc <__adddf3>
 8015798:	4622      	mov	r2, r4
 801579a:	4606      	mov	r6, r0
 801579c:	460f      	mov	r7, r1
 801579e:	462b      	mov	r3, r5
 80157a0:	4620      	mov	r0, r4
 80157a2:	4629      	mov	r1, r5
 80157a4:	f7ea ff50 	bl	8000648 <__aeabi_dmul>
 80157a8:	4602      	mov	r2, r0
 80157aa:	460b      	mov	r3, r1
 80157ac:	4630      	mov	r0, r6
 80157ae:	4639      	mov	r1, r7
 80157b0:	f7ea ff4a 	bl	8000648 <__aeabi_dmul>
 80157b4:	465a      	mov	r2, fp
 80157b6:	4604      	mov	r4, r0
 80157b8:	460d      	mov	r5, r1
 80157ba:	464b      	mov	r3, r9
 80157bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80157c0:	f7ea fd8c 	bl	80002dc <__adddf3>
 80157c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80157c8:	f7ea ff3e 	bl	8000648 <__aeabi_dmul>
 80157cc:	4622      	mov	r2, r4
 80157ce:	462b      	mov	r3, r5
 80157d0:	f7ea fd84 	bl	80002dc <__adddf3>
 80157d4:	465a      	mov	r2, fp
 80157d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80157da:	464b      	mov	r3, r9
 80157dc:	4658      	mov	r0, fp
 80157de:	4649      	mov	r1, r9
 80157e0:	f7ea ff32 	bl	8000648 <__aeabi_dmul>
 80157e4:	4b6a      	ldr	r3, [pc, #424]	@ (8015990 <__ieee754_pow+0x790>)
 80157e6:	2200      	movs	r2, #0
 80157e8:	4606      	mov	r6, r0
 80157ea:	460f      	mov	r7, r1
 80157ec:	f7ea fd76 	bl	80002dc <__adddf3>
 80157f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80157f4:	f7ea fd72 	bl	80002dc <__adddf3>
 80157f8:	46d8      	mov	r8, fp
 80157fa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80157fe:	460d      	mov	r5, r1
 8015800:	465a      	mov	r2, fp
 8015802:	460b      	mov	r3, r1
 8015804:	4640      	mov	r0, r8
 8015806:	4649      	mov	r1, r9
 8015808:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801580c:	f7ea ff1c 	bl	8000648 <__aeabi_dmul>
 8015810:	465c      	mov	r4, fp
 8015812:	4680      	mov	r8, r0
 8015814:	4689      	mov	r9, r1
 8015816:	4b5e      	ldr	r3, [pc, #376]	@ (8015990 <__ieee754_pow+0x790>)
 8015818:	2200      	movs	r2, #0
 801581a:	4620      	mov	r0, r4
 801581c:	4629      	mov	r1, r5
 801581e:	f7ea fd5b 	bl	80002d8 <__aeabi_dsub>
 8015822:	4632      	mov	r2, r6
 8015824:	463b      	mov	r3, r7
 8015826:	f7ea fd57 	bl	80002d8 <__aeabi_dsub>
 801582a:	4602      	mov	r2, r0
 801582c:	460b      	mov	r3, r1
 801582e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015832:	f7ea fd51 	bl	80002d8 <__aeabi_dsub>
 8015836:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801583a:	f7ea ff05 	bl	8000648 <__aeabi_dmul>
 801583e:	4622      	mov	r2, r4
 8015840:	4606      	mov	r6, r0
 8015842:	460f      	mov	r7, r1
 8015844:	462b      	mov	r3, r5
 8015846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801584a:	f7ea fefd 	bl	8000648 <__aeabi_dmul>
 801584e:	4602      	mov	r2, r0
 8015850:	460b      	mov	r3, r1
 8015852:	4630      	mov	r0, r6
 8015854:	4639      	mov	r1, r7
 8015856:	f7ea fd41 	bl	80002dc <__adddf3>
 801585a:	4606      	mov	r6, r0
 801585c:	460f      	mov	r7, r1
 801585e:	4602      	mov	r2, r0
 8015860:	460b      	mov	r3, r1
 8015862:	4640      	mov	r0, r8
 8015864:	4649      	mov	r1, r9
 8015866:	f7ea fd39 	bl	80002dc <__adddf3>
 801586a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801586e:	a33c      	add	r3, pc, #240	@ (adr r3, 8015960 <__ieee754_pow+0x760>)
 8015870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015874:	4658      	mov	r0, fp
 8015876:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801587a:	460d      	mov	r5, r1
 801587c:	f7ea fee4 	bl	8000648 <__aeabi_dmul>
 8015880:	465c      	mov	r4, fp
 8015882:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015886:	4642      	mov	r2, r8
 8015888:	464b      	mov	r3, r9
 801588a:	4620      	mov	r0, r4
 801588c:	4629      	mov	r1, r5
 801588e:	f7ea fd23 	bl	80002d8 <__aeabi_dsub>
 8015892:	4602      	mov	r2, r0
 8015894:	460b      	mov	r3, r1
 8015896:	4630      	mov	r0, r6
 8015898:	4639      	mov	r1, r7
 801589a:	f7ea fd1d 	bl	80002d8 <__aeabi_dsub>
 801589e:	a332      	add	r3, pc, #200	@ (adr r3, 8015968 <__ieee754_pow+0x768>)
 80158a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158a4:	f7ea fed0 	bl	8000648 <__aeabi_dmul>
 80158a8:	a331      	add	r3, pc, #196	@ (adr r3, 8015970 <__ieee754_pow+0x770>)
 80158aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158ae:	4606      	mov	r6, r0
 80158b0:	460f      	mov	r7, r1
 80158b2:	4620      	mov	r0, r4
 80158b4:	4629      	mov	r1, r5
 80158b6:	f7ea fec7 	bl	8000648 <__aeabi_dmul>
 80158ba:	4602      	mov	r2, r0
 80158bc:	460b      	mov	r3, r1
 80158be:	4630      	mov	r0, r6
 80158c0:	4639      	mov	r1, r7
 80158c2:	f7ea fd0b 	bl	80002dc <__adddf3>
 80158c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80158c8:	4b32      	ldr	r3, [pc, #200]	@ (8015994 <__ieee754_pow+0x794>)
 80158ca:	4413      	add	r3, r2
 80158cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158d0:	f7ea fd04 	bl	80002dc <__adddf3>
 80158d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80158d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80158da:	f7ea fe4b 	bl	8000574 <__aeabi_i2d>
 80158de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80158e0:	4b2d      	ldr	r3, [pc, #180]	@ (8015998 <__ieee754_pow+0x798>)
 80158e2:	4413      	add	r3, r2
 80158e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80158e8:	4606      	mov	r6, r0
 80158ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80158ee:	460f      	mov	r7, r1
 80158f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80158f4:	f7ea fcf2 	bl	80002dc <__adddf3>
 80158f8:	4642      	mov	r2, r8
 80158fa:	464b      	mov	r3, r9
 80158fc:	f7ea fcee 	bl	80002dc <__adddf3>
 8015900:	4632      	mov	r2, r6
 8015902:	463b      	mov	r3, r7
 8015904:	f7ea fcea 	bl	80002dc <__adddf3>
 8015908:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801590c:	4632      	mov	r2, r6
 801590e:	463b      	mov	r3, r7
 8015910:	4658      	mov	r0, fp
 8015912:	460d      	mov	r5, r1
 8015914:	f7ea fce0 	bl	80002d8 <__aeabi_dsub>
 8015918:	4642      	mov	r2, r8
 801591a:	464b      	mov	r3, r9
 801591c:	f7ea fcdc 	bl	80002d8 <__aeabi_dsub>
 8015920:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015924:	f7ea fcd8 	bl	80002d8 <__aeabi_dsub>
 8015928:	465c      	mov	r4, fp
 801592a:	4602      	mov	r2, r0
 801592c:	e036      	b.n	801599c <__ieee754_pow+0x79c>
 801592e:	bf00      	nop
 8015930:	4a454eef 	.word	0x4a454eef
 8015934:	3fca7e28 	.word	0x3fca7e28
 8015938:	93c9db65 	.word	0x93c9db65
 801593c:	3fcd864a 	.word	0x3fcd864a
 8015940:	a91d4101 	.word	0xa91d4101
 8015944:	3fd17460 	.word	0x3fd17460
 8015948:	518f264d 	.word	0x518f264d
 801594c:	3fd55555 	.word	0x3fd55555
 8015950:	db6fabff 	.word	0xdb6fabff
 8015954:	3fdb6db6 	.word	0x3fdb6db6
 8015958:	33333303 	.word	0x33333303
 801595c:	3fe33333 	.word	0x3fe33333
 8015960:	e0000000 	.word	0xe0000000
 8015964:	3feec709 	.word	0x3feec709
 8015968:	dc3a03fd 	.word	0xdc3a03fd
 801596c:	3feec709 	.word	0x3feec709
 8015970:	145b01f5 	.word	0x145b01f5
 8015974:	be3e2fe0 	.word	0xbe3e2fe0
 8015978:	7ff00000 	.word	0x7ff00000
 801597c:	43400000 	.word	0x43400000
 8015980:	0003988e 	.word	0x0003988e
 8015984:	000bb679 	.word	0x000bb679
 8015988:	080166e8 	.word	0x080166e8
 801598c:	3ff00000 	.word	0x3ff00000
 8015990:	40080000 	.word	0x40080000
 8015994:	080166c8 	.word	0x080166c8
 8015998:	080166d8 	.word	0x080166d8
 801599c:	460b      	mov	r3, r1
 801599e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80159a2:	e5d7      	b.n	8015554 <__ieee754_pow+0x354>
 80159a4:	f04f 0a01 	mov.w	sl, #1
 80159a8:	e65e      	b.n	8015668 <__ieee754_pow+0x468>
 80159aa:	a3b4      	add	r3, pc, #720	@ (adr r3, 8015c7c <__ieee754_pow+0xa7c>)
 80159ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159b0:	4630      	mov	r0, r6
 80159b2:	4639      	mov	r1, r7
 80159b4:	f7ea fc92 	bl	80002dc <__adddf3>
 80159b8:	4642      	mov	r2, r8
 80159ba:	e9cd 0100 	strd	r0, r1, [sp]
 80159be:	464b      	mov	r3, r9
 80159c0:	4620      	mov	r0, r4
 80159c2:	4629      	mov	r1, r5
 80159c4:	f7ea fc88 	bl	80002d8 <__aeabi_dsub>
 80159c8:	4602      	mov	r2, r0
 80159ca:	460b      	mov	r3, r1
 80159cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80159d0:	f7eb f8ca 	bl	8000b68 <__aeabi_dcmpgt>
 80159d4:	2800      	cmp	r0, #0
 80159d6:	f47f ae00 	bne.w	80155da <__ieee754_pow+0x3da>
 80159da:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80159de:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80159e2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80159e6:	fa43 fa0a 	asr.w	sl, r3, sl
 80159ea:	44da      	add	sl, fp
 80159ec:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80159f0:	489d      	ldr	r0, [pc, #628]	@ (8015c68 <__ieee754_pow+0xa68>)
 80159f2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80159f6:	4108      	asrs	r0, r1
 80159f8:	ea00 030a 	and.w	r3, r0, sl
 80159fc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8015a00:	f1c1 0114 	rsb	r1, r1, #20
 8015a04:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8015a08:	fa4a fa01 	asr.w	sl, sl, r1
 8015a0c:	f1bb 0f00 	cmp.w	fp, #0
 8015a10:	4640      	mov	r0, r8
 8015a12:	4649      	mov	r1, r9
 8015a14:	f04f 0200 	mov.w	r2, #0
 8015a18:	bfb8      	it	lt
 8015a1a:	f1ca 0a00 	rsblt	sl, sl, #0
 8015a1e:	f7ea fc5b 	bl	80002d8 <__aeabi_dsub>
 8015a22:	4680      	mov	r8, r0
 8015a24:	4689      	mov	r9, r1
 8015a26:	4632      	mov	r2, r6
 8015a28:	463b      	mov	r3, r7
 8015a2a:	4640      	mov	r0, r8
 8015a2c:	4649      	mov	r1, r9
 8015a2e:	f7ea fc55 	bl	80002dc <__adddf3>
 8015a32:	2400      	movs	r4, #0
 8015a34:	a37c      	add	r3, pc, #496	@ (adr r3, 8015c28 <__ieee754_pow+0xa28>)
 8015a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a3a:	4620      	mov	r0, r4
 8015a3c:	460d      	mov	r5, r1
 8015a3e:	f7ea fe03 	bl	8000648 <__aeabi_dmul>
 8015a42:	4642      	mov	r2, r8
 8015a44:	e9cd 0100 	strd	r0, r1, [sp]
 8015a48:	464b      	mov	r3, r9
 8015a4a:	4620      	mov	r0, r4
 8015a4c:	4629      	mov	r1, r5
 8015a4e:	f7ea fc43 	bl	80002d8 <__aeabi_dsub>
 8015a52:	4602      	mov	r2, r0
 8015a54:	460b      	mov	r3, r1
 8015a56:	4630      	mov	r0, r6
 8015a58:	4639      	mov	r1, r7
 8015a5a:	f7ea fc3d 	bl	80002d8 <__aeabi_dsub>
 8015a5e:	a374      	add	r3, pc, #464	@ (adr r3, 8015c30 <__ieee754_pow+0xa30>)
 8015a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a64:	f7ea fdf0 	bl	8000648 <__aeabi_dmul>
 8015a68:	a373      	add	r3, pc, #460	@ (adr r3, 8015c38 <__ieee754_pow+0xa38>)
 8015a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a6e:	4680      	mov	r8, r0
 8015a70:	4689      	mov	r9, r1
 8015a72:	4620      	mov	r0, r4
 8015a74:	4629      	mov	r1, r5
 8015a76:	f7ea fde7 	bl	8000648 <__aeabi_dmul>
 8015a7a:	4602      	mov	r2, r0
 8015a7c:	460b      	mov	r3, r1
 8015a7e:	4640      	mov	r0, r8
 8015a80:	4649      	mov	r1, r9
 8015a82:	f7ea fc2b 	bl	80002dc <__adddf3>
 8015a86:	4604      	mov	r4, r0
 8015a88:	460d      	mov	r5, r1
 8015a8a:	4602      	mov	r2, r0
 8015a8c:	460b      	mov	r3, r1
 8015a8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a92:	f7ea fc23 	bl	80002dc <__adddf3>
 8015a96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a9a:	4680      	mov	r8, r0
 8015a9c:	4689      	mov	r9, r1
 8015a9e:	f7ea fc1b 	bl	80002d8 <__aeabi_dsub>
 8015aa2:	4602      	mov	r2, r0
 8015aa4:	460b      	mov	r3, r1
 8015aa6:	4620      	mov	r0, r4
 8015aa8:	4629      	mov	r1, r5
 8015aaa:	f7ea fc15 	bl	80002d8 <__aeabi_dsub>
 8015aae:	4642      	mov	r2, r8
 8015ab0:	4606      	mov	r6, r0
 8015ab2:	460f      	mov	r7, r1
 8015ab4:	464b      	mov	r3, r9
 8015ab6:	4640      	mov	r0, r8
 8015ab8:	4649      	mov	r1, r9
 8015aba:	f7ea fdc5 	bl	8000648 <__aeabi_dmul>
 8015abe:	a360      	add	r3, pc, #384	@ (adr r3, 8015c40 <__ieee754_pow+0xa40>)
 8015ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ac4:	4604      	mov	r4, r0
 8015ac6:	460d      	mov	r5, r1
 8015ac8:	f7ea fdbe 	bl	8000648 <__aeabi_dmul>
 8015acc:	a35e      	add	r3, pc, #376	@ (adr r3, 8015c48 <__ieee754_pow+0xa48>)
 8015ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ad2:	f7ea fc01 	bl	80002d8 <__aeabi_dsub>
 8015ad6:	4622      	mov	r2, r4
 8015ad8:	462b      	mov	r3, r5
 8015ada:	f7ea fdb5 	bl	8000648 <__aeabi_dmul>
 8015ade:	a35c      	add	r3, pc, #368	@ (adr r3, 8015c50 <__ieee754_pow+0xa50>)
 8015ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ae4:	f7ea fbfa 	bl	80002dc <__adddf3>
 8015ae8:	4622      	mov	r2, r4
 8015aea:	462b      	mov	r3, r5
 8015aec:	f7ea fdac 	bl	8000648 <__aeabi_dmul>
 8015af0:	a359      	add	r3, pc, #356	@ (adr r3, 8015c58 <__ieee754_pow+0xa58>)
 8015af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015af6:	f7ea fbef 	bl	80002d8 <__aeabi_dsub>
 8015afa:	4622      	mov	r2, r4
 8015afc:	462b      	mov	r3, r5
 8015afe:	f7ea fda3 	bl	8000648 <__aeabi_dmul>
 8015b02:	a357      	add	r3, pc, #348	@ (adr r3, 8015c60 <__ieee754_pow+0xa60>)
 8015b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b08:	f7ea fbe8 	bl	80002dc <__adddf3>
 8015b0c:	4622      	mov	r2, r4
 8015b0e:	462b      	mov	r3, r5
 8015b10:	f7ea fd9a 	bl	8000648 <__aeabi_dmul>
 8015b14:	4602      	mov	r2, r0
 8015b16:	460b      	mov	r3, r1
 8015b18:	4640      	mov	r0, r8
 8015b1a:	4649      	mov	r1, r9
 8015b1c:	f7ea fbdc 	bl	80002d8 <__aeabi_dsub>
 8015b20:	4604      	mov	r4, r0
 8015b22:	460d      	mov	r5, r1
 8015b24:	4602      	mov	r2, r0
 8015b26:	460b      	mov	r3, r1
 8015b28:	4640      	mov	r0, r8
 8015b2a:	4649      	mov	r1, r9
 8015b2c:	f7ea fd8c 	bl	8000648 <__aeabi_dmul>
 8015b30:	2200      	movs	r2, #0
 8015b32:	e9cd 0100 	strd	r0, r1, [sp]
 8015b36:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015b3a:	4620      	mov	r0, r4
 8015b3c:	4629      	mov	r1, r5
 8015b3e:	f7ea fbcb 	bl	80002d8 <__aeabi_dsub>
 8015b42:	4602      	mov	r2, r0
 8015b44:	460b      	mov	r3, r1
 8015b46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b4a:	f7ea fea7 	bl	800089c <__aeabi_ddiv>
 8015b4e:	4632      	mov	r2, r6
 8015b50:	4604      	mov	r4, r0
 8015b52:	460d      	mov	r5, r1
 8015b54:	463b      	mov	r3, r7
 8015b56:	4640      	mov	r0, r8
 8015b58:	4649      	mov	r1, r9
 8015b5a:	f7ea fd75 	bl	8000648 <__aeabi_dmul>
 8015b5e:	4632      	mov	r2, r6
 8015b60:	463b      	mov	r3, r7
 8015b62:	f7ea fbbb 	bl	80002dc <__adddf3>
 8015b66:	4602      	mov	r2, r0
 8015b68:	460b      	mov	r3, r1
 8015b6a:	4620      	mov	r0, r4
 8015b6c:	4629      	mov	r1, r5
 8015b6e:	f7ea fbb3 	bl	80002d8 <__aeabi_dsub>
 8015b72:	4642      	mov	r2, r8
 8015b74:	464b      	mov	r3, r9
 8015b76:	f7ea fbaf 	bl	80002d8 <__aeabi_dsub>
 8015b7a:	460b      	mov	r3, r1
 8015b7c:	4602      	mov	r2, r0
 8015b7e:	493b      	ldr	r1, [pc, #236]	@ (8015c6c <__ieee754_pow+0xa6c>)
 8015b80:	2000      	movs	r0, #0
 8015b82:	f7ea fba9 	bl	80002d8 <__aeabi_dsub>
 8015b86:	ec41 0b10 	vmov	d0, r0, r1
 8015b8a:	ee10 3a90 	vmov	r3, s1
 8015b8e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8015b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015b96:	da30      	bge.n	8015bfa <__ieee754_pow+0x9fa>
 8015b98:	4650      	mov	r0, sl
 8015b9a:	f000 f8b9 	bl	8015d10 <scalbn>
 8015b9e:	ec51 0b10 	vmov	r0, r1, d0
 8015ba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015ba6:	f7ff bbd2 	b.w	801534e <__ieee754_pow+0x14e>
 8015baa:	4c31      	ldr	r4, [pc, #196]	@ (8015c70 <__ieee754_pow+0xa70>)
 8015bac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015bb0:	42a3      	cmp	r3, r4
 8015bb2:	d91a      	bls.n	8015bea <__ieee754_pow+0x9ea>
 8015bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8015c74 <__ieee754_pow+0xa74>)
 8015bb6:	440b      	add	r3, r1
 8015bb8:	4303      	orrs	r3, r0
 8015bba:	d009      	beq.n	8015bd0 <__ieee754_pow+0x9d0>
 8015bbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015bc0:	2200      	movs	r2, #0
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	f7ea ffb2 	bl	8000b2c <__aeabi_dcmplt>
 8015bc8:	3800      	subs	r0, #0
 8015bca:	bf18      	it	ne
 8015bcc:	2001      	movne	r0, #1
 8015bce:	e42b      	b.n	8015428 <__ieee754_pow+0x228>
 8015bd0:	4642      	mov	r2, r8
 8015bd2:	464b      	mov	r3, r9
 8015bd4:	f7ea fb80 	bl	80002d8 <__aeabi_dsub>
 8015bd8:	4632      	mov	r2, r6
 8015bda:	463b      	mov	r3, r7
 8015bdc:	f7ea ffba 	bl	8000b54 <__aeabi_dcmpge>
 8015be0:	2800      	cmp	r0, #0
 8015be2:	d1eb      	bne.n	8015bbc <__ieee754_pow+0x9bc>
 8015be4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8015c84 <__ieee754_pow+0xa84>
 8015be8:	e6f7      	b.n	80159da <__ieee754_pow+0x7da>
 8015bea:	469a      	mov	sl, r3
 8015bec:	4b22      	ldr	r3, [pc, #136]	@ (8015c78 <__ieee754_pow+0xa78>)
 8015bee:	459a      	cmp	sl, r3
 8015bf0:	f63f aef3 	bhi.w	80159da <__ieee754_pow+0x7da>
 8015bf4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8015bf8:	e715      	b.n	8015a26 <__ieee754_pow+0x826>
 8015bfa:	ec51 0b10 	vmov	r0, r1, d0
 8015bfe:	4619      	mov	r1, r3
 8015c00:	e7cf      	b.n	8015ba2 <__ieee754_pow+0x9a2>
 8015c02:	491a      	ldr	r1, [pc, #104]	@ (8015c6c <__ieee754_pow+0xa6c>)
 8015c04:	2000      	movs	r0, #0
 8015c06:	f7ff bb18 	b.w	801523a <__ieee754_pow+0x3a>
 8015c0a:	2000      	movs	r0, #0
 8015c0c:	2100      	movs	r1, #0
 8015c0e:	f7ff bb14 	b.w	801523a <__ieee754_pow+0x3a>
 8015c12:	4630      	mov	r0, r6
 8015c14:	4639      	mov	r1, r7
 8015c16:	f7ff bb10 	b.w	801523a <__ieee754_pow+0x3a>
 8015c1a:	460c      	mov	r4, r1
 8015c1c:	f7ff bb5e 	b.w	80152dc <__ieee754_pow+0xdc>
 8015c20:	2400      	movs	r4, #0
 8015c22:	f7ff bb49 	b.w	80152b8 <__ieee754_pow+0xb8>
 8015c26:	bf00      	nop
 8015c28:	00000000 	.word	0x00000000
 8015c2c:	3fe62e43 	.word	0x3fe62e43
 8015c30:	fefa39ef 	.word	0xfefa39ef
 8015c34:	3fe62e42 	.word	0x3fe62e42
 8015c38:	0ca86c39 	.word	0x0ca86c39
 8015c3c:	be205c61 	.word	0xbe205c61
 8015c40:	72bea4d0 	.word	0x72bea4d0
 8015c44:	3e663769 	.word	0x3e663769
 8015c48:	c5d26bf1 	.word	0xc5d26bf1
 8015c4c:	3ebbbd41 	.word	0x3ebbbd41
 8015c50:	af25de2c 	.word	0xaf25de2c
 8015c54:	3f11566a 	.word	0x3f11566a
 8015c58:	16bebd93 	.word	0x16bebd93
 8015c5c:	3f66c16c 	.word	0x3f66c16c
 8015c60:	5555553e 	.word	0x5555553e
 8015c64:	3fc55555 	.word	0x3fc55555
 8015c68:	fff00000 	.word	0xfff00000
 8015c6c:	3ff00000 	.word	0x3ff00000
 8015c70:	4090cbff 	.word	0x4090cbff
 8015c74:	3f6f3400 	.word	0x3f6f3400
 8015c78:	3fe00000 	.word	0x3fe00000
 8015c7c:	652b82fe 	.word	0x652b82fe
 8015c80:	3c971547 	.word	0x3c971547
 8015c84:	4090cc00 	.word	0x4090cc00

08015c88 <with_errno>:
 8015c88:	b510      	push	{r4, lr}
 8015c8a:	ed2d 8b02 	vpush	{d8}
 8015c8e:	eeb0 8a40 	vmov.f32	s16, s0
 8015c92:	eef0 8a60 	vmov.f32	s17, s1
 8015c96:	4604      	mov	r4, r0
 8015c98:	f7fd fa00 	bl	801309c <__errno>
 8015c9c:	eeb0 0a48 	vmov.f32	s0, s16
 8015ca0:	eef0 0a68 	vmov.f32	s1, s17
 8015ca4:	ecbd 8b02 	vpop	{d8}
 8015ca8:	6004      	str	r4, [r0, #0]
 8015caa:	bd10      	pop	{r4, pc}

08015cac <xflow>:
 8015cac:	4603      	mov	r3, r0
 8015cae:	b507      	push	{r0, r1, r2, lr}
 8015cb0:	ec51 0b10 	vmov	r0, r1, d0
 8015cb4:	b183      	cbz	r3, 8015cd8 <xflow+0x2c>
 8015cb6:	4602      	mov	r2, r0
 8015cb8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015cbc:	e9cd 2300 	strd	r2, r3, [sp]
 8015cc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015cc4:	f7ea fcc0 	bl	8000648 <__aeabi_dmul>
 8015cc8:	ec41 0b10 	vmov	d0, r0, r1
 8015ccc:	2022      	movs	r0, #34	@ 0x22
 8015cce:	b003      	add	sp, #12
 8015cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8015cd4:	f7ff bfd8 	b.w	8015c88 <with_errno>
 8015cd8:	4602      	mov	r2, r0
 8015cda:	460b      	mov	r3, r1
 8015cdc:	e7ee      	b.n	8015cbc <xflow+0x10>
	...

08015ce0 <__math_uflow>:
 8015ce0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015ce8 <__math_uflow+0x8>
 8015ce4:	f7ff bfe2 	b.w	8015cac <xflow>
 8015ce8:	00000000 	.word	0x00000000
 8015cec:	10000000 	.word	0x10000000

08015cf0 <__math_oflow>:
 8015cf0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015cf8 <__math_oflow+0x8>
 8015cf4:	f7ff bfda 	b.w	8015cac <xflow>
 8015cf8:	00000000 	.word	0x00000000
 8015cfc:	70000000 	.word	0x70000000

08015d00 <fabs>:
 8015d00:	ec51 0b10 	vmov	r0, r1, d0
 8015d04:	4602      	mov	r2, r0
 8015d06:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015d0a:	ec43 2b10 	vmov	d0, r2, r3
 8015d0e:	4770      	bx	lr

08015d10 <scalbn>:
 8015d10:	b570      	push	{r4, r5, r6, lr}
 8015d12:	ec55 4b10 	vmov	r4, r5, d0
 8015d16:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8015d1a:	4606      	mov	r6, r0
 8015d1c:	462b      	mov	r3, r5
 8015d1e:	b991      	cbnz	r1, 8015d46 <scalbn+0x36>
 8015d20:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8015d24:	4323      	orrs	r3, r4
 8015d26:	d03d      	beq.n	8015da4 <scalbn+0x94>
 8015d28:	4b35      	ldr	r3, [pc, #212]	@ (8015e00 <scalbn+0xf0>)
 8015d2a:	4620      	mov	r0, r4
 8015d2c:	4629      	mov	r1, r5
 8015d2e:	2200      	movs	r2, #0
 8015d30:	f7ea fc8a 	bl	8000648 <__aeabi_dmul>
 8015d34:	4b33      	ldr	r3, [pc, #204]	@ (8015e04 <scalbn+0xf4>)
 8015d36:	429e      	cmp	r6, r3
 8015d38:	4604      	mov	r4, r0
 8015d3a:	460d      	mov	r5, r1
 8015d3c:	da0f      	bge.n	8015d5e <scalbn+0x4e>
 8015d3e:	a328      	add	r3, pc, #160	@ (adr r3, 8015de0 <scalbn+0xd0>)
 8015d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d44:	e01e      	b.n	8015d84 <scalbn+0x74>
 8015d46:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8015d4a:	4291      	cmp	r1, r2
 8015d4c:	d10b      	bne.n	8015d66 <scalbn+0x56>
 8015d4e:	4622      	mov	r2, r4
 8015d50:	4620      	mov	r0, r4
 8015d52:	4629      	mov	r1, r5
 8015d54:	f7ea fac2 	bl	80002dc <__adddf3>
 8015d58:	4604      	mov	r4, r0
 8015d5a:	460d      	mov	r5, r1
 8015d5c:	e022      	b.n	8015da4 <scalbn+0x94>
 8015d5e:	460b      	mov	r3, r1
 8015d60:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8015d64:	3936      	subs	r1, #54	@ 0x36
 8015d66:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8015d6a:	4296      	cmp	r6, r2
 8015d6c:	dd0d      	ble.n	8015d8a <scalbn+0x7a>
 8015d6e:	2d00      	cmp	r5, #0
 8015d70:	a11d      	add	r1, pc, #116	@ (adr r1, 8015de8 <scalbn+0xd8>)
 8015d72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d76:	da02      	bge.n	8015d7e <scalbn+0x6e>
 8015d78:	a11d      	add	r1, pc, #116	@ (adr r1, 8015df0 <scalbn+0xe0>)
 8015d7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d7e:	a31a      	add	r3, pc, #104	@ (adr r3, 8015de8 <scalbn+0xd8>)
 8015d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d84:	f7ea fc60 	bl	8000648 <__aeabi_dmul>
 8015d88:	e7e6      	b.n	8015d58 <scalbn+0x48>
 8015d8a:	1872      	adds	r2, r6, r1
 8015d8c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8015d90:	428a      	cmp	r2, r1
 8015d92:	dcec      	bgt.n	8015d6e <scalbn+0x5e>
 8015d94:	2a00      	cmp	r2, #0
 8015d96:	dd08      	ble.n	8015daa <scalbn+0x9a>
 8015d98:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8015d9c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8015da0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015da4:	ec45 4b10 	vmov	d0, r4, r5
 8015da8:	bd70      	pop	{r4, r5, r6, pc}
 8015daa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8015dae:	da08      	bge.n	8015dc2 <scalbn+0xb2>
 8015db0:	2d00      	cmp	r5, #0
 8015db2:	a10b      	add	r1, pc, #44	@ (adr r1, 8015de0 <scalbn+0xd0>)
 8015db4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015db8:	dac1      	bge.n	8015d3e <scalbn+0x2e>
 8015dba:	a10f      	add	r1, pc, #60	@ (adr r1, 8015df8 <scalbn+0xe8>)
 8015dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015dc0:	e7bd      	b.n	8015d3e <scalbn+0x2e>
 8015dc2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8015dc6:	3236      	adds	r2, #54	@ 0x36
 8015dc8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8015dcc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015dd0:	4620      	mov	r0, r4
 8015dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8015e08 <scalbn+0xf8>)
 8015dd4:	4629      	mov	r1, r5
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	e7d4      	b.n	8015d84 <scalbn+0x74>
 8015dda:	bf00      	nop
 8015ddc:	f3af 8000 	nop.w
 8015de0:	c2f8f359 	.word	0xc2f8f359
 8015de4:	01a56e1f 	.word	0x01a56e1f
 8015de8:	8800759c 	.word	0x8800759c
 8015dec:	7e37e43c 	.word	0x7e37e43c
 8015df0:	8800759c 	.word	0x8800759c
 8015df4:	fe37e43c 	.word	0xfe37e43c
 8015df8:	c2f8f359 	.word	0xc2f8f359
 8015dfc:	81a56e1f 	.word	0x81a56e1f
 8015e00:	43500000 	.word	0x43500000
 8015e04:	ffff3cb0 	.word	0xffff3cb0
 8015e08:	3c900000 	.word	0x3c900000

08015e0c <__ieee754_sqrt>:
 8015e0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e10:	4a68      	ldr	r2, [pc, #416]	@ (8015fb4 <__ieee754_sqrt+0x1a8>)
 8015e12:	ec55 4b10 	vmov	r4, r5, d0
 8015e16:	43aa      	bics	r2, r5
 8015e18:	462b      	mov	r3, r5
 8015e1a:	4621      	mov	r1, r4
 8015e1c:	d110      	bne.n	8015e40 <__ieee754_sqrt+0x34>
 8015e1e:	4622      	mov	r2, r4
 8015e20:	4620      	mov	r0, r4
 8015e22:	4629      	mov	r1, r5
 8015e24:	f7ea fc10 	bl	8000648 <__aeabi_dmul>
 8015e28:	4602      	mov	r2, r0
 8015e2a:	460b      	mov	r3, r1
 8015e2c:	4620      	mov	r0, r4
 8015e2e:	4629      	mov	r1, r5
 8015e30:	f7ea fa54 	bl	80002dc <__adddf3>
 8015e34:	4604      	mov	r4, r0
 8015e36:	460d      	mov	r5, r1
 8015e38:	ec45 4b10 	vmov	d0, r4, r5
 8015e3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e40:	2d00      	cmp	r5, #0
 8015e42:	dc0e      	bgt.n	8015e62 <__ieee754_sqrt+0x56>
 8015e44:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8015e48:	4322      	orrs	r2, r4
 8015e4a:	d0f5      	beq.n	8015e38 <__ieee754_sqrt+0x2c>
 8015e4c:	b19d      	cbz	r5, 8015e76 <__ieee754_sqrt+0x6a>
 8015e4e:	4622      	mov	r2, r4
 8015e50:	4620      	mov	r0, r4
 8015e52:	4629      	mov	r1, r5
 8015e54:	f7ea fa40 	bl	80002d8 <__aeabi_dsub>
 8015e58:	4602      	mov	r2, r0
 8015e5a:	460b      	mov	r3, r1
 8015e5c:	f7ea fd1e 	bl	800089c <__aeabi_ddiv>
 8015e60:	e7e8      	b.n	8015e34 <__ieee754_sqrt+0x28>
 8015e62:	152a      	asrs	r2, r5, #20
 8015e64:	d115      	bne.n	8015e92 <__ieee754_sqrt+0x86>
 8015e66:	2000      	movs	r0, #0
 8015e68:	e009      	b.n	8015e7e <__ieee754_sqrt+0x72>
 8015e6a:	0acb      	lsrs	r3, r1, #11
 8015e6c:	3a15      	subs	r2, #21
 8015e6e:	0549      	lsls	r1, r1, #21
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d0fa      	beq.n	8015e6a <__ieee754_sqrt+0x5e>
 8015e74:	e7f7      	b.n	8015e66 <__ieee754_sqrt+0x5a>
 8015e76:	462a      	mov	r2, r5
 8015e78:	e7fa      	b.n	8015e70 <__ieee754_sqrt+0x64>
 8015e7a:	005b      	lsls	r3, r3, #1
 8015e7c:	3001      	adds	r0, #1
 8015e7e:	02dc      	lsls	r4, r3, #11
 8015e80:	d5fb      	bpl.n	8015e7a <__ieee754_sqrt+0x6e>
 8015e82:	1e44      	subs	r4, r0, #1
 8015e84:	1b12      	subs	r2, r2, r4
 8015e86:	f1c0 0420 	rsb	r4, r0, #32
 8015e8a:	fa21 f404 	lsr.w	r4, r1, r4
 8015e8e:	4323      	orrs	r3, r4
 8015e90:	4081      	lsls	r1, r0
 8015e92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015e96:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8015e9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015e9e:	07d2      	lsls	r2, r2, #31
 8015ea0:	bf5c      	itt	pl
 8015ea2:	005b      	lslpl	r3, r3, #1
 8015ea4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8015ea8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015eac:	bf58      	it	pl
 8015eae:	0049      	lslpl	r1, r1, #1
 8015eb0:	2600      	movs	r6, #0
 8015eb2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8015eb6:	106d      	asrs	r5, r5, #1
 8015eb8:	0049      	lsls	r1, r1, #1
 8015eba:	2016      	movs	r0, #22
 8015ebc:	4632      	mov	r2, r6
 8015ebe:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8015ec2:	1917      	adds	r7, r2, r4
 8015ec4:	429f      	cmp	r7, r3
 8015ec6:	bfde      	ittt	le
 8015ec8:	193a      	addle	r2, r7, r4
 8015eca:	1bdb      	suble	r3, r3, r7
 8015ecc:	1936      	addle	r6, r6, r4
 8015ece:	0fcf      	lsrs	r7, r1, #31
 8015ed0:	3801      	subs	r0, #1
 8015ed2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8015ed6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015eda:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015ede:	d1f0      	bne.n	8015ec2 <__ieee754_sqrt+0xb6>
 8015ee0:	4604      	mov	r4, r0
 8015ee2:	2720      	movs	r7, #32
 8015ee4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8015ee8:	429a      	cmp	r2, r3
 8015eea:	eb00 0e0c 	add.w	lr, r0, ip
 8015eee:	db02      	blt.n	8015ef6 <__ieee754_sqrt+0xea>
 8015ef0:	d113      	bne.n	8015f1a <__ieee754_sqrt+0x10e>
 8015ef2:	458e      	cmp	lr, r1
 8015ef4:	d811      	bhi.n	8015f1a <__ieee754_sqrt+0x10e>
 8015ef6:	f1be 0f00 	cmp.w	lr, #0
 8015efa:	eb0e 000c 	add.w	r0, lr, ip
 8015efe:	da42      	bge.n	8015f86 <__ieee754_sqrt+0x17a>
 8015f00:	2800      	cmp	r0, #0
 8015f02:	db40      	blt.n	8015f86 <__ieee754_sqrt+0x17a>
 8015f04:	f102 0801 	add.w	r8, r2, #1
 8015f08:	1a9b      	subs	r3, r3, r2
 8015f0a:	458e      	cmp	lr, r1
 8015f0c:	bf88      	it	hi
 8015f0e:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8015f12:	eba1 010e 	sub.w	r1, r1, lr
 8015f16:	4464      	add	r4, ip
 8015f18:	4642      	mov	r2, r8
 8015f1a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8015f1e:	3f01      	subs	r7, #1
 8015f20:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8015f24:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015f28:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8015f2c:	d1dc      	bne.n	8015ee8 <__ieee754_sqrt+0xdc>
 8015f2e:	4319      	orrs	r1, r3
 8015f30:	d01b      	beq.n	8015f6a <__ieee754_sqrt+0x15e>
 8015f32:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8015fb8 <__ieee754_sqrt+0x1ac>
 8015f36:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8015fbc <__ieee754_sqrt+0x1b0>
 8015f3a:	e9da 0100 	ldrd	r0, r1, [sl]
 8015f3e:	e9db 2300 	ldrd	r2, r3, [fp]
 8015f42:	f7ea f9c9 	bl	80002d8 <__aeabi_dsub>
 8015f46:	e9da 8900 	ldrd	r8, r9, [sl]
 8015f4a:	4602      	mov	r2, r0
 8015f4c:	460b      	mov	r3, r1
 8015f4e:	4640      	mov	r0, r8
 8015f50:	4649      	mov	r1, r9
 8015f52:	f7ea fdf5 	bl	8000b40 <__aeabi_dcmple>
 8015f56:	b140      	cbz	r0, 8015f6a <__ieee754_sqrt+0x15e>
 8015f58:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8015f5c:	e9da 0100 	ldrd	r0, r1, [sl]
 8015f60:	e9db 2300 	ldrd	r2, r3, [fp]
 8015f64:	d111      	bne.n	8015f8a <__ieee754_sqrt+0x17e>
 8015f66:	3601      	adds	r6, #1
 8015f68:	463c      	mov	r4, r7
 8015f6a:	1072      	asrs	r2, r6, #1
 8015f6c:	0863      	lsrs	r3, r4, #1
 8015f6e:	07f1      	lsls	r1, r6, #31
 8015f70:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8015f74:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8015f78:	bf48      	it	mi
 8015f7a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8015f7e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8015f82:	4618      	mov	r0, r3
 8015f84:	e756      	b.n	8015e34 <__ieee754_sqrt+0x28>
 8015f86:	4690      	mov	r8, r2
 8015f88:	e7be      	b.n	8015f08 <__ieee754_sqrt+0xfc>
 8015f8a:	f7ea f9a7 	bl	80002dc <__adddf3>
 8015f8e:	e9da 8900 	ldrd	r8, r9, [sl]
 8015f92:	4602      	mov	r2, r0
 8015f94:	460b      	mov	r3, r1
 8015f96:	4640      	mov	r0, r8
 8015f98:	4649      	mov	r1, r9
 8015f9a:	f7ea fdc7 	bl	8000b2c <__aeabi_dcmplt>
 8015f9e:	b120      	cbz	r0, 8015faa <__ieee754_sqrt+0x19e>
 8015fa0:	1ca0      	adds	r0, r4, #2
 8015fa2:	bf08      	it	eq
 8015fa4:	3601      	addeq	r6, #1
 8015fa6:	3402      	adds	r4, #2
 8015fa8:	e7df      	b.n	8015f6a <__ieee754_sqrt+0x15e>
 8015faa:	1c63      	adds	r3, r4, #1
 8015fac:	f023 0401 	bic.w	r4, r3, #1
 8015fb0:	e7db      	b.n	8015f6a <__ieee754_sqrt+0x15e>
 8015fb2:	bf00      	nop
 8015fb4:	7ff00000 	.word	0x7ff00000
 8015fb8:	200002b8 	.word	0x200002b8
 8015fbc:	200002b0 	.word	0x200002b0

08015fc0 <_init>:
 8015fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fc2:	bf00      	nop
 8015fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fc6:	bc08      	pop	{r3}
 8015fc8:	469e      	mov	lr, r3
 8015fca:	4770      	bx	lr

08015fcc <_fini>:
 8015fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fce:	bf00      	nop
 8015fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fd2:	bc08      	pop	{r3}
 8015fd4:	469e      	mov	lr, r3
 8015fd6:	4770      	bx	lr
