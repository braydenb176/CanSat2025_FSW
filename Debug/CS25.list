
CS25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c70  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  08013e50  08013e50  00014e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080143fc  080143fc  000162a8  2**0
                  CONTENTS
  4 .ARM          00000008  080143fc  080143fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014404  08014404  000162a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014404  08014404  00015404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014408  08014408  00015408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a8  20000000  0801440c  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001450  200002a8  080146b4  000162a8  2**2
                  ALLOC
 10 ._user_heap_stack 00001500  200016f8  080146b4  000166f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000162a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000323dc  00000000  00000000  000162d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a0d  00000000  00000000  000486b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ac0  00000000  00000000  0004f0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000020f7  00000000  00000000  00051b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009f8d  00000000  00000000  00053c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000351d8  00000000  00000000  0005dc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff94a  00000000  00000000  00092de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019272e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c71c  00000000  00000000  00192774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0019ee90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002a8 	.word	0x200002a8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013e38 	.word	0x08013e38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002ac 	.word	0x200002ac
 800021c:	08013e38 	.word	0x08013e38

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <init_mission_data>:
volatile uint8_t simulation_enable = 0;

Mission_Data global_mission_data = {0};

void init_mission_data(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	memset(&global_mission_data, 0, sizeof(global_mission_data));
 8000f8c:	226c      	movs	r2, #108	@ 0x6c
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4829      	ldr	r0, [pc, #164]	@ (8001038 <init_mission_data+0xb0>)
 8000f92:	f010 fefd 	bl	8011d90 <memset>

	global_mission_data.TEAM_ID = 3174;
 8000f96:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <init_mission_data+0xb0>)
 8000f98:	f640 4266 	movw	r2, #3174	@ 0xc66
 8000f9c:	801a      	strh	r2, [r3, #0]
	strcpy(global_mission_data.MISSION_TIME, "XX:XX:XX"); // TEMP
 8000f9e:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <init_mission_data+0xb0>)
 8000fa0:	4926      	ldr	r1, [pc, #152]	@ (800103c <init_mission_data+0xb4>)
 8000fa2:	1c9a      	adds	r2, r3, #2
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	cb03      	ldmia	r3!, {r0, r1}
 8000fa8:	6010      	str	r0, [r2, #0]
 8000faa:	6051      	str	r1, [r2, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	7213      	strb	r3, [r2, #8]
	global_mission_data.PACKET_COUNT = 0;				  // TEMP
 8000fb0:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <init_mission_data+0xb0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
	global_mission_data.MODE = 'F';
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <init_mission_data+0xb0>)
 8000fb8:	2246      	movs	r2, #70	@ 0x46
 8000fba:	741a      	strb	r2, [r3, #16]
	strcpy(global_mission_data.STATE, "LAUNCH_PAD");
 8000fbc:	4a20      	ldr	r2, [pc, #128]	@ (8001040 <init_mission_data+0xb8>)
 8000fbe:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <init_mission_data+0xbc>)
 8000fc0:	cb03      	ldmia	r3!, {r0, r1}
 8000fc2:	6010      	str	r0, [r2, #0]
 8000fc4:	6051      	str	r1, [r2, #4]
 8000fc6:	8819      	ldrh	r1, [r3, #0]
 8000fc8:	789b      	ldrb	r3, [r3, #2]
 8000fca:	8111      	strh	r1, [r2, #8]
 8000fcc:	7293      	strb	r3, [r2, #10]
	global_mission_data.ALTITUDE = 0.0;				  // temp
 8000fce:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <init_mission_data+0xb0>)
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
	global_mission_data.MAG_R = 0.0;				  // TEMP
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <init_mission_data+0xb0>)
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	global_mission_data.MAG_P = 0.0;				  // TEMP
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <init_mission_data+0xb0>)
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	641a      	str	r2, [r3, #64]	@ 0x40
	global_mission_data.MAG_Y = 0.0;				  // TEMP
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <init_mission_data+0xb0>)
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	645a      	str	r2, [r3, #68]	@ 0x44
	global_mission_data.AUTO_GYRO_ROTATION_RATE = 0;  // TEMP
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <init_mission_data+0xb0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	strcpy(global_mission_data.GPS_TIME, "XX:XX:XX"); // TEMP
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <init_mission_data+0xb0>)
 8000ff8:	4910      	ldr	r1, [pc, #64]	@ (800103c <init_mission_data+0xb4>)
 8000ffa:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 8000ffe:	460b      	mov	r3, r1
 8001000:	cb03      	ldmia	r3!, {r0, r1}
 8001002:	6010      	str	r0, [r2, #0]
 8001004:	6051      	str	r1, [r2, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	7213      	strb	r3, [r2, #8]
	global_mission_data.GPS_ALTITUDE = 0.0;			  // TEMP
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <init_mission_data+0xb0>)
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	655a      	str	r2, [r3, #84]	@ 0x54
	global_mission_data.GPS_LATITUDE = 0.0;			  // TEMP
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <init_mission_data+0xb0>)
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	659a      	str	r2, [r3, #88]	@ 0x58
	global_mission_data.GPS_LONGITUDE = 0.0;		  // TEMP
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <init_mission_data+0xb0>)
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	65da      	str	r2, [r3, #92]	@ 0x5c
	global_mission_data.GPS_SATS = 0;				  // TEMP
 8001022:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <init_mission_data+0xb0>)
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	strcpy(global_mission_data.CMD_ECHO, "CMD");	  // TEMP
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <init_mission_data+0xc0>)
 800102c:	4a07      	ldr	r2, [pc, #28]	@ (800104c <init_mission_data+0xc4>)
 800102e:	6810      	ldr	r0, [r2, #0]
 8001030:	6018      	str	r0, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200002c4 	.word	0x200002c4
 800103c:	08013e50 	.word	0x08013e50
 8001040:	200002d5 	.word	0x200002d5
 8001044:	08013e5c 	.word	0x08013e5c
 8001048:	20000325 	.word	0x20000325
 800104c:	08013e68 	.word	0x08013e68

08001050 <_write>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int fd, char *ptr, int len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  // ignore fd, just send to UART3
  HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	b29a      	uxth	r2, r3
 8001060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	4804      	ldr	r0, [pc, #16]	@ (8001078 <_write+0x28>)
 8001068:	f00a fc0b 	bl	800b882 <HAL_UART_Transmit>
  return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000074c 	.word	0x2000074c
 800107c:	00000000 	.word	0x00000000

08001080 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001084:	b0ef      	sub	sp, #444	@ 0x1bc
 8001086:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001088:	f002 ffb4 	bl	8003ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108c:	f000 fa0e 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001090:	f000 ffce 	bl	8002030 <MX_GPIO_Init>
  MX_DMA_Init();
 8001094:	f000 ffa2 	bl	8001fdc <MX_DMA_Init>
  MX_ADC1_Init();
 8001098:	f000 fa9a 	bl	80015d0 <MX_ADC1_Init>
  MX_I2C3_Init();
 800109c:	f000 fb38 	bl	8001710 <MX_I2C3_Init>
  MX_IRTIM_Init();
 80010a0:	f000 fb76 	bl	8001790 <MX_IRTIM_Init>
  MX_RTC_Init();
 80010a4:	f000 fb92 	bl	80017cc <MX_RTC_Init>
  MX_SPI2_Init();
 80010a8:	f000 fbc4 	bl	8001834 <MX_SPI2_Init>
  MX_TIM1_Init();
 80010ac:	f000 fc00 	bl	80018b0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80010b0:	f000 fc78 	bl	80019a4 <MX_TIM3_Init>
  MX_TIM8_Init();
 80010b4:	f000 fd0e 	bl	8001ad4 <MX_TIM8_Init>
  MX_TIM15_Init();
 80010b8:	f000 fd86 	bl	8001bc8 <MX_TIM15_Init>
  MX_TIM16_Init();
 80010bc:	f000 fe0a 	bl	8001cd4 <MX_TIM16_Init>
  MX_TIM17_Init();
 80010c0:	f000 fe7e 	bl	8001dc0 <MX_TIM17_Init>
  MX_UART5_Init();
 80010c4:	f000 fef2 	bl	8001eac <MX_UART5_Init>
  MX_RNG_Init();
 80010c8:	f000 fb6a 	bl	80017a0 <MX_RNG_Init>
  MX_USB_Device_Init();
 80010cc:	f00f fb6e 	bl	80107ac <MX_USB_Device_Init>
  MX_USART3_UART_Init();
 80010d0:	f000 ff38 	bl	8001f44 <MX_USART3_UART_Init>
  MX_CORDIC_Init();
 80010d4:	f000 faf4 	bl	80016c0 <MX_CORDIC_Init>
  MX_FMAC_Init();
 80010d8:	f000 fb06 	bl	80016e8 <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */
  // Feedback LED
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2180      	movs	r1, #128	@ 0x80
 80010e0:	48bb      	ldr	r0, [pc, #748]	@ (80013d0 <main+0x350>)
 80010e2:	f004 fe93 	bl	8005e0c <HAL_GPIO_WritePin>

  // Enable GPS and XBEE
  HAL_GPIO_WritePin(XBEE_RST_GPIO_Port, XBEE_RST_Pin, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f0:	f004 fe8c 	bl	8005e0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2120      	movs	r1, #32
 80010f8:	48b5      	ldr	r0, [pc, #724]	@ (80013d0 <main+0x350>)
 80010fa:	f004 fe87 	bl	8005e0c <HAL_GPIO_WritePin>
  HAL_Delay(3000); // wait for the Xbee to get brought back up again
 80010fe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001102:	f002 ffad 	bl	8004060 <HAL_Delay>

  // Disable ALL chip selects
  HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2104      	movs	r1, #4
 800110a:	48b1      	ldr	r0, [pc, #708]	@ (80013d0 <main+0x350>)
 800110c:	f004 fe7e 	bl	8005e0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BMP_nCS_GPIO_Port, BMP_nCS_Pin, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001116:	48ae      	ldr	r0, [pc, #696]	@ (80013d0 <main+0x350>)
 8001118:	f004 fe78 	bl	8005e0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MAG_nCS_GPIO_Port, MAG_nCS_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001122:	48ab      	ldr	r0, [pc, #684]	@ (80013d0 <main+0x350>)
 8001124:	f004 fe72 	bl	8005e0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MAGEXT_nCS_GPIO_Port, MAGEXT_nCS_Pin, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800112e:	48a8      	ldr	r0, [pc, #672]	@ (80013d0 <main+0x350>)
 8001130:	f004 fe6c 	bl	8005e0c <HAL_GPIO_WritePin>

  // Initialize IMU
  ICM42688P_init(&hspi2, IMU_nCS_GPIO_Port, IMU_nCS_Pin);
 8001134:	2204      	movs	r2, #4
 8001136:	49a6      	ldr	r1, [pc, #664]	@ (80013d0 <main+0x350>)
 8001138:	48a6      	ldr	r0, [pc, #664]	@ (80013d4 <main+0x354>)
 800113a:	f002 f9f5 	bl	8003528 <ICM42688P_init>

  // Initialize MS5607
  MS5607_Init(&hspi2, BMP_nCS_GPIO_Port, BMP_nCS_Pin);
 800113e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001142:	49a3      	ldr	r1, [pc, #652]	@ (80013d0 <main+0x350>)
 8001144:	48a3      	ldr	r0, [pc, #652]	@ (80013d4 <main+0x354>)
 8001146:	f002 fb19 	bl	800377c <MS5607_Init>

  // Initialize BMM150
  struct bmm150_dev bmm150 = BMM150_spi_init(&hspi2, MAG_nCS_GPIO_Port, MAG_nCS_Pin);
 800114a:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 800114e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001152:	4a9f      	ldr	r2, [pc, #636]	@ (80013d0 <main+0x350>)
 8001154:	499f      	ldr	r1, [pc, #636]	@ (80013d4 <main+0x354>)
 8001156:	f001 ffd5 	bl	8003104 <BMM150_spi_init>

  // Initialize LC76G
  LC76G_init();
 800115a:	f002 faa9 	bl	80036b0 <LC76G_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
  int strlen = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  MS5607Readings bmp_data;
  ICM42688P_AccelData imu_data;
  BMM150_mag_data mag_data;
  LC76G_gps_data gps_data;

  init_mission_data();
 800116a:	f7ff ff0d 	bl	8000f88 <init_mission_data>
  // HAL_Delay(10);
  // printf("BMM is... 0x%X", bmm150.chip_id); // Not working :(

  while (1)
  {
    bmp_data = MS5607ReadValues();
 800116e:	f002 fee5 	bl	8003f3c <MS5607ReadValues>
 8001172:	eeb0 6a40 	vmov.f32	s12, s0
 8001176:	eef0 6a60 	vmov.f32	s13, s1
 800117a:	eeb0 7a41 	vmov.f32	s14, s2
 800117e:	eef0 7a61 	vmov.f32	s15, s3
 8001182:	ed87 6b4a 	vstr	d6, [r7, #296]	@ 0x128
 8001186:	ed87 7b4c 	vstr	d7, [r7, #304]	@ 0x130
    imu_data = ICM42688P_read_data();
 800118a:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800118e:	4618      	mov	r0, r3
 8001190:	f002 f9f4 	bl	800357c <ICM42688P_read_data>
    gps_data = LC76G_read_data();
 8001194:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001198:	4618      	mov	r0, r3
 800119a:	f002 fab7 	bl	800370c <LC76G_read_data>

    global_mission_data.TEMPERATURE = bmp_data.temperature_C;
 800119e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff fd27 	bl	8000bf8 <__aeabi_d2f>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a8a      	ldr	r2, [pc, #552]	@ (80013d8 <main+0x358>)
 80011ae:	6253      	str	r3, [r2, #36]	@ 0x24
    global_mission_data.PRESSURE = bmp_data.pressure_kPa;
 80011b0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f7ff fd1e 	bl	8000bf8 <__aeabi_d2f>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a86      	ldr	r2, [pc, #536]	@ (80013d8 <main+0x358>)
 80011c0:	6293      	str	r3, [r2, #40]	@ 0x28
    global_mission_data.VOLTAGE = (7.62 + (0.0002 * (float)(uint8_t)rand()));
 80011c2:	f010 fce5 	bl	8011b90 <rand>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011d2:	ee17 0a90 	vmov	r0, s15
 80011d6:	f7ff f9df 	bl	8000598 <__aeabi_f2d>
 80011da:	a379      	add	r3, pc, #484	@ (adr r3, 80013c0 <main+0x340>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff fa32 	bl	8000648 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	a376      	add	r3, pc, #472	@ (adr r3, 80013c8 <main+0x348>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7ff f873 	bl	80002dc <__adddf3>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fcfb 	bl	8000bf8 <__aeabi_d2f>
 8001202:	4603      	mov	r3, r0
 8001204:	4a74      	ldr	r2, [pc, #464]	@ (80013d8 <main+0x358>)
 8001206:	62d3      	str	r3, [r2, #44]	@ 0x2c
    global_mission_data.GYRO_R = imu_data.gyro_z * 2000;
 8001208:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 800120c:	461a      	mov	r2, r3
 800120e:	0152      	lsls	r2, r2, #5
 8001210:	1ad2      	subs	r2, r2, r3
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	4413      	add	r3, r2
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	b29b      	uxth	r3, r3
 800121a:	b21a      	sxth	r2, r3
 800121c:	4b6e      	ldr	r3, [pc, #440]	@ (80013d8 <main+0x358>)
 800121e:	861a      	strh	r2, [r3, #48]	@ 0x30
    global_mission_data.GYRO_P = imu_data.gyro_x * 2000;
 8001220:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8001224:	461a      	mov	r2, r3
 8001226:	0152      	lsls	r2, r2, #5
 8001228:	1ad2      	subs	r2, r2, r3
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	4413      	add	r3, r2
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	b29b      	uxth	r3, r3
 8001232:	b21a      	sxth	r2, r3
 8001234:	4b68      	ldr	r3, [pc, #416]	@ (80013d8 <main+0x358>)
 8001236:	865a      	strh	r2, [r3, #50]	@ 0x32
    global_mission_data.GYRO_Y = imu_data.gyro_y * 2000;
 8001238:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 800123c:	461a      	mov	r2, r3
 800123e:	0152      	lsls	r2, r2, #5
 8001240:	1ad2      	subs	r2, r2, r3
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	4413      	add	r3, r2
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	b29b      	uxth	r3, r3
 800124a:	b21a      	sxth	r2, r3
 800124c:	4b62      	ldr	r3, [pc, #392]	@ (80013d8 <main+0x358>)
 800124e:	869a      	strh	r2, [r3, #52]	@ 0x34

    // needs to be updated
    global_mission_data.ACCEL_R = imu_data.accel_z;
 8001250:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 8001254:	b21a      	sxth	r2, r3
 8001256:	4b60      	ldr	r3, [pc, #384]	@ (80013d8 <main+0x358>)
 8001258:	86da      	strh	r2, [r3, #54]	@ 0x36
    global_mission_data.ACCEL_P = imu_data.accel_x;
 800125a:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 800125e:	b21a      	sxth	r2, r3
 8001260:	4b5d      	ldr	r3, [pc, #372]	@ (80013d8 <main+0x358>)
 8001262:	871a      	strh	r2, [r3, #56]	@ 0x38
    global_mission_data.ACCEL_Y = imu_data.accel_y;
 8001264:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8001268:	b21a      	sxth	r2, r3
 800126a:	4b5b      	ldr	r3, [pc, #364]	@ (80013d8 <main+0x358>)
 800126c:	875a      	strh	r2, [r3, #58]	@ 0x3a

    strlen = sprintf(global_mission_data.GPS_TIME, "%d:%d:%d",
                     gps_data.time_H,
 800126e:	f897 30e8 	ldrb.w	r3, [r7, #232]	@ 0xe8
    strlen = sprintf(global_mission_data.GPS_TIME, "%d:%d:%d",
 8001272:	461a      	mov	r2, r3
                     gps_data.time_M,
 8001274:	f897 30e9 	ldrb.w	r3, [r7, #233]	@ 0xe9
    strlen = sprintf(global_mission_data.GPS_TIME, "%d:%d:%d",
 8001278:	4619      	mov	r1, r3
                     gps_data.time_S);
 800127a:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
    strlen = sprintf(global_mission_data.GPS_TIME, "%d:%d:%d",
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	460b      	mov	r3, r1
 8001282:	4956      	ldr	r1, [pc, #344]	@ (80013dc <main+0x35c>)
 8001284:	4856      	ldr	r0, [pc, #344]	@ (80013e0 <main+0x360>)
 8001286:	f010 fc63 	bl	8011b50 <siprintf>
 800128a:	f8c7 0168 	str.w	r0, [r7, #360]	@ 0x168
    global_mission_data.GPS_ALTITUDE = gps_data.altitude;
 800128e:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fcaf 	bl	8000bf8 <__aeabi_d2f>
 800129a:	4603      	mov	r3, r0
 800129c:	4a4e      	ldr	r2, [pc, #312]	@ (80013d8 <main+0x358>)
 800129e:	6553      	str	r3, [r2, #84]	@ 0x54
    global_mission_data.GPS_LATITUDE = gps_data.lat;
 80012a0:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fca6 	bl	8000bf8 <__aeabi_d2f>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4a4a      	ldr	r2, [pc, #296]	@ (80013d8 <main+0x358>)
 80012b0:	6593      	str	r3, [r2, #88]	@ 0x58
    global_mission_data.GPS_LONGITUDE = gps_data.lon;
 80012b2:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	@ 0xf8
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	f7ff fc9d 	bl	8000bf8 <__aeabi_d2f>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a45      	ldr	r2, [pc, #276]	@ (80013d8 <main+0x358>)
 80012c2:	65d3      	str	r3, [r2, #92]	@ 0x5c
    global_mission_data.GPS_SATS = gps_data.num_sat_used;
 80012c4:	f897 2108 	ldrb.w	r2, [r7, #264]	@ 0x108
 80012c8:	4b43      	ldr	r3, [pc, #268]	@ (80013d8 <main+0x358>)
 80012ca:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

    // model packet
    char telemetry_string[200];
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
                     global_mission_data.TEAM_ID,      // team id
 80012ce:	4b42      	ldr	r3, [pc, #264]	@ (80013d8 <main+0x358>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	4b40      	ldr	r3, [pc, #256]	@ (80013d8 <main+0x358>)
 80012d8:	68de      	ldr	r6, [r3, #12]
                     global_mission_data.MISSION_TIME, // temp; mission time
                     global_mission_data.PACKET_COUNT, // temp; packet count
                     global_mission_data.MODE,         // mode
 80012da:	4b3f      	ldr	r3, [pc, #252]	@ (80013d8 <main+0x358>)
 80012dc:	7c1b      	ldrb	r3, [r3, #16]
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80012de:	61bb      	str	r3, [r7, #24]
                     global_mission_data.STATE,        // state
                     global_mission_data.ALTITUDE,     // temp; altitude
 80012e0:	4b3d      	ldr	r3, [pc, #244]	@ (80013d8 <main+0x358>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f957 	bl	8000598 <__aeabi_f2d>
 80012ea:	4604      	mov	r4, r0
 80012ec:	460d      	mov	r5, r1
                     global_mission_data.TEMPERATURE,  // temperature
 80012ee:	4b3a      	ldr	r3, [pc, #232]	@ (80013d8 <main+0x358>)
 80012f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f950 	bl	8000598 <__aeabi_f2d>
 80012f8:	4680      	mov	r8, r0
 80012fa:	4689      	mov	r9, r1
                     global_mission_data.PRESSURE,     // pressure
 80012fc:	4b36      	ldr	r3, [pc, #216]	@ (80013d8 <main+0x358>)
 80012fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f949 	bl	8000598 <__aeabi_f2d>
 8001306:	4682      	mov	sl, r0
 8001308:	468b      	mov	fp, r1
                     global_mission_data.VOLTAGE,
 800130a:	4b33      	ldr	r3, [pc, #204]	@ (80013d8 <main+0x358>)
 800130c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f942 	bl	8000598 <__aeabi_f2d>
 8001314:	460a      	mov	r2, r1
 8001316:	4601      	mov	r1, r0
                     global_mission_data.GYRO_R, // gyro_r
 8001318:	4b2f      	ldr	r3, [pc, #188]	@ (80013d8 <main+0x358>)
 800131a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 800131e:	617b      	str	r3, [r7, #20]
                     global_mission_data.GYRO_P, // gyro_p
 8001320:	4b2d      	ldr	r3, [pc, #180]	@ (80013d8 <main+0x358>)
 8001322:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 8001326:	60bb      	str	r3, [r7, #8]
                     global_mission_data.GYRO_Y
 8001328:	4b2b      	ldr	r3, [pc, #172]	@ (80013d8 <main+0x358>)
 800132a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
    strlen = sprintf(telemetry_string, "%d,%s,%ld,%c,%s,%.1f,%.1f,%.1f,%.1f,%d,%d,%d",
 800132e:	f107 0020 	add.w	r0, r7, #32
 8001332:	930e      	str	r3, [sp, #56]	@ 0x38
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	930d      	str	r3, [sp, #52]	@ 0x34
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	930c      	str	r3, [sp, #48]	@ 0x30
 800133c:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8001340:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001344:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001348:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800134c:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <main+0x364>)
 800134e:	9302      	str	r3, [sp, #8]
 8001350:	69b9      	ldr	r1, [r7, #24]
 8001352:	9101      	str	r1, [sp, #4]
 8001354:	9600      	str	r6, [sp, #0]
 8001356:	4b24      	ldr	r3, [pc, #144]	@ (80013e8 <main+0x368>)
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	4924      	ldr	r1, [pc, #144]	@ (80013ec <main+0x36c>)
 800135c:	f010 fbf8 	bl	8011b50 <siprintf>
 8001360:	f8c7 0168 	str.w	r0, [r7, #360]	@ 0x168
                     // gyro_y
    );
    // strlen = sizeof(telemetry_string);
    //HAL_UART_Transmit(&huart3, telemetry_string, strlen, HAL_MAX_DELAY);
    memset(telemetry_string, 0, sizeof(telemetry_string)); // flush array
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	22c8      	movs	r2, #200	@ 0xc8
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f010 fd0f 	bl	8011d90 <memset>
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
                     global_mission_data.ACCEL_R, // accel_r
 8001372:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <main+0x358>)
 8001374:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001378:	61fb      	str	r3, [r7, #28]
                     global_mission_data.ACCEL_P, // accel_p
 800137a:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <main+0x358>)
 800137c:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001380:	61bb      	str	r3, [r7, #24]
                     global_mission_data.ACCEL_Y,
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <main+0x358>)
 8001384:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	@ 0x3a
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001388:	617b      	str	r3, [r7, #20]
                     global_mission_data.MAG_R,                   // temp; mag_r
 800138a:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <main+0x358>)
 800138c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f902 	bl	8000598 <__aeabi_f2d>
 8001394:	4605      	mov	r5, r0
 8001396:	460e      	mov	r6, r1
                     global_mission_data.MAG_P,                   // temp; mag_p
 8001398:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <main+0x358>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f8fb 	bl	8000598 <__aeabi_f2d>
 80013a2:	e9c7 0102 	strd	r0, r1, [r7, #8]
                     global_mission_data.MAG_Y,                   // temp; mag_y
 80013a6:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <main+0x358>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f8f4 	bl	8000598 <__aeabi_f2d>
 80013b0:	e9c7 0100 	strd	r0, r1, [r7]
                     global_mission_data.AUTO_GYRO_ROTATION_RATE, // temp; auto-gyro rotation rate
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <main+0x358>)
 80013b6:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80013ba:	e019      	b.n	80013f0 <main+0x370>
 80013bc:	f3af 8000 	nop.w
 80013c0:	eb1c432d 	.word	0xeb1c432d
 80013c4:	3f2a36e2 	.word	0x3f2a36e2
 80013c8:	47ae147b 	.word	0x47ae147b
 80013cc:	401e7ae1 	.word	0x401e7ae1
 80013d0:	48000400 	.word	0x48000400
 80013d4:	2000048c 	.word	0x2000048c
 80013d8:	200002c4 	.word	0x200002c4
 80013dc:	08013e6c 	.word	0x08013e6c
 80013e0:	2000030e 	.word	0x2000030e
 80013e4:	200002d5 	.word	0x200002d5
 80013e8:	200002c6 	.word	0x200002c6
 80013ec:	08013e78 	.word	0x08013e78
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013f0:	613b      	str	r3, [r7, #16]
                     global_mission_data.GPS_TIME,                // temp; gps time
                     global_mission_data.GPS_ALTITUDE,            // temp; gps altitude
 80013f2:	4b29      	ldr	r3, [pc, #164]	@ (8001498 <main+0x418>)
 80013f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f8ce 	bl	8000598 <__aeabi_f2d>
 80013fc:	4682      	mov	sl, r0
 80013fe:	468b      	mov	fp, r1
                     global_mission_data.GPS_LATITUDE,            // temp; gps latitude
 8001400:	4b25      	ldr	r3, [pc, #148]	@ (8001498 <main+0x418>)
 8001402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f8c7 	bl	8000598 <__aeabi_f2d>
 800140a:	4680      	mov	r8, r0
 800140c:	4689      	mov	r9, r1
                     global_mission_data.GPS_LONGITUDE,           // temp; gps longitude
 800140e:	4b22      	ldr	r3, [pc, #136]	@ (8001498 <main+0x418>)
 8001410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f8c0 	bl	8000598 <__aeabi_f2d>
                     global_mission_data.GPS_SATS,                // temp; # of gps satellites
 8001418:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <main+0x418>)
 800141a:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
    strlen = sprintf(telemetry_string, ",%d,%d,%d,%.1f,%.1f,%.1f,%d,%s,%.1f,%.4f,%.4f,%d,%s",
 800141e:	461a      	mov	r2, r3
 8001420:	f107 0420 	add.w	r4, r7, #32
 8001424:	4b1d      	ldr	r3, [pc, #116]	@ (800149c <main+0x41c>)
 8001426:	9311      	str	r3, [sp, #68]	@ 0x44
 8001428:	9210      	str	r2, [sp, #64]	@ 0x40
 800142a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800142e:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8001432:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8001436:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <main+0x420>)
 8001438:	9309      	str	r3, [sp, #36]	@ 0x24
 800143a:	6939      	ldr	r1, [r7, #16]
 800143c:	9108      	str	r1, [sp, #32]
 800143e:	ed97 7b00 	vldr	d7, [r7]
 8001442:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001446:	ed97 7b02 	vldr	d7, [r7, #8]
 800144a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800144e:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8001452:	6979      	ldr	r1, [r7, #20]
 8001454:	9100      	str	r1, [sp, #0]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	4912      	ldr	r1, [pc, #72]	@ (80014a4 <main+0x424>)
 800145c:	4620      	mov	r0, r4
 800145e:	f010 fb77 	bl	8011b50 <siprintf>
 8001462:	f8c7 0168 	str.w	r0, [r7, #360]	@ 0x168
                     global_mission_data.CMD_ECHO);
    //HAL_UART_Transmit(&huart3, telemetry_string, strlen, HAL_MAX_DELAY);

    global_mission_data.PACKET_COUNT = global_mission_data.PACKET_COUNT + 1;
 8001466:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <main+0x418>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	3301      	adds	r3, #1
 800146c:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <main+0x418>)
 800146e:	60d3      	str	r3, [r2, #12]

    HAL_Delay(1000);
 8001470:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001474:	f002 fdf4 	bl	8004060 <HAL_Delay>

    HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	2180      	movs	r1, #128	@ 0x80
 800147c:	480a      	ldr	r0, [pc, #40]	@ (80014a8 <main+0x428>)
 800147e:	f004 fcc5 	bl	8005e0c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001482:	2064      	movs	r0, #100	@ 0x64
 8001484:	f002 fdec 	bl	8004060 <HAL_Delay>
    HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 8001488:	2201      	movs	r2, #1
 800148a:	2180      	movs	r1, #128	@ 0x80
 800148c:	4806      	ldr	r0, [pc, #24]	@ (80014a8 <main+0x428>)
 800148e:	f004 fcbd 	bl	8005e0c <HAL_GPIO_WritePin>
  {
 8001492:	bf00      	nop
 8001494:	e66b      	b.n	800116e <main+0xee>
 8001496:	bf00      	nop
 8001498:	200002c4 	.word	0x200002c4
 800149c:	20000325 	.word	0x20000325
 80014a0:	2000030e 	.word	0x2000030e
 80014a4:	08013ea8 	.word	0x08013ea8
 80014a8:	48000400 	.word	0x48000400

080014ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b09a      	sub	sp, #104	@ 0x68
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014b6:	2238      	movs	r2, #56	@ 0x38
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f010 fc68 	bl	8011d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  RCC_CRSInitTypeDef pInit = {0};
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]
 80014de:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014e4:	f006 fc0a 	bl	8007cfc <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 80014e8:	f006 fb78 	bl	8007bdc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014ec:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <SystemClock_Config+0x120>)
 80014ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014f2:	4a36      	ldr	r2, [pc, #216]	@ (80015cc <SystemClock_Config+0x120>)
 80014f4:	f023 0318 	bic.w	r3, r3, #24
 80014f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 80014fc:	232e      	movs	r3, #46	@ 0x2e
 80014fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001500:	2301      	movs	r3, #1
 8001502:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001504:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001508:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800150a:	2340      	movs	r3, #64	@ 0x40
 800150c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800150e:	2301      	movs	r3, #1
 8001510:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001512:	2301      	movs	r3, #1
 8001514:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001516:	2302      	movs	r3, #2
 8001518:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800151a:	2302      	movs	r3, #2
 800151c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800151e:	2301      	movs	r3, #1
 8001520:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001522:	2308      	movs	r3, #8
 8001524:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001526:	2302      	movs	r3, #2
 8001528:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800152a:	2302      	movs	r3, #2
 800152c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800152e:	2302      	movs	r3, #2
 8001530:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001532:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001536:	4618      	mov	r0, r3
 8001538:	f006 fc94 	bl	8007e64 <HAL_RCC_OscConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001542:	f000 fe79 	bl	8002238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001546:	230f      	movs	r3, #15
 8001548:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154a:	2303      	movs	r3, #3
 800154c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	2102      	movs	r1, #2
 8001560:	4618      	mov	r0, r3
 8001562:	f006 ff91 	bl	8008488 <HAL_RCC_ClockConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800156c:	f000 fe64 	bl	8002238 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001570:	2200      	movs	r2, #0
 8001572:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 8001576:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800157a:	f007 f8c1 	bl	8008700 <HAL_RCC_MCOConfig>
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSE);
 800157e:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8001582:	f007 fc51 	bl	8008e28 <HAL_RCCEx_EnableLSCO>

  /** Enable the SYSCFG APB clock
   */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <SystemClock_Config+0x120>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158a:	4a10      	ldr	r2, [pc, #64]	@ (80015cc <SystemClock_Config+0x120>)
 800158c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001590:	6593      	str	r3, [r2, #88]	@ 0x58
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <SystemClock_Config+0x120>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  /** Configures CRS
   */
  pInit.Prescaler = RCC_CRS_SYNC_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
  pInit.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80015a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80015a6:	60bb      	str	r3, [r7, #8]
  pInit.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  pInit.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 32768);
 80015ac:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 80015b0:	613b      	str	r3, [r7, #16]
  pInit.ErrorLimitValue = 34;
 80015b2:	2322      	movs	r3, #34	@ 0x22
 80015b4:	617b      	str	r3, [r7, #20]
  pInit.HSI48CalibrationValue = 32;
 80015b6:	2320      	movs	r3, #32
 80015b8:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&pInit);
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4618      	mov	r0, r3
 80015be:	f007 fc9d 	bl	8008efc <HAL_RCCEx_CRSConfig>
}
 80015c2:	bf00      	nop
 80015c4:	3768      	adds	r7, #104	@ 0x68
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000

080015d0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	@ 0x30
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80015d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2220      	movs	r2, #32
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f010 fbd1 	bl	8011d90 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 80015ee:	4b32      	ldr	r3, [pc, #200]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 80015f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80015f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80015f6:	4b30      	ldr	r3, [pc, #192]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 80015f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015fe:	4b2e      	ldr	r3, [pc, #184]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001604:	4b2c      	ldr	r3, [pc, #176]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800160a:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001610:	4b29      	ldr	r3, [pc, #164]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001616:	4b28      	ldr	r3, [pc, #160]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 8001618:	2204      	movs	r2, #4
 800161a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800161c:	4b26      	ldr	r3, [pc, #152]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 800161e:	2200      	movs	r2, #0
 8001620:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001622:	4b25      	ldr	r3, [pc, #148]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 8001624:	2200      	movs	r2, #0
 8001626:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001628:	4b23      	ldr	r3, [pc, #140]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 800162a:	2201      	movs	r2, #1
 800162c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800162e:	4b22      	ldr	r3, [pc, #136]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001636:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 8001638:	2200      	movs	r2, #0
 800163a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800163c:	4b1e      	ldr	r3, [pc, #120]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 800163e:	2200      	movs	r2, #0
 8001640:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001642:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800164a:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 800164c:	2200      	movs	r2, #0
 800164e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001650:	4b19      	ldr	r3, [pc, #100]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001658:	4817      	ldr	r0, [pc, #92]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 800165a:	f002 ff1d 	bl	8004498 <HAL_ADC_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001664:	f000 fde8 	bl	8002238 <Error_Handler>
  }

  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001668:	2300      	movs	r3, #0
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800166c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001670:	4619      	mov	r1, r3
 8001672:	4811      	ldr	r0, [pc, #68]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 8001674:	f003 fd10 	bl	8005098 <HAL_ADCEx_MultiModeConfigChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800167e:	f000 fddb 	bl	8002238 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <MX_ADC1_Init+0xec>)
 8001684:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001686:	2306      	movs	r3, #6
 8001688:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800168e:	237f      	movs	r3, #127	@ 0x7f
 8001690:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001692:	2304      	movs	r3, #4
 8001694:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	4619      	mov	r1, r3
 800169e:	4806      	ldr	r0, [pc, #24]	@ (80016b8 <MX_ADC1_Init+0xe8>)
 80016a0:	f003 f8a8 	bl	80047f4 <HAL_ADC_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80016aa:	f000 fdc5 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80016ae:	bf00      	nop
 80016b0:	3730      	adds	r7, #48	@ 0x30
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000330 	.word	0x20000330
 80016bc:	25b00200 	.word	0x25b00200

080016c0 <MX_CORDIC_Init>:
 * @brief CORDIC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CORDIC_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <MX_CORDIC_Init+0x20>)
 80016c6:	4a07      	ldr	r2, [pc, #28]	@ (80016e4 <MX_CORDIC_Init+0x24>)
 80016c8:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80016ca:	4805      	ldr	r0, [pc, #20]	@ (80016e0 <MX_CORDIC_Init+0x20>)
 80016cc:	f003 fdcc 	bl	8005268 <HAL_CORDIC_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80016d6:	f000 fdaf 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000039c 	.word	0x2000039c
 80016e4:	40020c00 	.word	0x40020c00

080016e8 <MX_FMAC_Init>:
 * @brief FMAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_FMAC_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <MX_FMAC_Init+0x20>)
 80016ee:	4a07      	ldr	r2, [pc, #28]	@ (800170c <MX_FMAC_Init+0x24>)
 80016f0:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	@ (8001708 <MX_FMAC_Init+0x20>)
 80016f4:	f004 f944 	bl	8005980 <HAL_FMAC_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80016fe:	f000 fd9b 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200003c4 	.word	0x200003c4
 800170c:	40021400 	.word	0x40021400

08001710 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001714:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <MX_I2C3_Init+0x74>)
 8001716:	4a1c      	ldr	r2, [pc, #112]	@ (8001788 <MX_I2C3_Init+0x78>)
 8001718:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C12166;
 800171a:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <MX_I2C3_Init+0x74>)
 800171c:	4a1b      	ldr	r2, [pc, #108]	@ (800178c <MX_I2C3_Init+0x7c>)
 800171e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001720:	4b18      	ldr	r3, [pc, #96]	@ (8001784 <MX_I2C3_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001726:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <MX_I2C3_Init+0x74>)
 8001728:	2201      	movs	r2, #1
 800172a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800172c:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <MX_I2C3_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001732:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <MX_I2C3_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001738:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <MX_I2C3_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800173e:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <MX_I2C3_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <MX_I2C3_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800174a:	480e      	ldr	r0, [pc, #56]	@ (8001784 <MX_I2C3_Init+0x74>)
 800174c:	f004 fb76 	bl	8005e3c <HAL_I2C_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001756:	f000 fd6f 	bl	8002238 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800175a:	2100      	movs	r1, #0
 800175c:	4809      	ldr	r0, [pc, #36]	@ (8001784 <MX_I2C3_Init+0x74>)
 800175e:	f004 fc08 	bl	8005f72 <HAL_I2CEx_ConfigAnalogFilter>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001768:	f000 fd66 	bl	8002238 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800176c:	2100      	movs	r1, #0
 800176e:	4805      	ldr	r0, [pc, #20]	@ (8001784 <MX_I2C3_Init+0x74>)
 8001770:	f004 fc4a 	bl	8006008 <HAL_I2CEx_ConfigDigitalFilter>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800177a:	f000 fd5d 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200003fc 	.word	0x200003fc
 8001788:	40007800 	.word	0x40007800
 800178c:	00c12166 	.word	0x00c12166

08001790 <MX_IRTIM_Init>:
 * @brief IRTIM Initialization Function
 * @param None
 * @retval None
 */
static void MX_IRTIM_Init(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END IRTIM_Init 1 */
  /* USER CODE BEGIN IRTIM_Init 2 */

  /* USER CODE END IRTIM_Init 2 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <MX_RNG_Init>:
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80017a4:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <MX_RNG_Init+0x24>)
 80017a6:	4a08      	ldr	r2, [pc, #32]	@ (80017c8 <MX_RNG_Init+0x28>)
 80017a8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <MX_RNG_Init+0x24>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80017b0:	4804      	ldr	r0, [pc, #16]	@ (80017c4 <MX_RNG_Init+0x24>)
 80017b2:	f007 fbe5 	bl	8008f80 <HAL_RNG_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80017bc:	f000 fd3c 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000450 	.word	0x20000450
 80017c8:	50060800 	.word	0x50060800

080017cc <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 80017d0:	4b16      	ldr	r3, [pc, #88]	@ (800182c <MX_RTC_Init+0x60>)
 80017d2:	4a17      	ldr	r2, [pc, #92]	@ (8001830 <MX_RTC_Init+0x64>)
 80017d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <MX_RTC_Init+0x60>)
 80017d8:	2200      	movs	r2, #0
 80017da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017dc:	4b13      	ldr	r3, [pc, #76]	@ (800182c <MX_RTC_Init+0x60>)
 80017de:	227f      	movs	r2, #127	@ 0x7f
 80017e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017e2:	4b12      	ldr	r3, [pc, #72]	@ (800182c <MX_RTC_Init+0x60>)
 80017e4:	22ff      	movs	r2, #255	@ 0xff
 80017e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017e8:	4b10      	ldr	r3, [pc, #64]	@ (800182c <MX_RTC_Init+0x60>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017ee:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <MX_RTC_Init+0x60>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <MX_RTC_Init+0x60>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <MX_RTC_Init+0x60>)
 80017fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001800:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001802:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <MX_RTC_Init+0x60>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001808:	4808      	ldr	r0, [pc, #32]	@ (800182c <MX_RTC_Init+0x60>)
 800180a:	f007 fbee 	bl	8008fea <HAL_RTC_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8001814:	f000 fd10 	bl	8002238 <Error_Handler>
  }

  /** Enable the reference Clock input
   */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	@ (800182c <MX_RTC_Init+0x60>)
 800181a:	f007 fd02 	bl	8009222 <HAL_RTCEx_SetRefClock>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001824:	f000 fd08 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000464 	.word	0x20000464
 8001830:	40002800 	.word	0x40002800

08001834 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <MX_SPI2_Init+0x74>)
 800183a:	4a1c      	ldr	r2, [pc, #112]	@ (80018ac <MX_SPI2_Init+0x78>)
 800183c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800183e:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <MX_SPI2_Init+0x74>)
 8001840:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001844:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001846:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <MX_SPI2_Init+0x74>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800184c:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <MX_SPI2_Init+0x74>)
 800184e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001852:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001854:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <MX_SPI2_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800185a:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <MX_SPI2_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <MX_SPI2_Init+0x74>)
 8001862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001866:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001868:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <MX_SPI2_Init+0x74>)
 800186a:	2210      	movs	r2, #16
 800186c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800186e:	4b0e      	ldr	r3, [pc, #56]	@ (80018a8 <MX_SPI2_Init+0x74>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001874:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <MX_SPI2_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <MX_SPI2_Init+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001880:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <MX_SPI2_Init+0x74>)
 8001882:	2207      	movs	r2, #7
 8001884:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001886:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <MX_SPI2_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <MX_SPI2_Init+0x74>)
 800188e:	2208      	movs	r2, #8
 8001890:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001892:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <MX_SPI2_Init+0x74>)
 8001894:	f007 fd09 	bl	80092aa <HAL_SPI_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800189e:	f000 fccb 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	2000048c 	.word	0x2000048c
 80018ac:	40003800 	.word	0x40003800

080018b0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b092      	sub	sp, #72	@ 0x48
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ba:	2224      	movs	r2, #36	@ 0x24
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f010 fa66 	bl	8011d90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c4:	f107 0318 	add.w	r3, r7, #24
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 80018d0:	463b      	mov	r3, r7
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]
 80018de:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018e0:	4b2e      	ldr	r3, [pc, #184]	@ (800199c <MX_TIM1_Init+0xec>)
 80018e2:	4a2f      	ldr	r2, [pc, #188]	@ (80019a0 <MX_TIM1_Init+0xf0>)
 80018e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018e6:	4b2d      	ldr	r3, [pc, #180]	@ (800199c <MX_TIM1_Init+0xec>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ec:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <MX_TIM1_Init+0xec>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018f2:	4b2a      	ldr	r3, [pc, #168]	@ (800199c <MX_TIM1_Init+0xec>)
 80018f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fa:	4b28      	ldr	r3, [pc, #160]	@ (800199c <MX_TIM1_Init+0xec>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001900:	4b26      	ldr	r3, [pc, #152]	@ (800199c <MX_TIM1_Init+0xec>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001906:	4b25      	ldr	r3, [pc, #148]	@ (800199c <MX_TIM1_Init+0xec>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800190c:	2301      	movs	r3, #1
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001910:	2300      	movs	r3, #0
 8001912:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001914:	2301      	movs	r3, #1
 8001916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001918:	2300      	movs	r3, #0
 800191a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001920:	2300      	movs	r3, #0
 8001922:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001924:	2301      	movs	r3, #1
 8001926:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001934:	4619      	mov	r1, r3
 8001936:	4819      	ldr	r0, [pc, #100]	@ (800199c <MX_TIM1_Init+0xec>)
 8001938:	f008 fd0b 	bl	800a352 <HAL_TIM_Encoder_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001942:	f000 fc79 	bl	8002238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001952:	f107 0318 	add.w	r3, r7, #24
 8001956:	4619      	mov	r1, r3
 8001958:	4810      	ldr	r0, [pc, #64]	@ (800199c <MX_TIM1_Init+0xec>)
 800195a:	f009 fd9f 	bl	800b49c <HAL_TIMEx_MasterConfigSynchronization>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001964:	f000 fc68 	bl	8002238 <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 8001968:	2300      	movs	r3, #0
 800196a:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim1, &sEncoderIndexConfig) != HAL_OK)
 8001980:	463b      	mov	r3, r7
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	@ (800199c <MX_TIM1_Init+0xec>)
 8001986:	f009 feab 	bl	800b6e0 <HAL_TIMEx_ConfigEncoderIndex>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001990:	f000 fc52 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 8001994:	bf00      	nop
 8001996:	3748      	adds	r7, #72	@ 0x48
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200004f0 	.word	0x200004f0
 80019a0:	40012c00 	.word	0x40012c00

080019a4 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08e      	sub	sp, #56	@ 0x38
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c4:	463b      	mov	r3, r7
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
 80019d0:	611a      	str	r2, [r3, #16]
 80019d2:	615a      	str	r2, [r3, #20]
 80019d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019d6:	4b3d      	ldr	r3, [pc, #244]	@ (8001acc <MX_TIM3_Init+0x128>)
 80019d8:	4a3d      	ldr	r2, [pc, #244]	@ (8001ad0 <MX_TIM3_Init+0x12c>)
 80019da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019dc:	4b3b      	ldr	r3, [pc, #236]	@ (8001acc <MX_TIM3_Init+0x128>)
 80019de:	2200      	movs	r2, #0
 80019e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e2:	4b3a      	ldr	r3, [pc, #232]	@ (8001acc <MX_TIM3_Init+0x128>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019e8:	4b38      	ldr	r3, [pc, #224]	@ (8001acc <MX_TIM3_Init+0x128>)
 80019ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f0:	4b36      	ldr	r3, [pc, #216]	@ (8001acc <MX_TIM3_Init+0x128>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f6:	4b35      	ldr	r3, [pc, #212]	@ (8001acc <MX_TIM3_Init+0x128>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019fc:	4833      	ldr	r0, [pc, #204]	@ (8001acc <MX_TIM3_Init+0x128>)
 80019fe:	f008 fb89 	bl	800a114 <HAL_TIM_Base_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001a08:	f000 fc16 	bl	8002238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a16:	4619      	mov	r1, r3
 8001a18:	482c      	ldr	r0, [pc, #176]	@ (8001acc <MX_TIM3_Init+0x128>)
 8001a1a:	f008 ffa3 	bl	800a964 <HAL_TIM_ConfigClockSource>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001a24:	f000 fc08 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a28:	4828      	ldr	r0, [pc, #160]	@ (8001acc <MX_TIM3_Init+0x128>)
 8001a2a:	f008 fc3b 	bl	800a2a4 <HAL_TIM_PWM_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001a34:	f000 fc00 	bl	8002238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	4619      	mov	r1, r3
 8001a46:	4821      	ldr	r0, [pc, #132]	@ (8001acc <MX_TIM3_Init+0x128>)
 8001a48:	f009 fd28 	bl	800b49c <HAL_TIMEx_MasterConfigSynchronization>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001a52:	f000 fbf1 	bl	8002238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a56:	2360      	movs	r3, #96	@ 0x60
 8001a58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a66:	463b      	mov	r3, r7
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4817      	ldr	r0, [pc, #92]	@ (8001acc <MX_TIM3_Init+0x128>)
 8001a6e:	f008 fe65 	bl	800a73c <HAL_TIM_PWM_ConfigChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001a78:	f000 fbde 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	2204      	movs	r2, #4
 8001a80:	4619      	mov	r1, r3
 8001a82:	4812      	ldr	r0, [pc, #72]	@ (8001acc <MX_TIM3_Init+0x128>)
 8001a84:	f008 fe5a 	bl	800a73c <HAL_TIM_PWM_ConfigChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001a8e:	f000 fbd3 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a92:	463b      	mov	r3, r7
 8001a94:	2208      	movs	r2, #8
 8001a96:	4619      	mov	r1, r3
 8001a98:	480c      	ldr	r0, [pc, #48]	@ (8001acc <MX_TIM3_Init+0x128>)
 8001a9a:	f008 fe4f 	bl	800a73c <HAL_TIM_PWM_ConfigChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001aa4:	f000 fbc8 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	220c      	movs	r2, #12
 8001aac:	4619      	mov	r1, r3
 8001aae:	4807      	ldr	r0, [pc, #28]	@ (8001acc <MX_TIM3_Init+0x128>)
 8001ab0:	f008 fe44 	bl	800a73c <HAL_TIM_PWM_ConfigChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001aba:	f000 fbbd 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001abe:	4803      	ldr	r0, [pc, #12]	@ (8001acc <MX_TIM3_Init+0x128>)
 8001ac0:	f000 feb8 	bl	8002834 <HAL_TIM_MspPostInit>
}
 8001ac4:	bf00      	nop
 8001ac6:	3738      	adds	r7, #56	@ 0x38
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	2000053c 	.word	0x2000053c
 8001ad0:	40000400 	.word	0x40000400

08001ad4 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b092      	sub	sp, #72	@ 0x48
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ade:	2224      	movs	r2, #36	@ 0x24
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f010 f954 	bl	8011d90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 8001af4:	463b      	mov	r3, r7
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
 8001b00:	611a      	str	r2, [r3, #16]
 8001b02:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b04:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc0 <MX_TIM8_Init+0xec>)
 8001b06:	4a2f      	ldr	r2, [pc, #188]	@ (8001bc4 <MX_TIM8_Init+0xf0>)
 8001b08:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc0 <MX_TIM8_Init+0xec>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b10:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc0 <MX_TIM8_Init+0xec>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b16:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc0 <MX_TIM8_Init+0xec>)
 8001b18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b1c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1e:	4b28      	ldr	r3, [pc, #160]	@ (8001bc0 <MX_TIM8_Init+0xec>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b24:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <MX_TIM8_Init+0xec>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2a:	4b25      	ldr	r3, [pc, #148]	@ (8001bc0 <MX_TIM8_Init+0xec>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b30:	2301      	movs	r3, #1
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b44:	2300      	movs	r3, #0
 8001b46:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4819      	ldr	r0, [pc, #100]	@ (8001bc0 <MX_TIM8_Init+0xec>)
 8001b5c:	f008 fbf9 	bl	800a352 <HAL_TIM_Encoder_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001b66:	f000 fb67 	bl	8002238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b76:	f107 0318 	add.w	r3, r7, #24
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4810      	ldr	r0, [pc, #64]	@ (8001bc0 <MX_TIM8_Init+0xec>)
 8001b7e:	f009 fc8d 	bl	800b49c <HAL_TIMEx_MasterConfigSynchronization>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001b88:	f000 fb56 	bl	8002238 <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim8, &sEncoderIndexConfig) != HAL_OK)
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4805      	ldr	r0, [pc, #20]	@ (8001bc0 <MX_TIM8_Init+0xec>)
 8001baa:	f009 fd99 	bl	800b6e0 <HAL_TIMEx_ConfigEncoderIndex>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM8_Init+0xe4>
  {
    Error_Handler();
 8001bb4:	f000 fb40 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
}
 8001bb8:	bf00      	nop
 8001bba:	3748      	adds	r7, #72	@ 0x48
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000588 	.word	0x20000588
 8001bc4:	40013400 	.word	0x40013400

08001bc8 <MX_TIM15_Init>:
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b098      	sub	sp, #96	@ 0x60
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bda:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	611a      	str	r2, [r3, #16]
 8001bea:	615a      	str	r2, [r3, #20]
 8001bec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2234      	movs	r2, #52	@ 0x34
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f010 f8cb 	bl	8011d90 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001bfa:	4b34      	ldr	r3, [pc, #208]	@ (8001ccc <MX_TIM15_Init+0x104>)
 8001bfc:	4a34      	ldr	r2, [pc, #208]	@ (8001cd0 <MX_TIM15_Init+0x108>)
 8001bfe:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001c00:	4b32      	ldr	r3, [pc, #200]	@ (8001ccc <MX_TIM15_Init+0x104>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c06:	4b31      	ldr	r3, [pc, #196]	@ (8001ccc <MX_TIM15_Init+0x104>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001ccc <MX_TIM15_Init+0x104>)
 8001c0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c12:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c14:	4b2d      	ldr	r3, [pc, #180]	@ (8001ccc <MX_TIM15_Init+0x104>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ccc <MX_TIM15_Init+0x104>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c20:	4b2a      	ldr	r3, [pc, #168]	@ (8001ccc <MX_TIM15_Init+0x104>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001c26:	4829      	ldr	r0, [pc, #164]	@ (8001ccc <MX_TIM15_Init+0x104>)
 8001c28:	f008 fb3c 	bl	800a2a4 <HAL_TIM_PWM_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001c32:	f000 fb01 	bl	8002238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001c3e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c42:	4619      	mov	r1, r3
 8001c44:	4821      	ldr	r0, [pc, #132]	@ (8001ccc <MX_TIM15_Init+0x104>)
 8001c46:	f009 fc29 	bl	800b49c <HAL_TIMEx_MasterConfigSynchronization>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001c50:	f000 faf2 	bl	8002238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c54:	2360      	movs	r3, #96	@ 0x60
 8001c56:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c60:	2300      	movs	r3, #0
 8001c62:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c70:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c74:	2204      	movs	r2, #4
 8001c76:	4619      	mov	r1, r3
 8001c78:	4814      	ldr	r0, [pc, #80]	@ (8001ccc <MX_TIM15_Init+0x104>)
 8001c7a:	f008 fd5f 	bl	800a73c <HAL_TIM_PWM_ConfigChannel>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001c84:	f000 fad8 	bl	8002238 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ca0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	4619      	mov	r1, r3
 8001cae:	4807      	ldr	r0, [pc, #28]	@ (8001ccc <MX_TIM15_Init+0x104>)
 8001cb0:	f009 fc82 	bl	800b5b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001cba:	f000 fabd 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001cbe:	4803      	ldr	r0, [pc, #12]	@ (8001ccc <MX_TIM15_Init+0x104>)
 8001cc0:	f000 fdb8 	bl	8002834 <HAL_TIM_MspPostInit>
}
 8001cc4:	bf00      	nop
 8001cc6:	3760      	adds	r7, #96	@ 0x60
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200005d4 	.word	0x200005d4
 8001cd0:	40014000 	.word	0x40014000

08001cd4 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b094      	sub	sp, #80	@ 0x50
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cda:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	611a      	str	r2, [r3, #16]
 8001cea:	615a      	str	r2, [r3, #20]
 8001cec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cee:	463b      	mov	r3, r7
 8001cf0:	2234      	movs	r2, #52	@ 0x34
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f010 f84b 	bl	8011d90 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8001db8 <MX_TIM16_Init+0xe4>)
 8001cfc:	4a2f      	ldr	r2, [pc, #188]	@ (8001dbc <MX_TIM16_Init+0xe8>)
 8001cfe:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001d00:	4b2d      	ldr	r3, [pc, #180]	@ (8001db8 <MX_TIM16_Init+0xe4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d06:	4b2c      	ldr	r3, [pc, #176]	@ (8001db8 <MX_TIM16_Init+0xe4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001db8 <MX_TIM16_Init+0xe4>)
 8001d0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d12:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d14:	4b28      	ldr	r3, [pc, #160]	@ (8001db8 <MX_TIM16_Init+0xe4>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d1a:	4b27      	ldr	r3, [pc, #156]	@ (8001db8 <MX_TIM16_Init+0xe4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d20:	4b25      	ldr	r3, [pc, #148]	@ (8001db8 <MX_TIM16_Init+0xe4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d26:	4824      	ldr	r0, [pc, #144]	@ (8001db8 <MX_TIM16_Init+0xe4>)
 8001d28:	f008 f9f4 	bl	800a114 <HAL_TIM_Base_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001d32:	f000 fa81 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001d36:	4820      	ldr	r0, [pc, #128]	@ (8001db8 <MX_TIM16_Init+0xe4>)
 8001d38:	f008 fab4 	bl	800a2a4 <HAL_TIM_PWM_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001d42:	f000 fa79 	bl	8002238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d46:	2360      	movs	r3, #96	@ 0x60
 8001d48:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d52:	2300      	movs	r3, #0
 8001d54:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d62:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d66:	2200      	movs	r2, #0
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4813      	ldr	r0, [pc, #76]	@ (8001db8 <MX_TIM16_Init+0xe4>)
 8001d6c:	f008 fce6 	bl	800a73c <HAL_TIM_PWM_ConfigChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001d76:	f000 fa5f 	bl	8002238 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <MX_TIM16_Init+0xe4>)
 8001da2:	f009 fc09 	bl	800b5b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001dac:	f000 fa44 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 8001db0:	bf00      	nop
 8001db2:	3750      	adds	r7, #80	@ 0x50
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000620 	.word	0x20000620
 8001dbc:	40014400 	.word	0x40014400

08001dc0 <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b094      	sub	sp, #80	@ 0x50
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dc6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
 8001dd4:	611a      	str	r2, [r3, #16]
 8001dd6:	615a      	str	r2, [r3, #20]
 8001dd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dda:	463b      	mov	r3, r7
 8001ddc:	2234      	movs	r2, #52	@ 0x34
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f00f ffd5 	bl	8011d90 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001de6:	4b2f      	ldr	r3, [pc, #188]	@ (8001ea4 <MX_TIM17_Init+0xe4>)
 8001de8:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea8 <MX_TIM17_Init+0xe8>)
 8001dea:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001dec:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea4 <MX_TIM17_Init+0xe4>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df2:	4b2c      	ldr	r3, [pc, #176]	@ (8001ea4 <MX_TIM17_Init+0xe4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001df8:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea4 <MX_TIM17_Init+0xe4>)
 8001dfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dfe:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e00:	4b28      	ldr	r3, [pc, #160]	@ (8001ea4 <MX_TIM17_Init+0xe4>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001e06:	4b27      	ldr	r3, [pc, #156]	@ (8001ea4 <MX_TIM17_Init+0xe4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ea4 <MX_TIM17_Init+0xe4>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001e12:	4824      	ldr	r0, [pc, #144]	@ (8001ea4 <MX_TIM17_Init+0xe4>)
 8001e14:	f008 f97e 	bl	800a114 <HAL_TIM_Base_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001e1e:	f000 fa0b 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001e22:	4820      	ldr	r0, [pc, #128]	@ (8001ea4 <MX_TIM17_Init+0xe4>)
 8001e24:	f008 fa3e 	bl	800a2a4 <HAL_TIM_PWM_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001e2e:	f000 fa03 	bl	8002238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e32:	2360      	movs	r3, #96	@ 0x60
 8001e34:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e4e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e52:	2200      	movs	r2, #0
 8001e54:	4619      	mov	r1, r3
 8001e56:	4813      	ldr	r0, [pc, #76]	@ (8001ea4 <MX_TIM17_Init+0xe4>)
 8001e58:	f008 fc70 	bl	800a73c <HAL_TIM_PWM_ConfigChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001e62:	f000 f9e9 	bl	8002238 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001e88:	463b      	mov	r3, r7
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <MX_TIM17_Init+0xe4>)
 8001e8e:	f009 fb93 	bl	800b5b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001e98:	f000 f9ce 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
}
 8001e9c:	bf00      	nop
 8001e9e:	3750      	adds	r7, #80	@ 0x50
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2000066c 	.word	0x2000066c
 8001ea8:	40014800 	.word	0x40014800

08001eac <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001eb0:	4b22      	ldr	r3, [pc, #136]	@ (8001f3c <MX_UART5_Init+0x90>)
 8001eb2:	4a23      	ldr	r2, [pc, #140]	@ (8001f40 <MX_UART5_Init+0x94>)
 8001eb4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001eb6:	4b21      	ldr	r3, [pc, #132]	@ (8001f3c <MX_UART5_Init+0x90>)
 8001eb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ebc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8001f3c <MX_UART5_Init+0x90>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <MX_UART5_Init+0x90>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	@ (8001f3c <MX_UART5_Init+0x90>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <MX_UART5_Init+0x90>)
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed6:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <MX_UART5_Init+0x90>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001edc:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <MX_UART5_Init+0x90>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <MX_UART5_Init+0x90>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ee8:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <MX_UART5_Init+0x90>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eee:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <MX_UART5_Init+0x90>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ef4:	4811      	ldr	r0, [pc, #68]	@ (8001f3c <MX_UART5_Init+0x90>)
 8001ef6:	f009 fc74 	bl	800b7e2 <HAL_UART_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001f00:	f000 f99a 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f04:	2100      	movs	r1, #0
 8001f06:	480d      	ldr	r0, [pc, #52]	@ (8001f3c <MX_UART5_Init+0x90>)
 8001f08:	f00a ff23 	bl	800cd52 <HAL_UARTEx_SetTxFifoThreshold>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001f12:	f000 f991 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f16:	2100      	movs	r1, #0
 8001f18:	4808      	ldr	r0, [pc, #32]	@ (8001f3c <MX_UART5_Init+0x90>)
 8001f1a:	f00a ff58 	bl	800cdce <HAL_UARTEx_SetRxFifoThreshold>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001f24:	f000 f988 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	@ (8001f3c <MX_UART5_Init+0x90>)
 8001f2a:	f00a fed9 	bl	800cce0 <HAL_UARTEx_DisableFifoMode>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001f34:	f000 f980 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	200006b8 	.word	0x200006b8
 8001f40:	40005000 	.word	0x40005000

08001f44 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f48:	4b22      	ldr	r3, [pc, #136]	@ (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f4a:	4a23      	ldr	r2, [pc, #140]	@ (8001fd8 <MX_USART3_UART_Init+0x94>)
 8001f4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001f4e:	4b21      	ldr	r3, [pc, #132]	@ (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f50:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001f54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f56:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f62:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f68:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6e:	4b19      	ldr	r3, [pc, #100]	@ (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f74:	4b17      	ldr	r3, [pc, #92]	@ (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f7a:	4b16      	ldr	r3, [pc, #88]	@ (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f80:	4b14      	ldr	r3, [pc, #80]	@ (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f86:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f8c:	4811      	ldr	r0, [pc, #68]	@ (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f8e:	f009 fc28 	bl	800b7e2 <HAL_UART_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f98:	f000 f94e 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	480d      	ldr	r0, [pc, #52]	@ (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001fa0:	f00a fed7 	bl	800cd52 <HAL_UARTEx_SetTxFifoThreshold>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001faa:	f000 f945 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4808      	ldr	r0, [pc, #32]	@ (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001fb2:	f00a ff0c 	bl	800cdce <HAL_UARTEx_SetRxFifoThreshold>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001fbc:	f000 f93c 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001fc0:	4804      	ldr	r0, [pc, #16]	@ (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001fc2:	f00a fe8d 	bl	800cce0 <HAL_UARTEx_DisableFifoMode>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001fcc:	f000 f934 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	2000074c 	.word	0x2000074c
 8001fd8:	40004800 	.word	0x40004800

08001fdc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001fe2:	4b12      	ldr	r3, [pc, #72]	@ (800202c <MX_DMA_Init+0x50>)
 8001fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe6:	4a11      	ldr	r2, [pc, #68]	@ (800202c <MX_DMA_Init+0x50>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	6493      	str	r3, [r2, #72]	@ 0x48
 8001fee:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <MX_DMA_Init+0x50>)
 8001ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <MX_DMA_Init+0x50>)
 8001ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffe:	4a0b      	ldr	r2, [pc, #44]	@ (800202c <MX_DMA_Init+0x50>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6493      	str	r3, [r2, #72]	@ 0x48
 8002006:	4b09      	ldr	r3, [pc, #36]	@ (800202c <MX_DMA_Init+0x50>)
 8002008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	2100      	movs	r1, #0
 8002016:	200d      	movs	r0, #13
 8002018:	f003 fa10 	bl	800543c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800201c:	200d      	movs	r0, #13
 800201e:	f003 fa27 	bl	8005470 <HAL_NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000

08002030 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	@ 0x28
 8002034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
 8002044:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002046:	4b6e      	ldr	r3, [pc, #440]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204a:	4a6d      	ldr	r2, [pc, #436]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 800204c:	f043 0304 	orr.w	r3, r3, #4
 8002050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002052:	4b6b      	ldr	r3, [pc, #428]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800205e:	4b68      	ldr	r3, [pc, #416]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002062:	4a67      	ldr	r2, [pc, #412]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 8002064:	f043 0320 	orr.w	r3, r3, #32
 8002068:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800206a:	4b65      	ldr	r3, [pc, #404]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	4b62      	ldr	r3, [pc, #392]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207a:	4a61      	ldr	r2, [pc, #388]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002082:	4b5f      	ldr	r3, [pc, #380]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	4b5c      	ldr	r3, [pc, #368]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	4a5b      	ldr	r2, [pc, #364]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 8002094:	f043 0302 	orr.w	r3, r3, #2
 8002098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800209a:	4b59      	ldr	r3, [pc, #356]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020a6:	4b56      	ldr	r3, [pc, #344]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020aa:	4a55      	ldr	r2, [pc, #340]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 80020ac:	f043 0308 	orr.w	r3, r3, #8
 80020b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020b2:	4b53      	ldr	r3, [pc, #332]	@ (8002200 <MX_GPIO_Init+0x1d0>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STAT_BKUP_Pin | EN_5V_Pin | CAM1_CTRL_Pin, GPIO_PIN_RESET);
 80020be:	2200      	movs	r2, #0
 80020c0:	f242 0124 	movw	r1, #8228	@ 0x2024
 80020c4:	484f      	ldr	r0, [pc, #316]	@ (8002204 <MX_GPIO_Init+0x1d4>)
 80020c6:	f003 fea1 	bl	8005e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRV_DIR_Pin | CAM0_CTRL_Pin | XBEE_RST_Pin, GPIO_PIN_RESET);
 80020ca:	2200      	movs	r2, #0
 80020cc:	f248 0130 	movw	r1, #32816	@ 0x8030
 80020d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020d4:	f003 fe9a 	bl	8005e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_nCS_Pin | MAGEXT_nCS_Pin | MAG_nCS_Pin | BMP_nCS_Pin | GPS_RST_Pin | USR_LED_Pin, GPIO_PIN_RESET);
 80020d8:	2200      	movs	r2, #0
 80020da:	f641 41a4 	movw	r1, #7332	@ 0x1ca4
 80020de:	484a      	ldr	r0, [pc, #296]	@ (8002208 <MX_GPIO_Init+0x1d8>)
 80020e0:	f003 fe94 	bl	8005e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STAT_BKUP_Pin EN_5V_Pin CAM1_CTRL_Pin */
  GPIO_InitStruct.Pin = STAT_BKUP_Pin | EN_5V_Pin | CAM1_CTRL_Pin;
 80020e4:	f242 0324 	movw	r3, #8228	@ 0x2024
 80020e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ea:	2301      	movs	r3, #1
 80020ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4619      	mov	r1, r3
 80020fc:	4841      	ldr	r0, [pc, #260]	@ (8002204 <MX_GPIO_Init+0x1d4>)
 80020fe:	f003 fceb 	bl	8005ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_STAT2_Pin CHG_STAT1_Pin */
  GPIO_InitStruct.Pin = CHG_STAT2_Pin | CHG_STAT1_Pin;
 8002102:	2303      	movs	r3, #3
 8002104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	4619      	mov	r1, r3
 8002114:	483d      	ldr	r0, [pc, #244]	@ (800220c <MX_GPIO_Init+0x1dc>)
 8002116:	f003 fcdf 	bl	8005ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_32K_Pin */
  GPIO_InitStruct.Pin = CLK_32K_Pin;
 800211a:	2304      	movs	r3, #4
 800211c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800211e:	2303      	movs	r3, #3
 8002120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLK_32K_GPIO_Port, &GPIO_InitStruct);
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	4619      	mov	r1, r3
 800212c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002130:	f003 fcd2 	bl	8005ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRV_DIR_Pin CAM0_CTRL_Pin XBEE_RST_Pin */
  GPIO_InitStruct.Pin = DRV_DIR_Pin | CAM0_CTRL_Pin | XBEE_RST_Pin;
 8002134:	f248 0330 	movw	r3, #32816	@ 0x8030
 8002138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213a:	2301      	movs	r3, #1
 800213c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4619      	mov	r1, r3
 800214c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002150:	f003 fcc2 	bl	8005ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_nCS_Pin MAGEXT_nCS_Pin MAG_nCS_Pin BMP_nCS_Pin
                           USR_LED_Pin */
  GPIO_InitStruct.Pin = IMU_nCS_Pin | MAGEXT_nCS_Pin | MAG_nCS_Pin | BMP_nCS_Pin | USR_LED_Pin;
 8002154:	f641 4384 	movw	r3, #7300	@ 0x1c84
 8002158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215a:	2301      	movs	r3, #1
 800215c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	4619      	mov	r1, r3
 800216c:	4826      	ldr	r0, [pc, #152]	@ (8002208 <MX_GPIO_Init+0x1d8>)
 800216e:	f003 fcb3 	bl	8005ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002172:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4619      	mov	r1, r3
 800218e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002192:	f003 fca1 	bl	8005ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
 8002196:	2350      	movs	r3, #80	@ 0x50
 8002198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800219a:	2303      	movs	r3, #3
 800219c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	4619      	mov	r1, r3
 80021a8:	4817      	ldr	r0, [pc, #92]	@ (8002208 <MX_GPIO_Init+0x1d8>)
 80021aa:	f003 fc95 	bl	8005ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 80021ae:	2320      	movs	r3, #32
 80021b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021b2:	2311      	movs	r3, #17
 80021b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	4619      	mov	r1, r3
 80021c4:	4810      	ldr	r0, [pc, #64]	@ (8002208 <MX_GPIO_Init+0x1d8>)
 80021c6:	f003 fc87 	bl	8005ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80021ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_IR;
 80021dc:	2306      	movs	r3, #6
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4619      	mov	r1, r3
 80021e6:	4808      	ldr	r0, [pc, #32]	@ (8002208 <MX_GPIO_Init+0x1d8>)
 80021e8:	f003 fc76 	bl	8005ad8 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80021ec:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <MX_GPIO_Init+0x1e0>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a07      	ldr	r2, [pc, #28]	@ (8002210 <MX_GPIO_Init+0x1e0>)
 80021f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80021f6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80021f8:	bf00      	nop
 80021fa:	3728      	adds	r7, #40	@ 0x28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	48000800 	.word	0x48000800
 8002208:	48000400 	.word	0x48000400
 800220c:	48001400 	.word	0x48001400
 8002210:	40010000 	.word	0x40010000

08002214 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a04      	ldr	r2, [pc, #16]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d101      	bne.n	800222a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002226:	f001 fefd 	bl	8004024 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40001000 	.word	0x40001000

08002238 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800223c:	b672      	cpsid	i
}
 800223e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <Error_Handler+0x8>

08002244 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800224a:	f107 0308 	add.w	r3, r7, #8
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002254:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <HAL_MspInit+0x6c>)
 8002256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002258:	4a15      	ldr	r2, [pc, #84]	@ (80022b0 <HAL_MspInit+0x6c>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002260:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <HAL_MspInit+0x6c>)
 8002262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800226c:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <HAL_MspInit+0x6c>)
 800226e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002270:	4a0f      	ldr	r2, [pc, #60]	@ (80022b0 <HAL_MspInit+0x6c>)
 8002272:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002276:	6593      	str	r3, [r2, #88]	@ 0x58
 8002278:	4b0d      	ldr	r3, [pc, #52]	@ (80022b0 <HAL_MspInit+0x6c>)
 800227a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002280:	603b      	str	r3, [r7, #0]
 8002282:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800228c:	f107 0308 	add.w	r3, r7, #8
 8002290:	4618      	mov	r0, r3
 8002292:	f005 fcc3 	bl	8007c1c <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8002296:	f005 fd21 	bl	8007cdc <HAL_PWR_EnablePVD>

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800229a:	f001 ff17 	bl	80040cc <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800229e:	2002      	movs	r0, #2
 80022a0:	f001 ff00 	bl	80040a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80022a4:	f005 fdce 	bl	8007e44 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000

080022b4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b09e      	sub	sp, #120	@ 0x78
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	2250      	movs	r2, #80	@ 0x50
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f00f fd5b 	bl	8011d90 <memset>
  if(hadc->Instance==ADC1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022e2:	d133      	bne.n	800234c <HAL_ADC_MspInit+0x98>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80022e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022e8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80022ea:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80022ee:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4618      	mov	r0, r3
 80022f6:	f006 fb5b 	bl	80089b0 <HAL_RCCEx_PeriphCLKConfig>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002300:	f7ff ff9a 	bl	8002238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002304:	4b13      	ldr	r3, [pc, #76]	@ (8002354 <HAL_ADC_MspInit+0xa0>)
 8002306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002308:	4a12      	ldr	r2, [pc, #72]	@ (8002354 <HAL_ADC_MspInit+0xa0>)
 800230a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800230e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002310:	4b10      	ldr	r3, [pc, #64]	@ (8002354 <HAL_ADC_MspInit+0xa0>)
 8002312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002314:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800231c:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <HAL_ADC_MspInit+0xa0>)
 800231e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002320:	4a0c      	ldr	r2, [pc, #48]	@ (8002354 <HAL_ADC_MspInit+0xa0>)
 8002322:	f043 0304 	orr.w	r3, r3, #4
 8002326:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002328:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <HAL_ADC_MspInit+0xa0>)
 800232a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VUSB_Pin;
 8002334:	2308      	movs	r3, #8
 8002336:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002338:	2303      	movs	r3, #3
 800233a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(VUSB_GPIO_Port, &GPIO_InitStruct);
 8002340:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002344:	4619      	mov	r1, r3
 8002346:	4804      	ldr	r0, [pc, #16]	@ (8002358 <HAL_ADC_MspInit+0xa4>)
 8002348:	f003 fbc6 	bl	8005ad8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800234c:	bf00      	nop
 800234e:	3778      	adds	r7, #120	@ 0x78
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	48000800 	.word	0x48000800

0800235c <HAL_CORDIC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcordic: CORDIC handle pointer
  * @retval None
  */
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0a      	ldr	r2, [pc, #40]	@ (8002394 <HAL_CORDIC_MspInit+0x38>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d10b      	bne.n	8002386 <HAL_CORDIC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CORDIC_MspInit 0 */

    /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800236e:	4b0a      	ldr	r3, [pc, #40]	@ (8002398 <HAL_CORDIC_MspInit+0x3c>)
 8002370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002372:	4a09      	ldr	r2, [pc, #36]	@ (8002398 <HAL_CORDIC_MspInit+0x3c>)
 8002374:	f043 0308 	orr.w	r3, r3, #8
 8002378:	6493      	str	r3, [r2, #72]	@ 0x48
 800237a:	4b07      	ldr	r3, [pc, #28]	@ (8002398 <HAL_CORDIC_MspInit+0x3c>)
 800237c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40020c00 	.word	0x40020c00
 8002398:	40021000 	.word	0x40021000

0800239c <HAL_FMAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfmac: FMAC handle pointer
  * @retval None
  */
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0a      	ldr	r2, [pc, #40]	@ (80023d4 <HAL_FMAC_MspInit+0x38>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10b      	bne.n	80023c6 <HAL_FMAC_MspInit+0x2a>
  {
    /* USER CODE BEGIN FMAC_MspInit 0 */

    /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80023ae:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <HAL_FMAC_MspInit+0x3c>)
 80023b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b2:	4a09      	ldr	r2, [pc, #36]	@ (80023d8 <HAL_FMAC_MspInit+0x3c>)
 80023b4:	f043 0310 	orr.w	r3, r3, #16
 80023b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80023ba:	4b07      	ldr	r3, [pc, #28]	@ (80023d8 <HAL_FMAC_MspInit+0x3c>)
 80023bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END FMAC_MspInit 1 */

  }

}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40021400 	.word	0x40021400
 80023d8:	40021000 	.word	0x40021000

080023dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b09e      	sub	sp, #120	@ 0x78
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2250      	movs	r2, #80	@ 0x50
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f00f fcc7 	bl	8011d90 <memset>
  if(hi2c->Instance==I2C3)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a1f      	ldr	r2, [pc, #124]	@ (8002484 <HAL_I2C_MspInit+0xa8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d137      	bne.n	800247c <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800240c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002410:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002412:	2300      	movs	r3, #0
 8002414:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002416:	f107 0314 	add.w	r3, r7, #20
 800241a:	4618      	mov	r0, r3
 800241c:	f006 fac8 	bl	80089b0 <HAL_RCCEx_PeriphCLKConfig>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002426:	f7ff ff07 	bl	8002238 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800242a:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <HAL_I2C_MspInit+0xac>)
 800242c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242e:	4a16      	ldr	r2, [pc, #88]	@ (8002488 <HAL_I2C_MspInit+0xac>)
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002436:	4b14      	ldr	r3, [pc, #80]	@ (8002488 <HAL_I2C_MspInit+0xac>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002442:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002446:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002448:	2312      	movs	r3, #18
 800244a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002450:	2300      	movs	r3, #0
 8002452:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002454:	2308      	movs	r3, #8
 8002456:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002458:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800245c:	4619      	mov	r1, r3
 800245e:	480b      	ldr	r0, [pc, #44]	@ (800248c <HAL_I2C_MspInit+0xb0>)
 8002460:	f003 fb3a 	bl	8005ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002464:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <HAL_I2C_MspInit+0xac>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002468:	4a07      	ldr	r2, [pc, #28]	@ (8002488 <HAL_I2C_MspInit+0xac>)
 800246a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800246e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002470:	4b05      	ldr	r3, [pc, #20]	@ (8002488 <HAL_I2C_MspInit+0xac>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002474:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 800247c:	bf00      	nop
 800247e:	3778      	adds	r7, #120	@ 0x78
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40007800 	.word	0x40007800
 8002488:	40021000 	.word	0x40021000
 800248c:	48000800 	.word	0x48000800

08002490 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b098      	sub	sp, #96	@ 0x60
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	2250      	movs	r2, #80	@ 0x50
 800249e:	2100      	movs	r1, #0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f00f fc75 	bl	8011d90 <memset>
  if(hrng->Instance==RNG)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a11      	ldr	r2, [pc, #68]	@ (80024f0 <HAL_RNG_MspInit+0x60>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d11a      	bne.n	80024e6 <HAL_RNG_MspInit+0x56>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80024b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80024b6:	2300      	movs	r3, #0
 80024b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ba:	f107 0310 	add.w	r3, r7, #16
 80024be:	4618      	mov	r0, r3
 80024c0:	f006 fa76 	bl	80089b0 <HAL_RCCEx_PeriphCLKConfig>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_RNG_MspInit+0x3e>
    {
      Error_Handler();
 80024ca:	f7ff feb5 	bl	8002238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80024ce:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <HAL_RNG_MspInit+0x64>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d2:	4a08      	ldr	r2, [pc, #32]	@ (80024f4 <HAL_RNG_MspInit+0x64>)
 80024d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_RNG_MspInit+0x64>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 80024e6:	bf00      	nop
 80024e8:	3760      	adds	r7, #96	@ 0x60
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	50060800 	.word	0x50060800
 80024f4:	40021000 	.word	0x40021000

080024f8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b09e      	sub	sp, #120	@ 0x78
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	2250      	movs	r2, #80	@ 0x50
 8002516:	2100      	movs	r1, #0
 8002518:	4618      	mov	r0, r3
 800251a:	f00f fc39 	bl	8011d90 <memset>
  if(hrtc->Instance==RTC)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a24      	ldr	r2, [pc, #144]	@ (80025b4 <HAL_RTC_MspInit+0xbc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d140      	bne.n	80025aa <HAL_RTC_MspInit+0xb2>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002528:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800252c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800252e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002532:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	4618      	mov	r0, r3
 800253a:	f006 fa39 	bl	80089b0 <HAL_RCCEx_PeriphCLKConfig>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8002544:	f7ff fe78 	bl	8002238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002548:	4b1b      	ldr	r3, [pc, #108]	@ (80025b8 <HAL_RTC_MspInit+0xc0>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254e:	4a1a      	ldr	r2, [pc, #104]	@ (80025b8 <HAL_RTC_MspInit+0xc0>)
 8002550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002558:	4b17      	ldr	r3, [pc, #92]	@ (80025b8 <HAL_RTC_MspInit+0xc0>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255c:	4a16      	ldr	r2, [pc, #88]	@ (80025b8 <HAL_RTC_MspInit+0xc0>)
 800255e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002562:	6593      	str	r3, [r2, #88]	@ 0x58
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <HAL_RTC_MspInit+0xc0>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002570:	4b11      	ldr	r3, [pc, #68]	@ (80025b8 <HAL_RTC_MspInit+0xc0>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002574:	4a10      	ldr	r2, [pc, #64]	@ (80025b8 <HAL_RTC_MspInit+0xc0>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800257c:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <HAL_RTC_MspInit+0xc0>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PA1     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 8002588:	2302      	movs	r3, #2
 800258a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002594:	2300      	movs	r3, #0
 8002596:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 8002598:	2300      	movs	r3, #0
 800259a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 800259c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025a0:	4619      	mov	r1, r3
 80025a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025a6:	f003 fa97 	bl	8005ad8 <HAL_GPIO_Init>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80025aa:	bf00      	nop
 80025ac:	3778      	adds	r7, #120	@ 0x78
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40002800 	.word	0x40002800
 80025b8:	40021000 	.word	0x40021000

080025bc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	@ 0x28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a17      	ldr	r2, [pc, #92]	@ (8002638 <HAL_SPI_MspInit+0x7c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d128      	bne.n	8002630 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025de:	4b17      	ldr	r3, [pc, #92]	@ (800263c <HAL_SPI_MspInit+0x80>)
 80025e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e2:	4a16      	ldr	r2, [pc, #88]	@ (800263c <HAL_SPI_MspInit+0x80>)
 80025e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80025ea:	4b14      	ldr	r3, [pc, #80]	@ (800263c <HAL_SPI_MspInit+0x80>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f6:	4b11      	ldr	r3, [pc, #68]	@ (800263c <HAL_SPI_MspInit+0x80>)
 80025f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fa:	4a10      	ldr	r2, [pc, #64]	@ (800263c <HAL_SPI_MspInit+0x80>)
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002602:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <HAL_SPI_MspInit+0x80>)
 8002604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800260e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002620:	2305      	movs	r3, #5
 8002622:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	4619      	mov	r1, r3
 800262a:	4805      	ldr	r0, [pc, #20]	@ (8002640 <HAL_SPI_MspInit+0x84>)
 800262c:	f003 fa54 	bl	8005ad8 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002630:	bf00      	nop
 8002632:	3728      	adds	r7, #40	@ 0x28
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40003800 	.word	0x40003800
 800263c:	40021000 	.word	0x40021000
 8002640:	48000400 	.word	0x48000400

08002644 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08c      	sub	sp, #48	@ 0x30
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a3c      	ldr	r2, [pc, #240]	@ (8002754 <HAL_TIM_Encoder_MspInit+0x110>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d128      	bne.n	80026b8 <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002666:	4b3c      	ldr	r3, [pc, #240]	@ (8002758 <HAL_TIM_Encoder_MspInit+0x114>)
 8002668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800266a:	4a3b      	ldr	r2, [pc, #236]	@ (8002758 <HAL_TIM_Encoder_MspInit+0x114>)
 800266c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002670:	6613      	str	r3, [r2, #96]	@ 0x60
 8002672:	4b39      	ldr	r3, [pc, #228]	@ (8002758 <HAL_TIM_Encoder_MspInit+0x114>)
 8002674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002676:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800267e:	4b36      	ldr	r3, [pc, #216]	@ (8002758 <HAL_TIM_Encoder_MspInit+0x114>)
 8002680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002682:	4a35      	ldr	r2, [pc, #212]	@ (8002758 <HAL_TIM_Encoder_MspInit+0x114>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800268a:	4b33      	ldr	r3, [pc, #204]	@ (8002758 <HAL_TIM_Encoder_MspInit+0x114>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC4     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = ENC0_A_Pin|ENC0_B_Pin|ENC0_Z_Pin;
 8002696:	2313      	movs	r3, #19
 8002698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	2300      	movs	r3, #0
 80026a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80026a6:	2302      	movs	r3, #2
 80026a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026aa:	f107 031c 	add.w	r3, r7, #28
 80026ae:	4619      	mov	r1, r3
 80026b0:	482a      	ldr	r0, [pc, #168]	@ (800275c <HAL_TIM_Encoder_MspInit+0x118>)
 80026b2:	f003 fa11 	bl	8005ad8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80026b6:	e049      	b.n	800274c <HAL_TIM_Encoder_MspInit+0x108>
  else if(htim_encoder->Instance==TIM8)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a28      	ldr	r2, [pc, #160]	@ (8002760 <HAL_TIM_Encoder_MspInit+0x11c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d144      	bne.n	800274c <HAL_TIM_Encoder_MspInit+0x108>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026c2:	4b25      	ldr	r3, [pc, #148]	@ (8002758 <HAL_TIM_Encoder_MspInit+0x114>)
 80026c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c6:	4a24      	ldr	r2, [pc, #144]	@ (8002758 <HAL_TIM_Encoder_MspInit+0x114>)
 80026c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80026ce:	4b22      	ldr	r3, [pc, #136]	@ (8002758 <HAL_TIM_Encoder_MspInit+0x114>)
 80026d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026da:	4b1f      	ldr	r3, [pc, #124]	@ (8002758 <HAL_TIM_Encoder_MspInit+0x114>)
 80026dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026de:	4a1e      	ldr	r2, [pc, #120]	@ (8002758 <HAL_TIM_Encoder_MspInit+0x114>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002758 <HAL_TIM_Encoder_MspInit+0x114>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f2:	4b19      	ldr	r3, [pc, #100]	@ (8002758 <HAL_TIM_Encoder_MspInit+0x114>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f6:	4a18      	ldr	r2, [pc, #96]	@ (8002758 <HAL_TIM_Encoder_MspInit+0x114>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026fe:	4b16      	ldr	r3, [pc, #88]	@ (8002758 <HAL_TIM_Encoder_MspInit+0x114>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC1_Z_Pin;
 800270a:	2301      	movs	r3, #1
 800270c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	2300      	movs	r3, #0
 8002718:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800271a:	230a      	movs	r3, #10
 800271c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ENC1_Z_GPIO_Port, &GPIO_InitStruct);
 800271e:	f107 031c 	add.w	r3, r7, #28
 8002722:	4619      	mov	r1, r3
 8002724:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002728:	f003 f9d6 	bl	8005ad8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 800272c:	23c0      	movs	r3, #192	@ 0xc0
 800272e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002738:	2300      	movs	r3, #0
 800273a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800273c:	2304      	movs	r3, #4
 800273e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002740:	f107 031c 	add.w	r3, r7, #28
 8002744:	4619      	mov	r1, r3
 8002746:	4805      	ldr	r0, [pc, #20]	@ (800275c <HAL_TIM_Encoder_MspInit+0x118>)
 8002748:	f003 f9c6 	bl	8005ad8 <HAL_GPIO_Init>
}
 800274c:	bf00      	nop
 800274e:	3730      	adds	r7, #48	@ 0x30
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40012c00 	.word	0x40012c00
 8002758:	40021000 	.word	0x40021000
 800275c:	48000800 	.word	0x48000800
 8002760:	40013400 	.word	0x40013400

08002764 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1c      	ldr	r2, [pc, #112]	@ (80027e4 <HAL_TIM_Base_MspInit+0x80>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d10c      	bne.n	8002790 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002776:	4b1c      	ldr	r3, [pc, #112]	@ (80027e8 <HAL_TIM_Base_MspInit+0x84>)
 8002778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277a:	4a1b      	ldr	r2, [pc, #108]	@ (80027e8 <HAL_TIM_Base_MspInit+0x84>)
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	6593      	str	r3, [r2, #88]	@ 0x58
 8002782:	4b19      	ldr	r3, [pc, #100]	@ (80027e8 <HAL_TIM_Base_MspInit+0x84>)
 8002784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 800278e:	e022      	b.n	80027d6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a15      	ldr	r2, [pc, #84]	@ (80027ec <HAL_TIM_Base_MspInit+0x88>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10c      	bne.n	80027b4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800279a:	4b13      	ldr	r3, [pc, #76]	@ (80027e8 <HAL_TIM_Base_MspInit+0x84>)
 800279c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800279e:	4a12      	ldr	r2, [pc, #72]	@ (80027e8 <HAL_TIM_Base_MspInit+0x84>)
 80027a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80027a6:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <HAL_TIM_Base_MspInit+0x84>)
 80027a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]
}
 80027b2:	e010      	b.n	80027d6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM17)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0d      	ldr	r2, [pc, #52]	@ (80027f0 <HAL_TIM_Base_MspInit+0x8c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d10b      	bne.n	80027d6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80027be:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <HAL_TIM_Base_MspInit+0x84>)
 80027c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027c2:	4a09      	ldr	r2, [pc, #36]	@ (80027e8 <HAL_TIM_Base_MspInit+0x84>)
 80027c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80027ca:	4b07      	ldr	r3, [pc, #28]	@ (80027e8 <HAL_TIM_Base_MspInit+0x84>)
 80027cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
}
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40014400 	.word	0x40014400
 80027f0:	40014800 	.word	0x40014800

080027f4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0a      	ldr	r2, [pc, #40]	@ (800282c <HAL_TIM_PWM_MspInit+0x38>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d10b      	bne.n	800281e <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM15_MspInit 0 */

    /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002806:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <HAL_TIM_PWM_MspInit+0x3c>)
 8002808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800280a:	4a09      	ldr	r2, [pc, #36]	@ (8002830 <HAL_TIM_PWM_MspInit+0x3c>)
 800280c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002810:	6613      	str	r3, [r2, #96]	@ 0x60
 8002812:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <HAL_TIM_PWM_MspInit+0x3c>)
 8002814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002816:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM15_MspInit 1 */

  }

}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40014000 	.word	0x40014000
 8002830:	40021000 	.word	0x40021000

08002834 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	@ 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a31      	ldr	r2, [pc, #196]	@ (8002918 <HAL_TIM_MspPostInit+0xe4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d139      	bne.n	80028ca <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002856:	4b31      	ldr	r3, [pc, #196]	@ (800291c <HAL_TIM_MspPostInit+0xe8>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285a:	4a30      	ldr	r2, [pc, #192]	@ (800291c <HAL_TIM_MspPostInit+0xe8>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002862:	4b2e      	ldr	r3, [pc, #184]	@ (800291c <HAL_TIM_MspPostInit+0xe8>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286e:	4b2b      	ldr	r3, [pc, #172]	@ (800291c <HAL_TIM_MspPostInit+0xe8>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002872:	4a2a      	ldr	r2, [pc, #168]	@ (800291c <HAL_TIM_MspPostInit+0xe8>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800287a:	4b28      	ldr	r3, [pc, #160]	@ (800291c <HAL_TIM_MspPostInit+0xe8>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = SERVO_PWM0_Pin|SERVO_PWM1_Pin;
 8002886:	23c0      	movs	r3, #192	@ 0xc0
 8002888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	2302      	movs	r3, #2
 800288c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002892:	2300      	movs	r3, #0
 8002894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002896:	2302      	movs	r3, #2
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	4619      	mov	r1, r3
 80028a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028a4:	f003 f918 	bl	8005ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO_PWM2_Pin|SERVO_PWM3_Pin;
 80028a8:	2303      	movs	r3, #3
 80028aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028b8:	2302      	movs	r3, #2
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	4619      	mov	r1, r3
 80028c2:	4817      	ldr	r0, [pc, #92]	@ (8002920 <HAL_TIM_MspPostInit+0xec>)
 80028c4:	f003 f908 	bl	8005ad8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80028c8:	e021      	b.n	800290e <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM15)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a15      	ldr	r2, [pc, #84]	@ (8002924 <HAL_TIM_MspPostInit+0xf0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d11c      	bne.n	800290e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d4:	4b11      	ldr	r3, [pc, #68]	@ (800291c <HAL_TIM_MspPostInit+0xe8>)
 80028d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d8:	4a10      	ldr	r2, [pc, #64]	@ (800291c <HAL_TIM_MspPostInit+0xe8>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028e0:	4b0e      	ldr	r3, [pc, #56]	@ (800291c <HAL_TIM_MspPostInit+0xe8>)
 80028e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DRV_PWM_Pin;
 80028ec:	2308      	movs	r3, #8
 80028ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80028fc:	2309      	movs	r3, #9
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DRV_PWM_GPIO_Port, &GPIO_InitStruct);
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	4619      	mov	r1, r3
 8002906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800290a:	f003 f8e5 	bl	8005ad8 <HAL_GPIO_Init>
}
 800290e:	bf00      	nop
 8002910:	3728      	adds	r7, #40	@ 0x28
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40000400 	.word	0x40000400
 800291c:	40021000 	.word	0x40021000
 8002920:	48000400 	.word	0x48000400
 8002924:	40014000 	.word	0x40014000

08002928 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b0a0      	sub	sp, #128	@ 0x80
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002940:	f107 031c 	add.w	r3, r7, #28
 8002944:	2250      	movs	r2, #80	@ 0x50
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f00f fa21 	bl	8011d90 <memset>
  if(huart->Instance==UART5)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a64      	ldr	r2, [pc, #400]	@ (8002ae4 <HAL_UART_MspInit+0x1bc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d153      	bne.n	8002a00 <HAL_UART_MspInit+0xd8>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002958:	2310      	movs	r3, #16
 800295a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800295c:	2300      	movs	r3, #0
 800295e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	4618      	mov	r0, r3
 8002966:	f006 f823 	bl	80089b0 <HAL_RCCEx_PeriphCLKConfig>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002970:	f7ff fc62 	bl	8002238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002974:	4b5c      	ldr	r3, [pc, #368]	@ (8002ae8 <HAL_UART_MspInit+0x1c0>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002978:	4a5b      	ldr	r2, [pc, #364]	@ (8002ae8 <HAL_UART_MspInit+0x1c0>)
 800297a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800297e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002980:	4b59      	ldr	r3, [pc, #356]	@ (8002ae8 <HAL_UART_MspInit+0x1c0>)
 8002982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800298c:	4b56      	ldr	r3, [pc, #344]	@ (8002ae8 <HAL_UART_MspInit+0x1c0>)
 800298e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002990:	4a55      	ldr	r2, [pc, #340]	@ (8002ae8 <HAL_UART_MspInit+0x1c0>)
 8002992:	f043 0304 	orr.w	r3, r3, #4
 8002996:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002998:	4b53      	ldr	r3, [pc, #332]	@ (8002ae8 <HAL_UART_MspInit+0x1c0>)
 800299a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a4:	4b50      	ldr	r3, [pc, #320]	@ (8002ae8 <HAL_UART_MspInit+0x1c0>)
 80029a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a8:	4a4f      	ldr	r2, [pc, #316]	@ (8002ae8 <HAL_UART_MspInit+0x1c0>)
 80029aa:	f043 0308 	orr.w	r3, r3, #8
 80029ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029b0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ae8 <HAL_UART_MspInit+0x1c0>)
 80029b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 80029bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	2300      	movs	r3, #0
 80029cc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80029ce:	2305      	movs	r3, #5
 80029d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 80029d2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80029d6:	4619      	mov	r1, r3
 80029d8:	4844      	ldr	r0, [pc, #272]	@ (8002aec <HAL_UART_MspInit+0x1c4>)
 80029da:	f003 f87d 	bl	8005ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 80029de:	2304      	movs	r3, #4
 80029e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ea:	2300      	movs	r3, #0
 80029ec:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80029ee:	2305      	movs	r3, #5
 80029f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 80029f2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80029f6:	4619      	mov	r1, r3
 80029f8:	483d      	ldr	r0, [pc, #244]	@ (8002af0 <HAL_UART_MspInit+0x1c8>)
 80029fa:	f003 f86d 	bl	8005ad8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80029fe:	e06c      	b.n	8002ada <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a3b      	ldr	r2, [pc, #236]	@ (8002af4 <HAL_UART_MspInit+0x1cc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d167      	bne.n	8002ada <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a12:	f107 031c 	add.w	r3, r7, #28
 8002a16:	4618      	mov	r0, r3
 8002a18:	f005 ffca 	bl	80089b0 <HAL_RCCEx_PeriphCLKConfig>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8002a22:	f7ff fc09 	bl	8002238 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a26:	4b30      	ldr	r3, [pc, #192]	@ (8002ae8 <HAL_UART_MspInit+0x1c0>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2a:	4a2f      	ldr	r2, [pc, #188]	@ (8002ae8 <HAL_UART_MspInit+0x1c0>)
 8002a2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a30:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a32:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae8 <HAL_UART_MspInit+0x1c0>)
 8002a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae8 <HAL_UART_MspInit+0x1c0>)
 8002a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a42:	4a29      	ldr	r2, [pc, #164]	@ (8002ae8 <HAL_UART_MspInit+0x1c0>)
 8002a44:	f043 0304 	orr.w	r3, r3, #4
 8002a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a4a:	4b27      	ldr	r3, [pc, #156]	@ (8002ae8 <HAL_UART_MspInit+0x1c0>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a56:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a64:	2300      	movs	r3, #0
 8002a66:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a68:	2307      	movs	r3, #7
 8002a6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002a70:	4619      	mov	r1, r3
 8002a72:	481e      	ldr	r0, [pc, #120]	@ (8002aec <HAL_UART_MspInit+0x1c4>)
 8002a74:	f003 f830 	bl	8005ad8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel3;
 8002a78:	4b1f      	ldr	r3, [pc, #124]	@ (8002af8 <HAL_UART_MspInit+0x1d0>)
 8002a7a:	4a20      	ldr	r2, [pc, #128]	@ (8002afc <HAL_UART_MspInit+0x1d4>)
 8002a7c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002af8 <HAL_UART_MspInit+0x1d0>)
 8002a80:	221d      	movs	r2, #29
 8002a82:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a84:	4b1c      	ldr	r3, [pc, #112]	@ (8002af8 <HAL_UART_MspInit+0x1d0>)
 8002a86:	2210      	movs	r2, #16
 8002a88:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002af8 <HAL_UART_MspInit+0x1d0>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a90:	4b19      	ldr	r3, [pc, #100]	@ (8002af8 <HAL_UART_MspInit+0x1d0>)
 8002a92:	2280      	movs	r2, #128	@ 0x80
 8002a94:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a96:	4b18      	ldr	r3, [pc, #96]	@ (8002af8 <HAL_UART_MspInit+0x1d0>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a9c:	4b16      	ldr	r3, [pc, #88]	@ (8002af8 <HAL_UART_MspInit+0x1d0>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002aa2:	4b15      	ldr	r3, [pc, #84]	@ (8002af8 <HAL_UART_MspInit+0x1d0>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002aa8:	4b13      	ldr	r3, [pc, #76]	@ (8002af8 <HAL_UART_MspInit+0x1d0>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002aae:	4812      	ldr	r0, [pc, #72]	@ (8002af8 <HAL_UART_MspInit+0x1d0>)
 8002ab0:	f002 fcec 	bl	800548c <HAL_DMA_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_UART_MspInit+0x196>
      Error_Handler();
 8002aba:	f7ff fbbd 	bl	8002238 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8002af8 <HAL_UART_MspInit+0x1d0>)
 8002ac2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8002af8 <HAL_UART_MspInit+0x1d0>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	210e      	movs	r1, #14
 8002ace:	2027      	movs	r0, #39	@ 0x27
 8002ad0:	f002 fcb4 	bl	800543c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ad4:	2027      	movs	r0, #39	@ 0x27
 8002ad6:	f002 fccb 	bl	8005470 <HAL_NVIC_EnableIRQ>
}
 8002ada:	bf00      	nop
 8002adc:	3780      	adds	r7, #128	@ 0x80
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40005000 	.word	0x40005000
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	48000800 	.word	0x48000800
 8002af0:	48000c00 	.word	0x48000c00
 8002af4:	40004800 	.word	0x40004800
 8002af8:	200007e0 	.word	0x200007e0
 8002afc:	40020030 	.word	0x40020030

08002b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08c      	sub	sp, #48	@ 0x30
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b10:	4b2c      	ldr	r3, [pc, #176]	@ (8002bc4 <HAL_InitTick+0xc4>)
 8002b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b14:	4a2b      	ldr	r2, [pc, #172]	@ (8002bc4 <HAL_InitTick+0xc4>)
 8002b16:	f043 0310 	orr.w	r3, r3, #16
 8002b1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b1c:	4b29      	ldr	r3, [pc, #164]	@ (8002bc4 <HAL_InitTick+0xc4>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b28:	f107 020c 	add.w	r2, r7, #12
 8002b2c:	f107 0310 	add.w	r3, r7, #16
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f005 fec4 	bl	80088c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b38:	f005 fe96 	bl	8008868 <HAL_RCC_GetPCLK1Freq>
 8002b3c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b40:	4a21      	ldr	r2, [pc, #132]	@ (8002bc8 <HAL_InitTick+0xc8>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	0c9b      	lsrs	r3, r3, #18
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bcc <HAL_InitTick+0xcc>)
 8002b4e:	4a20      	ldr	r2, [pc, #128]	@ (8002bd0 <HAL_InitTick+0xd0>)
 8002b50:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002b52:	4b1e      	ldr	r3, [pc, #120]	@ (8002bcc <HAL_InitTick+0xcc>)
 8002b54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b58:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002bcc <HAL_InitTick+0xcc>)
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b60:	4b1a      	ldr	r3, [pc, #104]	@ (8002bcc <HAL_InitTick+0xcc>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b66:	4b19      	ldr	r3, [pc, #100]	@ (8002bcc <HAL_InitTick+0xcc>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002b6c:	4817      	ldr	r0, [pc, #92]	@ (8002bcc <HAL_InitTick+0xcc>)
 8002b6e:	f007 fad1 	bl	800a114 <HAL_TIM_Base_Init>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002b78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11b      	bne.n	8002bb8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002b80:	4812      	ldr	r0, [pc, #72]	@ (8002bcc <HAL_InitTick+0xcc>)
 8002b82:	f007 fb1f 	bl	800a1c4 <HAL_TIM_Base_Start_IT>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d111      	bne.n	8002bb8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b94:	2036      	movs	r0, #54	@ 0x36
 8002b96:	f002 fc6b 	bl	8005470 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b0f      	cmp	r3, #15
 8002b9e:	d808      	bhi.n	8002bb2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	2036      	movs	r0, #54	@ 0x36
 8002ba6:	f002 fc49 	bl	800543c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002baa:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd4 <HAL_InitTick+0xd4>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	e002      	b.n	8002bb8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002bb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3730      	adds	r7, #48	@ 0x30
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	431bde83 	.word	0x431bde83
 8002bcc:	20000840 	.word	0x20000840
 8002bd0:	40001000 	.word	0x40001000
 8002bd4:	20000004 	.word	0x20000004

08002bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <NMI_Handler+0x4>

08002be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002be4:	bf00      	nop
 8002be6:	e7fd      	b.n	8002be4 <HardFault_Handler+0x4>

08002be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bec:	bf00      	nop
 8002bee:	e7fd      	b.n	8002bec <MemManage_Handler+0x4>

08002bf0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bf4:	bf00      	nop
 8002bf6:	e7fd      	b.n	8002bf4 <BusFault_Handler+0x4>

08002bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <UsageFault_Handler+0x4>

08002c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002c3c:	4802      	ldr	r0, [pc, #8]	@ (8002c48 <DMA1_Channel3_IRQHandler+0x10>)
 8002c3e:	f002 fd8d 	bl	800575c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	200007e0 	.word	0x200007e0

08002c4c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c50:	4802      	ldr	r0, [pc, #8]	@ (8002c5c <USB_LP_IRQHandler+0x10>)
 8002c52:	f003 fb37 	bl	80062c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000eb4 	.word	0x20000eb4

08002c60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c64:	4802      	ldr	r0, [pc, #8]	@ (8002c70 <USART3_IRQHandler+0x10>)
 8002c66:	f008 ff63 	bl	800bb30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	2000074c 	.word	0x2000074c

08002c74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c78:	4802      	ldr	r0, [pc, #8]	@ (8002c84 <TIM6_DAC_IRQHandler+0x10>)
 8002c7a:	f007 fc10 	bl	800a49e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000840 	.word	0x20000840

08002c88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return 1;
 8002c8c:	2301      	movs	r3, #1
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_kill>:

int _kill(int pid, int sig)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ca2:	f00f f891 	bl	8011dc8 <__errno>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2216      	movs	r2, #22
 8002caa:	601a      	str	r2, [r3, #0]
  return -1;
 8002cac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_exit>:

void _exit (int status)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff ffe7 	bl	8002c98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cca:	bf00      	nop
 8002ccc:	e7fd      	b.n	8002cca <_exit+0x12>

08002cce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e00a      	b.n	8002cf6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ce0:	f3af 8000 	nop.w
 8002ce4:	4601      	mov	r1, r0
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	60ba      	str	r2, [r7, #8]
 8002cec:	b2ca      	uxtb	r2, r1
 8002cee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	dbf0      	blt.n	8002ce0 <_read+0x12>
  }

  return len;
 8002cfe:	687b      	ldr	r3, [r7, #4]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d30:	605a      	str	r2, [r3, #4]
  return 0;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <_isatty>:

int _isatty(int file)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d48:	2301      	movs	r3, #1
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b085      	sub	sp, #20
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d78:	4a14      	ldr	r2, [pc, #80]	@ (8002dcc <_sbrk+0x5c>)
 8002d7a:	4b15      	ldr	r3, [pc, #84]	@ (8002dd0 <_sbrk+0x60>)
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d84:	4b13      	ldr	r3, [pc, #76]	@ (8002dd4 <_sbrk+0x64>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d8c:	4b11      	ldr	r3, [pc, #68]	@ (8002dd4 <_sbrk+0x64>)
 8002d8e:	4a12      	ldr	r2, [pc, #72]	@ (8002dd8 <_sbrk+0x68>)
 8002d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d92:	4b10      	ldr	r3, [pc, #64]	@ (8002dd4 <_sbrk+0x64>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d207      	bcs.n	8002db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da0:	f00f f812 	bl	8011dc8 <__errno>
 8002da4:	4603      	mov	r3, r0
 8002da6:	220c      	movs	r2, #12
 8002da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dae:	e009      	b.n	8002dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db0:	4b08      	ldr	r3, [pc, #32]	@ (8002dd4 <_sbrk+0x64>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002db6:	4b07      	ldr	r3, [pc, #28]	@ (8002dd4 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	4a05      	ldr	r2, [pc, #20]	@ (8002dd4 <_sbrk+0x64>)
 8002dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	2001c000 	.word	0x2001c000
 8002dd0:	00000600 	.word	0x00000600
 8002dd4:	2000088c 	.word	0x2000088c
 8002dd8:	200016f8 	.word	0x200016f8

08002ddc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002de0:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <SystemInit+0x20>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de6:	4a05      	ldr	r2, [pc, #20]	@ (8002dfc <SystemInit+0x20>)
 8002de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e00:	480d      	ldr	r0, [pc, #52]	@ (8002e38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e04:	f7ff ffea 	bl	8002ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e08:	480c      	ldr	r0, [pc, #48]	@ (8002e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8002e0a:	490d      	ldr	r1, [pc, #52]	@ (8002e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e44 <LoopForever+0xe>)
  movs r3, #0
 8002e0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002e10:	e002      	b.n	8002e18 <LoopCopyDataInit>

08002e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e16:	3304      	adds	r3, #4

08002e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e1c:	d3f9      	bcc.n	8002e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e20:	4c0a      	ldr	r4, [pc, #40]	@ (8002e4c <LoopForever+0x16>)
  movs r3, #0
 8002e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e24:	e001      	b.n	8002e2a <LoopFillZerobss>

08002e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e28:	3204      	adds	r2, #4

08002e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e2c:	d3fb      	bcc.n	8002e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e2e:	f00e ffd1 	bl	8011dd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e32:	f7fe f925 	bl	8001080 <main>

08002e36 <LoopForever>:

LoopForever:
    b LoopForever
 8002e36:	e7fe      	b.n	8002e36 <LoopForever>
  ldr   r0, =_estack
 8002e38:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e40:	200002a8 	.word	0x200002a8
  ldr r2, =_sidata
 8002e44:	0801440c 	.word	0x0801440c
  ldr r2, =_sbss
 8002e48:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 8002e4c:	200016f8 	.word	0x200016f8

08002e50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e50:	e7fe      	b.n	8002e50 <ADC1_2_IRQHandler>

08002e52 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d105      	bne.n	8002e6c <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e60:	b672      	cpsid	i
}
 8002e62:	bf00      	nop
 8002e64:	f7ff f9e8 	bl	8002238 <Error_Handler>
 8002e68:	bf00      	nop
 8002e6a:	e7fd      	b.n	8002e68 <stm32_lock_init+0x16>
  lock->flag = 0;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	705a      	strb	r2, [r3, #1]
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e88:	f3ef 8310 	mrs	r3, PRIMASK
 8002e8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e8e:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e98:	b672      	cpsid	i
}
 8002e9a:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e9c:	f3bf 8f4f 	dsb	sy
}
 8002ea0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ea2:	f3bf 8f6f 	isb	sy
}
 8002ea6:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d105      	bne.n	8002eba <stm32_lock_acquire+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002eae:	b672      	cpsid	i
}
 8002eb0:	bf00      	nop
 8002eb2:	f7ff f9c1 	bl	8002238 <Error_Handler>
 8002eb6:	bf00      	nop
 8002eb8:	e7fd      	b.n	8002eb6 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	785b      	ldrb	r3, [r3, #1]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d103      	bne.n	8002eca <stm32_lock_acquire+0x4a>
  {
    lock->flag = flag;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	e009      	b.n	8002ede <stm32_lock_acquire+0x5e>
  }
  else if (lock->counter == UINT8_MAX)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	785b      	ldrb	r3, [r3, #1]
 8002ece:	2bff      	cmp	r3, #255	@ 0xff
 8002ed0:	d105      	bne.n	8002ede <stm32_lock_acquire+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed2:	b672      	cpsid	i
}
 8002ed4:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8002ed6:	f7ff f9af 	bl	8002238 <Error_Handler>
 8002eda:	bf00      	nop
 8002edc:	e7fd      	b.n	8002eda <stm32_lock_acquire+0x5a>
  }
  lock->counter++;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	785b      	ldrb	r3, [r3, #1]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	705a      	strb	r2, [r3, #1]
}
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d105      	bne.n	8002f0c <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f00:	b672      	cpsid	i
}
 8002f02:	bf00      	nop
 8002f04:	f7ff f998 	bl	8002238 <Error_Handler>
 8002f08:	bf00      	nop
 8002f0a:	e7fd      	b.n	8002f08 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	785b      	ldrb	r3, [r3, #1]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <stm32_lock_release+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f14:	b672      	cpsid	i
}
 8002f16:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8002f18:	f7ff f98e 	bl	8002238 <Error_Handler>
 8002f1c:	bf00      	nop
 8002f1e:	e7fd      	b.n	8002f1c <stm32_lock_release+0x2a>
  }
  lock->counter--;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	785b      	ldrb	r3, [r3, #1]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	785b      	ldrb	r3, [r3, #1]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d105      	bne.n	8002f40 <stm32_lock_release+0x4e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <stm32_lock_release+0x4e>
  __ASM volatile ("cpsie i" : : : "memory");
 8002f3c:	b662      	cpsie	i
}
 8002f3e:	bf00      	nop
  {
    __enable_irq();
  }
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d105      	bne.n	8002f62 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8002f56:	f00e ff37 	bl	8011dc8 <__errno>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2216      	movs	r2, #22
 8002f5e:	601a      	str	r2, [r3, #0]
    return;
 8002f60:	e016      	b.n	8002f90 <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002f62:	2002      	movs	r0, #2
 8002f64:	f00e fbb0 	bl	80116c8 <malloc>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff68 	bl	8002e52 <stm32_lock_init>
    return;
 8002f82:	e005      	b.n	8002f90 <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f84:	b672      	cpsid	i
}
 8002f86:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002f88:	f7ff f956 	bl	8002238 <Error_Handler>
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <__retarget_lock_init_recursive+0x44>
}
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d105      	bne.n	8002fb0 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa4:	b672      	cpsid	i
}
 8002fa6:	bf00      	nop
 8002fa8:	f7ff f946 	bl	8002238 <Error_Handler>
 8002fac:	bf00      	nop
 8002fae:	e7fd      	b.n	8002fac <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff ff64 	bl	8002e80 <stm32_lock_acquire>
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d105      	bne.n	8002fda <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002fce:	b672      	cpsid	i
}
 8002fd0:	bf00      	nop
 8002fd2:	f7ff f931 	bl	8002238 <Error_Handler>
 8002fd6:	bf00      	nop
 8002fd8:	e7fd      	b.n	8002fd6 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff88 	bl	8002ef2 <stm32_lock_release>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <BMM150_enable_chip_select>:
	GPIO_TypeDef* chip_select_port;
	uint16_t chip_select_pin;
};

void BMM150_enable_chip_select(GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(cs_port, cs_gpio_pin, GPIO_PIN_RESET);
 8002ff6:	887b      	ldrh	r3, [r7, #2]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f002 ff05 	bl	8005e0c <HAL_GPIO_WritePin>
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <BMM150_disable_chip_select>:

void BMM150_disable_chip_select(GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(cs_port, cs_gpio_pin, GPIO_PIN_SET);
 8003016:	887b      	ldrh	r3, [r7, #2]
 8003018:	2201      	movs	r2, #1
 800301a:	4619      	mov	r1, r3
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f002 fef5 	bl	8005e0c <HAL_GPIO_WritePin>
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <BMM150_SPI_read>:
	osDelay(period_in_micro_s / tick_amount);
}
*/

BMM150_INTF_RET_TYPE BMM150_SPI_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af00      	add	r7, sp, #0
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	4603      	mov	r3, r0
 8003038:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	75fb      	strb	r3, [r7, #23]
	struct spi_interface *spi = (struct spi_interface *)intf_ptr;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	613b      	str	r3, [r7, #16]

	BMM150_enable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	891b      	ldrh	r3, [r3, #8]
 800304a:	4619      	mov	r1, r3
 800304c:	4610      	mov	r0, r2
 800304e:	f7ff ffcc 	bl	8002fea <BMM150_enable_chip_select>

	status = HAL_SPI_Transmit(spi->spi_handle, reg_addr, sizeof(reg_addr), BMM150_TIMEOUT_DURATION);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	4619      	mov	r1, r3
 800305a:	230a      	movs	r3, #10
 800305c:	2201      	movs	r2, #1
 800305e:	f006 f9cf 	bl	8009400 <HAL_SPI_Transmit>
 8003062:	4603      	mov	r3, r0
 8003064:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(spi->spi_handle, reg_data, length, BMM150_TIMEOUT_DURATION);
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	b29a      	uxth	r2, r3
 800306e:	230a      	movs	r3, #10
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	f006 fb3b 	bl	80096ec <HAL_SPI_Receive>
 8003076:	4603      	mov	r3, r0
 8003078:	75fb      	strb	r3, [r7, #23]

	BMM150_disable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	891b      	ldrh	r3, [r3, #8]
 8003082:	4619      	mov	r1, r3
 8003084:	4610      	mov	r0, r2
 8003086:	f7ff ffc0 	bl	800300a <BMM150_disable_chip_select>


	return (BMM150_INTF_RET_TYPE)status;
 800308a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <BMM150_SPI_write>:

BMM150_INTF_RET_TYPE BMM150_SPI_write(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b086      	sub	sp, #24
 800309a:	af00      	add	r7, sp, #0
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	4603      	mov	r3, r0
 80030a4:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	75fb      	strb	r3, [r7, #23]
	struct spi_interface *spi = (struct spi_interface *)intf_ptr;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	613b      	str	r3, [r7, #16]

	BMM150_enable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	891b      	ldrh	r3, [r3, #8]
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f7ff ff96 	bl	8002fea <BMM150_enable_chip_select>

	status = HAL_SPI_Transmit(spi->spi_handle, reg_addr, sizeof(reg_addr), BMM150_TIMEOUT_DURATION);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	4619      	mov	r1, r3
 80030c6:	230a      	movs	r3, #10
 80030c8:	2201      	movs	r2, #1
 80030ca:	f006 f999 	bl	8009400 <HAL_SPI_Transmit>
 80030ce:	4603      	mov	r3, r0
 80030d0:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Transmit(spi->spi_handle, reg_data, length, BMM150_TIMEOUT_DURATION);
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	b29a      	uxth	r2, r3
 80030da:	230a      	movs	r3, #10
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	f006 f98f 	bl	8009400 <HAL_SPI_Transmit>
 80030e2:	4603      	mov	r3, r0
 80030e4:	75fb      	strb	r3, [r7, #23]

	BMM150_disable_chip_select(spi->chip_select_port, spi->chip_select_pin);
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	891b      	ldrh	r3, [r3, #8]
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f7ff ff8a 	bl	800300a <BMM150_disable_chip_select>

	return (BMM150_INTF_RET_TYPE)status;
 80030f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <BMM150_spi_init>:

struct bmm150_dev BMM150_spi_init(SPI_HandleTypeDef *spi_handle, GPIO_TypeDef* cs_port, uint16_t cs_gpio_pin)
{
 8003104:	b5b0      	push	{r4, r5, r7, lr}
 8003106:	b09e      	sub	sp, #120	@ 0x78
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	807b      	strh	r3, [r7, #2]
	struct bmm150_dev bmm150 = (struct bmm150_dev){ 0 };
 8003112:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003116:	222c      	movs	r2, #44	@ 0x2c
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f00e fe38 	bl	8011d90 <memset>

	if (spi_handle == NULL)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10f      	bne.n	8003146 <BMM150_spi_init+0x42>
	{
		bmm150.intf_rslt = BMM150_E_NULL_PTR;
 8003126:	23ff      	movs	r3, #255	@ 0xff
 8003128:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		return bmm150;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	461d      	mov	r5, r3
 8003130:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8003134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800313a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800313c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003140:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003144:	e026      	b.n	8003194 <BMM150_spi_init+0x90>
	}

	struct spi_interface my_spi = {
 8003146:	f107 0308 	add.w	r3, r7, #8
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	1d3b      	adds	r3, r7, #4
 800314e:	61bb      	str	r3, [r7, #24]
 8003150:	887b      	ldrh	r3, [r7, #2]
 8003152:	83bb      	strh	r3, [r7, #28]
		.spi_handle = &spi_handle,
		.chip_select_port = &cs_port,
		.chip_select_pin = cs_gpio_pin
	};

	bmm150.intf = BMM150_SPI_INTF;
 8003154:	2300      	movs	r3, #0
 8003156:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	bmm150.read = BMM150_SPI_read;
 800315a:	4b10      	ldr	r3, [pc, #64]	@ (800319c <BMM150_spi_init+0x98>)
 800315c:	65bb      	str	r3, [r7, #88]	@ 0x58
	bmm150.write = BMM150_SPI_write;
 800315e:	4b10      	ldr	r3, [pc, #64]	@ (80031a0 <BMM150_spi_init+0x9c>)
 8003160:	65fb      	str	r3, [r7, #92]	@ 0x5c
	bmm150.delay_us = HAL_Delay;
 8003162:	4b10      	ldr	r3, [pc, #64]	@ (80031a4 <BMM150_spi_init+0xa0>)
 8003164:	663b      	str	r3, [r7, #96]	@ 0x60
	bmm150.intf_ptr = &my_spi;
 8003166:	f107 0314 	add.w	r3, r7, #20
 800316a:	653b      	str	r3, [r7, #80]	@ 0x50

	//NOTE: Potential error: is chip id initialized properly?
	bmm150.intf_rslt = bmm150_init(&bmm150);
 800316c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003170:	4618      	mov	r0, r3
 8003172:	f000 f819 	bl	80031a8 <bmm150_init>
 8003176:	4603      	mov	r3, r0
 8003178:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	return bmm150;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	461d      	mov	r5, r3
 8003180:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8003184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800318a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800318c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003190:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	3778      	adds	r7, #120	@ 0x78
 8003198:	46bd      	mov	sp, r7
 800319a:	bdb0      	pop	{r4, r5, r7, pc}
 800319c:	0800302b 	.word	0x0800302b
 80031a0:	08003097 	.word	0x08003097
 80031a4:	08004061 	.word	0x08004061

080031a8 <bmm150_init>:
 *  @brief This API is the entry point, Call this API before using other APIs.
 *  This API reads the chip-id of the sensor which is the first step to
 *  verify the sensor and updates the trim parameters of the sensor.
 */
int8_t bmm150_init(struct bmm150_dev *dev)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	73bb      	strb	r3, [r7, #14]

    /* Power up the sensor from suspend to sleep mode */
    rslt = set_power_control_bit(BMM150_POWER_CNTRL_ENABLE, dev);
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	2001      	movs	r0, #1
 80031b8:	f000 f8ac 	bl	8003314 <set_power_control_bit>
 80031bc:	4603      	mov	r3, r0
 80031be:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 80031c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d11e      	bne.n	8003206 <bmm150_init+0x5e>
    {
        /* Start-up time delay of 3ms */
        dev->delay_us(BMM150_START_UP_TIME, dev->intf_ptr);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6852      	ldr	r2, [r2, #4]
 80031d0:	4611      	mov	r1, r2
 80031d2:	2003      	movs	r0, #3
 80031d4:	4798      	blx	r3

        /* Chip ID of the sensor is read */
        rslt = bmm150_get_regs(BMM150_REG_CHIP_ID, &chip_id, 1, dev);
 80031d6:	f107 010e 	add.w	r1, r7, #14
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	2040      	movs	r0, #64	@ 0x40
 80031e0:	f000 f843 	bl	800326a <bmm150_get_regs>
 80031e4:	4603      	mov	r3, r0
 80031e6:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMM150_OK)
 80031e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <bmm150_init+0x5e>
        {
            /* Check for chip id validity */
            if (chip_id == BMM150_CHIP_ID)
 80031f0:	7bbb      	ldrb	r3, [r7, #14]
 80031f2:	2b32      	cmp	r3, #50	@ 0x32
 80031f4:	d107      	bne.n	8003206 <bmm150_init+0x5e>
            {
                dev->chip_id = chip_id;
 80031f6:	7bba      	ldrb	r2, [r7, #14]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	701a      	strb	r2, [r3, #0]

                /* Function to update trim values */
                rslt = read_trim_registers(dev);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f8c3 	bl	8003388 <read_trim_registers>
 8003202:	4603      	mov	r3, r0
 8003204:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003206:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <bmm150_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmm150_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 8003212:	b590      	push	{r4, r7, lr}
 8003214:	b087      	sub	sp, #28
 8003216:	af00      	add	r7, sp, #0
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	4603      	mov	r3, r0
 8003220:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8003222:	6838      	ldr	r0, [r7, #0]
 8003224:	f000 f852 	bl	80032cc <null_ptr_check>
 8003228:	4603      	mov	r3, r0
 800322a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL) && (len != 0))
 800322c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d112      	bne.n	800325a <bmm150_set_regs+0x48>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00f      	beq.n	800325a <bmm150_set_regs+0x48>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00c      	beq.n	800325a <bmm150_set_regs+0x48>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	691c      	ldr	r4, [r3, #16]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	7bf8      	ldrb	r0, [r7, #15]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	47a0      	blx	r4
 8003250:	4603      	mov	r3, r0
 8003252:	461a      	mov	r2, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	721a      	strb	r2, [r3, #8]
 8003258:	e001      	b.n	800325e <bmm150_set_regs+0x4c>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 800325a:	23ff      	movs	r3, #255	@ 0xff
 800325c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800325e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003262:	4618      	mov	r0, r3
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	bd90      	pop	{r4, r7, pc}

0800326a <bmm150_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmm150_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 800326a:	b590      	push	{r4, r7, lr}
 800326c:	b087      	sub	sp, #28
 800326e:	af00      	add	r7, sp, #0
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	4603      	mov	r3, r0
 8003278:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800327a:	6838      	ldr	r0, [r7, #0]
 800327c:	f000 f826 	bl	80032cc <null_ptr_check>
 8003280:	4603      	mov	r3, r0
 8003282:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL))
 8003284:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d117      	bne.n	80032bc <bmm150_get_regs+0x52>
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d014      	beq.n	80032bc <bmm150_get_regs+0x52>
    {
        if (dev->intf != BMM150_I2C_INTF)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	785b      	ldrb	r3, [r3, #1]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d003      	beq.n	80032a2 <bmm150_get_regs+0x38>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | 0x80;
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80032a0:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68dc      	ldr	r4, [r3, #12]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	7bf8      	ldrb	r0, [r7, #15]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	47a0      	blx	r4
 80032b2:	4603      	mov	r3, r0
 80032b4:	461a      	mov	r2, r3
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	721a      	strb	r2, [r3, #8]
 80032ba:	e001      	b.n	80032c0 <bmm150_get_regs+0x56>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 80032bc:	23ff      	movs	r3, #255	@ 0xff
 80032be:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80032c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd90      	pop	{r4, r7, pc}

080032cc <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmm150_dev *dev)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00f      	beq.n	80032fa <null_ptr_check+0x2e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <null_ptr_check+0x2e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d007      	beq.n	80032fa <null_ptr_check+0x2e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMM150_E_NULL_PTR;
 80032fa:	23ff      	movs	r3, #255	@ 0xff
 80032fc:	73fb      	strb	r3, [r7, #15]
 80032fe:	e001      	b.n	8003304 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMM150_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003304:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <set_power_control_bit>:

/*!
 * @brief This internal API sets/resets the power control bit of 0x4B register.
 */
static int8_t set_power_control_bit(uint8_t pwrcntrl_bit, struct bmm150_dev *dev)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	6039      	str	r1, [r7, #0]
 800331e:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	73bb      	strb	r3, [r7, #14]

    /* Power control register 0x4B is read */
    rslt = bmm150_get_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 8003324:	f107 010e 	add.w	r1, r7, #14
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2201      	movs	r2, #1
 800332c:	204b      	movs	r0, #75	@ 0x4b
 800332e:	f7ff ff9c 	bl	800326a <bmm150_get_regs>
 8003332:	4603      	mov	r3, r0
 8003334:	73fb      	strb	r3, [r7, #15]

    /* Proceed if everything is fine until now */
    if (rslt == BMM150_OK)
 8003336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11e      	bne.n	800337c <set_power_control_bit+0x68>
    {
        /* Sets the value of power control bit */
        reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_PWR_CNTRL, pwrcntrl_bit);
 800333e:	7bbb      	ldrb	r3, [r7, #14]
 8003340:	b25b      	sxtb	r3, r3
 8003342:	f023 0301 	bic.w	r3, r3, #1
 8003346:	b25a      	sxtb	r2, r3
 8003348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	b25b      	sxtb	r3, r3
 8003352:	4313      	orrs	r3, r2
 8003354:	b25b      	sxtb	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 800335a:	f107 010e 	add.w	r1, r7, #14
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2201      	movs	r2, #1
 8003362:	204b      	movs	r0, #75	@ 0x4b
 8003364:	f7ff ff55 	bl	8003212 <bmm150_set_regs>
 8003368:	4603      	mov	r3, r0
 800336a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 800336c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d103      	bne.n	800337c <set_power_control_bit+0x68>
        {
            /* Store the power control bit
             * value in dev structure
             */
            dev->pwr_cntrl_bit = pwrcntrl_bit;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	79fa      	ldrb	r2, [r7, #7]
 8003378:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        }
    }

    return rslt;
 800337c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <read_trim_registers>:
/*!
 * @brief This internal API reads the trim registers of the sensor and stores
 * the trim values in the "trim_data" of device structure.
 */
static int8_t read_trim_registers(struct bmm150_dev *dev)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t trim_x1y1[2] = { 0 };
 8003390:	2300      	movs	r3, #0
 8003392:	833b      	strh	r3, [r7, #24]
    uint8_t trim_xyz_data[4] = { 0 };
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
    uint8_t trim_xy1xy2[10] = { 0 };
 8003398:	2300      	movs	r3, #0
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	809a      	strh	r2, [r3, #4]
    uint16_t temp_msb = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	83bb      	strh	r3, [r7, #28]

    /* Trim register value is read */
    rslt = bmm150_get_regs(BMM150_DIG_X1, trim_x1y1, 2, dev);
 80033aa:	f107 0118 	add.w	r1, r7, #24
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2202      	movs	r2, #2
 80033b2:	205d      	movs	r0, #93	@ 0x5d
 80033b4:	f7ff ff59 	bl	800326a <bmm150_get_regs>
 80033b8:	4603      	mov	r3, r0
 80033ba:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 80033bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d16a      	bne.n	800349a <read_trim_registers+0x112>
    {
        rslt = bmm150_get_regs(BMM150_DIG_Z4_LSB, trim_xyz_data, 4, dev);
 80033c4:	f107 0114 	add.w	r1, r7, #20
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2204      	movs	r2, #4
 80033cc:	2062      	movs	r0, #98	@ 0x62
 80033ce:	f7ff ff4c 	bl	800326a <bmm150_get_regs>
 80033d2:	4603      	mov	r3, r0
 80033d4:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMM150_OK)
 80033d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d15d      	bne.n	800349a <read_trim_registers+0x112>
        {
            rslt = bmm150_get_regs(BMM150_DIG_Z2_LSB, trim_xy1xy2, 10, dev);
 80033de:	f107 0108 	add.w	r1, r7, #8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	220a      	movs	r2, #10
 80033e6:	2068      	movs	r0, #104	@ 0x68
 80033e8:	f7ff ff3f 	bl	800326a <bmm150_get_regs>
 80033ec:	4603      	mov	r3, r0
 80033ee:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMM150_OK)
 80033f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d150      	bne.n	800349a <read_trim_registers+0x112>
            {
                /* Trim data which is read is updated
                 * in the device structure
                 */
                dev->trim_data.dig_x1 = (int8_t)trim_x1y1[0];
 80033f8:	7e3b      	ldrb	r3, [r7, #24]
 80033fa:	b25a      	sxtb	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	761a      	strb	r2, [r3, #24]
                dev->trim_data.dig_y1 = (int8_t)trim_x1y1[1];
 8003400:	7e7b      	ldrb	r3, [r7, #25]
 8003402:	b25a      	sxtb	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	765a      	strb	r2, [r3, #25]
                dev->trim_data.dig_x2 = (int8_t)trim_xyz_data[2];
 8003408:	7dbb      	ldrb	r3, [r7, #22]
 800340a:	b25a      	sxtb	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	769a      	strb	r2, [r3, #26]
                dev->trim_data.dig_y2 = (int8_t)trim_xyz_data[3];
 8003410:	7dfb      	ldrb	r3, [r7, #23]
 8003412:	b25a      	sxtb	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	76da      	strb	r2, [r3, #27]
                temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
 8003418:	7afb      	ldrb	r3, [r7, #11]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);
 800341e:	7abb      	ldrb	r3, [r7, #10]
 8003420:	461a      	mov	r2, r3
 8003422:	8bbb      	ldrh	r3, [r7, #28]
 8003424:	4313      	orrs	r3, r2
 8003426:	b29a      	uxth	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	839a      	strh	r2, [r3, #28]
                temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
 800342c:	7a7b      	ldrb	r3, [r7, #9]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);
 8003432:	7a3b      	ldrb	r3, [r7, #8]
 8003434:	461a      	mov	r2, r3
 8003436:	8bbb      	ldrh	r3, [r7, #28]
 8003438:	4313      	orrs	r3, r2
 800343a:	b29b      	uxth	r3, r3
 800343c:	b21a      	sxth	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	83da      	strh	r2, [r3, #30]
                temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	021b      	lsls	r3, r3, #8
 8003446:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);
 8003448:	7bbb      	ldrb	r3, [r7, #14]
 800344a:	461a      	mov	r2, r3
 800344c:	8bbb      	ldrh	r3, [r7, #28]
 800344e:	4313      	orrs	r3, r2
 8003450:	b29b      	uxth	r3, r3
 8003452:	b21a      	sxth	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	841a      	strh	r2, [r3, #32]
                temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
 8003458:	7d7b      	ldrb	r3, [r7, #21]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);
 800345e:	7d3b      	ldrb	r3, [r7, #20]
 8003460:	461a      	mov	r2, r3
 8003462:	8bbb      	ldrh	r3, [r7, #28]
 8003464:	4313      	orrs	r3, r2
 8003466:	b29b      	uxth	r3, r3
 8003468:	b21a      	sxth	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	845a      	strh	r2, [r3, #34]	@ 0x22
                dev->trim_data.dig_xy1 = trim_xy1xy2[9];
 800346e:	7c7a      	ldrb	r2, [r7, #17]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                dev->trim_data.dig_xy2 = (int8_t)trim_xy1xy2[8];
 8003476:	7c3b      	ldrb	r3, [r7, #16]
 8003478:	b25a      	sxtb	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
 8003480:	7b7b      	ldrb	r3, [r7, #13]
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	b29b      	uxth	r3, r3
 8003486:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 800348a:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
 800348c:	7b3b      	ldrb	r3, [r7, #12]
 800348e:	461a      	mov	r2, r3
 8003490:	8bbb      	ldrh	r3, [r7, #28]
 8003492:	4313      	orrs	r3, r2
 8003494:	b29a      	uxth	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	84da      	strh	r2, [r3, #38]	@ 0x26
            }
        }
    }

    return rslt;
 800349a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <ICM42688P_disable_chip_select>:
/* Private GPIO CS Pin Variables */
static GPIO_TypeDef *ChipSelect_GPIO_Port;
static uint16_t ChipSelect_Pin;

static void ICM42688P_disable_chip_select()
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_RESET);
 80034ac:	4b04      	ldr	r3, [pc, #16]	@ (80034c0 <ICM42688P_disable_chip_select+0x18>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a04      	ldr	r2, [pc, #16]	@ (80034c4 <ICM42688P_disable_chip_select+0x1c>)
 80034b2:	8811      	ldrh	r1, [r2, #0]
 80034b4:	2200      	movs	r2, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	f002 fca8 	bl	8005e0c <HAL_GPIO_WritePin>
}
 80034bc:	bf00      	nop
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	2000089c 	.word	0x2000089c
 80034c4:	200008a0 	.word	0x200008a0

080034c8 <ICM42688P_enable_chip_select>:

static void ICM42688P_enable_chip_select()
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 80034cc:	4b04      	ldr	r3, [pc, #16]	@ (80034e0 <ICM42688P_enable_chip_select+0x18>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a04      	ldr	r2, [pc, #16]	@ (80034e4 <ICM42688P_enable_chip_select+0x1c>)
 80034d2:	8811      	ldrh	r1, [r2, #0]
 80034d4:	2201      	movs	r2, #1
 80034d6:	4618      	mov	r0, r3
 80034d8:	f002 fc98 	bl	8005e0c <HAL_GPIO_WritePin>
}
 80034dc:	bf00      	nop
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	2000089c 	.word	0x2000089c
 80034e4:	200008a0 	.word	0x200008a0

080034e8 <ICM42688P_write_reg>:

static HAL_StatusTypeDef ICM42688P_write_reg(uint8_t reg, uint8_t data)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	460a      	mov	r2, r1
 80034f2:	71fb      	strb	r3, [r7, #7]
 80034f4:	4613      	mov	r3, r2
 80034f6:	71bb      	strb	r3, [r7, #6]
    uint8_t tx[2] = {reg, data};
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	733b      	strb	r3, [r7, #12]
 80034fc:	79bb      	ldrb	r3, [r7, #6]
 80034fe:	737b      	strb	r3, [r7, #13]
    ICM42688P_disable_chip_select();
 8003500:	f7ff ffd2 	bl	80034a8 <ICM42688P_disable_chip_select>
    HAL_SPI_Transmit(hspi, tx, 2, HAL_MAX_DELAY);
 8003504:	4b07      	ldr	r3, [pc, #28]	@ (8003524 <ICM42688P_write_reg+0x3c>)
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	f107 010c 	add.w	r1, r7, #12
 800350c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003510:	2202      	movs	r2, #2
 8003512:	f005 ff75 	bl	8009400 <HAL_SPI_Transmit>
    ICM42688P_enable_chip_select();
 8003516:	f7ff ffd7 	bl	80034c8 <ICM42688P_enable_chip_select>
    return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20000898 	.word	0x20000898

08003528 <ICM42688P_init>:
    ICM42688P_enable_chip_select();
    return rx;
}

uint8_t ICM42688P_init(SPI_TypeDef *spi_handle, GPIO_TypeDef *chip_select_port, uint16_t chip_select_gpio_pin)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]
    hspi = spi_handle;
 8003536:	4a0e      	ldr	r2, [pc, #56]	@ (8003570 <ICM42688P_init+0x48>)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6013      	str	r3, [r2, #0]
    ChipSelect_GPIO_Port = chip_select_port;
 800353c:	4a0d      	ldr	r2, [pc, #52]	@ (8003574 <ICM42688P_init+0x4c>)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	6013      	str	r3, [r2, #0]
    ChipSelect_Pin = chip_select_gpio_pin;
 8003542:	4a0d      	ldr	r2, [pc, #52]	@ (8003578 <ICM42688P_init+0x50>)
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	8013      	strh	r3, [r2, #0]
    HAL_Delay(100);
    ICM42688P_write_reg(0x11, 0x00);  // Power management
    ICM42688P_write_reg(0x10, 0x0F);  // Gyro and accel config
    */

    ICM42688P_write_reg(0x11, 0x01); // Reset Device
 8003548:	2101      	movs	r1, #1
 800354a:	2011      	movs	r0, #17
 800354c:	f7ff ffcc 	bl	80034e8 <ICM42688P_write_reg>
    HAL_Delay(100);
 8003550:	2064      	movs	r0, #100	@ 0x64
 8003552:	f000 fd85 	bl	8004060 <HAL_Delay>
    ICM42688P_write_reg(0x4E, (0b11 << 2) | (0b11 << 0)); // Enable gyro & accelerometer
 8003556:	210f      	movs	r1, #15
 8003558:	204e      	movs	r0, #78	@ 0x4e
 800355a:	f7ff ffc5 	bl	80034e8 <ICM42688P_write_reg>
    ICM42688P_write_reg(0x7B, (0b10 << 1));               // Enable CLKIN
 800355e:	2104      	movs	r1, #4
 8003560:	207b      	movs	r0, #123	@ 0x7b
 8003562:	f7ff ffc1 	bl	80034e8 <ICM42688P_write_reg>

    return 0;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	20000898 	.word	0x20000898
 8003574:	2000089c 	.word	0x2000089c
 8003578:	200008a0 	.word	0x200008a0

0800357c <ICM42688P_read_data>:

ICM42688P_AccelData ICM42688P_read_data()
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b08b      	sub	sp, #44	@ 0x2c
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
    ICM42688P_AccelData data = {0};
 8003584:	f107 0318 	add.w	r3, r7, #24
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]

    uint8_t buffer[12];
    ICM42688P_disable_chip_select();
 8003590:	f7ff ff8a 	bl	80034a8 <ICM42688P_disable_chip_select>
    // This register should be correct
    uint8_t reg = 0x1F | (1 << 7);
 8003594:	239f      	movs	r3, #159	@ 0x9f
 8003596:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(hspi, &reg, 1, HAL_MAX_DELAY);
 8003598:	4b32      	ldr	r3, [pc, #200]	@ (8003664 <ICM42688P_read_data+0xe8>)
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	f107 010b 	add.w	r1, r7, #11
 80035a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035a4:	2201      	movs	r2, #1
 80035a6:	f005 ff2b 	bl	8009400 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, sizeof(buffer) / sizeof(buffer[0]), HAL_MAX_DELAY);
 80035aa:	4b2e      	ldr	r3, [pc, #184]	@ (8003664 <ICM42688P_read_data+0xe8>)
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	f107 010c 	add.w	r1, r7, #12
 80035b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035b6:	220c      	movs	r2, #12
 80035b8:	f006 f898 	bl	80096ec <HAL_SPI_Receive>
    ICM42688P_enable_chip_select();
 80035bc:	f7ff ff84 	bl	80034c8 <ICM42688P_enable_chip_select>

    data.accel_x = (buffer[0] << 8) | buffer[1];
 80035c0:	7b3b      	ldrb	r3, [r7, #12]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	b21a      	sxth	r2, r3
 80035c6:	7b7b      	ldrb	r3, [r7, #13]
 80035c8:	b21b      	sxth	r3, r3
 80035ca:	4313      	orrs	r3, r2
 80035cc:	b21b      	sxth	r3, r3
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	833b      	strh	r3, [r7, #24]
    data.accel_y = (buffer[2] << 8) | buffer[3];
 80035d2:	7bbb      	ldrb	r3, [r7, #14]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	b21a      	sxth	r2, r3
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	b21b      	sxth	r3, r3
 80035dc:	4313      	orrs	r3, r2
 80035de:	b21b      	sxth	r3, r3
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	837b      	strh	r3, [r7, #26]
    data.accel_z = ((buffer[4] << 8) | buffer[5]) * -1;
 80035e4:	7c3b      	ldrb	r3, [r7, #16]
 80035e6:	021b      	lsls	r3, r3, #8
 80035e8:	b21a      	sxth	r2, r3
 80035ea:	7c7b      	ldrb	r3, [r7, #17]
 80035ec:	b21b      	sxth	r3, r3
 80035ee:	4313      	orrs	r3, r2
 80035f0:	b21b      	sxth	r3, r3
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	425b      	negs	r3, r3
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	83bb      	strh	r3, [r7, #28]

    // Get new information.
    uint32_t time = HAL_GetTick();
 80035fa:	f000 fd25 	bl	8004048 <HAL_GetTick>
 80035fe:	6278      	str	r0, [r7, #36]	@ 0x24
    data.gyro_x = (buffer[6] << 8) | buffer[7];
 8003600:	7cbb      	ldrb	r3, [r7, #18]
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	b21a      	sxth	r2, r3
 8003606:	7cfb      	ldrb	r3, [r7, #19]
 8003608:	b21b      	sxth	r3, r3
 800360a:	4313      	orrs	r3, r2
 800360c:	b21b      	sxth	r3, r3
 800360e:	b29b      	uxth	r3, r3
 8003610:	83fb      	strh	r3, [r7, #30]
    data.gyro_y = (buffer[8] << 8) | buffer[9];
 8003612:	7d3b      	ldrb	r3, [r7, #20]
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	b21a      	sxth	r2, r3
 8003618:	7d7b      	ldrb	r3, [r7, #21]
 800361a:	b21b      	sxth	r3, r3
 800361c:	4313      	orrs	r3, r2
 800361e:	b21b      	sxth	r3, r3
 8003620:	b29b      	uxth	r3, r3
 8003622:	843b      	strh	r3, [r7, #32]
    data.gyro_z = ((buffer[10] << 8) | buffer[11]) * -1;
 8003624:	7dbb      	ldrb	r3, [r7, #22]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	b21a      	sxth	r2, r3
 800362a:	7dfb      	ldrb	r3, [r7, #23]
 800362c:	b21b      	sxth	r3, r3
 800362e:	4313      	orrs	r3, r2
 8003630:	b21b      	sxth	r3, r3
 8003632:	b29b      	uxth	r3, r3
 8003634:	425b      	negs	r3, r3
 8003636:	b29b      	uxth	r3, r3
 8003638:	847b      	strh	r3, [r7, #34]	@ 0x22
    // Calculate acceraltion from two gyro data points / time difference.
    // data.accel_x = Get_Accel_X(data.gyro_x, time);
    // data.accel_y = Get_Accel_Y(data.gyro_y, time);
    // data.accel_z = Get_Accel_Z(data.gyro_z, time);

    Transfer_Data(data.gyro_x, data.gyro_y, data.gyro_z, time);
 800363a:	8bfb      	ldrh	r3, [r7, #30]
 800363c:	4618      	mov	r0, r3
 800363e:	8c3b      	ldrh	r3, [r7, #32]
 8003640:	4619      	mov	r1, r3
 8003642:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003644:	461a      	mov	r2, r3
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	f000 f80e 	bl	8003668 <Transfer_Data>

    return data;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	461c      	mov	r4, r3
 8003650:	f107 0318 	add.w	r3, r7, #24
 8003654:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003656:	6020      	str	r0, [r4, #0]
 8003658:	6061      	str	r1, [r4, #4]
 800365a:	60a2      	str	r2, [r4, #8]
}
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	372c      	adds	r7, #44	@ 0x2c
 8003660:	46bd      	mov	sp, r7
 8003662:	bd90      	pop	{r4, r7, pc}
 8003664:	20000898 	.word	0x20000898

08003668 <Transfer_Data>:
uint16_t gyro_old_y = 0;
uint16_t gyro_old_z = 0;
uint32_t old_time = 0; // Might need to reinitialized to actual start.

void Transfer_Data(uint16_t x, uint16_t y, uint16_t z, uint32_t time)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	607b      	str	r3, [r7, #4]
 8003670:	4603      	mov	r3, r0
 8003672:	81fb      	strh	r3, [r7, #14]
 8003674:	460b      	mov	r3, r1
 8003676:	81bb      	strh	r3, [r7, #12]
 8003678:	4613      	mov	r3, r2
 800367a:	817b      	strh	r3, [r7, #10]
    gyro_old_x = x;
 800367c:	4a08      	ldr	r2, [pc, #32]	@ (80036a0 <Transfer_Data+0x38>)
 800367e:	89fb      	ldrh	r3, [r7, #14]
 8003680:	8013      	strh	r3, [r2, #0]
    gyro_old_y = y;
 8003682:	4a08      	ldr	r2, [pc, #32]	@ (80036a4 <Transfer_Data+0x3c>)
 8003684:	89bb      	ldrh	r3, [r7, #12]
 8003686:	8013      	strh	r3, [r2, #0]
    gyro_old_z = z;
 8003688:	4a07      	ldr	r2, [pc, #28]	@ (80036a8 <Transfer_Data+0x40>)
 800368a:	897b      	ldrh	r3, [r7, #10]
 800368c:	8013      	strh	r3, [r2, #0]
    old_time = time;
 800368e:	4a07      	ldr	r2, [pc, #28]	@ (80036ac <Transfer_Data+0x44>)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6013      	str	r3, [r2, #0]
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	200008a2 	.word	0x200008a2
 80036a4:	200008a4 	.word	0x200008a4
 80036a8:	200008a6 	.word	0x200008a6
 80036ac:	200008a8 	.word	0x200008a8

080036b0 <LC76G_init>:
#include "LC76G.h"

void LC76G_init()
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart5,LC76G_ENABLE_GGA_FORMAT, strlen(LC76G_ENABLE_GGA_FORMAT), TIMEOUT);
    HAL_Delay(100);
    */
   
    // Ensure that there is a GPS fix
    char buf[2] = {0};
 80036b6:	2300      	movs	r3, #0
 80036b8:	80bb      	strh	r3, [r7, #4]
    uint16_t num_iters = 1;
 80036ba:	2301      	movs	r3, #1
 80036bc:	80fb      	strh	r3, [r7, #6]
    while (buf == '\0' || num_iters == 0) {
 80036be:	e01a      	b.n	80036f6 <LC76G_init+0x46>
        // Skip everything before <Quality> field
        HAL_UART_Receive(&huart5, NULL, 41, TIMEOUT);
 80036c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036c4:	2229      	movs	r2, #41	@ 0x29
 80036c6:	2100      	movs	r1, #0
 80036c8:	480f      	ldr	r0, [pc, #60]	@ (8003708 <LC76G_init+0x58>)
 80036ca:	f008 f968 	bl	800b99e <HAL_UART_Receive>
        HAL_UART_Receive(&huart5, buf, 1, TIMEOUT);
 80036ce:	1d39      	adds	r1, r7, #4
 80036d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036d4:	2201      	movs	r2, #1
 80036d6:	480c      	ldr	r0, [pc, #48]	@ (8003708 <LC76G_init+0x58>)
 80036d8:	f008 f961 	bl	800b99e <HAL_UART_Receive>
        // Skip everything after <Quality> field
        HAL_UART_Receive(&huart5, NULL, 31, TIMEOUT);
 80036dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036e0:	221f      	movs	r2, #31
 80036e2:	2100      	movs	r1, #0
 80036e4:	4808      	ldr	r0, [pc, #32]	@ (8003708 <LC76G_init+0x58>)
 80036e6:	f008 f95a 	bl	800b99e <HAL_UART_Receive>
        HAL_Delay(100);
 80036ea:	2064      	movs	r0, #100	@ 0x64
 80036ec:	f000 fcb8 	bl	8004060 <HAL_Delay>

        // If this value overflows then we've been in this loop far too long
        num_iters++;
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	3301      	adds	r3, #1
 80036f4:	80fb      	strh	r3, [r7, #6]
    while (buf == '\0' || num_iters == 0) {
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0e1      	beq.n	80036c0 <LC76G_init+0x10>
    }

    //Inform caller that a GPS fix was not acquired
    // if (num_iters == 0)
        // handle error
}
 80036fc:	bf00      	nop
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	200006b8 	.word	0x200006b8

0800370c <LC76G_read_data>:

LC76G_gps_data LC76G_read_data()
{
 800370c:	b5b0      	push	{r4, r5, r7, lr}
 800370e:	b0a0      	sub	sp, #128	@ 0x80
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
    LC76G_gps_data gps_data;

    // Zero-initalized buffer
    char buf[80] = {0};
 8003714:	2300      	movs	r3, #0
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	f107 030c 	add.w	r3, r7, #12
 800371c:	224c      	movs	r2, #76	@ 0x4c
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f00e fb35 	bl	8011d90 <memset>

    Example:
    GNGGA,040143.000,3149.334166,N,11706.941670,E,2,36,0.48,61.496,M,-0.335,M,,*58
    */

    HAL_UART_Receive(&huart5, buf, 74, TIMEOUT);
 8003726:	f107 0108 	add.w	r1, r7, #8
 800372a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800372e:	224a      	movs	r2, #74	@ 0x4a
 8003730:	4810      	ldr	r0, [pc, #64]	@ (8003774 <LC76G_read_data+0x68>)
 8003732:	f008 f934 	bl	800b99e <HAL_UART_Receive>
    HAL_UART_Transmit(&huart3,buf, strlen(buf), TIMEOUT);
 8003736:	f107 0308 	add.w	r3, r7, #8
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc fdc0 	bl	80002c0 <strlen>
 8003740:	4603      	mov	r3, r0
 8003742:	b29a      	uxth	r2, r3
 8003744:	f107 0108 	add.w	r1, r7, #8
 8003748:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800374c:	480a      	ldr	r0, [pc, #40]	@ (8003778 <LC76G_read_data+0x6c>)
 800374e:	f008 f898 	bl	800b882 <HAL_UART_Transmit>

    // Skip the rest of the transmission:
    // (,M,<Sep>,M,<DiffAge>,<DiffStation>*<Checksum><CR><LF>)
    HAL_UART_Receive(&huart5, NULL, 18, TIMEOUT);
*/
    return gps_data;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	461d      	mov	r5, r3
 8003756:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800375a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800375c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800375e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003762:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003766:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	3780      	adds	r7, #128	@ 0x80
 800376e:	46bd      	mov	sp, r7
 8003770:	bdb0      	pop	{r4, r5, r7, pc}
 8003772:	bf00      	nop
 8003774:	200006b8 	.word	0x200006b8
 8003778:	2000074c 	.word	0x2000074c

0800377c <MS5607_Init>:
/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
MS5607StateTypeDef MS5607_Init(SPI_HandleTypeDef *spi_handle, GPIO_TypeDef *chip_select_port, uint16_t chip_select_gpio_pin)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  hspi = spi_handle;
 800378a:	4a16      	ldr	r2, [pc, #88]	@ (80037e4 <MS5607_Init+0x68>)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6013      	str	r3, [r2, #0]
  ChipSelect_GPIO_Port = chip_select_port;
 8003790:	4a15      	ldr	r2, [pc, #84]	@ (80037e8 <MS5607_Init+0x6c>)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	6013      	str	r3, [r2, #0]
  ChipSelect_Pin = chip_select_gpio_pin;
 8003796:	4a15      	ldr	r2, [pc, #84]	@ (80037ec <MS5607_Init+0x70>)
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	8013      	strh	r3, [r2, #0]

  enableCSB();
 800379c:	f000 fc0a 	bl	8003fb4 <enableCSB>
  SPITransmitData = RESET_COMMAND;
 80037a0:	4b13      	ldr	r3, [pc, #76]	@ (80037f0 <MS5607_Init+0x74>)
 80037a2:	221e      	movs	r2, #30
 80037a4:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 80037a6:	4b0f      	ldr	r3, [pc, #60]	@ (80037e4 <MS5607_Init+0x68>)
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	230a      	movs	r3, #10
 80037ac:	2201      	movs	r2, #1
 80037ae:	4910      	ldr	r1, [pc, #64]	@ (80037f0 <MS5607_Init+0x74>)
 80037b0:	f005 fe26 	bl	8009400 <HAL_SPI_Transmit>
  HAL_Delay(3);
 80037b4:	2003      	movs	r0, #3
 80037b6:	f000 fc53 	bl	8004060 <HAL_Delay>
  disableCSB();
 80037ba:	f000 fc0b 	bl	8003fd4 <disableCSB>

  MS5607PromRead(&promData);
 80037be:	480d      	ldr	r0, [pc, #52]	@ (80037f4 <MS5607_Init+0x78>)
 80037c0:	f000 f81a 	bl	80037f8 <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff)
 80037c4:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <MS5607_Init+0x78>)
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <MS5607_Init+0x58>
 80037cc:	4b09      	ldr	r3, [pc, #36]	@ (80037f4 <MS5607_Init+0x78>)
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	2bff      	cmp	r3, #255	@ 0xff
 80037d2:	d101      	bne.n	80037d8 <MS5607_Init+0x5c>
    return MS5607_STATE_FAILED;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e000      	b.n	80037da <MS5607_Init+0x5e>
  else
    return MS5607_STATE_READY;
 80037d8:	2301      	movs	r3, #1
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	200008ac 	.word	0x200008ac
 80037e8:	200008b0 	.word	0x200008b0
 80037ec:	200008b4 	.word	0x200008b4
 80037f0:	200008b6 	.word	0x200008b6
 80037f4:	200008bc 	.word	0x200008bc

080037f8 <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint8_t address;
  uint16_t *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for accessing the data structure */
  structPointer = (uint16_t *)prom;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++)
 8003804:	2300      	movs	r3, #0
 8003806:	75fb      	strb	r3, [r7, #23]
 8003808:	e020      	b.n	800384c <MS5607PromRead+0x54>
  {
    SPITransmitData = PROM_READ(address);
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	b25b      	sxtb	r3, r3
 8003810:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8003814:	b25b      	sxtb	r3, r3
 8003816:	b2da      	uxtb	r2, r3
 8003818:	4b1e      	ldr	r3, [pc, #120]	@ (8003894 <MS5607PromRead+0x9c>)
 800381a:	701a      	strb	r2, [r3, #0]
    enableCSB();
 800381c:	f000 fbca 	bl	8003fb4 <enableCSB>
    HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003820:	4b1d      	ldr	r3, [pc, #116]	@ (8003898 <MS5607PromRead+0xa0>)
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	230a      	movs	r3, #10
 8003826:	2201      	movs	r2, #1
 8003828:	491a      	ldr	r1, [pc, #104]	@ (8003894 <MS5607PromRead+0x9c>)
 800382a:	f005 fde9 	bl	8009400 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(hspi, structPointer, 2, 10);
 800382e:	4b1a      	ldr	r3, [pc, #104]	@ (8003898 <MS5607PromRead+0xa0>)
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	230a      	movs	r3, #10
 8003834:	2202      	movs	r2, #2
 8003836:	6939      	ldr	r1, [r7, #16]
 8003838:	f005 ff58 	bl	80096ec <HAL_SPI_Receive>
    disableCSB();
 800383c:	f000 fbca 	bl	8003fd4 <disableCSB>
    structPointer++;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	3302      	adds	r3, #2
 8003844:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 8003846:	7dfb      	ldrb	r3, [r7, #23]
 8003848:	3301      	adds	r3, #1
 800384a:	75fb      	strb	r3, [r7, #23]
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	2b07      	cmp	r3, #7
 8003850:	d9db      	bls.n	800380a <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *)prom;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 8003856:	2300      	movs	r3, #0
 8003858:	75fb      	strb	r3, [r7, #23]
 800385a:	e012      	b.n	8003882 <MS5607PromRead+0x8a>
  {
    uint8_t *toSwap = (uint8_t *)structPointer;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	785a      	ldrb	r2, [r3, #1]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3301      	adds	r3, #1
 8003872:	7afa      	ldrb	r2, [r7, #11]
 8003874:	701a      	strb	r2, [r3, #0]
    structPointer++;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	3302      	adds	r3, #2
 800387a:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++)
 800387c:	7dfb      	ldrb	r3, [r7, #23]
 800387e:	3301      	adds	r3, #1
 8003880:	75fb      	strb	r3, [r7, #23]
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	2b07      	cmp	r3, #7
 8003886:	d9e9      	bls.n	800385c <MS5607PromRead+0x64>
  }
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	200008b6 	.word	0x200008b6
 8003898:	200008ac 	.word	0x200008ac

0800389c <MS5607UncompensatedRead>:

/* Performs a reading on the devices PROM. */
void MS5607UncompensatedRead(struct MS5607UncompensatedValues *uncompValues)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]

  /*Sensor reply data buffer*/
  uint8_t reply[3];

  enableCSB();
 80038a4:	f000 fb86 	bl	8003fb4 <enableCSB>
  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D1_COMMAND | Pressure_OSR;
 80038a8:	4b54      	ldr	r3, [pc, #336]	@ (80039fc <MS5607UncompensatedRead+0x160>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b53      	ldr	r3, [pc, #332]	@ (8003a00 <MS5607UncompensatedRead+0x164>)
 80038b4:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 80038b6:	4b53      	ldr	r3, [pc, #332]	@ (8003a04 <MS5607UncompensatedRead+0x168>)
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	230a      	movs	r3, #10
 80038bc:	2201      	movs	r2, #1
 80038be:	4950      	ldr	r1, [pc, #320]	@ (8003a00 <MS5607UncompensatedRead+0x164>)
 80038c0:	f005 fd9e 	bl	8009400 <HAL_SPI_Transmit>

  if (Pressure_OSR == 0x00)
 80038c4:	4b4d      	ldr	r3, [pc, #308]	@ (80039fc <MS5607UncompensatedRead+0x160>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d103      	bne.n	80038d4 <MS5607UncompensatedRead+0x38>
    HAL_Delay(1);
 80038cc:	2001      	movs	r0, #1
 80038ce:	f000 fbc7 	bl	8004060 <HAL_Delay>
 80038d2:	e01a      	b.n	800390a <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x02)
 80038d4:	4b49      	ldr	r3, [pc, #292]	@ (80039fc <MS5607UncompensatedRead+0x160>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d103      	bne.n	80038e4 <MS5607UncompensatedRead+0x48>
    HAL_Delay(2);
 80038dc:	2002      	movs	r0, #2
 80038de:	f000 fbbf 	bl	8004060 <HAL_Delay>
 80038e2:	e012      	b.n	800390a <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x04)
 80038e4:	4b45      	ldr	r3, [pc, #276]	@ (80039fc <MS5607UncompensatedRead+0x160>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d103      	bne.n	80038f4 <MS5607UncompensatedRead+0x58>
    HAL_Delay(3);
 80038ec:	2003      	movs	r0, #3
 80038ee:	f000 fbb7 	bl	8004060 <HAL_Delay>
 80038f2:	e00a      	b.n	800390a <MS5607UncompensatedRead+0x6e>
  else if (Pressure_OSR == 0x06)
 80038f4:	4b41      	ldr	r3, [pc, #260]	@ (80039fc <MS5607UncompensatedRead+0x160>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b06      	cmp	r3, #6
 80038fa:	d103      	bne.n	8003904 <MS5607UncompensatedRead+0x68>
    HAL_Delay(5);
 80038fc:	2005      	movs	r0, #5
 80038fe:	f000 fbaf 	bl	8004060 <HAL_Delay>
 8003902:	e002      	b.n	800390a <MS5607UncompensatedRead+0x6e>
  else
    HAL_Delay(10);
 8003904:	200a      	movs	r0, #10
 8003906:	f000 fbab 	bl	8004060 <HAL_Delay>

  disableCSB();
 800390a:	f000 fb63 	bl	8003fd4 <disableCSB>

  /* Performs the reading of the 24 bits from the ADC */

  enableCSB();
 800390e:	f000 fb51 	bl	8003fb4 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 8003912:	4b3b      	ldr	r3, [pc, #236]	@ (8003a00 <MS5607UncompensatedRead+0x164>)
 8003914:	2200      	movs	r2, #0
 8003916:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 8003918:	4b3a      	ldr	r3, [pc, #232]	@ (8003a04 <MS5607UncompensatedRead+0x168>)
 800391a:	6818      	ldr	r0, [r3, #0]
 800391c:	230a      	movs	r3, #10
 800391e:	2201      	movs	r2, #1
 8003920:	4937      	ldr	r1, [pc, #220]	@ (8003a00 <MS5607UncompensatedRead+0x164>)
 8003922:	f005 fd6d 	bl	8009400 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, 10);
 8003926:	4b37      	ldr	r3, [pc, #220]	@ (8003a04 <MS5607UncompensatedRead+0x168>)
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	f107 010c 	add.w	r1, r7, #12
 800392e:	230a      	movs	r3, #10
 8003930:	2203      	movs	r2, #3
 8003932:	f005 fedb 	bl	80096ec <HAL_SPI_Receive>

  disableCSB();
 8003936:	f000 fb4d 	bl	8003fd4 <disableCSB>

  /* Tranfer the 24bits read into a 32bit int */
  uncompValues->pressure = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | (uint32_t)reply[2];
 800393a:	7b3b      	ldrb	r3, [r7, #12]
 800393c:	041a      	lsls	r2, r3, #16
 800393e:	7b7b      	ldrb	r3, [r7, #13]
 8003940:	021b      	lsls	r3, r3, #8
 8003942:	4313      	orrs	r3, r2
 8003944:	7bba      	ldrb	r2, [r7, #14]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	601a      	str	r2, [r3, #0]

  enableCSB();
 800394c:	f000 fb32 	bl	8003fb4 <enableCSB>

  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D2_COMMAND | Temperature_OSR;
 8003950:	4b2d      	ldr	r3, [pc, #180]	@ (8003a08 <MS5607UncompensatedRead+0x16c>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4b29      	ldr	r3, [pc, #164]	@ (8003a00 <MS5607UncompensatedRead+0x164>)
 800395c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 800395e:	4b29      	ldr	r3, [pc, #164]	@ (8003a04 <MS5607UncompensatedRead+0x168>)
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	230a      	movs	r3, #10
 8003964:	2201      	movs	r2, #1
 8003966:	4926      	ldr	r1, [pc, #152]	@ (8003a00 <MS5607UncompensatedRead+0x164>)
 8003968:	f005 fd4a 	bl	8009400 <HAL_SPI_Transmit>

  if (Temperature_OSR == 0x00)
 800396c:	4b26      	ldr	r3, [pc, #152]	@ (8003a08 <MS5607UncompensatedRead+0x16c>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d103      	bne.n	800397c <MS5607UncompensatedRead+0xe0>
    HAL_Delay(1);
 8003974:	2001      	movs	r0, #1
 8003976:	f000 fb73 	bl	8004060 <HAL_Delay>
 800397a:	e01a      	b.n	80039b2 <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x02)
 800397c:	4b22      	ldr	r3, [pc, #136]	@ (8003a08 <MS5607UncompensatedRead+0x16c>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b02      	cmp	r3, #2
 8003982:	d103      	bne.n	800398c <MS5607UncompensatedRead+0xf0>
    HAL_Delay(2);
 8003984:	2002      	movs	r0, #2
 8003986:	f000 fb6b 	bl	8004060 <HAL_Delay>
 800398a:	e012      	b.n	80039b2 <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x04)
 800398c:	4b1e      	ldr	r3, [pc, #120]	@ (8003a08 <MS5607UncompensatedRead+0x16c>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b04      	cmp	r3, #4
 8003992:	d103      	bne.n	800399c <MS5607UncompensatedRead+0x100>
    HAL_Delay(3);
 8003994:	2003      	movs	r0, #3
 8003996:	f000 fb63 	bl	8004060 <HAL_Delay>
 800399a:	e00a      	b.n	80039b2 <MS5607UncompensatedRead+0x116>
  else if (Temperature_OSR == 0x06)
 800399c:	4b1a      	ldr	r3, [pc, #104]	@ (8003a08 <MS5607UncompensatedRead+0x16c>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b06      	cmp	r3, #6
 80039a2:	d103      	bne.n	80039ac <MS5607UncompensatedRead+0x110>
    HAL_Delay(5);
 80039a4:	2005      	movs	r0, #5
 80039a6:	f000 fb5b 	bl	8004060 <HAL_Delay>
 80039aa:	e002      	b.n	80039b2 <MS5607UncompensatedRead+0x116>
  else
    HAL_Delay(10);
 80039ac:	200a      	movs	r0, #10
 80039ae:	f000 fb57 	bl	8004060 <HAL_Delay>

  disableCSB();
 80039b2:	f000 fb0f 	bl	8003fd4 <disableCSB>

  enableCSB();
 80039b6:	f000 fafd 	bl	8003fb4 <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 80039ba:	4b11      	ldr	r3, [pc, #68]	@ (8003a00 <MS5607UncompensatedRead+0x164>)
 80039bc:	2200      	movs	r2, #0
 80039be:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(hspi, &SPITransmitData, 1, 10);
 80039c0:	4b10      	ldr	r3, [pc, #64]	@ (8003a04 <MS5607UncompensatedRead+0x168>)
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	230a      	movs	r3, #10
 80039c6:	2201      	movs	r2, #1
 80039c8:	490d      	ldr	r1, [pc, #52]	@ (8003a00 <MS5607UncompensatedRead+0x164>)
 80039ca:	f005 fd19 	bl	8009400 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, reply, 3, 10);
 80039ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003a04 <MS5607UncompensatedRead+0x168>)
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	f107 010c 	add.w	r1, r7, #12
 80039d6:	230a      	movs	r3, #10
 80039d8:	2203      	movs	r2, #3
 80039da:	f005 fe87 	bl	80096ec <HAL_SPI_Receive>

  disableCSB();
 80039de:	f000 faf9 	bl	8003fd4 <disableCSB>

  /* Assemble the conversion command based on previously set OSR */
  uncompValues->temperature = ((uint32_t)reply[0] << 16) | ((uint32_t)reply[1] << 8) | (uint32_t)reply[2];
 80039e2:	7b3b      	ldrb	r3, [r7, #12]
 80039e4:	041a      	lsls	r2, r3, #16
 80039e6:	7b7b      	ldrb	r3, [r7, #13]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	4313      	orrs	r3, r2
 80039ec:	7bba      	ldrb	r2, [r7, #14]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	605a      	str	r2, [r3, #4]
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	200008b7 	.word	0x200008b7
 8003a00:	200008b6 	.word	0x200008b6
 8003a04:	200008ac 	.word	0x200008ac
 8003a08:	200008b8 	.word	0x200008b8

08003a0c <MS5607Convert>:

/* Performs the data conversion according to the MS5607 datasheet */
void MS5607Convert(struct MS5607UncompensatedValues *sample, struct MS5607IntReadings *value)
{
 8003a0c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003a10:	b0d7      	sub	sp, #348	@ 0x15c
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8003a18:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
  int32_t dT;
  int32_t TEMP;
  int64_t OFF;
  int64_t SENS;

  dT = sample->temperature - ((int32_t)(promData.tref << 8));
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	4bda      	ldr	r3, [pc, #872]	@ (8003d8c <MS5607Convert+0x380>)
 8003a24:	895b      	ldrh	r3, [r3, #10]
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

  TEMP = 2000 + (((int64_t)dT * promData.tempsens) >> 23);
 8003a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003a32:	17da      	asrs	r2, r3, #31
 8003a34:	469a      	mov	sl, r3
 8003a36:	4693      	mov	fp, r2
 8003a38:	4bd4      	ldr	r3, [pc, #848]	@ (8003d8c <MS5607Convert+0x380>)
 8003a3a:	899b      	ldrh	r3, [r3, #12]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2200      	movs	r2, #0
 8003a40:	4698      	mov	r8, r3
 8003a42:	4691      	mov	r9, r2
 8003a44:	fb08 f20b 	mul.w	r2, r8, fp
 8003a48:	fb0a f309 	mul.w	r3, sl, r9
 8003a4c:	4413      	add	r3, r2
 8003a4e:	fbaa 4508 	umull	r4, r5, sl, r8
 8003a52:	442b      	add	r3, r5
 8003a54:	461d      	mov	r5, r3
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	0de2      	lsrs	r2, r4, #23
 8003a60:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8003a64:	15eb      	asrs	r3, r5, #23
 8003a66:	4613      	mov	r3, r2
 8003a68:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003a6c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

  OFF = ((int64_t)promData.off << 17) + (((int64_t)promData.tco * dT) >> 6);
 8003a70:	4bc6      	ldr	r3, [pc, #792]	@ (8003d8c <MS5607Convert+0x380>)
 8003a72:	889b      	ldrh	r3, [r3, #4]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a7c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a80:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a84:	460b      	mov	r3, r1
 8003a86:	0bdb      	lsrs	r3, r3, #15
 8003a88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	045b      	lsls	r3, r3, #17
 8003a90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a94:	4bbd      	ldr	r3, [pc, #756]	@ (8003d8c <MS5607Convert+0x380>)
 8003a96:	891b      	ldrh	r3, [r3, #8]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003aa0:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8003aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003aa8:	17da      	asrs	r2, r3, #31
 8003aaa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aae:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ab2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8003ab6:	462b      	mov	r3, r5
 8003ab8:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8003abc:	4642      	mov	r2, r8
 8003abe:	fb02 f203 	mul.w	r2, r2, r3
 8003ac2:	464b      	mov	r3, r9
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	4622      	mov	r2, r4
 8003ace:	4641      	mov	r1, r8
 8003ad0:	fba2 1201 	umull	r1, r2, r2, r1
 8003ad4:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003ad8:	460a      	mov	r2, r1
 8003ada:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 8003ade:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8003af4:	4621      	mov	r1, r4
 8003af6:	098a      	lsrs	r2, r1, #6
 8003af8:	4629      	mov	r1, r5
 8003afa:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8003afe:	4629      	mov	r1, r5
 8003b00:	118b      	asrs	r3, r1, #6
 8003b02:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8003b06:	4621      	mov	r1, r4
 8003b08:	1889      	adds	r1, r1, r2
 8003b0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	eb43 0101 	adc.w	r1, r3, r1
 8003b12:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8003b14:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8003b18:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
  SENS = ((int64_t)promData.sens << 16) + (((int64_t)promData.tcs * dT) >> 7);
 8003b1c:	4b9b      	ldr	r3, [pc, #620]	@ (8003d8c <MS5607Convert+0x380>)
 8003b1e:	885b      	ldrh	r3, [r3, #2]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b2c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003b30:	460b      	mov	r3, r1
 8003b32:	0c1b      	lsrs	r3, r3, #16
 8003b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b38:	460b      	mov	r3, r1
 8003b3a:	041b      	lsls	r3, r3, #16
 8003b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b40:	4b92      	ldr	r3, [pc, #584]	@ (8003d8c <MS5607Convert+0x380>)
 8003b42:	88db      	ldrh	r3, [r3, #6]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003b54:	17da      	asrs	r2, r3, #31
 8003b56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b5a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003b5e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8003b62:	462b      	mov	r3, r5
 8003b64:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003b68:	4642      	mov	r2, r8
 8003b6a:	fb02 f203 	mul.w	r2, r2, r3
 8003b6e:	464b      	mov	r3, r9
 8003b70:	4621      	mov	r1, r4
 8003b72:	fb01 f303 	mul.w	r3, r1, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	4622      	mov	r2, r4
 8003b7a:	4641      	mov	r1, r8
 8003b7c:	fba2 1201 	umull	r1, r2, r2, r1
 8003b80:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8003b84:	460a      	mov	r2, r1
 8003b86:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8003b8a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8003b8e:	4413      	add	r3, r2
 8003b90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	09ca      	lsrs	r2, r1, #7
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8003baa:	4629      	mov	r1, r5
 8003bac:	11cb      	asrs	r3, r1, #7
 8003bae:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	1889      	adds	r1, r1, r2
 8003bb6:	6339      	str	r1, [r7, #48]	@ 0x30
 8003bb8:	4629      	mov	r1, r5
 8003bba:	eb43 0101 	adc.w	r1, r3, r1
 8003bbe:	6379      	str	r1, [r7, #52]	@ 0x34
 8003bc0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003bc4:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140

  /**/
  if (TEMP < 2000)
 8003bc8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003bcc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003bd0:	f280 8152 	bge.w	8003e78 <MS5607Convert+0x46c>
  {
    int32_t T2 = ((int64_t)dT * (int64_t)dT) >> 31;
 8003bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003bd8:	17da      	asrs	r2, r3, #31
 8003bda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003bde:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003be6:	17da      	asrs	r2, r3, #31
 8003be8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003bec:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bf0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8003bf4:	462b      	mov	r3, r5
 8003bf6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8003bfa:	4642      	mov	r2, r8
 8003bfc:	fb02 f203 	mul.w	r2, r2, r3
 8003c00:	464b      	mov	r3, r9
 8003c02:	4621      	mov	r1, r4
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	4413      	add	r3, r2
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	4641      	mov	r1, r8
 8003c0e:	fba2 1201 	umull	r1, r2, r2, r1
 8003c12:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8003c16:	460a      	mov	r2, r1
 8003c18:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8003c1c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8003c20:	4413      	add	r3, r2
 8003c22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8003c32:	4621      	mov	r1, r4
 8003c34:	0fca      	lsrs	r2, r1, #31
 8003c36:	4629      	mov	r1, r5
 8003c38:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	17cb      	asrs	r3, r1, #31
 8003c40:	4613      	mov	r3, r2
 8003c42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int32_t TEMPM = TEMP - 2000;
 8003c46:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003c4a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8003c4e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    int64_t OFF2 = (61 * (int64_t)TEMPM * (int64_t)TEMPM) >> 4;
 8003c52:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003c56:	17da      	asrs	r2, r3, #31
 8003c58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c60:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003c64:	17da      	asrs	r2, r3, #31
 8003c66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c6a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003c6e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8003c72:	462b      	mov	r3, r5
 8003c74:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003c78:	4642      	mov	r2, r8
 8003c7a:	fb02 f203 	mul.w	r2, r2, r3
 8003c7e:	464b      	mov	r3, r9
 8003c80:	4621      	mov	r1, r4
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	4413      	add	r3, r2
 8003c88:	4622      	mov	r2, r4
 8003c8a:	4641      	mov	r1, r8
 8003c8c:	fba2 1201 	umull	r1, r2, r2, r1
 8003c90:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003c94:	460a      	mov	r2, r1
 8003c96:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8003c9a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003ca4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8003ca8:	4622      	mov	r2, r4
 8003caa:	462b      	mov	r3, r5
 8003cac:	f04f 0000 	mov.w	r0, #0
 8003cb0:	f04f 0100 	mov.w	r1, #0
 8003cb4:	0119      	lsls	r1, r3, #4
 8003cb6:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003cba:	0110      	lsls	r0, r2, #4
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	1a51      	subs	r1, r2, r1
 8003cc4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	eb63 0301 	sbc.w	r3, r3, r1
 8003ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003cda:	4649      	mov	r1, r9
 8003cdc:	008b      	lsls	r3, r1, #2
 8003cde:	4641      	mov	r1, r8
 8003ce0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	008a      	lsls	r2, r1, #2
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	4603      	mov	r3, r0
 8003cee:	4622      	mov	r2, r4
 8003cf0:	189b      	adds	r3, r3, r2
 8003cf2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cf4:	462b      	mov	r3, r5
 8003cf6:	460a      	mov	r2, r1
 8003cf8:	eb42 0303 	adc.w	r3, r2, r3
 8003cfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	090a      	lsrs	r2, r1, #4
 8003d0e:	4629      	mov	r1, r5
 8003d10:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8003d14:	4629      	mov	r1, r5
 8003d16:	110b      	asrs	r3, r1, #4
 8003d18:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    int64_t SENS2 = 2 * (int64_t)TEMPM * (int64_t)TEMPM;
 8003d1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003d20:	17da      	asrs	r2, r3, #31
 8003d22:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d24:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d26:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003d2a:	17da      	asrs	r2, r3, #31
 8003d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d30:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8003d34:	462b      	mov	r3, r5
 8003d36:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8003d3a:	4642      	mov	r2, r8
 8003d3c:	fb02 f203 	mul.w	r2, r2, r3
 8003d40:	464b      	mov	r3, r9
 8003d42:	4621      	mov	r1, r4
 8003d44:	fb01 f303 	mul.w	r3, r1, r3
 8003d48:	4413      	add	r3, r2
 8003d4a:	4622      	mov	r2, r4
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	fba2 1201 	umull	r1, r2, r2, r1
 8003d52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d56:	460a      	mov	r2, r1
 8003d58:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8003d5c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003d60:	4413      	add	r3, r2
 8003d62:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d66:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	18db      	adds	r3, r3, r3
 8003d6e:	623b      	str	r3, [r7, #32]
 8003d70:	4613      	mov	r3, r2
 8003d72:	eb42 0303 	adc.w	r3, r2, r3
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d78:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003d7c:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    if (TEMP < -1500)
 8003d80:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8003d84:	4b02      	ldr	r3, [pc, #8]	@ (8003d90 <MS5607Convert+0x384>)
 8003d86:	429a      	cmp	r2, r3
 8003d88:	da55      	bge.n	8003e36 <MS5607Convert+0x42a>
 8003d8a:	e003      	b.n	8003d94 <MS5607Convert+0x388>
 8003d8c:	200008bc 	.word	0x200008bc
 8003d90:	fffffa24 	.word	0xfffffa24
    {
      int32_t TEMPP = TEMP + 1500;
 8003d94:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003d98:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8003d9c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      int32_t TEMPP2 = TEMPP * TEMPP;
 8003da0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003da4:	fb03 f303 	mul.w	r3, r3, r3
 8003da8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
      OFF2 = OFF2 + (int64_t)15 * TEMPP2;
 8003dac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003db0:	17da      	asrs	r2, r3, #31
 8003db2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003db4:	667a      	str	r2, [r7, #100]	@ 0x64
 8003db6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003dba:	4622      	mov	r2, r4
 8003dbc:	462b      	mov	r3, r5
 8003dbe:	f04f 0000 	mov.w	r0, #0
 8003dc2:	f04f 0100 	mov.w	r1, #0
 8003dc6:	0119      	lsls	r1, r3, #4
 8003dc8:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003dcc:	0110      	lsls	r0, r2, #4
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	1a51      	subs	r1, r2, r1
 8003dd6:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003dd8:	4629      	mov	r1, r5
 8003dda:	eb63 0301 	sbc.w	r3, r3, r1
 8003dde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003de0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003de4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8003de8:	4621      	mov	r1, r4
 8003dea:	1851      	adds	r1, r2, r1
 8003dec:	61b9      	str	r1, [r7, #24]
 8003dee:	4629      	mov	r1, r5
 8003df0:	eb43 0101 	adc.w	r1, r3, r1
 8003df4:	61f9      	str	r1, [r7, #28]
 8003df6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003dfa:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
      SENS2 = SENS2 + (int64_t)8 * TEMPP2;
 8003dfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e02:	17da      	asrs	r2, r3, #31
 8003e04:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e06:	657a      	str	r2, [r7, #84]	@ 0x54
 8003e08:	f04f 0000 	mov.w	r0, #0
 8003e0c:	f04f 0100 	mov.w	r1, #0
 8003e10:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003e14:	462b      	mov	r3, r5
 8003e16:	00d9      	lsls	r1, r3, #3
 8003e18:	4623      	mov	r3, r4
 8003e1a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8003e1e:	4623      	mov	r3, r4
 8003e20:	00d8      	lsls	r0, r3, #3
 8003e22:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003e26:	1814      	adds	r4, r2, r0
 8003e28:	613c      	str	r4, [r7, #16]
 8003e2a:	414b      	adcs	r3, r1
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003e32:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    }
    TEMP -= T2;
 8003e36:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8003e3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    OFF -= OFF2;
 8003e44:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8003e48:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003e4c:	1a84      	subs	r4, r0, r2
 8003e4e:	60bc      	str	r4, [r7, #8]
 8003e50:	eb61 0303 	sbc.w	r3, r1, r3
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003e5a:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
    SENS -= SENS2;
 8003e5e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8003e62:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003e66:	1a84      	subs	r4, r0, r2
 8003e68:	603c      	str	r4, [r7, #0]
 8003e6a:	eb61 0303 	sbc.w	r3, r1, r3
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003e74:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
  }

  value->pressure = ((((int64_t)sample->pressure * SENS) >> 21) - OFF) >> 15;
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e82:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003e84:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003e88:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003e8c:	462a      	mov	r2, r5
 8003e8e:	fb02 f203 	mul.w	r2, r2, r3
 8003e92:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003e96:	4621      	mov	r1, r4
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	fba2 1201 	umull	r1, r2, r2, r1
 8003ea8:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8003eac:	460a      	mov	r2, r1
 8003eae:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8003eb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8003ec8:	4621      	mov	r1, r4
 8003eca:	0d4a      	lsrs	r2, r1, #21
 8003ecc:	4629      	mov	r1, r5
 8003ece:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	154b      	asrs	r3, r1, #21
 8003ed6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8003eda:	1a14      	subs	r4, r2, r0
 8003edc:	643c      	str	r4, [r7, #64]	@ 0x40
 8003ede:	eb63 0301 	sbc.w	r3, r3, r1
 8003ee2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	0bca      	lsrs	r2, r1, #15
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8003efa:	4629      	mov	r1, r5
 8003efc:	13cb      	asrs	r3, r1, #15
 8003efe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003f02:	601a      	str	r2, [r3, #0]
  value->temperature = TEMP;
 8003f04:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003f08:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8003f0c:	605a      	str	r2, [r3, #4]
}
 8003f0e:	bf00      	nop
 8003f10:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8003f14:	46bd      	mov	sp, r7
 8003f16:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003f1a:	4770      	bx	lr

08003f1c <MS5607Update>:

/* Performs the sensor reading updating the data structures */
void MS5607Update(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  MS5607UncompensatedRead(&uncompValues);
 8003f20:	4804      	ldr	r0, [pc, #16]	@ (8003f34 <MS5607Update+0x18>)
 8003f22:	f7ff fcbb 	bl	800389c <MS5607UncompensatedRead>
  MS5607Convert(&uncompValues, &readings);
 8003f26:	4904      	ldr	r1, [pc, #16]	@ (8003f38 <MS5607Update+0x1c>)
 8003f28:	4802      	ldr	r0, [pc, #8]	@ (8003f34 <MS5607Update+0x18>)
 8003f2a:	f7ff fd6f 	bl	8003a0c <MS5607Convert>
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	200008cc 	.word	0x200008cc
 8003f38:	200008d4 	.word	0x200008d4

08003f3c <MS5607ReadValues>:

MS5607Readings MS5607ReadValues(void)
{
 8003f3c:	b5b0      	push	{r4, r5, r7, lr}
 8003f3e:	b08c      	sub	sp, #48	@ 0x30
 8003f40:	af00      	add	r7, sp, #0
  MS5607Update();
 8003f42:	f7ff ffeb 	bl	8003f1c <MS5607Update>
  return (MS5607Readings){.pressure_kPa = readings.pressure / 1000.0, .temperature_C = readings.temperature / 100.0};
 8003f46:	4b18      	ldr	r3, [pc, #96]	@ (8003fa8 <MS5607ReadValues+0x6c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fc fb12 	bl	8000574 <__aeabi_i2d>
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	4b15      	ldr	r3, [pc, #84]	@ (8003fac <MS5607ReadValues+0x70>)
 8003f56:	f7fc fca1 	bl	800089c <__aeabi_ddiv>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4614      	mov	r4, r2
 8003f60:	461d      	mov	r5, r3
 8003f62:	4b11      	ldr	r3, [pc, #68]	@ (8003fa8 <MS5607ReadValues+0x6c>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc fb04 	bl	8000574 <__aeabi_i2d>
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb0 <MS5607ReadValues+0x74>)
 8003f72:	f7fc fc93 	bl	800089c <__aeabi_ddiv>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	e9c7 4508 	strd	r4, r5, [r7, #32]
 8003f7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8003f82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003f86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f8a:	ec41 0b16 	vmov	d6, r0, r1
 8003f8e:	ec43 2b17 	vmov	d7, r2, r3
}
 8003f92:	eeb0 0a46 	vmov.f32	s0, s12
 8003f96:	eef0 0a66 	vmov.f32	s1, s13
 8003f9a:	eeb0 1a47 	vmov.f32	s2, s14
 8003f9e:	eef0 1a67 	vmov.f32	s3, s15
 8003fa2:	3730      	adds	r7, #48	@ 0x30
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8003fa8:	200008d4 	.word	0x200008d4
 8003fac:	408f4000 	.word	0x408f4000
 8003fb0:	40590000 	.word	0x40590000

08003fb4 <enableCSB>:
  return readings.pressure / 1000.0;
}

/* Sets the CS pin */
void enableCSB(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_RESET);
 8003fb8:	4b04      	ldr	r3, [pc, #16]	@ (8003fcc <enableCSB+0x18>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a04      	ldr	r2, [pc, #16]	@ (8003fd0 <enableCSB+0x1c>)
 8003fbe:	8811      	ldrh	r1, [r2, #0]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f001 ff22 	bl	8005e0c <HAL_GPIO_WritePin>
}
 8003fc8:	bf00      	nop
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	200008b0 	.word	0x200008b0
 8003fd0:	200008b4 	.word	0x200008b4

08003fd4 <disableCSB>:

/* Sets the CS pin */
void disableCSB(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 8003fd8:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <disableCSB+0x18>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a04      	ldr	r2, [pc, #16]	@ (8003ff0 <disableCSB+0x1c>)
 8003fde:	8811      	ldrh	r1, [r2, #0]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f001 ff12 	bl	8005e0c <HAL_GPIO_WritePin>
}
 8003fe8:	bf00      	nop
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	200008b0 	.word	0x200008b0
 8003ff0:	200008b4 	.word	0x200008b4

08003ff4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ffe:	2003      	movs	r0, #3
 8004000:	f001 fa11 	bl	8005426 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004004:	200f      	movs	r0, #15
 8004006:	f7fe fd7b 	bl	8002b00 <HAL_InitTick>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	71fb      	strb	r3, [r7, #7]
 8004014:	e001      	b.n	800401a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004016:	f7fe f915 	bl	8002244 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800401a:	79fb      	ldrb	r3, [r7, #7]

}
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004028:	4b05      	ldr	r3, [pc, #20]	@ (8004040 <HAL_IncTick+0x1c>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	4b05      	ldr	r3, [pc, #20]	@ (8004044 <HAL_IncTick+0x20>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4413      	add	r3, r2
 8004032:	4a03      	ldr	r2, [pc, #12]	@ (8004040 <HAL_IncTick+0x1c>)
 8004034:	6013      	str	r3, [r2, #0]
}
 8004036:	bf00      	nop
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	200008dc 	.word	0x200008dc
 8004044:	20000008 	.word	0x20000008

08004048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return uwTick;
 800404c:	4b03      	ldr	r3, [pc, #12]	@ (800405c <HAL_GetTick+0x14>)
 800404e:	681b      	ldr	r3, [r3, #0]
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	200008dc 	.word	0x200008dc

08004060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004068:	f7ff ffee 	bl	8004048 <HAL_GetTick>
 800406c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004078:	d004      	beq.n	8004084 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800407a:	4b09      	ldr	r3, [pc, #36]	@ (80040a0 <HAL_Delay+0x40>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4413      	add	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004084:	bf00      	nop
 8004086:	f7ff ffdf 	bl	8004048 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	429a      	cmp	r2, r3
 8004094:	d8f7      	bhi.n	8004086 <HAL_Delay+0x26>
  {
  }
}
 8004096:	bf00      	nop
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	20000008 	.word	0x20000008

080040a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80040ac:	4b06      	ldr	r3, [pc, #24]	@ (80040c8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f023 0202 	bic.w	r2, r3, #2
 80040b4:	4904      	ldr	r1, [pc, #16]	@ (80040c8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	600b      	str	r3, [r1, #0]
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	40010030 	.word	0x40010030

080040cc <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80040d0:	4b05      	ldr	r3, [pc, #20]	@ (80040e8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a04      	ldr	r2, [pc, #16]	@ (80040e8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	6013      	str	r3, [r2, #0]
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40010030 	.word	0x40010030

080040ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	609a      	str	r2, [r3, #8]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	609a      	str	r2, [r3, #8]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3360      	adds	r3, #96	@ 0x60
 8004166:	461a      	mov	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b08      	ldr	r3, [pc, #32]	@ (8004198 <LL_ADC_SetOffset+0x44>)
 8004176:	4013      	ands	r3, r2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	4313      	orrs	r3, r2
 8004184:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800418c:	bf00      	nop
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	03fff000 	.word	0x03fff000

0800419c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3360      	adds	r3, #96	@ 0x60
 80041aa:	461a      	mov	r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3360      	adds	r3, #96	@ 0x60
 80041d8:	461a      	mov	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80041fe:	b480      	push	{r7}
 8004200:	b087      	sub	sp, #28
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3360      	adds	r3, #96	@ 0x60
 800420e:	461a      	mov	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	431a      	orrs	r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004228:	bf00      	nop
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3360      	adds	r3, #96	@ 0x60
 8004244:	461a      	mov	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	431a      	orrs	r2, r3
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	615a      	str	r2, [r3, #20]
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3330      	adds	r3, #48	@ 0x30
 80042a0:	461a      	mov	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	0a1b      	lsrs	r3, r3, #8
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	f003 030c 	and.w	r3, r3, #12
 80042ac:	4413      	add	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	211f      	movs	r1, #31
 80042bc:	fa01 f303 	lsl.w	r3, r1, r3
 80042c0:	43db      	mvns	r3, r3
 80042c2:	401a      	ands	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	0e9b      	lsrs	r3, r3, #26
 80042c8:	f003 011f 	and.w	r1, r3, #31
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f003 031f 	and.w	r3, r3, #31
 80042d2:	fa01 f303 	lsl.w	r3, r1, r3
 80042d6:	431a      	orrs	r2, r3
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80042dc:	bf00      	nop
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	3314      	adds	r3, #20
 80042f8:	461a      	mov	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	0e5b      	lsrs	r3, r3, #25
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	4413      	add	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	0d1b      	lsrs	r3, r3, #20
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	2107      	movs	r1, #7
 8004316:	fa01 f303 	lsl.w	r3, r1, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	401a      	ands	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	0d1b      	lsrs	r3, r3, #20
 8004322:	f003 031f 	and.w	r3, r3, #31
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	fa01 f303 	lsl.w	r3, r1, r3
 800432c:	431a      	orrs	r2, r3
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004332:	bf00      	nop
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
	...

08004340 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004358:	43db      	mvns	r3, r3
 800435a:	401a      	ands	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f003 0318 	and.w	r3, r3, #24
 8004362:	4908      	ldr	r1, [pc, #32]	@ (8004384 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004364:	40d9      	lsrs	r1, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	400b      	ands	r3, r1
 800436a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800436e:	431a      	orrs	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004376:	bf00      	nop
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	0007ffff 	.word	0x0007ffff

08004388 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004398:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6093      	str	r3, [r2, #8]
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043c0:	d101      	bne.n	80043c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80043e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800440c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004410:	d101      	bne.n	8004416 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <LL_ADC_IsEnabled+0x18>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <LL_ADC_IsEnabled+0x1a>
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b04      	cmp	r3, #4
 800445c:	d101      	bne.n	8004462 <LL_ADC_REG_IsConversionOngoing+0x18>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b08      	cmp	r3, #8
 8004482:	d101      	bne.n	8004488 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
	...

08004498 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004498:	b590      	push	{r4, r7, lr}
 800449a:	b089      	sub	sp, #36	@ 0x24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e19b      	b.n	80047ea <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d109      	bne.n	80044d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fd fef7 	bl	80022b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff ff67 	bl	80043ac <LL_ADC_IsDeepPowerDownEnabled>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d004      	beq.n	80044ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff ff4d 	bl	8004388 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff ff82 	bl	80043fc <LL_ADC_IsInternalRegulatorEnabled>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d115      	bne.n	800452a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff ff66 	bl	80043d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004508:	4b97      	ldr	r3, [pc, #604]	@ (8004768 <HAL_ADC_Init+0x2d0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	099b      	lsrs	r3, r3, #6
 800450e:	4a97      	ldr	r2, [pc, #604]	@ (800476c <HAL_ADC_Init+0x2d4>)
 8004510:	fba2 2303 	umull	r2, r3, r2, r3
 8004514:	099b      	lsrs	r3, r3, #6
 8004516:	3301      	adds	r3, #1
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800451c:	e002      	b.n	8004524 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3b01      	subs	r3, #1
 8004522:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f9      	bne.n	800451e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff ff64 	bl	80043fc <LL_ADC_IsInternalRegulatorEnabled>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10d      	bne.n	8004556 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453e:	f043 0210 	orr.w	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800454a:	f043 0201 	orr.w	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff ff75 	bl	800444a <LL_ADC_REG_IsConversionOngoing>
 8004560:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	2b00      	cmp	r3, #0
 800456c:	f040 8134 	bne.w	80047d8 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f040 8130 	bne.w	80047d8 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800457c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004580:	f043 0202 	orr.w	r2, r3, #2
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff ff49 	bl	8004424 <LL_ADC_IsEnabled>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d137      	bne.n	8004608 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045a0:	d004      	beq.n	80045ac <HAL_ADC_Init+0x114>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a72      	ldr	r2, [pc, #456]	@ (8004770 <HAL_ADC_Init+0x2d8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d10f      	bne.n	80045cc <HAL_ADC_Init+0x134>
 80045ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80045b0:	f7ff ff38 	bl	8004424 <LL_ADC_IsEnabled>
 80045b4:	4604      	mov	r4, r0
 80045b6:	486e      	ldr	r0, [pc, #440]	@ (8004770 <HAL_ADC_Init+0x2d8>)
 80045b8:	f7ff ff34 	bl	8004424 <LL_ADC_IsEnabled>
 80045bc:	4603      	mov	r3, r0
 80045be:	4323      	orrs	r3, r4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	bf0c      	ite	eq
 80045c4:	2301      	moveq	r3, #1
 80045c6:	2300      	movne	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	e008      	b.n	80045de <HAL_ADC_Init+0x146>
 80045cc:	4869      	ldr	r0, [pc, #420]	@ (8004774 <HAL_ADC_Init+0x2dc>)
 80045ce:	f7ff ff29 	bl	8004424 <LL_ADC_IsEnabled>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bf0c      	ite	eq
 80045d8:	2301      	moveq	r3, #1
 80045da:	2300      	movne	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d012      	beq.n	8004608 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045ea:	d004      	beq.n	80045f6 <HAL_ADC_Init+0x15e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a5f      	ldr	r2, [pc, #380]	@ (8004770 <HAL_ADC_Init+0x2d8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d101      	bne.n	80045fa <HAL_ADC_Init+0x162>
 80045f6:	4a60      	ldr	r2, [pc, #384]	@ (8004778 <HAL_ADC_Init+0x2e0>)
 80045f8:	e000      	b.n	80045fc <HAL_ADC_Init+0x164>
 80045fa:	4a60      	ldr	r2, [pc, #384]	@ (800477c <HAL_ADC_Init+0x2e4>)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f7ff fd72 	bl	80040ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	7f5b      	ldrb	r3, [r3, #29]
 800460c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004612:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004618:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800461e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004626:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004628:	4313      	orrs	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004632:	2b01      	cmp	r3, #1
 8004634:	d106      	bne.n	8004644 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463a:	3b01      	subs	r3, #1
 800463c:	045b      	lsls	r3, r3, #17
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	4313      	orrs	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d009      	beq.n	8004660 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004650:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004658:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4313      	orrs	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	4b46      	ldr	r3, [pc, #280]	@ (8004780 <HAL_ADC_Init+0x2e8>)
 8004668:	4013      	ands	r3, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	69b9      	ldr	r1, [r7, #24]
 8004670:	430b      	orrs	r3, r1
 8004672:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff feee 	bl	8004470 <LL_ADC_INJ_IsConversionOngoing>
 8004694:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d17b      	bne.n	8004794 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d178      	bne.n	8004794 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80046a6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80046ae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046be:	f023 0302 	bic.w	r3, r3, #2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6812      	ldr	r2, [r2, #0]
 80046c6:	69b9      	ldr	r1, [r7, #24]
 80046c8:	430b      	orrs	r3, r1
 80046ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d017      	beq.n	8004704 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80046e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80046ec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80046f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6911      	ldr	r1, [r2, #16]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	430b      	orrs	r3, r1
 80046fe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004702:	e013      	b.n	800472c <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004712:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004724:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004728:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004732:	2b01      	cmp	r3, #1
 8004734:	d126      	bne.n	8004784 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004740:	f023 0304 	bic.w	r3, r3, #4
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800474c:	4311      	orrs	r1, r2
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004752:	4311      	orrs	r1, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004758:	430a      	orrs	r2, r1
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0201 	orr.w	r2, r2, #1
 8004764:	611a      	str	r2, [r3, #16]
 8004766:	e015      	b.n	8004794 <HAL_ADC_Init+0x2fc>
 8004768:	20000000 	.word	0x20000000
 800476c:	053e2d63 	.word	0x053e2d63
 8004770:	50000100 	.word	0x50000100
 8004774:	50000400 	.word	0x50000400
 8004778:	50000300 	.word	0x50000300
 800477c:	50000700 	.word	0x50000700
 8004780:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0201 	bic.w	r2, r2, #1
 8004792:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d10c      	bne.n	80047b6 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a2:	f023 010f 	bic.w	r1, r3, #15
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	1e5a      	subs	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80047b4:	e007      	b.n	80047c6 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 020f 	bic.w	r2, r2, #15
 80047c4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ca:	f023 0303 	bic.w	r3, r3, #3
 80047ce:	f043 0201 	orr.w	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047d6:	e007      	b.n	80047e8 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047dc:	f043 0210 	orr.w	r2, r3, #16
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80047e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3724      	adds	r7, #36	@ 0x24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd90      	pop	{r4, r7, pc}
 80047f2:	bf00      	nop

080047f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b0b6      	sub	sp, #216	@ 0xd8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800480e:	2b01      	cmp	r3, #1
 8004810:	d102      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x24>
 8004812:	2302      	movs	r3, #2
 8004814:	f000 bc04 	b.w	8005020 <HAL_ADC_ConfigChannel+0x82c>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fe10 	bl	800444a <LL_ADC_REG_IsConversionOngoing>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	f040 83e8 	bne.w	8005002 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	f7ff fd26 	bl	8004290 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fdfe 	bl	800444a <LL_ADC_REG_IsConversionOngoing>
 800484e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff fe0a 	bl	8004470 <LL_ADC_INJ_IsConversionOngoing>
 800485c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004860:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004864:	2b00      	cmp	r3, #0
 8004866:	f040 81d9 	bne.w	8004c1c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800486a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800486e:	2b00      	cmp	r3, #0
 8004870:	f040 81d4 	bne.w	8004c1c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800487c:	d10f      	bne.n	800489e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2200      	movs	r2, #0
 8004888:	4619      	mov	r1, r3
 800488a:	f7ff fd2d 	bl	80042e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff fce7 	bl	800426a <LL_ADC_SetSamplingTimeCommonConfig>
 800489c:	e00e      	b.n	80048bc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6819      	ldr	r1, [r3, #0]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	461a      	mov	r2, r3
 80048ac:	f7ff fd1c 	bl	80042e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2100      	movs	r1, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fcd7 	bl	800426a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	08db      	lsrs	r3, r3, #3
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d022      	beq.n	8004924 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6919      	ldr	r1, [r3, #16]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80048ee:	f7ff fc31 	bl	8004154 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6919      	ldr	r1, [r3, #16]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	461a      	mov	r2, r3
 8004900:	f7ff fc7d 	bl	80041fe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004910:	2b01      	cmp	r3, #1
 8004912:	d102      	bne.n	800491a <HAL_ADC_ConfigChannel+0x126>
 8004914:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004918:	e000      	b.n	800491c <HAL_ADC_ConfigChannel+0x128>
 800491a:	2300      	movs	r3, #0
 800491c:	461a      	mov	r2, r3
 800491e:	f7ff fc89 	bl	8004234 <LL_ADC_SetOffsetSaturation>
 8004922:	e17b      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2100      	movs	r1, #0
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff fc36 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004930:	4603      	mov	r3, r0
 8004932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x15c>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2100      	movs	r1, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fc2b 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004946:	4603      	mov	r3, r0
 8004948:	0e9b      	lsrs	r3, r3, #26
 800494a:	f003 021f 	and.w	r2, r3, #31
 800494e:	e01e      	b.n	800498e <HAL_ADC_ConfigChannel+0x19a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2100      	movs	r1, #0
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff fc20 	bl	800419c <LL_ADC_GetOffsetChannel>
 800495c:	4603      	mov	r3, r0
 800495e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004962:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004966:	fa93 f3a3 	rbit	r3, r3
 800496a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800496e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004972:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800497e:	2320      	movs	r3, #32
 8004980:	e004      	b.n	800498c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004982:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004986:	fab3 f383 	clz	r3, r3
 800498a:	b2db      	uxtb	r3, r3
 800498c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <HAL_ADC_ConfigChannel+0x1b2>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	0e9b      	lsrs	r3, r3, #26
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	e018      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x1e4>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80049b2:	fa93 f3a3 	rbit	r3, r3
 80049b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80049ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80049c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80049ca:	2320      	movs	r3, #32
 80049cc:	e004      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80049ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049d2:	fab3 f383 	clz	r3, r3
 80049d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049d8:	429a      	cmp	r2, r3
 80049da:	d106      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2200      	movs	r2, #0
 80049e2:	2100      	movs	r1, #0
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff fbef 	bl	80041c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2101      	movs	r1, #1
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fbd3 	bl	800419c <LL_ADC_GetOffsetChannel>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10a      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x222>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2101      	movs	r1, #1
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fbc8 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	0e9b      	lsrs	r3, r3, #26
 8004a10:	f003 021f 	and.w	r2, r3, #31
 8004a14:	e01e      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x260>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fbbd 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a2c:	fa93 f3a3 	rbit	r3, r3
 8004a30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004a34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004a3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004a44:	2320      	movs	r3, #32
 8004a46:	e004      	b.n	8004a52 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004a48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a4c:	fab3 f383 	clz	r3, r3
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d105      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x278>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	0e9b      	lsrs	r3, r3, #26
 8004a66:	f003 031f 	and.w	r3, r3, #31
 8004a6a:	e018      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x2aa>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a78:	fa93 f3a3 	rbit	r3, r3
 8004a7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004a80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004a88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004a90:	2320      	movs	r3, #32
 8004a92:	e004      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a98:	fab3 f383 	clz	r3, r3
 8004a9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d106      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff fb8c 	bl	80041c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2102      	movs	r1, #2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff fb70 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10a      	bne.n	8004adc <HAL_ADC_ConfigChannel+0x2e8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2102      	movs	r1, #2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff fb65 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	0e9b      	lsrs	r3, r3, #26
 8004ad6:	f003 021f 	and.w	r2, r3, #31
 8004ada:	e01e      	b.n	8004b1a <HAL_ADC_ConfigChannel+0x326>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff fb5a 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004af2:	fa93 f3a3 	rbit	r3, r3
 8004af6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004afa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004afe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004b0a:	2320      	movs	r3, #32
 8004b0c:	e004      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004b0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b12:	fab3 f383 	clz	r3, r3
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d105      	bne.n	8004b32 <HAL_ADC_ConfigChannel+0x33e>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	0e9b      	lsrs	r3, r3, #26
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	e016      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x36c>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b3e:	fa93 f3a3 	rbit	r3, r3
 8004b42:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004b44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004b4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004b52:	2320      	movs	r3, #32
 8004b54:	e004      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b5a:	fab3 f383 	clz	r3, r3
 8004b5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d106      	bne.n	8004b72 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2102      	movs	r1, #2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff fb2b 	bl	80041c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2103      	movs	r1, #3
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff fb0f 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10a      	bne.n	8004b9e <HAL_ADC_ConfigChannel+0x3aa>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2103      	movs	r1, #3
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff fb04 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004b94:	4603      	mov	r3, r0
 8004b96:	0e9b      	lsrs	r3, r3, #26
 8004b98:	f003 021f 	and.w	r2, r3, #31
 8004b9c:	e017      	b.n	8004bce <HAL_ADC_ConfigChannel+0x3da>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2103      	movs	r1, #3
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff faf9 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004baa:	4603      	mov	r3, r0
 8004bac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bb0:	fa93 f3a3 	rbit	r3, r3
 8004bb4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004bb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bb8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004bba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004bc0:	2320      	movs	r3, #32
 8004bc2:	e003      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004bc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bc6:	fab3 f383 	clz	r3, r3
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d105      	bne.n	8004be6 <HAL_ADC_ConfigChannel+0x3f2>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	0e9b      	lsrs	r3, r3, #26
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	e011      	b.n	8004c0a <HAL_ADC_ConfigChannel+0x416>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bee:	fa93 f3a3 	rbit	r3, r3
 8004bf2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004bfe:	2320      	movs	r3, #32
 8004c00:	e003      	b.n	8004c0a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004c02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c04:	fab3 f383 	clz	r3, r3
 8004c08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d106      	bne.n	8004c1c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2200      	movs	r2, #0
 8004c14:	2103      	movs	r1, #3
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff fad6 	bl	80041c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff fbff 	bl	8004424 <LL_ADC_IsEnabled>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f040 813d 	bne.w	8004ea8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	6819      	ldr	r1, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f7ff fb80 	bl	8004340 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4aa2      	ldr	r2, [pc, #648]	@ (8004ed0 <HAL_ADC_ConfigChannel+0x6dc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	f040 812e 	bne.w	8004ea8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10b      	bne.n	8004c74 <HAL_ADC_ConfigChannel+0x480>
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	0e9b      	lsrs	r3, r3, #26
 8004c62:	3301      	adds	r3, #1
 8004c64:	f003 031f 	and.w	r3, r3, #31
 8004c68:	2b09      	cmp	r3, #9
 8004c6a:	bf94      	ite	ls
 8004c6c:	2301      	movls	r3, #1
 8004c6e:	2300      	movhi	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	e019      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x4b4>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c7c:	fa93 f3a3 	rbit	r3, r3
 8004c80:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004c82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c84:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004c86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004c8c:	2320      	movs	r3, #32
 8004c8e:	e003      	b.n	8004c98 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004c90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c92:	fab3 f383 	clz	r3, r3
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	3301      	adds	r3, #1
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	2b09      	cmp	r3, #9
 8004ca0:	bf94      	ite	ls
 8004ca2:	2301      	movls	r3, #1
 8004ca4:	2300      	movhi	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d079      	beq.n	8004da0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d107      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0x4d4>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	0e9b      	lsrs	r3, r3, #26
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	069b      	lsls	r3, r3, #26
 8004cc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cc6:	e015      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x500>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cd0:	fa93 f3a3 	rbit	r3, r3
 8004cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cd8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004ce0:	2320      	movs	r3, #32
 8004ce2:	e003      	b.n	8004cec <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ce6:	fab3 f383 	clz	r3, r3
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	3301      	adds	r3, #1
 8004cee:	069b      	lsls	r3, r3, #26
 8004cf0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d109      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x520>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	0e9b      	lsrs	r3, r3, #26
 8004d06:	3301      	adds	r3, #1
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d12:	e017      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x550>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d1c:	fa93 f3a3 	rbit	r3, r3
 8004d20:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d24:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004d2c:	2320      	movs	r3, #32
 8004d2e:	e003      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004d30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d32:	fab3 f383 	clz	r3, r3
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	3301      	adds	r3, #1
 8004d3a:	f003 031f 	and.w	r3, r3, #31
 8004d3e:	2101      	movs	r1, #1
 8004d40:	fa01 f303 	lsl.w	r3, r1, r3
 8004d44:	ea42 0103 	orr.w	r1, r2, r3
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <HAL_ADC_ConfigChannel+0x576>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	0e9b      	lsrs	r3, r3, #26
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	f003 021f 	and.w	r2, r3, #31
 8004d60:	4613      	mov	r3, r2
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	4413      	add	r3, r2
 8004d66:	051b      	lsls	r3, r3, #20
 8004d68:	e018      	b.n	8004d9c <HAL_ADC_ConfigChannel+0x5a8>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d72:	fa93 f3a3 	rbit	r3, r3
 8004d76:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004d82:	2320      	movs	r3, #32
 8004d84:	e003      	b.n	8004d8e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d88:	fab3 f383 	clz	r3, r3
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	3301      	adds	r3, #1
 8004d90:	f003 021f 	and.w	r2, r3, #31
 8004d94:	4613      	mov	r3, r2
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	4413      	add	r3, r2
 8004d9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	e07e      	b.n	8004e9e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d107      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x5c8>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	0e9b      	lsrs	r3, r3, #26
 8004db2:	3301      	adds	r3, #1
 8004db4:	069b      	lsls	r3, r3, #26
 8004db6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004dba:	e015      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x5f4>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc4:	fa93 f3a3 	rbit	r3, r3
 8004dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dcc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004dd4:	2320      	movs	r3, #32
 8004dd6:	e003      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dda:	fab3 f383 	clz	r3, r3
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	3301      	adds	r3, #1
 8004de2:	069b      	lsls	r3, r3, #26
 8004de4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d109      	bne.n	8004e08 <HAL_ADC_ConfigChannel+0x614>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	0e9b      	lsrs	r3, r3, #26
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	2101      	movs	r1, #1
 8004e02:	fa01 f303 	lsl.w	r3, r1, r3
 8004e06:	e017      	b.n	8004e38 <HAL_ADC_ConfigChannel+0x644>
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	fa93 f3a3 	rbit	r3, r3
 8004e14:	61fb      	str	r3, [r7, #28]
  return result;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004e20:	2320      	movs	r3, #32
 8004e22:	e003      	b.n	8004e2c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e26:	fab3 f383 	clz	r3, r3
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	2101      	movs	r1, #1
 8004e34:	fa01 f303 	lsl.w	r3, r1, r3
 8004e38:	ea42 0103 	orr.w	r1, r2, r3
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10d      	bne.n	8004e64 <HAL_ADC_ConfigChannel+0x670>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	0e9b      	lsrs	r3, r3, #26
 8004e4e:	3301      	adds	r3, #1
 8004e50:	f003 021f 	and.w	r2, r3, #31
 8004e54:	4613      	mov	r3, r2
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	4413      	add	r3, r2
 8004e5a:	3b1e      	subs	r3, #30
 8004e5c:	051b      	lsls	r3, r3, #20
 8004e5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e62:	e01b      	b.n	8004e9c <HAL_ADC_ConfigChannel+0x6a8>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	fa93 f3a3 	rbit	r3, r3
 8004e70:	613b      	str	r3, [r7, #16]
  return result;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004e7c:	2320      	movs	r3, #32
 8004e7e:	e003      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	fab3 f383 	clz	r3, r3
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	3301      	adds	r3, #1
 8004e8a:	f003 021f 	and.w	r2, r3, #31
 8004e8e:	4613      	mov	r3, r2
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	4413      	add	r3, r2
 8004e94:	3b1e      	subs	r3, #30
 8004e96:	051b      	lsls	r3, r3, #20
 8004e98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e9c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	f7ff fa20 	bl	80042e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4b09      	ldr	r3, [pc, #36]	@ (8004ed4 <HAL_ADC_ConfigChannel+0x6e0>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80af 	beq.w	8005014 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ebe:	d004      	beq.n	8004eca <HAL_ADC_ConfigChannel+0x6d6>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a04      	ldr	r2, [pc, #16]	@ (8004ed8 <HAL_ADC_ConfigChannel+0x6e4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d10a      	bne.n	8004ee0 <HAL_ADC_ConfigChannel+0x6ec>
 8004eca:	4b04      	ldr	r3, [pc, #16]	@ (8004edc <HAL_ADC_ConfigChannel+0x6e8>)
 8004ecc:	e009      	b.n	8004ee2 <HAL_ADC_ConfigChannel+0x6ee>
 8004ece:	bf00      	nop
 8004ed0:	407f0000 	.word	0x407f0000
 8004ed4:	80080000 	.word	0x80080000
 8004ed8:	50000100 	.word	0x50000100
 8004edc:	50000300 	.word	0x50000300
 8004ee0:	4b51      	ldr	r3, [pc, #324]	@ (8005028 <HAL_ADC_ConfigChannel+0x834>)
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff f928 	bl	8004138 <LL_ADC_GetCommonPathInternalCh>
 8004ee8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a4e      	ldr	r2, [pc, #312]	@ (800502c <HAL_ADC_ConfigChannel+0x838>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_ADC_ConfigChannel+0x70c>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a4d      	ldr	r2, [pc, #308]	@ (8005030 <HAL_ADC_ConfigChannel+0x83c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d134      	bne.n	8004f6a <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d12e      	bne.n	8004f6a <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f14:	d17e      	bne.n	8005014 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f1e:	d004      	beq.n	8004f2a <HAL_ADC_ConfigChannel+0x736>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a43      	ldr	r2, [pc, #268]	@ (8005034 <HAL_ADC_ConfigChannel+0x840>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d101      	bne.n	8004f2e <HAL_ADC_ConfigChannel+0x73a>
 8004f2a:	4a43      	ldr	r2, [pc, #268]	@ (8005038 <HAL_ADC_ConfigChannel+0x844>)
 8004f2c:	e000      	b.n	8004f30 <HAL_ADC_ConfigChannel+0x73c>
 8004f2e:	4a3e      	ldr	r2, [pc, #248]	@ (8005028 <HAL_ADC_ConfigChannel+0x834>)
 8004f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f7ff f8e9 	bl	8004112 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f40:	4b3e      	ldr	r3, [pc, #248]	@ (800503c <HAL_ADC_ConfigChannel+0x848>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	099b      	lsrs	r3, r3, #6
 8004f46:	4a3e      	ldr	r2, [pc, #248]	@ (8005040 <HAL_ADC_ConfigChannel+0x84c>)
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4c:	099b      	lsrs	r3, r3, #6
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	4613      	mov	r3, r2
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	4413      	add	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f5a:	e002      	b.n	8004f62 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f9      	bne.n	8004f5c <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f68:	e054      	b.n	8005014 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a35      	ldr	r2, [pc, #212]	@ (8005044 <HAL_ADC_ConfigChannel+0x850>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d120      	bne.n	8004fb6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d11a      	bne.n	8004fb6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f88:	d144      	bne.n	8005014 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f92:	d004      	beq.n	8004f9e <HAL_ADC_ConfigChannel+0x7aa>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a26      	ldr	r2, [pc, #152]	@ (8005034 <HAL_ADC_ConfigChannel+0x840>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d101      	bne.n	8004fa2 <HAL_ADC_ConfigChannel+0x7ae>
 8004f9e:	4a26      	ldr	r2, [pc, #152]	@ (8005038 <HAL_ADC_ConfigChannel+0x844>)
 8004fa0:	e000      	b.n	8004fa4 <HAL_ADC_ConfigChannel+0x7b0>
 8004fa2:	4a21      	ldr	r2, [pc, #132]	@ (8005028 <HAL_ADC_ConfigChannel+0x834>)
 8004fa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fa8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fac:	4619      	mov	r1, r3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	f7ff f8af 	bl	8004112 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fb4:	e02e      	b.n	8005014 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a23      	ldr	r2, [pc, #140]	@ (8005048 <HAL_ADC_ConfigChannel+0x854>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d129      	bne.n	8005014 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d123      	bne.n	8005014 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a18      	ldr	r2, [pc, #96]	@ (8005034 <HAL_ADC_ConfigChannel+0x840>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d01e      	beq.n	8005014 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fde:	d004      	beq.n	8004fea <HAL_ADC_ConfigChannel+0x7f6>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a13      	ldr	r2, [pc, #76]	@ (8005034 <HAL_ADC_ConfigChannel+0x840>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d101      	bne.n	8004fee <HAL_ADC_ConfigChannel+0x7fa>
 8004fea:	4a13      	ldr	r2, [pc, #76]	@ (8005038 <HAL_ADC_ConfigChannel+0x844>)
 8004fec:	e000      	b.n	8004ff0 <HAL_ADC_ConfigChannel+0x7fc>
 8004fee:	4a0e      	ldr	r2, [pc, #56]	@ (8005028 <HAL_ADC_ConfigChannel+0x834>)
 8004ff0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ff4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	f7ff f889 	bl	8004112 <LL_ADC_SetCommonPathInternalCh>
 8005000:	e008      	b.n	8005014 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005006:	f043 0220 	orr.w	r2, r3, #32
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800501c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005020:	4618      	mov	r0, r3
 8005022:	37d8      	adds	r7, #216	@ 0xd8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	50000700 	.word	0x50000700
 800502c:	c3210000 	.word	0xc3210000
 8005030:	90c00010 	.word	0x90c00010
 8005034:	50000100 	.word	0x50000100
 8005038:	50000300 	.word	0x50000300
 800503c:	20000000 	.word	0x20000000
 8005040:	053e2d63 	.word	0x053e2d63
 8005044:	c7520000 	.word	0xc7520000
 8005048:	cb840000 	.word	0xcb840000

0800504c <LL_ADC_IsEnabled>:
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <LL_ADC_IsEnabled+0x18>
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <LL_ADC_IsEnabled+0x1a>
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <LL_ADC_REG_IsConversionOngoing>:
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b04      	cmp	r3, #4
 8005084:	d101      	bne.n	800508a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005086:	2301      	movs	r3, #1
 8005088:	e000      	b.n	800508c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005098:	b590      	push	{r4, r7, lr}
 800509a:	b0a1      	sub	sp, #132	@ 0x84
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e0cb      	b.n	800524e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80050be:	2300      	movs	r3, #0
 80050c0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80050c2:	2300      	movs	r3, #0
 80050c4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050ce:	d102      	bne.n	80050d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80050d0:	4b61      	ldr	r3, [pc, #388]	@ (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050d2:	60bb      	str	r3, [r7, #8]
 80050d4:	e001      	b.n	80050da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80050d6:	2300      	movs	r3, #0
 80050d8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10b      	bne.n	80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e4:	f043 0220 	orr.w	r2, r3, #32
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e0aa      	b.n	800524e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff ffb9 	bl	8005072 <LL_ADC_REG_IsConversionOngoing>
 8005100:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff ffb3 	bl	8005072 <LL_ADC_REG_IsConversionOngoing>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	f040 808c 	bne.w	800522c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005114:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005116:	2b00      	cmp	r3, #0
 8005118:	f040 8088 	bne.w	800522c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005124:	d004      	beq.n	8005130 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a4b      	ldr	r2, [pc, #300]	@ (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d101      	bne.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8005130:	4b4a      	ldr	r3, [pc, #296]	@ (800525c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8005132:	e000      	b.n	8005136 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005134:	4b4a      	ldr	r3, [pc, #296]	@ (8005260 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8005136:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d041      	beq.n	80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005140:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	6859      	ldr	r1, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005152:	035b      	lsls	r3, r3, #13
 8005154:	430b      	orrs	r3, r1
 8005156:	431a      	orrs	r2, r3
 8005158:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800515a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005164:	d004      	beq.n	8005170 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a3b      	ldr	r2, [pc, #236]	@ (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d10f      	bne.n	8005190 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8005170:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005174:	f7ff ff6a 	bl	800504c <LL_ADC_IsEnabled>
 8005178:	4604      	mov	r4, r0
 800517a:	4837      	ldr	r0, [pc, #220]	@ (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800517c:	f7ff ff66 	bl	800504c <LL_ADC_IsEnabled>
 8005180:	4603      	mov	r3, r0
 8005182:	4323      	orrs	r3, r4
 8005184:	2b00      	cmp	r3, #0
 8005186:	bf0c      	ite	eq
 8005188:	2301      	moveq	r3, #1
 800518a:	2300      	movne	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	e008      	b.n	80051a2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8005190:	4834      	ldr	r0, [pc, #208]	@ (8005264 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005192:	f7ff ff5b 	bl	800504c <LL_ADC_IsEnabled>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	bf0c      	ite	eq
 800519c:	2301      	moveq	r3, #1
 800519e:	2300      	movne	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d04c      	beq.n	8005240 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80051a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80051ae:	f023 030f 	bic.w	r3, r3, #15
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	6811      	ldr	r1, [r2, #0]
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	6892      	ldr	r2, [r2, #8]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	431a      	orrs	r2, r3
 80051be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051c0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051c2:	e03d      	b.n	8005240 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80051c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051d8:	d004      	beq.n	80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a1e      	ldr	r2, [pc, #120]	@ (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d10f      	bne.n	8005204 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80051e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80051e8:	f7ff ff30 	bl	800504c <LL_ADC_IsEnabled>
 80051ec:	4604      	mov	r4, r0
 80051ee:	481a      	ldr	r0, [pc, #104]	@ (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80051f0:	f7ff ff2c 	bl	800504c <LL_ADC_IsEnabled>
 80051f4:	4603      	mov	r3, r0
 80051f6:	4323      	orrs	r3, r4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	bf0c      	ite	eq
 80051fc:	2301      	moveq	r3, #1
 80051fe:	2300      	movne	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	e008      	b.n	8005216 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8005204:	4817      	ldr	r0, [pc, #92]	@ (8005264 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005206:	f7ff ff21 	bl	800504c <LL_ADC_IsEnabled>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	bf0c      	ite	eq
 8005210:	2301      	moveq	r3, #1
 8005212:	2300      	movne	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d012      	beq.n	8005240 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800521a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005222:	f023 030f 	bic.w	r3, r3, #15
 8005226:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005228:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800522a:	e009      	b.n	8005240 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005230:	f043 0220 	orr.w	r2, r3, #32
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800523e:	e000      	b.n	8005242 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005240:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800524a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800524e:	4618      	mov	r0, r3
 8005250:	3784      	adds	r7, #132	@ 0x84
 8005252:	46bd      	mov	sp, r7
 8005254:	bd90      	pop	{r4, r7, pc}
 8005256:	bf00      	nop
 8005258:	50000100 	.word	0x50000100
 800525c:	50000300 	.word	0x50000300
 8005260:	50000700 	.word	0x50000700
 8005264:	50000400 	.word	0x50000400

08005268 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e023      	b.n	80052c2 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fd f864 	bl	800235c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005310 <__NVIC_SetPriorityGrouping+0x44>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80052e8:	4013      	ands	r3, r2
 80052ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80052f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052fe:	4a04      	ldr	r2, [pc, #16]	@ (8005310 <__NVIC_SetPriorityGrouping+0x44>)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	60d3      	str	r3, [r2, #12]
}
 8005304:	bf00      	nop
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	e000ed00 	.word	0xe000ed00

08005314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005318:	4b04      	ldr	r3, [pc, #16]	@ (800532c <__NVIC_GetPriorityGrouping+0x18>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	0a1b      	lsrs	r3, r3, #8
 800531e:	f003 0307 	and.w	r3, r3, #7
}
 8005322:	4618      	mov	r0, r3
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	e000ed00 	.word	0xe000ed00

08005330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800533a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800533e:	2b00      	cmp	r3, #0
 8005340:	db0b      	blt.n	800535a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	f003 021f 	and.w	r2, r3, #31
 8005348:	4907      	ldr	r1, [pc, #28]	@ (8005368 <__NVIC_EnableIRQ+0x38>)
 800534a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	2001      	movs	r0, #1
 8005352:	fa00 f202 	lsl.w	r2, r0, r2
 8005356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	e000e100 	.word	0xe000e100

0800536c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	6039      	str	r1, [r7, #0]
 8005376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537c:	2b00      	cmp	r3, #0
 800537e:	db0a      	blt.n	8005396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	b2da      	uxtb	r2, r3
 8005384:	490c      	ldr	r1, [pc, #48]	@ (80053b8 <__NVIC_SetPriority+0x4c>)
 8005386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538a:	0112      	lsls	r2, r2, #4
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	440b      	add	r3, r1
 8005390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005394:	e00a      	b.n	80053ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	b2da      	uxtb	r2, r3
 800539a:	4908      	ldr	r1, [pc, #32]	@ (80053bc <__NVIC_SetPriority+0x50>)
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	3b04      	subs	r3, #4
 80053a4:	0112      	lsls	r2, r2, #4
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	440b      	add	r3, r1
 80053aa:	761a      	strb	r2, [r3, #24]
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	e000e100 	.word	0xe000e100
 80053bc:	e000ed00 	.word	0xe000ed00

080053c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b089      	sub	sp, #36	@ 0x24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f1c3 0307 	rsb	r3, r3, #7
 80053da:	2b04      	cmp	r3, #4
 80053dc:	bf28      	it	cs
 80053de:	2304      	movcs	r3, #4
 80053e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	3304      	adds	r3, #4
 80053e6:	2b06      	cmp	r3, #6
 80053e8:	d902      	bls.n	80053f0 <NVIC_EncodePriority+0x30>
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	3b03      	subs	r3, #3
 80053ee:	e000      	b.n	80053f2 <NVIC_EncodePriority+0x32>
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	43da      	mvns	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	401a      	ands	r2, r3
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005408:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	fa01 f303 	lsl.w	r3, r1, r3
 8005412:	43d9      	mvns	r1, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005418:	4313      	orrs	r3, r2
         );
}
 800541a:	4618      	mov	r0, r3
 800541c:	3724      	adds	r7, #36	@ 0x24
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff ff4c 	bl	80052cc <__NVIC_SetPriorityGrouping>
}
 8005434:	bf00      	nop
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800544a:	f7ff ff63 	bl	8005314 <__NVIC_GetPriorityGrouping>
 800544e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	68b9      	ldr	r1, [r7, #8]
 8005454:	6978      	ldr	r0, [r7, #20]
 8005456:	f7ff ffb3 	bl	80053c0 <NVIC_EncodePriority>
 800545a:	4602      	mov	r2, r0
 800545c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005460:	4611      	mov	r1, r2
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff ff82 	bl	800536c <__NVIC_SetPriority>
}
 8005468:	bf00      	nop
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	4603      	mov	r3, r0
 8005478:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800547a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff ff56 	bl	8005330 <__NVIC_EnableIRQ>
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e08d      	b.n	80055ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	4b47      	ldr	r3, [pc, #284]	@ (80055c4 <HAL_DMA_Init+0x138>)
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d80f      	bhi.n	80054ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	4b45      	ldr	r3, [pc, #276]	@ (80055c8 <HAL_DMA_Init+0x13c>)
 80054b2:	4413      	add	r3, r2
 80054b4:	4a45      	ldr	r2, [pc, #276]	@ (80055cc <HAL_DMA_Init+0x140>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	091b      	lsrs	r3, r3, #4
 80054bc:	009a      	lsls	r2, r3, #2
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a42      	ldr	r2, [pc, #264]	@ (80055d0 <HAL_DMA_Init+0x144>)
 80054c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80054c8:	e00e      	b.n	80054e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	4b40      	ldr	r3, [pc, #256]	@ (80055d4 <HAL_DMA_Init+0x148>)
 80054d2:	4413      	add	r3, r2
 80054d4:	4a3d      	ldr	r2, [pc, #244]	@ (80055cc <HAL_DMA_Init+0x140>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	091b      	lsrs	r3, r3, #4
 80054dc:	009a      	lsls	r2, r3, #2
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a3c      	ldr	r2, [pc, #240]	@ (80055d8 <HAL_DMA_Init+0x14c>)
 80054e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80054fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005502:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800550c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005518:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005524:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f9be 	bl	80058bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005548:	d102      	bne.n	8005550 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005564:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d010      	beq.n	8005590 <HAL_DMA_Init+0x104>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b04      	cmp	r3, #4
 8005574:	d80c      	bhi.n	8005590 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f9de 	bl	8005938 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800558c:	605a      	str	r2, [r3, #4]
 800558e:	e008      	b.n	80055a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	40020407 	.word	0x40020407
 80055c8:	bffdfff8 	.word	0xbffdfff8
 80055cc:	cccccccd 	.word	0xcccccccd
 80055d0:	40020000 	.word	0x40020000
 80055d4:	bffdfbf8 	.word	0xbffdfbf8
 80055d8:	40020400 	.word	0x40020400

080055dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d005      	beq.n	8005600 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2204      	movs	r2, #4
 80055f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	73fb      	strb	r3, [r7, #15]
 80055fe:	e037      	b.n	8005670 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 020e 	bic.w	r2, r2, #14
 800560e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800561a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800561e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0201 	bic.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005634:	f003 021f 	and.w	r2, r3, #31
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563c:	2101      	movs	r1, #1
 800563e:	fa01 f202 	lsl.w	r2, r1, r2
 8005642:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800564c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00c      	beq.n	8005670 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005660:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005664:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800566e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005680:	7bfb      	ldrb	r3, [r7, #15]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d00d      	beq.n	80056c2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2204      	movs	r2, #4
 80056aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	73fb      	strb	r3, [r7, #15]
 80056c0:	e047      	b.n	8005752 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 020e 	bic.w	r2, r2, #14
 80056d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0201 	bic.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f6:	f003 021f 	and.w	r2, r3, #31
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	2101      	movs	r1, #1
 8005700:	fa01 f202 	lsl.w	r2, r1, r2
 8005704:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800570e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00c      	beq.n	8005732 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005722:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005726:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005730:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	4798      	blx	r3
    }
  }
  return status;
 8005752:	7bfb      	ldrb	r3, [r7, #15]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	2204      	movs	r2, #4
 800577e:	409a      	lsls	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4013      	ands	r3, r2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d026      	beq.n	80057d6 <HAL_DMA_IRQHandler+0x7a>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f003 0304 	and.w	r3, r3, #4
 800578e:	2b00      	cmp	r3, #0
 8005790:	d021      	beq.n	80057d6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d107      	bne.n	80057b0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0204 	bic.w	r2, r2, #4
 80057ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b4:	f003 021f 	and.w	r2, r3, #31
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	2104      	movs	r1, #4
 80057be:	fa01 f202 	lsl.w	r2, r1, r2
 80057c2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d071      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80057d4:	e06c      	b.n	80058b0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	2202      	movs	r2, #2
 80057e0:	409a      	lsls	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4013      	ands	r3, r2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d02e      	beq.n	8005848 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d029      	beq.n	8005848 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0320 	and.w	r3, r3, #32
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10b      	bne.n	800581a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 020a 	bic.w	r2, r2, #10
 8005810:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581e:	f003 021f 	and.w	r2, r3, #31
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005826:	2102      	movs	r1, #2
 8005828:	fa01 f202 	lsl.w	r2, r1, r2
 800582c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583a:	2b00      	cmp	r3, #0
 800583c:	d038      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005846:	e033      	b.n	80058b0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584c:	f003 031f 	and.w	r3, r3, #31
 8005850:	2208      	movs	r2, #8
 8005852:	409a      	lsls	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4013      	ands	r3, r2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d02a      	beq.n	80058b2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d025      	beq.n	80058b2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 020e 	bic.w	r2, r2, #14
 8005874:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587a:	f003 021f 	and.w	r2, r3, #31
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005882:	2101      	movs	r1, #1
 8005884:	fa01 f202 	lsl.w	r2, r1, r2
 8005888:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d004      	beq.n	80058b2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80058b0:	bf00      	nop
 80058b2:	bf00      	nop
}
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	4b16      	ldr	r3, [pc, #88]	@ (8005924 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d802      	bhi.n	80058d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80058d0:	4b15      	ldr	r3, [pc, #84]	@ (8005928 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	e001      	b.n	80058da <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80058d6:	4b15      	ldr	r3, [pc, #84]	@ (800592c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80058d8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	3b08      	subs	r3, #8
 80058e6:	4a12      	ldr	r2, [pc, #72]	@ (8005930 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80058e8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ec:	091b      	lsrs	r3, r3, #4
 80058ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f4:	089b      	lsrs	r3, r3, #2
 80058f6:	009a      	lsls	r2, r3, #2
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	4413      	add	r3, r2
 80058fc:	461a      	mov	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a0b      	ldr	r2, [pc, #44]	@ (8005934 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005906:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	2201      	movs	r2, #1
 8005910:	409a      	lsls	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005916:	bf00      	nop
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40020407 	.word	0x40020407
 8005928:	40020800 	.word	0x40020800
 800592c:	40020820 	.word	0x40020820
 8005930:	cccccccd 	.word	0xcccccccd
 8005934:	40020880 	.word	0x40020880

08005938 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4b0b      	ldr	r3, [pc, #44]	@ (8005978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800594c:	4413      	add	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	461a      	mov	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a08      	ldr	r2, [pc, #32]	@ (800597c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800595a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3b01      	subs	r3, #1
 8005960:	f003 031f 	and.w	r3, r3, #31
 8005964:	2201      	movs	r2, #1
 8005966:	409a      	lsls	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800596c:	bf00      	nop
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	1000823f 	.word	0x1000823f
 800597c:	40020940 	.word	0x40020940

08005980 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e033      	b.n	80059fa <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fc fcf8 	bl	800239c <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f854 	bl	8005a60 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f822 	bl	8005a02 <FMAC_Reset>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d10c      	bne.n	80059de <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c8:	f043 0210 	orr.w	r2, r3, #16
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	22a0      	movs	r2, #160	@ 0xa0
 80059d4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	73fb      	strb	r3, [r7, #15]
 80059dc:	e008      	b.n	80059f0 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a0a:	f7fe fb1d 	bl	8004048 <HAL_GetTick>
 8005a0e:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005a1e:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8005a20:	e00f      	b.n	8005a42 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8005a22:	f7fe fb11 	bl	8004048 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005a30:	d907      	bls.n	8005a42 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e00a      	b.n	8005a58 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e8      	bne.n	8005a22 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f807 	bl	8005a7c <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f81b 	bl	8005aaa <FMAC_ResetOutputStateAndDataPointers>
}
 8005a74:	bf00      	nop
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ae6:	e15a      	b.n	8005d9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	2101      	movs	r1, #1
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	fa01 f303 	lsl.w	r3, r1, r3
 8005af4:	4013      	ands	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 814c 	beq.w	8005d98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f003 0303 	and.w	r3, r3, #3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d005      	beq.n	8005b18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d130      	bne.n	8005b7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	2203      	movs	r2, #3
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b4e:	2201      	movs	r2, #1
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	fa02 f303 	lsl.w	r3, r2, r3
 8005b56:	43db      	mvns	r3, r3
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	091b      	lsrs	r3, r3, #4
 8005b64:	f003 0201 	and.w	r2, r3, #1
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d017      	beq.n	8005bb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	2203      	movs	r2, #3
 8005b92:	fa02 f303 	lsl.w	r3, r2, r3
 8005b96:	43db      	mvns	r3, r3
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d123      	bne.n	8005c0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	08da      	lsrs	r2, r3, #3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	3208      	adds	r2, #8
 8005bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f003 0307 	and.w	r3, r3, #7
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	220f      	movs	r2, #15
 8005bda:	fa02 f303 	lsl.w	r3, r2, r3
 8005bde:	43db      	mvns	r3, r3
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	4013      	ands	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	08da      	lsrs	r2, r3, #3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3208      	adds	r2, #8
 8005c04:	6939      	ldr	r1, [r7, #16]
 8005c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	2203      	movs	r2, #3
 8005c16:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f003 0203 	and.w	r2, r3, #3
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 80a6 	beq.w	8005d98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c4c:	4b5b      	ldr	r3, [pc, #364]	@ (8005dbc <HAL_GPIO_Init+0x2e4>)
 8005c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c50:	4a5a      	ldr	r2, [pc, #360]	@ (8005dbc <HAL_GPIO_Init+0x2e4>)
 8005c52:	f043 0301 	orr.w	r3, r3, #1
 8005c56:	6613      	str	r3, [r2, #96]	@ 0x60
 8005c58:	4b58      	ldr	r3, [pc, #352]	@ (8005dbc <HAL_GPIO_Init+0x2e4>)
 8005c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c64:	4a56      	ldr	r2, [pc, #344]	@ (8005dc0 <HAL_GPIO_Init+0x2e8>)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	089b      	lsrs	r3, r3, #2
 8005c6a:	3302      	adds	r3, #2
 8005c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	220f      	movs	r2, #15
 8005c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c80:	43db      	mvns	r3, r3
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4013      	ands	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005c8e:	d01f      	beq.n	8005cd0 <HAL_GPIO_Init+0x1f8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a4c      	ldr	r2, [pc, #304]	@ (8005dc4 <HAL_GPIO_Init+0x2ec>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d019      	beq.n	8005ccc <HAL_GPIO_Init+0x1f4>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a4b      	ldr	r2, [pc, #300]	@ (8005dc8 <HAL_GPIO_Init+0x2f0>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d013      	beq.n	8005cc8 <HAL_GPIO_Init+0x1f0>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a4a      	ldr	r2, [pc, #296]	@ (8005dcc <HAL_GPIO_Init+0x2f4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00d      	beq.n	8005cc4 <HAL_GPIO_Init+0x1ec>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a49      	ldr	r2, [pc, #292]	@ (8005dd0 <HAL_GPIO_Init+0x2f8>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d007      	beq.n	8005cc0 <HAL_GPIO_Init+0x1e8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a48      	ldr	r2, [pc, #288]	@ (8005dd4 <HAL_GPIO_Init+0x2fc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d101      	bne.n	8005cbc <HAL_GPIO_Init+0x1e4>
 8005cb8:	2305      	movs	r3, #5
 8005cba:	e00a      	b.n	8005cd2 <HAL_GPIO_Init+0x1fa>
 8005cbc:	2306      	movs	r3, #6
 8005cbe:	e008      	b.n	8005cd2 <HAL_GPIO_Init+0x1fa>
 8005cc0:	2304      	movs	r3, #4
 8005cc2:	e006      	b.n	8005cd2 <HAL_GPIO_Init+0x1fa>
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e004      	b.n	8005cd2 <HAL_GPIO_Init+0x1fa>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e002      	b.n	8005cd2 <HAL_GPIO_Init+0x1fa>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <HAL_GPIO_Init+0x1fa>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	f002 0203 	and.w	r2, r2, #3
 8005cd8:	0092      	lsls	r2, r2, #2
 8005cda:	4093      	lsls	r3, r2
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ce2:	4937      	ldr	r1, [pc, #220]	@ (8005dc0 <HAL_GPIO_Init+0x2e8>)
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	089b      	lsrs	r3, r3, #2
 8005ce8:	3302      	adds	r3, #2
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cf0:	4b39      	ldr	r3, [pc, #228]	@ (8005dd8 <HAL_GPIO_Init+0x300>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d14:	4a30      	ldr	r2, [pc, #192]	@ (8005dd8 <HAL_GPIO_Init+0x300>)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8005dd8 <HAL_GPIO_Init+0x300>)
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	43db      	mvns	r3, r3
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4013      	ands	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d3e:	4a26      	ldr	r2, [pc, #152]	@ (8005dd8 <HAL_GPIO_Init+0x300>)
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005d44:	4b24      	ldr	r3, [pc, #144]	@ (8005dd8 <HAL_GPIO_Init+0x300>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4013      	ands	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d68:	4a1b      	ldr	r2, [pc, #108]	@ (8005dd8 <HAL_GPIO_Init+0x300>)
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd8 <HAL_GPIO_Init+0x300>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	43db      	mvns	r3, r3
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d92:	4a11      	ldr	r2, [pc, #68]	@ (8005dd8 <HAL_GPIO_Init+0x300>)
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	fa22 f303 	lsr.w	r3, r2, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f47f ae9d 	bne.w	8005ae8 <HAL_GPIO_Init+0x10>
  }
}
 8005dae:	bf00      	nop
 8005db0:	bf00      	nop
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	40010000 	.word	0x40010000
 8005dc4:	48000400 	.word	0x48000400
 8005dc8:	48000800 	.word	0x48000800
 8005dcc:	48000c00 	.word	0x48000c00
 8005dd0:	48001000 	.word	0x48001000
 8005dd4:	48001400 	.word	0x48001400
 8005dd8:	40010400 	.word	0x40010400

08005ddc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691a      	ldr	r2, [r3, #16]
 8005dec:	887b      	ldrh	r3, [r7, #2]
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005df4:	2301      	movs	r3, #1
 8005df6:	73fb      	strb	r3, [r7, #15]
 8005df8:	e001      	b.n	8005dfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	807b      	strh	r3, [r7, #2]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e1c:	787b      	ldrb	r3, [r7, #1]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e22:	887a      	ldrh	r2, [r7, #2]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e28:	e002      	b.n	8005e30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e2a:	887a      	ldrh	r2, [r7, #2]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e08d      	b.n	8005f6a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fc faba 	bl	80023dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2224      	movs	r2, #36	@ 0x24
 8005e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0201 	bic.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005e8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d107      	bne.n	8005eb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005eb2:	609a      	str	r2, [r3, #8]
 8005eb4:	e006      	b.n	8005ec4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005ec2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d108      	bne.n	8005ede <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eda:	605a      	str	r2, [r3, #4]
 8005edc:	e007      	b.n	8005eee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005efc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	69d9      	ldr	r1, [r3, #28]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a1a      	ldr	r2, [r3, #32]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d138      	bne.n	8005ffa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d101      	bne.n	8005f96 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f92:	2302      	movs	r3, #2
 8005f94:	e032      	b.n	8005ffc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2224      	movs	r2, #36	@ 0x24
 8005fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0201 	bic.w	r2, r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005fc4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6819      	ldr	r1, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0201 	orr.w	r2, r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	e000      	b.n	8005ffc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ffa:	2302      	movs	r3, #2
  }
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b20      	cmp	r3, #32
 800601c:	d139      	bne.n	8006092 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006024:	2b01      	cmp	r3, #1
 8006026:	d101      	bne.n	800602c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006028:	2302      	movs	r3, #2
 800602a:	e033      	b.n	8006094 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2224      	movs	r2, #36	@ 0x24
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0201 	bic.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800605a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	021b      	lsls	r3, r3, #8
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0201 	orr.w	r2, r2, #1
 800607c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2220      	movs	r2, #32
 8006082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	e000      	b.n	8006094 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006092:	2302      	movs	r3, #2
  }
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e0c0      	b.n	8006234 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f00a fcf6 	bl	8010ab8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2203      	movs	r2, #3
 80060d0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4618      	mov	r0, r3
 80060da:	f006 ff1c 	bl	800cf16 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060de:	2300      	movs	r3, #0
 80060e0:	73fb      	strb	r3, [r7, #15]
 80060e2:	e03e      	b.n	8006162 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80060e4:	7bfa      	ldrb	r2, [r7, #15]
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	440b      	add	r3, r1
 80060f2:	3311      	adds	r3, #17
 80060f4:	2201      	movs	r2, #1
 80060f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80060f8:	7bfa      	ldrb	r2, [r7, #15]
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	4613      	mov	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	440b      	add	r3, r1
 8006106:	3310      	adds	r3, #16
 8006108:	7bfa      	ldrb	r2, [r7, #15]
 800610a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800610c:	7bfa      	ldrb	r2, [r7, #15]
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	440b      	add	r3, r1
 800611a:	3313      	adds	r3, #19
 800611c:	2200      	movs	r2, #0
 800611e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006120:	7bfa      	ldrb	r2, [r7, #15]
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	440b      	add	r3, r1
 800612e:	3320      	adds	r3, #32
 8006130:	2200      	movs	r2, #0
 8006132:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006134:	7bfa      	ldrb	r2, [r7, #15]
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	440b      	add	r3, r1
 8006142:	3324      	adds	r3, #36	@ 0x24
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	440b      	add	r3, r1
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	3301      	adds	r3, #1
 8006160:	73fb      	strb	r3, [r7, #15]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	791b      	ldrb	r3, [r3, #4]
 8006166:	7bfa      	ldrb	r2, [r7, #15]
 8006168:	429a      	cmp	r2, r3
 800616a:	d3bb      	bcc.n	80060e4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800616c:	2300      	movs	r3, #0
 800616e:	73fb      	strb	r3, [r7, #15]
 8006170:	e044      	b.n	80061fc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006172:	7bfa      	ldrb	r2, [r7, #15]
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	440b      	add	r3, r1
 8006180:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006184:	2200      	movs	r2, #0
 8006186:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006188:	7bfa      	ldrb	r2, [r7, #15]
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	440b      	add	r3, r1
 8006196:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800619a:	7bfa      	ldrb	r2, [r7, #15]
 800619c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800619e:	7bfa      	ldrb	r2, [r7, #15]
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	4613      	mov	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	440b      	add	r3, r1
 80061ac:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80061b0:	2200      	movs	r2, #0
 80061b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80061b4:	7bfa      	ldrb	r2, [r7, #15]
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	4613      	mov	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	440b      	add	r3, r1
 80061c2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80061ca:	7bfa      	ldrb	r2, [r7, #15]
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	440b      	add	r3, r1
 80061d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80061e0:	7bfa      	ldrb	r2, [r7, #15]
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	440b      	add	r3, r1
 80061ee:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	3301      	adds	r3, #1
 80061fa:	73fb      	strb	r3, [r7, #15]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	791b      	ldrb	r3, [r3, #4]
 8006200:	7bfa      	ldrb	r2, [r7, #15]
 8006202:	429a      	cmp	r2, r3
 8006204:	d3b5      	bcc.n	8006172 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3304      	adds	r3, #4
 800620e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006212:	f006 fe9b 	bl	800cf4c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	7a9b      	ldrb	r3, [r3, #10]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d102      	bne.n	8006232 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 fcaa 	bl	8007b86 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800624a:	2b01      	cmp	r3, #1
 800624c:	d101      	bne.n	8006252 <HAL_PCD_Start+0x16>
 800624e:	2302      	movs	r3, #2
 8006250:	e012      	b.n	8006278 <HAL_PCD_Start+0x3c>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4618      	mov	r0, r3
 8006260:	f006 fe42 	bl	800cee8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4618      	mov	r0, r3
 800626a:	f008 fa32 	bl	800e6d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_PCD_Stop+0x16>
 8006292:	2302      	movs	r3, #2
 8006294:	e012      	b.n	80062bc <HAL_PCD_Stop+0x3c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f006 fe37 	bl	800cf16 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f008 fa27 	bl	800e700 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f008 fa2a 	bl	800e72a <USB_ReadInterrupts>
 80062d6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 faa6 	bl	8006834 <PCD_EP_ISR_Handler>

    return;
 80062e8:	e110      	b.n	800650c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d013      	beq.n	800631c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006306:	b292      	uxth	r2, r2
 8006308:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f00a fc64 	bl	8010bda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006312:	2100      	movs	r1, #0
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f8fc 	bl	8006512 <HAL_PCD_SetAddress>

    return;
 800631a:	e0f7      	b.n	800650c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00c      	beq.n	8006340 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800632e:	b29a      	uxth	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006338:	b292      	uxth	r2, r2
 800633a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800633e:	e0e5      	b.n	800650c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00c      	beq.n	8006364 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006352:	b29a      	uxth	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800635c:	b292      	uxth	r2, r2
 800635e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006362:	e0d3      	b.n	800650c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d034      	beq.n	80063d8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006376:	b29a      	uxth	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0204 	bic.w	r2, r2, #4
 8006380:	b292      	uxth	r2, r2
 8006382:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800638e:	b29a      	uxth	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0208 	bic.w	r2, r2, #8
 8006398:	b292      	uxth	r2, r2
 800639a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d107      	bne.n	80063b8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80063b0:	2100      	movs	r1, #0
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f00a fe3e 	bl	8011034 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f00a fc47 	bl	8010c4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80063d0:	b292      	uxth	r2, r2
 80063d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80063d6:	e099      	b.n	800650c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d027      	beq.n	8006432 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0208 	orr.w	r2, r2, #8
 80063f4:	b292      	uxth	r2, r2
 80063f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006402:	b29a      	uxth	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800640c:	b292      	uxth	r2, r2
 800640e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800641a:	b29a      	uxth	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f042 0204 	orr.w	r2, r2, #4
 8006424:	b292      	uxth	r2, r2
 8006426:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f00a fbf4 	bl	8010c18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006430:	e06c      	b.n	800650c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006438:	2b00      	cmp	r3, #0
 800643a:	d040      	beq.n	80064be <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006444:	b29a      	uxth	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800644e:	b292      	uxth	r2, r2
 8006450:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d12b      	bne.n	80064b6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006466:	b29a      	uxth	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0204 	orr.w	r2, r2, #4
 8006470:	b292      	uxth	r2, r2
 8006472:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800647e:	b29a      	uxth	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0208 	orr.w	r2, r2, #8
 8006488:	b292      	uxth	r2, r2
 800648a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800649e:	b29b      	uxth	r3, r3
 80064a0:	089b      	lsrs	r3, r3, #2
 80064a2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80064ac:	2101      	movs	r1, #1
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f00a fdc0 	bl	8011034 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80064b4:	e02a      	b.n	800650c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f00a fbae 	bl	8010c18 <HAL_PCD_SuspendCallback>
    return;
 80064bc:	e026      	b.n	800650c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00f      	beq.n	80064e8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80064da:	b292      	uxth	r2, r2
 80064dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f00a fb6c 	bl	8010bbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80064e6:	e011      	b.n	800650c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00c      	beq.n	800650c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006504:	b292      	uxth	r2, r2
 8006506:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800650a:	bf00      	nop
  }
}
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b082      	sub	sp, #8
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	460b      	mov	r3, r1
 800651c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006524:	2b01      	cmp	r3, #1
 8006526:	d101      	bne.n	800652c <HAL_PCD_SetAddress+0x1a>
 8006528:	2302      	movs	r3, #2
 800652a:	e012      	b.n	8006552 <HAL_PCD_SetAddress+0x40>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	78fa      	ldrb	r2, [r7, #3]
 8006538:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	78fa      	ldrb	r2, [r7, #3]
 8006540:	4611      	mov	r1, r2
 8006542:	4618      	mov	r0, r3
 8006544:	f008 f8b1 	bl	800e6aa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	4608      	mov	r0, r1
 8006564:	4611      	mov	r1, r2
 8006566:	461a      	mov	r2, r3
 8006568:	4603      	mov	r3, r0
 800656a:	70fb      	strb	r3, [r7, #3]
 800656c:	460b      	mov	r3, r1
 800656e:	803b      	strh	r3, [r7, #0]
 8006570:	4613      	mov	r3, r2
 8006572:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800657c:	2b00      	cmp	r3, #0
 800657e:	da0e      	bge.n	800659e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	f003 0207 	and.w	r2, r3, #7
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	3310      	adds	r3, #16
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	4413      	add	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2201      	movs	r2, #1
 800659a:	705a      	strb	r2, [r3, #1]
 800659c:	e00e      	b.n	80065bc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800659e:	78fb      	ldrb	r3, [r7, #3]
 80065a0:	f003 0207 	and.w	r2, r3, #7
 80065a4:	4613      	mov	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	4413      	add	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80065c8:	883b      	ldrh	r3, [r7, #0]
 80065ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	78ba      	ldrb	r2, [r7, #2]
 80065d6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80065d8:	78bb      	ldrb	r3, [r7, #2]
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d102      	bne.n	80065e4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d101      	bne.n	80065f2 <HAL_PCD_EP_Open+0x98>
 80065ee:	2302      	movs	r3, #2
 80065f0:	e00e      	b.n	8006610 <HAL_PCD_EP_Open+0xb6>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68f9      	ldr	r1, [r7, #12]
 8006600:	4618      	mov	r0, r3
 8006602:	f006 fcc1 	bl	800cf88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800660e:	7afb      	ldrb	r3, [r7, #11]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	607a      	str	r2, [r7, #4]
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	460b      	mov	r3, r1
 8006626:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006628:	7afb      	ldrb	r3, [r7, #11]
 800662a:	f003 0207 	and.w	r2, r3, #7
 800662e:	4613      	mov	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2200      	movs	r2, #0
 8006650:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2200      	movs	r2, #0
 8006656:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006658:	7afb      	ldrb	r3, [r7, #11]
 800665a:	f003 0307 	and.w	r3, r3, #7
 800665e:	b2da      	uxtb	r2, r3
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6979      	ldr	r1, [r7, #20]
 800666a:	4618      	mov	r0, r3
 800666c:	f007 f974 	bl	800d958 <USB_EPStartXfer>

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b086      	sub	sp, #24
 800667e:	af00      	add	r7, sp, #0
 8006680:	60f8      	str	r0, [r7, #12]
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	603b      	str	r3, [r7, #0]
 8006686:	460b      	mov	r3, r1
 8006688:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	f003 0207 	and.w	r2, r3, #7
 8006690:	4613      	mov	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	3310      	adds	r3, #16
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4413      	add	r3, r2
 800669e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2200      	movs	r2, #0
 80066be:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2201      	movs	r2, #1
 80066c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066c6:	7afb      	ldrb	r3, [r7, #11]
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6979      	ldr	r1, [r7, #20]
 80066d8:	4618      	mov	r0, r3
 80066da:	f007 f93d 	bl	800d958 <USB_EPStartXfer>

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	7912      	ldrb	r2, [r2, #4]
 80066fe:	4293      	cmp	r3, r2
 8006700:	d901      	bls.n	8006706 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e03e      	b.n	8006784 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006706:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800670a:	2b00      	cmp	r3, #0
 800670c:	da0e      	bge.n	800672c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800670e:	78fb      	ldrb	r3, [r7, #3]
 8006710:	f003 0207 	and.w	r2, r3, #7
 8006714:	4613      	mov	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	3310      	adds	r3, #16
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	4413      	add	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2201      	movs	r2, #1
 8006728:	705a      	strb	r2, [r3, #1]
 800672a:	e00c      	b.n	8006746 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800672c:	78fa      	ldrb	r2, [r7, #3]
 800672e:	4613      	mov	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	4413      	add	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2201      	movs	r2, #1
 800674a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800674c:	78fb      	ldrb	r3, [r7, #3]
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	b2da      	uxtb	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800675e:	2b01      	cmp	r3, #1
 8006760:	d101      	bne.n	8006766 <HAL_PCD_EP_SetStall+0x7e>
 8006762:	2302      	movs	r3, #2
 8006764:	e00e      	b.n	8006784 <HAL_PCD_EP_SetStall+0x9c>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68f9      	ldr	r1, [r7, #12]
 8006774:	4618      	mov	r0, r3
 8006776:	f007 fe9e 	bl	800e4b6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006798:	78fb      	ldrb	r3, [r7, #3]
 800679a:	f003 030f 	and.w	r3, r3, #15
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	7912      	ldrb	r2, [r2, #4]
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d901      	bls.n	80067aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e040      	b.n	800682c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80067aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da0e      	bge.n	80067d0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067b2:	78fb      	ldrb	r3, [r7, #3]
 80067b4:	f003 0207 	and.w	r2, r3, #7
 80067b8:	4613      	mov	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	3310      	adds	r3, #16
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	4413      	add	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2201      	movs	r2, #1
 80067cc:	705a      	strb	r2, [r3, #1]
 80067ce:	e00e      	b.n	80067ee <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	f003 0207 	and.w	r2, r3, #7
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	00db      	lsls	r3, r3, #3
 80067de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	4413      	add	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_PCD_EP_ClrStall+0x82>
 800680a:	2302      	movs	r3, #2
 800680c:	e00e      	b.n	800682c <HAL_PCD_EP_ClrStall+0xa0>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68f9      	ldr	r1, [r7, #12]
 800681c:	4618      	mov	r0, r3
 800681e:	f007 fe9b 	bl	800e558 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b092      	sub	sp, #72	@ 0x48
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800683c:	e333      	b.n	8006ea6 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006846:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006848:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800684a:	b2db      	uxtb	r3, r3
 800684c:	f003 030f 	and.w	r3, r3, #15
 8006850:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8006854:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006858:	2b00      	cmp	r3, #0
 800685a:	f040 8108 	bne.w	8006a6e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800685e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006860:	f003 0310 	and.w	r3, r3, #16
 8006864:	2b00      	cmp	r3, #0
 8006866:	d14c      	bne.n	8006902 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29b      	uxth	r3, r3
 8006870:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006878:	813b      	strh	r3, [r7, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	893b      	ldrh	r3, [r7, #8]
 8006880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006888:	b29b      	uxth	r3, r3
 800688a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3310      	adds	r3, #16
 8006890:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800689a:	b29b      	uxth	r3, r3
 800689c:	461a      	mov	r2, r3
 800689e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	4413      	add	r3, r2
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6812      	ldr	r2, [r2, #0]
 80068aa:	4413      	add	r3, r2
 80068ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80068b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80068ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068bc:	695a      	ldr	r2, [r3, #20]
 80068be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	441a      	add	r2, r3
 80068c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068c6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80068c8:	2100      	movs	r1, #0
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f00a f95d 	bl	8010b8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	7b1b      	ldrb	r3, [r3, #12]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 82e5 	beq.w	8006ea6 <PCD_EP_ISR_Handler+0x672>
 80068dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f040 82e0 	bne.w	8006ea6 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	7b1b      	ldrb	r3, [r3, #12]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	731a      	strb	r2, [r3, #12]
 8006900:	e2d1      	b.n	8006ea6 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006908:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006912:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006914:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006918:	2b00      	cmp	r3, #0
 800691a:	d032      	beq.n	8006982 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006924:	b29b      	uxth	r3, r3
 8006926:	461a      	mov	r2, r3
 8006928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	00db      	lsls	r3, r3, #3
 800692e:	4413      	add	r3, r2
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6812      	ldr	r2, [r2, #0]
 8006934:	4413      	add	r3, r2
 8006936:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006942:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6818      	ldr	r0, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800694e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006950:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006954:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006956:	b29b      	uxth	r3, r3
 8006958:	f007 ff39 	bl	800e7ce <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	b29a      	uxth	r2, r3
 8006964:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006968:	4013      	ands	r3, r2
 800696a:	817b      	strh	r3, [r7, #10]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	897a      	ldrh	r2, [r7, #10]
 8006972:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006976:	b292      	uxth	r2, r2
 8006978:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f00a f8d8 	bl	8010b30 <HAL_PCD_SetupStageCallback>
 8006980:	e291      	b.n	8006ea6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006982:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006986:	2b00      	cmp	r3, #0
 8006988:	f280 828d 	bge.w	8006ea6 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29a      	uxth	r2, r3
 8006994:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006998:	4013      	ands	r3, r2
 800699a:	81fb      	strh	r3, [r7, #14]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	89fa      	ldrh	r2, [r7, #14]
 80069a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80069a6:	b292      	uxth	r2, r2
 80069a8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	461a      	mov	r2, r3
 80069b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	4413      	add	r3, r2
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	6812      	ldr	r2, [r2, #0]
 80069c2:	4413      	add	r3, r2
 80069c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80069ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069d0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80069d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d019      	beq.n	8006a0e <PCD_EP_ISR_Handler+0x1da>
 80069da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d015      	beq.n	8006a0e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069e8:	6959      	ldr	r1, [r3, #20]
 80069ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069ec:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80069ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069f0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	f007 feeb 	bl	800e7ce <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80069f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069fa:	695a      	ldr	r2, [r3, #20]
 80069fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	441a      	add	r2, r3
 8006a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a04:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006a06:	2100      	movs	r1, #0
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f00a f8a3 	bl	8010b54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006a16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f040 8242 	bne.w	8006ea6 <PCD_EP_ISR_Handler+0x672>
 8006a22:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006a24:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006a28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a2c:	f000 823b 	beq.w	8006ea6 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a40:	81bb      	strh	r3, [r7, #12]
 8006a42:	89bb      	ldrh	r3, [r7, #12]
 8006a44:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a48:	81bb      	strh	r3, [r7, #12]
 8006a4a:	89bb      	ldrh	r3, [r7, #12]
 8006a4c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a50:	81bb      	strh	r3, [r7, #12]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	89bb      	ldrh	r3, [r7, #12]
 8006a58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	8013      	strh	r3, [r2, #0]
 8006a6c:	e21b      	b.n	8006ea6 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006a80:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f280 80f1 	bge.w	8006c6c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006ab4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ab8:	b292      	uxth	r2, r2
 8006aba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006abc:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	4413      	add	r3, r2
 8006ad0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ad4:	7b1b      	ldrb	r3, [r3, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d123      	bne.n	8006b22 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	4413      	add	r3, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6812      	ldr	r2, [r2, #0]
 8006af2:	4413      	add	r3, r2
 8006af4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006afe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8006b02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 808b 	beq.w	8006c22 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6818      	ldr	r0, [r3, #0]
 8006b10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b12:	6959      	ldr	r1, [r3, #20]
 8006b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b16:	88da      	ldrh	r2, [r3, #6]
 8006b18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006b1c:	f007 fe57 	bl	800e7ce <USB_ReadPMA>
 8006b20:	e07f      	b.n	8006c22 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b24:	78db      	ldrb	r3, [r3, #3]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d109      	bne.n	8006b3e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006b2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f9c6 	bl	8006ec2 <HAL_PCD_EP_DB_Receive>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006b3c:	e071      	b.n	8006c22 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b58:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	441a      	add	r2, r3
 8006b68:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d022      	beq.n	8006bde <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	00db      	lsls	r3, r3, #3
 8006baa:	4413      	add	r3, r2
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6812      	ldr	r2, [r2, #0]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bbc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006bc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d02c      	beq.n	8006c22 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6818      	ldr	r0, [r3, #0]
 8006bcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bce:	6959      	ldr	r1, [r3, #20]
 8006bd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bd2:	891a      	ldrh	r2, [r3, #8]
 8006bd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006bd8:	f007 fdf9 	bl	800e7ce <USB_ReadPMA>
 8006bdc:	e021      	b.n	8006c22 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	461a      	mov	r2, r3
 8006bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	4413      	add	r3, r2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6812      	ldr	r2, [r2, #0]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c02:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006c06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d009      	beq.n	8006c22 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6818      	ldr	r0, [r3, #0]
 8006c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c14:	6959      	ldr	r1, [r3, #20]
 8006c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c18:	895a      	ldrh	r2, [r3, #10]
 8006c1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c1e:	f007 fdd6 	bl	800e7ce <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c24:	69da      	ldr	r2, [r3, #28]
 8006c26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c2a:	441a      	add	r2, r3
 8006c2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c2e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006c30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c32:	695a      	ldr	r2, [r3, #20]
 8006c34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c38:	441a      	add	r2, r3
 8006c3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c3c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d005      	beq.n	8006c52 <PCD_EP_ISR_Handler+0x41e>
 8006c46:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d206      	bcs.n	8006c60 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f009 ff7b 	bl	8010b54 <HAL_PCD_DataOutStageCallback>
 8006c5e:	e005      	b.n	8006c6c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c66:	4618      	mov	r0, r3
 8006c68:	f006 fe76 	bl	800d958 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006c6c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 8117 	beq.w	8006ea6 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8006c78:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	3310      	adds	r3, #16
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	4413      	add	r3, r2
 8006c8a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	461a      	mov	r2, r3
 8006cae:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	441a      	add	r2, r3
 8006cb6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006cc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cc6:	78db      	ldrb	r3, [r3, #3]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	f040 80a1 	bne.w	8006e10 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8006cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cd6:	7b1b      	ldrb	r3, [r3, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 8092 	beq.w	8006e02 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006cde:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d046      	beq.n	8006d76 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cea:	785b      	ldrb	r3, [r3, #1]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d126      	bne.n	8006d3e <PCD_EP_ISR_Handler+0x50a>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	461a      	mov	r2, r3
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	4413      	add	r3, r2
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	00da      	lsls	r2, r3, #3
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	4413      	add	r3, r2
 8006d12:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d16:	613b      	str	r3, [r7, #16]
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	801a      	strh	r2, [r3, #0]
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	801a      	strh	r2, [r3, #0]
 8006d3c:	e061      	b.n	8006e02 <PCD_EP_ISR_Handler+0x5ce>
 8006d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d40:	785b      	ldrb	r3, [r3, #1]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d15d      	bne.n	8006e02 <PCD_EP_ISR_Handler+0x5ce>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	61fb      	str	r3, [r7, #28]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	461a      	mov	r2, r3
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	61fb      	str	r3, [r7, #28]
 8006d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	00da      	lsls	r2, r3, #3
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d6c:	61bb      	str	r3, [r7, #24]
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2200      	movs	r2, #0
 8006d72:	801a      	strh	r2, [r3, #0]
 8006d74:	e045      	b.n	8006e02 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d7e:	785b      	ldrb	r3, [r3, #1]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d126      	bne.n	8006dd2 <PCD_EP_ISR_Handler+0x59e>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	461a      	mov	r2, r3
 8006d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d98:	4413      	add	r3, r2
 8006d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	00da      	lsls	r2, r3, #3
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	4413      	add	r3, r2
 8006da6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006daa:	623b      	str	r3, [r7, #32]
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	801a      	strh	r2, [r3, #0]
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	801a      	strh	r2, [r3, #0]
 8006dd0:	e017      	b.n	8006e02 <PCD_EP_ISR_Handler+0x5ce>
 8006dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d113      	bne.n	8006e02 <PCD_EP_ISR_Handler+0x5ce>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de8:	4413      	add	r3, r2
 8006dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	00da      	lsls	r2, r3, #3
 8006df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df4:	4413      	add	r3, r2
 8006df6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfe:	2200      	movs	r2, #0
 8006e00:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f009 febe 	bl	8010b8a <HAL_PCD_DataInStageCallback>
 8006e0e:	e04a      	b.n	8006ea6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006e10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d13f      	bne.n	8006e9a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	461a      	mov	r2, r3
 8006e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	4413      	add	r3, r2
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6812      	ldr	r2, [r2, #0]
 8006e32:	4413      	add	r3, r2
 8006e34:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e3e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8006e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e42:	699a      	ldr	r2, [r3, #24]
 8006e44:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d906      	bls.n	8006e58 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8006e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e4c:	699a      	ldr	r2, [r3, #24]
 8006e4e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006e50:	1ad2      	subs	r2, r2, r3
 8006e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e54:	619a      	str	r2, [r3, #24]
 8006e56:	e002      	b.n	8006e5e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8006e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006e66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f009 fe8c 	bl	8010b8a <HAL_PCD_DataInStageCallback>
 8006e72:	e018      	b.n	8006ea6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006e74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e76:	695a      	ldr	r2, [r3, #20]
 8006e78:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006e7a:	441a      	add	r2, r3
 8006e7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e7e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006e80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e82:	69da      	ldr	r2, [r3, #28]
 8006e84:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006e86:	441a      	add	r2, r3
 8006e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e8a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e92:	4618      	mov	r0, r3
 8006e94:	f006 fd60 	bl	800d958 <USB_EPStartXfer>
 8006e98:	e005      	b.n	8006ea6 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006e9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f917 	bl	80070d4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	b21b      	sxth	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f6ff acc3 	blt.w	800683e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3748      	adds	r7, #72	@ 0x48
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b088      	sub	sp, #32
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	60f8      	str	r0, [r7, #12]
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006ed0:	88fb      	ldrh	r3, [r7, #6]
 8006ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d07c      	beq.n	8006fd4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	4413      	add	r3, r2
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	6812      	ldr	r2, [r2, #0]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006efe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	699a      	ldr	r2, [r3, #24]
 8006f04:	8b7b      	ldrh	r3, [r7, #26]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d306      	bcc.n	8006f18 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	699a      	ldr	r2, [r3, #24]
 8006f0e:	8b7b      	ldrh	r3, [r7, #26]
 8006f10:	1ad2      	subs	r2, r2, r3
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	619a      	str	r2, [r3, #24]
 8006f16:	e002      	b.n	8006f1e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d123      	bne.n	8006f6e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f40:	833b      	strh	r3, [r7, #24]
 8006f42:	8b3b      	ldrh	r3, [r7, #24]
 8006f44:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f48:	833b      	strh	r3, [r7, #24]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	441a      	add	r2, r3
 8006f58:	8b3b      	ldrh	r3, [r7, #24]
 8006f5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d01f      	beq.n	8006fb8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4413      	add	r3, r2
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f92:	82fb      	strh	r3, [r7, #22]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	441a      	add	r2, r3
 8006fa2:	8afb      	ldrh	r3, [r7, #22]
 8006fa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fb0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006fb8:	8b7b      	ldrh	r3, [r7, #26]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 8085 	beq.w	80070ca <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6818      	ldr	r0, [r3, #0]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	6959      	ldr	r1, [r3, #20]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	891a      	ldrh	r2, [r3, #8]
 8006fcc:	8b7b      	ldrh	r3, [r7, #26]
 8006fce:	f007 fbfe 	bl	800e7ce <USB_ReadPMA>
 8006fd2:	e07a      	b.n	80070ca <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	461a      	mov	r2, r3
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	00db      	lsls	r3, r3, #3
 8006fe6:	4413      	add	r3, r2
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	6812      	ldr	r2, [r2, #0]
 8006fec:	4413      	add	r3, r2
 8006fee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ff8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	8b7b      	ldrh	r3, [r7, #26]
 8007000:	429a      	cmp	r2, r3
 8007002:	d306      	bcc.n	8007012 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	8b7b      	ldrh	r3, [r7, #26]
 800700a:	1ad2      	subs	r2, r2, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	619a      	str	r2, [r3, #24]
 8007010:	e002      	b.n	8007018 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2200      	movs	r2, #0
 8007016:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d123      	bne.n	8007068 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	b29b      	uxth	r3, r3
 8007032:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800703a:	83fb      	strh	r3, [r7, #30]
 800703c:	8bfb      	ldrh	r3, [r7, #30]
 800703e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007042:	83fb      	strh	r3, [r7, #30]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	441a      	add	r2, r3
 8007052:	8bfb      	ldrh	r3, [r7, #30]
 8007054:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007058:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800705c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007060:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007064:	b29b      	uxth	r3, r3
 8007066:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007068:	88fb      	ldrh	r3, [r7, #6]
 800706a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d11f      	bne.n	80070b2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800708c:	83bb      	strh	r3, [r7, #28]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	441a      	add	r2, r3
 800709c:	8bbb      	ldrh	r3, [r7, #28]
 800709e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80070b2:	8b7b      	ldrh	r3, [r7, #26]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d008      	beq.n	80070ca <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	6959      	ldr	r1, [r3, #20]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	895a      	ldrh	r2, [r3, #10]
 80070c4:	8b7b      	ldrh	r3, [r7, #26]
 80070c6:	f007 fb82 	bl	800e7ce <USB_ReadPMA>
    }
  }

  return count;
 80070ca:	8b7b      	ldrh	r3, [r7, #26]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3720      	adds	r7, #32
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b0a6      	sub	sp, #152	@ 0x98
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	4613      	mov	r3, r2
 80070e0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 81f7 	beq.w	80074dc <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	461a      	mov	r2, r3
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	4413      	add	r3, r2
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	6812      	ldr	r2, [r2, #0]
 8007106:	4413      	add	r3, r2
 8007108:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007112:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	699a      	ldr	r2, [r3, #24]
 800711a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800711e:	429a      	cmp	r2, r3
 8007120:	d907      	bls.n	8007132 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	699a      	ldr	r2, [r3, #24]
 8007126:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800712a:	1ad2      	subs	r2, r2, r3
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	619a      	str	r2, [r3, #24]
 8007130:	e002      	b.n	8007138 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2200      	movs	r2, #0
 8007136:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	f040 80e1 	bne.w	8007304 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	785b      	ldrb	r3, [r3, #1]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d126      	bne.n	8007198 <HAL_PCD_EP_DB_Transmit+0xc4>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007158:	b29b      	uxth	r3, r3
 800715a:	461a      	mov	r2, r3
 800715c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715e:	4413      	add	r3, r2
 8007160:	633b      	str	r3, [r7, #48]	@ 0x30
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	00da      	lsls	r2, r3, #3
 8007168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716a:	4413      	add	r3, r2
 800716c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007170:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	b29b      	uxth	r3, r3
 8007178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800717c:	b29a      	uxth	r2, r3
 800717e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007180:	801a      	strh	r2, [r3, #0]
 8007182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	b29b      	uxth	r3, r3
 8007188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800718c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007190:	b29a      	uxth	r2, r3
 8007192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007194:	801a      	strh	r2, [r3, #0]
 8007196:	e01a      	b.n	80071ce <HAL_PCD_EP_DB_Transmit+0xfa>
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	785b      	ldrb	r3, [r3, #1]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d116      	bne.n	80071ce <HAL_PCD_EP_DB_Transmit+0xfa>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	461a      	mov	r2, r3
 80071b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b4:	4413      	add	r3, r2
 80071b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	00da      	lsls	r2, r3, #3
 80071be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c0:	4413      	add	r3, r2
 80071c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80071c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ca:	2200      	movs	r2, #0
 80071cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	785b      	ldrb	r3, [r3, #1]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d126      	bne.n	800722a <HAL_PCD_EP_DB_Transmit+0x156>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	623b      	str	r3, [r7, #32]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	461a      	mov	r2, r3
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	4413      	add	r3, r2
 80071f2:	623b      	str	r3, [r7, #32]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	00da      	lsls	r2, r3, #3
 80071fa:	6a3b      	ldr	r3, [r7, #32]
 80071fc:	4413      	add	r3, r2
 80071fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007202:	61fb      	str	r3, [r7, #28]
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	b29b      	uxth	r3, r3
 800720a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800720e:	b29a      	uxth	r2, r3
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	801a      	strh	r2, [r3, #0]
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	b29b      	uxth	r3, r3
 800721a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800721e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007222:	b29a      	uxth	r2, r3
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	801a      	strh	r2, [r3, #0]
 8007228:	e017      	b.n	800725a <HAL_PCD_EP_DB_Transmit+0x186>
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	785b      	ldrb	r3, [r3, #1]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d113      	bne.n	800725a <HAL_PCD_EP_DB_Transmit+0x186>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800723a:	b29b      	uxth	r3, r3
 800723c:	461a      	mov	r2, r3
 800723e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007240:	4413      	add	r3, r2
 8007242:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	00da      	lsls	r2, r3, #3
 800724a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724c:	4413      	add	r3, r2
 800724e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007252:	627b      	str	r3, [r7, #36]	@ 0x24
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	2200      	movs	r2, #0
 8007258:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	78db      	ldrb	r3, [r3, #3]
 800725e:	2b02      	cmp	r3, #2
 8007260:	d123      	bne.n	80072aa <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007278:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800727c:	837b      	strh	r3, [r7, #26]
 800727e:	8b7b      	ldrh	r3, [r7, #26]
 8007280:	f083 0320 	eor.w	r3, r3, #32
 8007284:	837b      	strh	r3, [r7, #26]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	441a      	add	r2, r3
 8007294:	8b7b      	ldrh	r3, [r7, #26]
 8007296:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800729a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800729e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	4619      	mov	r1, r3
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f009 fc6a 	bl	8010b8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80072b6:	88fb      	ldrh	r3, [r7, #6]
 80072b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01f      	beq.n	8007300 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	461a      	mov	r2, r3
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072da:	833b      	strh	r3, [r7, #24]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	441a      	add	r2, r3
 80072ea:	8b3b      	ldrh	r3, [r7, #24]
 80072ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80072f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	e31f      	b.n	8007944 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007304:	88fb      	ldrh	r3, [r7, #6]
 8007306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d021      	beq.n	8007352 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	b29b      	uxth	r3, r3
 8007320:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007328:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	461a      	mov	r2, r3
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	441a      	add	r2, r3
 800733a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800733e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007342:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007346:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800734a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800734e:	b29b      	uxth	r3, r3
 8007350:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007358:	2b01      	cmp	r3, #1
 800735a:	f040 82ca 	bne.w	80078f2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	695a      	ldr	r2, [r3, #20]
 8007362:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007366:	441a      	add	r2, r3
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	69da      	ldr	r2, [r3, #28]
 8007370:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007374:	441a      	add	r2, r3
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6a1a      	ldr	r2, [r3, #32]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	429a      	cmp	r2, r3
 8007384:	d309      	bcc.n	800739a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	6a1a      	ldr	r2, [r3, #32]
 8007390:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007392:	1ad2      	subs	r2, r2, r3
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	621a      	str	r2, [r3, #32]
 8007398:	e015      	b.n	80073c6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d107      	bne.n	80073b2 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80073a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80073a6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80073b0:	e009      	b.n	80073c6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2200      	movs	r2, #0
 80073c4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	785b      	ldrb	r3, [r3, #1]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d15f      	bne.n	800748e <HAL_PCD_EP_DB_Transmit+0x3ba>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073dc:	b29b      	uxth	r3, r3
 80073de:	461a      	mov	r2, r3
 80073e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073e2:	4413      	add	r3, r2
 80073e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	00da      	lsls	r2, r3, #3
 80073ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073ee:	4413      	add	r3, r2
 80073f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80073f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073f8:	881b      	ldrh	r3, [r3, #0]
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007400:	b29a      	uxth	r2, r3
 8007402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007404:	801a      	strh	r2, [r3, #0]
 8007406:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10a      	bne.n	8007422 <HAL_PCD_EP_DB_Transmit+0x34e>
 800740c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	b29b      	uxth	r3, r3
 8007412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800741a:	b29a      	uxth	r2, r3
 800741c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800741e:	801a      	strh	r2, [r3, #0]
 8007420:	e051      	b.n	80074c6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007422:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007424:	2b3e      	cmp	r3, #62	@ 0x3e
 8007426:	d816      	bhi.n	8007456 <HAL_PCD_EP_DB_Transmit+0x382>
 8007428:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800742a:	085b      	lsrs	r3, r3, #1
 800742c:	653b      	str	r3, [r7, #80]	@ 0x50
 800742e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <HAL_PCD_EP_DB_Transmit+0x36a>
 8007438:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800743a:	3301      	adds	r3, #1
 800743c:	653b      	str	r3, [r7, #80]	@ 0x50
 800743e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b29a      	uxth	r2, r3
 8007444:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007446:	b29b      	uxth	r3, r3
 8007448:	029b      	lsls	r3, r3, #10
 800744a:	b29b      	uxth	r3, r3
 800744c:	4313      	orrs	r3, r2
 800744e:	b29a      	uxth	r2, r3
 8007450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007452:	801a      	strh	r2, [r3, #0]
 8007454:	e037      	b.n	80074c6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007456:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007458:	095b      	lsrs	r3, r3, #5
 800745a:	653b      	str	r3, [r7, #80]	@ 0x50
 800745c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800745e:	f003 031f 	and.w	r3, r3, #31
 8007462:	2b00      	cmp	r3, #0
 8007464:	d102      	bne.n	800746c <HAL_PCD_EP_DB_Transmit+0x398>
 8007466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007468:	3b01      	subs	r3, #1
 800746a:	653b      	str	r3, [r7, #80]	@ 0x50
 800746c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	b29a      	uxth	r2, r3
 8007472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007474:	b29b      	uxth	r3, r3
 8007476:	029b      	lsls	r3, r3, #10
 8007478:	b29b      	uxth	r3, r3
 800747a:	4313      	orrs	r3, r2
 800747c:	b29b      	uxth	r3, r3
 800747e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007486:	b29a      	uxth	r2, r3
 8007488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800748a:	801a      	strh	r2, [r3, #0]
 800748c:	e01b      	b.n	80074c6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	785b      	ldrb	r3, [r3, #1]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d117      	bne.n	80074c6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	461a      	mov	r2, r3
 80074a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074aa:	4413      	add	r3, r2
 80074ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	00da      	lsls	r2, r3, #3
 80074b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074b6:	4413      	add	r3, r2
 80074b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80074be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074c4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	6959      	ldr	r1, [r3, #20]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	891a      	ldrh	r2, [r3, #8]
 80074d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	f007 f938 	bl	800e74a <USB_WritePMA>
 80074da:	e20a      	b.n	80078f2 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	461a      	mov	r2, r3
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	00db      	lsls	r3, r3, #3
 80074ee:	4413      	add	r3, r2
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	6812      	ldr	r2, [r2, #0]
 80074f4:	4413      	add	r3, r2
 80074f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007500:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	699a      	ldr	r2, [r3, #24]
 8007508:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800750c:	429a      	cmp	r2, r3
 800750e:	d307      	bcc.n	8007520 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	699a      	ldr	r2, [r3, #24]
 8007514:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007518:	1ad2      	subs	r2, r2, r3
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	619a      	str	r2, [r3, #24]
 800751e:	e002      	b.n	8007526 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2200      	movs	r2, #0
 8007524:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	2b00      	cmp	r3, #0
 800752c:	f040 80f6 	bne.w	800771c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	785b      	ldrb	r3, [r3, #1]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d126      	bne.n	8007586 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	677b      	str	r3, [r7, #116]	@ 0x74
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007546:	b29b      	uxth	r3, r3
 8007548:	461a      	mov	r2, r3
 800754a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800754c:	4413      	add	r3, r2
 800754e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	00da      	lsls	r2, r3, #3
 8007556:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007558:	4413      	add	r3, r2
 800755a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800755e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007560:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	b29b      	uxth	r3, r3
 8007566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800756a:	b29a      	uxth	r2, r3
 800756c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800756e:	801a      	strh	r2, [r3, #0]
 8007570:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800757a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800757e:	b29a      	uxth	r2, r3
 8007580:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007582:	801a      	strh	r2, [r3, #0]
 8007584:	e01a      	b.n	80075bc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	785b      	ldrb	r3, [r3, #1]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d116      	bne.n	80075bc <HAL_PCD_EP_DB_Transmit+0x4e8>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800759c:	b29b      	uxth	r3, r3
 800759e:	461a      	mov	r2, r3
 80075a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80075a2:	4413      	add	r3, r2
 80075a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	00da      	lsls	r2, r3, #3
 80075ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80075ae:	4413      	add	r3, r2
 80075b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80075b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075b8:	2200      	movs	r2, #0
 80075ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	785b      	ldrb	r3, [r3, #1]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d12f      	bne.n	800762c <HAL_PCD_EP_DB_Transmit+0x558>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075dc:	b29b      	uxth	r3, r3
 80075de:	461a      	mov	r2, r3
 80075e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075e4:	4413      	add	r3, r2
 80075e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	00da      	lsls	r2, r3, #3
 80075f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075f4:	4413      	add	r3, r2
 80075f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80075fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	b29b      	uxth	r3, r3
 8007606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800760a:	b29a      	uxth	r2, r3
 800760c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007610:	801a      	strh	r2, [r3, #0]
 8007612:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	b29b      	uxth	r3, r3
 800761a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800761e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007622:	b29a      	uxth	r2, r3
 8007624:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007628:	801a      	strh	r2, [r3, #0]
 800762a:	e01c      	b.n	8007666 <HAL_PCD_EP_DB_Transmit+0x592>
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	785b      	ldrb	r3, [r3, #1]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d118      	bne.n	8007666 <HAL_PCD_EP_DB_Transmit+0x592>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800763c:	b29b      	uxth	r3, r3
 800763e:	461a      	mov	r2, r3
 8007640:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007644:	4413      	add	r3, r2
 8007646:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	00da      	lsls	r2, r3, #3
 8007650:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007654:	4413      	add	r3, r2
 8007656:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800765a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800765e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007662:	2200      	movs	r2, #0
 8007664:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	78db      	ldrb	r3, [r3, #3]
 800766a:	2b02      	cmp	r3, #2
 800766c:	d127      	bne.n	80076be <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	b29b      	uxth	r3, r3
 8007680:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007684:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007688:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800768c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007690:	f083 0320 	eor.w	r3, r3, #32
 8007694:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	461a      	mov	r2, r3
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	441a      	add	r2, r3
 80076a6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80076aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	4619      	mov	r1, r3
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f009 fa60 	bl	8010b8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80076ca:	88fb      	ldrh	r3, [r7, #6]
 80076cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d121      	bne.n	8007718 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ee:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	441a      	add	r2, r3
 8007700:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007704:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007708:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800770c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007714:	b29b      	uxth	r3, r3
 8007716:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	e113      	b.n	8007944 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800771c:	88fb      	ldrh	r3, [r7, #6]
 800771e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d121      	bne.n	800776a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	b29b      	uxth	r3, r3
 8007738:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800773c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007740:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	441a      	add	r2, r3
 8007752:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007756:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800775a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800775e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007766:	b29b      	uxth	r3, r3
 8007768:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007770:	2b01      	cmp	r3, #1
 8007772:	f040 80be 	bne.w	80078f2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	695a      	ldr	r2, [r3, #20]
 800777a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800777e:	441a      	add	r2, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	69da      	ldr	r2, [r3, #28]
 8007788:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800778c:	441a      	add	r2, r3
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	6a1a      	ldr	r2, [r3, #32]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	429a      	cmp	r2, r3
 800779c:	d309      	bcc.n	80077b2 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	6a1a      	ldr	r2, [r3, #32]
 80077a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077aa:	1ad2      	subs	r2, r2, r3
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	621a      	str	r2, [r3, #32]
 80077b0:	e015      	b.n	80077de <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d107      	bne.n	80077ca <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80077ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80077be:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80077c8:	e009      	b.n	80077de <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2200      	movs	r2, #0
 80077d4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	785b      	ldrb	r3, [r3, #1]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d15f      	bne.n	80078ac <HAL_PCD_EP_DB_Transmit+0x7d8>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	461a      	mov	r2, r3
 80077fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007800:	4413      	add	r3, r2
 8007802:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	00da      	lsls	r2, r3, #3
 800780a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800780c:	4413      	add	r3, r2
 800780e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007812:	667b      	str	r3, [r7, #100]	@ 0x64
 8007814:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
 800781a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800781e:	b29a      	uxth	r2, r3
 8007820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007822:	801a      	strh	r2, [r3, #0]
 8007824:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10a      	bne.n	8007840 <HAL_PCD_EP_DB_Transmit+0x76c>
 800782a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	b29b      	uxth	r3, r3
 8007830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007838:	b29a      	uxth	r2, r3
 800783a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800783c:	801a      	strh	r2, [r3, #0]
 800783e:	e04e      	b.n	80078de <HAL_PCD_EP_DB_Transmit+0x80a>
 8007840:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007842:	2b3e      	cmp	r3, #62	@ 0x3e
 8007844:	d816      	bhi.n	8007874 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8007846:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007848:	085b      	lsrs	r3, r3, #1
 800784a:	663b      	str	r3, [r7, #96]	@ 0x60
 800784c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d002      	beq.n	800785c <HAL_PCD_EP_DB_Transmit+0x788>
 8007856:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007858:	3301      	adds	r3, #1
 800785a:	663b      	str	r3, [r7, #96]	@ 0x60
 800785c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	b29a      	uxth	r2, r3
 8007862:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007864:	b29b      	uxth	r3, r3
 8007866:	029b      	lsls	r3, r3, #10
 8007868:	b29b      	uxth	r3, r3
 800786a:	4313      	orrs	r3, r2
 800786c:	b29a      	uxth	r2, r3
 800786e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007870:	801a      	strh	r2, [r3, #0]
 8007872:	e034      	b.n	80078de <HAL_PCD_EP_DB_Transmit+0x80a>
 8007874:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007876:	095b      	lsrs	r3, r3, #5
 8007878:	663b      	str	r3, [r7, #96]	@ 0x60
 800787a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800787c:	f003 031f 	and.w	r3, r3, #31
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8007884:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007886:	3b01      	subs	r3, #1
 8007888:	663b      	str	r3, [r7, #96]	@ 0x60
 800788a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	b29a      	uxth	r2, r3
 8007890:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007892:	b29b      	uxth	r3, r3
 8007894:	029b      	lsls	r3, r3, #10
 8007896:	b29b      	uxth	r3, r3
 8007898:	4313      	orrs	r3, r2
 800789a:	b29b      	uxth	r3, r3
 800789c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078a8:	801a      	strh	r2, [r3, #0]
 80078aa:	e018      	b.n	80078de <HAL_PCD_EP_DB_Transmit+0x80a>
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	785b      	ldrb	r3, [r3, #1]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d114      	bne.n	80078de <HAL_PCD_EP_DB_Transmit+0x80a>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078bc:	b29b      	uxth	r3, r3
 80078be:	461a      	mov	r2, r3
 80078c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078c2:	4413      	add	r3, r2
 80078c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	00da      	lsls	r2, r3, #3
 80078cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078ce:	4413      	add	r3, r2
 80078d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078d8:	b29a      	uxth	r2, r3
 80078da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078dc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6818      	ldr	r0, [r3, #0]
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	6959      	ldr	r1, [r3, #20]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	895a      	ldrh	r2, [r3, #10]
 80078ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	f006 ff2c 	bl	800e74a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007908:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800790c:	82fb      	strh	r3, [r7, #22]
 800790e:	8afb      	ldrh	r3, [r7, #22]
 8007910:	f083 0310 	eor.w	r3, r3, #16
 8007914:	82fb      	strh	r3, [r7, #22]
 8007916:	8afb      	ldrh	r3, [r7, #22]
 8007918:	f083 0320 	eor.w	r3, r3, #32
 800791c:	82fb      	strh	r3, [r7, #22]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	441a      	add	r2, r3
 800792c:	8afb      	ldrh	r3, [r7, #22]
 800792e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007932:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800793a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800793e:	b29b      	uxth	r3, r3
 8007940:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3798      	adds	r7, #152	@ 0x98
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	607b      	str	r3, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	817b      	strh	r3, [r7, #10]
 800795a:	4613      	mov	r3, r2
 800795c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800795e:	897b      	ldrh	r3, [r7, #10]
 8007960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007964:	b29b      	uxth	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00b      	beq.n	8007982 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800796a:	897b      	ldrh	r3, [r7, #10]
 800796c:	f003 0207 	and.w	r2, r3, #7
 8007970:	4613      	mov	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	00db      	lsls	r3, r3, #3
 8007978:	3310      	adds	r3, #16
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	4413      	add	r3, r2
 800797e:	617b      	str	r3, [r7, #20]
 8007980:	e009      	b.n	8007996 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007982:	897a      	ldrh	r2, [r7, #10]
 8007984:	4613      	mov	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	00db      	lsls	r3, r3, #3
 800798c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007996:	893b      	ldrh	r3, [r7, #8]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d107      	bne.n	80079ac <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	2200      	movs	r2, #0
 80079a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	80da      	strh	r2, [r3, #6]
 80079aa:	e00b      	b.n	80079c4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	2201      	movs	r2, #1
 80079b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	0c1b      	lsrs	r3, r3, #16
 80079be:	b29a      	uxth	r2, r3
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	371c      	adds	r7, #28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b085      	sub	sp, #20
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  /* Enable BCD feature */
  USBx->BCDR |= USB_BCDR_BCDEN;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	f043 0301 	orr.w	r3, r3, #1
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  /* Enable DCD : Data Contact Detect */
  USBx->BCDR &= ~(USB_BCDR_PDEN);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	f023 0304 	bic.w	r3, r3, #4
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  USBx->BCDR &= ~(USB_BCDR_SDEN);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	f023 0308 	bic.w	r3, r3, #8
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  USBx->BCDR |= USB_BCDR_DCDEN;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	f043 0302 	orr.w	r3, r3, #2
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <HAL_PCDEx_DeActivateBCD>:
  * @brief  Deactivate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_DeActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b085      	sub	sp, #20
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 0U;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4

  /* Disable BCD feature */
  USBx->BCDR &= ~(USB_BCDR_BCDEN);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	f023 0301 	bic.w	r3, r3, #1
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <HAL_PCDEx_BCD_VBUSDetect>:
  * @brief  Handle BatteryCharging Process.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCDEx_BCD_VBUSDetect(PCD_HandleTypeDef *hpcd)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b084      	sub	sp, #16
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = HAL_GetTick();
 8007a8c:	f7fc fadc 	bl	8004048 <HAL_GetTick>
 8007a90:	60b8      	str	r0, [r7, #8]

  /* Wait for Min DCD Timeout */
  HAL_Delay(300U);
 8007a92:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8007a96:	f7fc fae3 	bl	8004060 <HAL_Delay>

  /* Data Pin Contact ? Check Detect flag */
  if ((USBx->BCDR & USB_BCDR_DCDET) == USB_BCDR_DCDET)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	f003 0310 	and.w	r3, r3, #16
 8007aa6:	2b10      	cmp	r3, #16
 8007aa8:	d103      	bne.n	8007ab2 <HAL_PCDEx_BCD_VBUSDetect+0x34>
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_CONTACT_DETECTION);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CONTACT_DETECTION);
 8007aaa:	21fe      	movs	r1, #254	@ 0xfe
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f009 f8e9 	bl	8010c84 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }
  /* Primary detection: checks if connected to Standard Downstream Port
  (without charging capability) */
  USBx->BCDR &= ~(USB_BCDR_DCDEN);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	f023 0302 	bic.w	r3, r3, #2
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  HAL_Delay(50U);
 8007ac6:	2032      	movs	r0, #50	@ 0x32
 8007ac8:	f7fc faca 	bl	8004060 <HAL_Delay>
  USBx->BCDR |= (USB_BCDR_PDEN);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	f043 0304 	orr.w	r3, r3, #4
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  HAL_Delay(50U);
 8007ae0:	2032      	movs	r0, #50	@ 0x32
 8007ae2:	f7fc fabd 	bl	8004060 <HAL_Delay>

  /* If Charger detect ? */
  if ((USBx->BCDR & USB_BCDR_PDET) == USB_BCDR_PDET)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b20      	cmp	r3, #32
 8007af4:	d12b      	bne.n	8007b4e <HAL_PCDEx_BCD_VBUSDetect+0xd0>
  {
    /* Start secondary detection to check connection to Charging Downstream
    Port or Dedicated Charging Port */
    USBx->BCDR &= ~(USB_BCDR_PDEN);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	f023 0304 	bic.w	r3, r3, #4
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    HAL_Delay(50U);
 8007b0a:	2032      	movs	r0, #50	@ 0x32
 8007b0c:	f7fc faa8 	bl	8004060 <HAL_Delay>
    USBx->BCDR |= (USB_BCDR_SDEN);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f043 0308 	orr.w	r3, r3, #8
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    HAL_Delay(50U);
 8007b24:	2032      	movs	r0, #50	@ 0x32
 8007b26:	f7fc fa9b 	bl	8004060 <HAL_Delay>

    /* If CDP ? */
    if ((USBx->BCDR & USB_BCDR_SDET) == USB_BCDR_SDET)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b36:	2b40      	cmp	r3, #64	@ 0x40
 8007b38:	d104      	bne.n	8007b44 <HAL_PCDEx_BCD_VBUSDetect+0xc6>
    {
      /* Dedicated Downstream Port DCP */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
 8007b3a:	21fb      	movs	r1, #251	@ 0xfb
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f009 f8a1 	bl	8010c84 <HAL_PCDEx_BCD_Callback>
 8007b42:	e008      	b.n	8007b56 <HAL_PCDEx_BCD_VBUSDetect+0xd8>
    {
      /* Charging Downstream Port CDP */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->BCDCallback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
#else
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
 8007b44:	21fc      	movs	r1, #252	@ 0xfc
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f009 f89c 	bl	8010c84 <HAL_PCDEx_BCD_Callback>
 8007b4c:	e003      	b.n	8007b56 <HAL_PCDEx_BCD_VBUSDetect+0xd8>
  {
    /* Standard Downstream Port */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
 8007b4e:	21fd      	movs	r1, #253	@ 0xfd
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f009 f897 	bl	8010c84 <HAL_PCDEx_BCD_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Battery Charging capability discovery finished Start Enumeration */
  (void)HAL_PCDEx_DeActivateBCD(hpcd);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff ff75 	bl	8007a46 <HAL_PCDEx_DeActivateBCD>

  /* Check for the Timeout, else start USB Device */
  if ((HAL_GetTick() - tickstart) > 1000U)
 8007b5c:	f7fc fa74 	bl	8004048 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b6a:	d904      	bls.n	8007b76 <HAL_PCDEx_BCD_VBUSDetect+0xf8>
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->BCDCallback(hpcd, PCD_BCD_ERROR);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_ERROR);
 8007b6c:	21ff      	movs	r1, #255	@ 0xff
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f009 f888 	bl	8010c84 <HAL_PCDEx_BCD_Callback>
    hpcd->BCDCallback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#else
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }
}
 8007b74:	e003      	b.n	8007b7e <HAL_PCDEx_BCD_VBUSDetect+0x100>
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
 8007b76:	2100      	movs	r1, #0
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f009 f883 	bl	8010c84 <HAL_PCDEx_BCD_Callback>
}
 8007b7e:	bf00      	nop
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b085      	sub	sp, #20
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	f043 0301 	orr.w	r3, r3, #1
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	f043 0302 	orr.w	r3, r3, #2
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
	...

08007bdc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007be0:	4b05      	ldr	r3, [pc, #20]	@ (8007bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a04      	ldr	r2, [pc, #16]	@ (8007bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bea:	6013      	str	r3, [r2, #0]
}
 8007bec:	bf00      	nop
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	40007000 	.word	0x40007000

08007bfc <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c00:	4b05      	ldr	r3, [pc, #20]	@ (8007c18 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a04      	ldr	r2, [pc, #16]	@ (8007c18 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8007c06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c0a:	6013      	str	r3, [r2, #0]
}
 8007c0c:	bf00      	nop
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	40007000 	.word	0x40007000

08007c1c <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8007c24:	4b2b      	ldr	r3, [pc, #172]	@ (8007cd4 <HAL_PWR_ConfigPVD+0xb8>)
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f023 020e 	bic.w	r2, r3, #14
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4928      	ldr	r1, [pc, #160]	@ (8007cd4 <HAL_PWR_ConfigPVD+0xb8>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8007c36:	4b28      	ldr	r3, [pc, #160]	@ (8007cd8 <HAL_PWR_ConfigPVD+0xbc>)
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	4a27      	ldr	r2, [pc, #156]	@ (8007cd8 <HAL_PWR_ConfigPVD+0xbc>)
 8007c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c40:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8007c42:	4b25      	ldr	r3, [pc, #148]	@ (8007cd8 <HAL_PWR_ConfigPVD+0xbc>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a24      	ldr	r2, [pc, #144]	@ (8007cd8 <HAL_PWR_ConfigPVD+0xbc>)
 8007c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c4c:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8007c4e:	4b22      	ldr	r3, [pc, #136]	@ (8007cd8 <HAL_PWR_ConfigPVD+0xbc>)
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	4a21      	ldr	r2, [pc, #132]	@ (8007cd8 <HAL_PWR_ConfigPVD+0xbc>)
 8007c54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c58:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8007c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8007cd8 <HAL_PWR_ConfigPVD+0xbc>)
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8007cd8 <HAL_PWR_ConfigPVD+0xbc>)
 8007c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c64:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d005      	beq.n	8007c7e <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8007c72:	4b19      	ldr	r3, [pc, #100]	@ (8007cd8 <HAL_PWR_ConfigPVD+0xbc>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a18      	ldr	r2, [pc, #96]	@ (8007cd8 <HAL_PWR_ConfigPVD+0xbc>)
 8007c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c7c:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d005      	beq.n	8007c96 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8007c8a:	4b13      	ldr	r3, [pc, #76]	@ (8007cd8 <HAL_PWR_ConfigPVD+0xbc>)
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	4a12      	ldr	r2, [pc, #72]	@ (8007cd8 <HAL_PWR_ConfigPVD+0xbc>)
 8007c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c94:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d005      	beq.n	8007cae <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8007ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd8 <HAL_PWR_ConfigPVD+0xbc>)
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8007cd8 <HAL_PWR_ConfigPVD+0xbc>)
 8007ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cac:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d005      	beq.n	8007cc6 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8007cba:	4b07      	ldr	r3, [pc, #28]	@ (8007cd8 <HAL_PWR_ConfigPVD+0xbc>)
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	4a06      	ldr	r2, [pc, #24]	@ (8007cd8 <HAL_PWR_ConfigPVD+0xbc>)
 8007cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cc4:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	40007000 	.word	0x40007000
 8007cd8:	40010400 	.word	0x40010400

08007cdc <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8007ce0:	4b05      	ldr	r3, [pc, #20]	@ (8007cf8 <HAL_PWR_EnablePVD+0x1c>)
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	4a04      	ldr	r2, [pc, #16]	@ (8007cf8 <HAL_PWR_EnablePVD+0x1c>)
 8007ce6:	f043 0301 	orr.w	r3, r3, #1
 8007cea:	6053      	str	r3, [r2, #4]
}
 8007cec:	bf00      	nop
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	40007000 	.word	0x40007000

08007cfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d141      	bne.n	8007d8e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007d0a:	4b4b      	ldr	r3, [pc, #300]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d16:	d131      	bne.n	8007d7c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d18:	4b47      	ldr	r3, [pc, #284]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d1e:	4a46      	ldr	r2, [pc, #280]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d28:	4b43      	ldr	r3, [pc, #268]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007d30:	4a41      	ldr	r2, [pc, #260]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007d38:	4b40      	ldr	r3, [pc, #256]	@ (8007e3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2232      	movs	r2, #50	@ 0x32
 8007d3e:	fb02 f303 	mul.w	r3, r2, r3
 8007d42:	4a3f      	ldr	r2, [pc, #252]	@ (8007e40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007d44:	fba2 2303 	umull	r2, r3, r2, r3
 8007d48:	0c9b      	lsrs	r3, r3, #18
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d4e:	e002      	b.n	8007d56 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d56:	4b38      	ldr	r3, [pc, #224]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d62:	d102      	bne.n	8007d6a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1f2      	bne.n	8007d50 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d6a:	4b33      	ldr	r3, [pc, #204]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d76:	d158      	bne.n	8007e2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e057      	b.n	8007e2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d82:	4a2d      	ldr	r2, [pc, #180]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007d8c:	e04d      	b.n	8007e2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d94:	d141      	bne.n	8007e1a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007d96:	4b28      	ldr	r3, [pc, #160]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007da2:	d131      	bne.n	8007e08 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007da4:	4b24      	ldr	r3, [pc, #144]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007daa:	4a23      	ldr	r2, [pc, #140]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007db0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007db4:	4b20      	ldr	r3, [pc, #128]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007dc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8007e3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2232      	movs	r2, #50	@ 0x32
 8007dca:	fb02 f303 	mul.w	r3, r2, r3
 8007dce:	4a1c      	ldr	r2, [pc, #112]	@ (8007e40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd4:	0c9b      	lsrs	r3, r3, #18
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007dda:	e002      	b.n	8007de2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007de2:	4b15      	ldr	r3, [pc, #84]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dee:	d102      	bne.n	8007df6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f2      	bne.n	8007ddc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007df6:	4b10      	ldr	r3, [pc, #64]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e02:	d112      	bne.n	8007e2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e011      	b.n	8007e2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e08:	4b0b      	ldr	r3, [pc, #44]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007e18:	e007      	b.n	8007e2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007e1a:	4b07      	ldr	r3, [pc, #28]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007e22:	4a05      	ldr	r2, [pc, #20]	@ (8007e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007e28:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	40007000 	.word	0x40007000
 8007e3c:	20000000 	.word	0x20000000
 8007e40:	431bde83 	.word	0x431bde83

08007e44 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007e48:	4b05      	ldr	r3, [pc, #20]	@ (8007e60 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	4a04      	ldr	r2, [pc, #16]	@ (8007e60 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007e4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e52:	6093      	str	r3, [r2, #8]
}
 8007e54:	bf00      	nop
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	40007000 	.word	0x40007000

08007e64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b088      	sub	sp, #32
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e2fe      	b.n	8008474 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d075      	beq.n	8007f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e82:	4b97      	ldr	r3, [pc, #604]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f003 030c 	and.w	r3, r3, #12
 8007e8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e8c:	4b94      	ldr	r3, [pc, #592]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f003 0303 	and.w	r3, r3, #3
 8007e94:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	2b0c      	cmp	r3, #12
 8007e9a:	d102      	bne.n	8007ea2 <HAL_RCC_OscConfig+0x3e>
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d002      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x44>
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d10b      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ea8:	4b8d      	ldr	r3, [pc, #564]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d05b      	beq.n	8007f6c <HAL_RCC_OscConfig+0x108>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d157      	bne.n	8007f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e2d9      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ec8:	d106      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x74>
 8007eca:	4b85      	ldr	r3, [pc, #532]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a84      	ldr	r2, [pc, #528]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ed4:	6013      	str	r3, [r2, #0]
 8007ed6:	e01d      	b.n	8007f14 <HAL_RCC_OscConfig+0xb0>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ee0:	d10c      	bne.n	8007efc <HAL_RCC_OscConfig+0x98>
 8007ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a7e      	ldr	r2, [pc, #504]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	4b7c      	ldr	r3, [pc, #496]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a7b      	ldr	r2, [pc, #492]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	e00b      	b.n	8007f14 <HAL_RCC_OscConfig+0xb0>
 8007efc:	4b78      	ldr	r3, [pc, #480]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a77      	ldr	r2, [pc, #476]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f06:	6013      	str	r3, [r2, #0]
 8007f08:	4b75      	ldr	r3, [pc, #468]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a74      	ldr	r2, [pc, #464]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d013      	beq.n	8007f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f1c:	f7fc f894 	bl	8004048 <HAL_GetTick>
 8007f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f22:	e008      	b.n	8007f36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f24:	f7fc f890 	bl	8004048 <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	2b64      	cmp	r3, #100	@ 0x64
 8007f30:	d901      	bls.n	8007f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e29e      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f36:	4b6a      	ldr	r3, [pc, #424]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d0f0      	beq.n	8007f24 <HAL_RCC_OscConfig+0xc0>
 8007f42:	e014      	b.n	8007f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f44:	f7fc f880 	bl	8004048 <HAL_GetTick>
 8007f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f4a:	e008      	b.n	8007f5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f4c:	f7fc f87c 	bl	8004048 <HAL_GetTick>
 8007f50:	4602      	mov	r2, r0
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	2b64      	cmp	r3, #100	@ 0x64
 8007f58:	d901      	bls.n	8007f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e28a      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f5e:	4b60      	ldr	r3, [pc, #384]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1f0      	bne.n	8007f4c <HAL_RCC_OscConfig+0xe8>
 8007f6a:	e000      	b.n	8007f6e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d075      	beq.n	8008066 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f7a:	4b59      	ldr	r3, [pc, #356]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f003 030c 	and.w	r3, r3, #12
 8007f82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f84:	4b56      	ldr	r3, [pc, #344]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f003 0303 	and.w	r3, r3, #3
 8007f8c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	2b0c      	cmp	r3, #12
 8007f92:	d102      	bne.n	8007f9a <HAL_RCC_OscConfig+0x136>
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d002      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x13c>
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	2b04      	cmp	r3, #4
 8007f9e:	d11f      	bne.n	8007fe0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fa0:	4b4f      	ldr	r3, [pc, #316]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d005      	beq.n	8007fb8 <HAL_RCC_OscConfig+0x154>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e25d      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fb8:	4b49      	ldr	r3, [pc, #292]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	061b      	lsls	r3, r3, #24
 8007fc6:	4946      	ldr	r1, [pc, #280]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007fcc:	4b45      	ldr	r3, [pc, #276]	@ (80080e4 <HAL_RCC_OscConfig+0x280>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fa fd95 	bl	8002b00 <HAL_InitTick>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d043      	beq.n	8008064 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e249      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d023      	beq.n	8008030 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a3c      	ldr	r2, [pc, #240]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8007fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff4:	f7fc f828 	bl	8004048 <HAL_GetTick>
 8007ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ffa:	e008      	b.n	800800e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ffc:	f7fc f824 	bl	8004048 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	2b02      	cmp	r3, #2
 8008008:	d901      	bls.n	800800e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e232      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800800e:	4b34      	ldr	r3, [pc, #208]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0f0      	beq.n	8007ffc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800801a:	4b31      	ldr	r3, [pc, #196]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	061b      	lsls	r3, r3, #24
 8008028:	492d      	ldr	r1, [pc, #180]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 800802a:	4313      	orrs	r3, r2
 800802c:	604b      	str	r3, [r1, #4]
 800802e:	e01a      	b.n	8008066 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008030:	4b2b      	ldr	r3, [pc, #172]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a2a      	ldr	r2, [pc, #168]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8008036:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800803a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800803c:	f7fc f804 	bl	8004048 <HAL_GetTick>
 8008040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008042:	e008      	b.n	8008056 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008044:	f7fc f800 	bl	8004048 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	d901      	bls.n	8008056 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e20e      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008056:	4b22      	ldr	r3, [pc, #136]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1f0      	bne.n	8008044 <HAL_RCC_OscConfig+0x1e0>
 8008062:	e000      	b.n	8008066 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008064:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0308 	and.w	r3, r3, #8
 800806e:	2b00      	cmp	r3, #0
 8008070:	d041      	beq.n	80080f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d01c      	beq.n	80080b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800807a:	4b19      	ldr	r3, [pc, #100]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 800807c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008080:	4a17      	ldr	r2, [pc, #92]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 8008082:	f043 0301 	orr.w	r3, r3, #1
 8008086:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800808a:	f7fb ffdd 	bl	8004048 <HAL_GetTick>
 800808e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008090:	e008      	b.n	80080a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008092:	f7fb ffd9 	bl	8004048 <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	2b02      	cmp	r3, #2
 800809e:	d901      	bls.n	80080a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e1e7      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080a4:	4b0e      	ldr	r3, [pc, #56]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 80080a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0ef      	beq.n	8008092 <HAL_RCC_OscConfig+0x22e>
 80080b2:	e020      	b.n	80080f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080b4:	4b0a      	ldr	r3, [pc, #40]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 80080b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080ba:	4a09      	ldr	r2, [pc, #36]	@ (80080e0 <HAL_RCC_OscConfig+0x27c>)
 80080bc:	f023 0301 	bic.w	r3, r3, #1
 80080c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080c4:	f7fb ffc0 	bl	8004048 <HAL_GetTick>
 80080c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080ca:	e00d      	b.n	80080e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080cc:	f7fb ffbc 	bl	8004048 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d906      	bls.n	80080e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e1ca      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
 80080de:	bf00      	nop
 80080e0:	40021000 	.word	0x40021000
 80080e4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080e8:	4b8c      	ldr	r3, [pc, #560]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 80080ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1ea      	bne.n	80080cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0304 	and.w	r3, r3, #4
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 80a6 	beq.w	8008250 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008104:	2300      	movs	r3, #0
 8008106:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008108:	4b84      	ldr	r3, [pc, #528]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 800810a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800810c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <HAL_RCC_OscConfig+0x2b4>
 8008114:	2301      	movs	r3, #1
 8008116:	e000      	b.n	800811a <HAL_RCC_OscConfig+0x2b6>
 8008118:	2300      	movs	r3, #0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00d      	beq.n	800813a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800811e:	4b7f      	ldr	r3, [pc, #508]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 8008120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008122:	4a7e      	ldr	r2, [pc, #504]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 8008124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008128:	6593      	str	r3, [r2, #88]	@ 0x58
 800812a:	4b7c      	ldr	r3, [pc, #496]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 800812c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800812e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008132:	60fb      	str	r3, [r7, #12]
 8008134:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008136:	2301      	movs	r3, #1
 8008138:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800813a:	4b79      	ldr	r3, [pc, #484]	@ (8008320 <HAL_RCC_OscConfig+0x4bc>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008142:	2b00      	cmp	r3, #0
 8008144:	d118      	bne.n	8008178 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008146:	4b76      	ldr	r3, [pc, #472]	@ (8008320 <HAL_RCC_OscConfig+0x4bc>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a75      	ldr	r2, [pc, #468]	@ (8008320 <HAL_RCC_OscConfig+0x4bc>)
 800814c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008152:	f7fb ff79 	bl	8004048 <HAL_GetTick>
 8008156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008158:	e008      	b.n	800816c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800815a:	f7fb ff75 	bl	8004048 <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	2b02      	cmp	r3, #2
 8008166:	d901      	bls.n	800816c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e183      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800816c:	4b6c      	ldr	r3, [pc, #432]	@ (8008320 <HAL_RCC_OscConfig+0x4bc>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0f0      	beq.n	800815a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d108      	bne.n	8008192 <HAL_RCC_OscConfig+0x32e>
 8008180:	4b66      	ldr	r3, [pc, #408]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 8008182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008186:	4a65      	ldr	r2, [pc, #404]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 8008188:	f043 0301 	orr.w	r3, r3, #1
 800818c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008190:	e024      	b.n	80081dc <HAL_RCC_OscConfig+0x378>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	2b05      	cmp	r3, #5
 8008198:	d110      	bne.n	80081bc <HAL_RCC_OscConfig+0x358>
 800819a:	4b60      	ldr	r3, [pc, #384]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 800819c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081a0:	4a5e      	ldr	r2, [pc, #376]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 80081a2:	f043 0304 	orr.w	r3, r3, #4
 80081a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80081aa:	4b5c      	ldr	r3, [pc, #368]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 80081ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081b0:	4a5a      	ldr	r2, [pc, #360]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 80081b2:	f043 0301 	orr.w	r3, r3, #1
 80081b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80081ba:	e00f      	b.n	80081dc <HAL_RCC_OscConfig+0x378>
 80081bc:	4b57      	ldr	r3, [pc, #348]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 80081be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081c2:	4a56      	ldr	r2, [pc, #344]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 80081c4:	f023 0301 	bic.w	r3, r3, #1
 80081c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80081cc:	4b53      	ldr	r3, [pc, #332]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 80081ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081d2:	4a52      	ldr	r2, [pc, #328]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 80081d4:	f023 0304 	bic.w	r3, r3, #4
 80081d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d016      	beq.n	8008212 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e4:	f7fb ff30 	bl	8004048 <HAL_GetTick>
 80081e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081ea:	e00a      	b.n	8008202 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081ec:	f7fb ff2c 	bl	8004048 <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e138      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008202:	4b46      	ldr	r3, [pc, #280]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 8008204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008208:	f003 0302 	and.w	r3, r3, #2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d0ed      	beq.n	80081ec <HAL_RCC_OscConfig+0x388>
 8008210:	e015      	b.n	800823e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008212:	f7fb ff19 	bl	8004048 <HAL_GetTick>
 8008216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008218:	e00a      	b.n	8008230 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800821a:	f7fb ff15 	bl	8004048 <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008228:	4293      	cmp	r3, r2
 800822a:	d901      	bls.n	8008230 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e121      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008230:	4b3a      	ldr	r3, [pc, #232]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 8008232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1ed      	bne.n	800821a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800823e:	7ffb      	ldrb	r3, [r7, #31]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d105      	bne.n	8008250 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008244:	4b35      	ldr	r3, [pc, #212]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 8008246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008248:	4a34      	ldr	r2, [pc, #208]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 800824a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800824e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0320 	and.w	r3, r3, #32
 8008258:	2b00      	cmp	r3, #0
 800825a:	d03c      	beq.n	80082d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d01c      	beq.n	800829e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008264:	4b2d      	ldr	r3, [pc, #180]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 8008266:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800826a:	4a2c      	ldr	r2, [pc, #176]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 800826c:	f043 0301 	orr.w	r3, r3, #1
 8008270:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008274:	f7fb fee8 	bl	8004048 <HAL_GetTick>
 8008278:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800827a:	e008      	b.n	800828e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800827c:	f7fb fee4 	bl	8004048 <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	2b02      	cmp	r3, #2
 8008288:	d901      	bls.n	800828e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e0f2      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800828e:	4b23      	ldr	r3, [pc, #140]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 8008290:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008294:	f003 0302 	and.w	r3, r3, #2
 8008298:	2b00      	cmp	r3, #0
 800829a:	d0ef      	beq.n	800827c <HAL_RCC_OscConfig+0x418>
 800829c:	e01b      	b.n	80082d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800829e:	4b1f      	ldr	r3, [pc, #124]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 80082a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80082a4:	4a1d      	ldr	r2, [pc, #116]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 80082a6:	f023 0301 	bic.w	r3, r3, #1
 80082aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ae:	f7fb fecb 	bl	8004048 <HAL_GetTick>
 80082b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80082b4:	e008      	b.n	80082c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082b6:	f7fb fec7 	bl	8004048 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d901      	bls.n	80082c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e0d5      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80082c8:	4b14      	ldr	r3, [pc, #80]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 80082ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80082ce:	f003 0302 	and.w	r3, r3, #2
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1ef      	bne.n	80082b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 80c9 	beq.w	8008472 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082e0:	4b0e      	ldr	r3, [pc, #56]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f003 030c 	and.w	r3, r3, #12
 80082e8:	2b0c      	cmp	r3, #12
 80082ea:	f000 8083 	beq.w	80083f4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d15e      	bne.n	80083b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082f6:	4b09      	ldr	r3, [pc, #36]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a08      	ldr	r2, [pc, #32]	@ (800831c <HAL_RCC_OscConfig+0x4b8>)
 80082fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008302:	f7fb fea1 	bl	8004048 <HAL_GetTick>
 8008306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008308:	e00c      	b.n	8008324 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800830a:	f7fb fe9d 	bl	8004048 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	2b02      	cmp	r3, #2
 8008316:	d905      	bls.n	8008324 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e0ab      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
 800831c:	40021000 	.word	0x40021000
 8008320:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008324:	4b55      	ldr	r3, [pc, #340]	@ (800847c <HAL_RCC_OscConfig+0x618>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1ec      	bne.n	800830a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008330:	4b52      	ldr	r3, [pc, #328]	@ (800847c <HAL_RCC_OscConfig+0x618>)
 8008332:	68da      	ldr	r2, [r3, #12]
 8008334:	4b52      	ldr	r3, [pc, #328]	@ (8008480 <HAL_RCC_OscConfig+0x61c>)
 8008336:	4013      	ands	r3, r2
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	6a11      	ldr	r1, [r2, #32]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008340:	3a01      	subs	r2, #1
 8008342:	0112      	lsls	r2, r2, #4
 8008344:	4311      	orrs	r1, r2
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800834a:	0212      	lsls	r2, r2, #8
 800834c:	4311      	orrs	r1, r2
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008352:	0852      	lsrs	r2, r2, #1
 8008354:	3a01      	subs	r2, #1
 8008356:	0552      	lsls	r2, r2, #21
 8008358:	4311      	orrs	r1, r2
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800835e:	0852      	lsrs	r2, r2, #1
 8008360:	3a01      	subs	r2, #1
 8008362:	0652      	lsls	r2, r2, #25
 8008364:	4311      	orrs	r1, r2
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800836a:	06d2      	lsls	r2, r2, #27
 800836c:	430a      	orrs	r2, r1
 800836e:	4943      	ldr	r1, [pc, #268]	@ (800847c <HAL_RCC_OscConfig+0x618>)
 8008370:	4313      	orrs	r3, r2
 8008372:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008374:	4b41      	ldr	r3, [pc, #260]	@ (800847c <HAL_RCC_OscConfig+0x618>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a40      	ldr	r2, [pc, #256]	@ (800847c <HAL_RCC_OscConfig+0x618>)
 800837a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800837e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008380:	4b3e      	ldr	r3, [pc, #248]	@ (800847c <HAL_RCC_OscConfig+0x618>)
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	4a3d      	ldr	r2, [pc, #244]	@ (800847c <HAL_RCC_OscConfig+0x618>)
 8008386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800838a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800838c:	f7fb fe5c 	bl	8004048 <HAL_GetTick>
 8008390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008392:	e008      	b.n	80083a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008394:	f7fb fe58 	bl	8004048 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e066      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083a6:	4b35      	ldr	r3, [pc, #212]	@ (800847c <HAL_RCC_OscConfig+0x618>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d0f0      	beq.n	8008394 <HAL_RCC_OscConfig+0x530>
 80083b2:	e05e      	b.n	8008472 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083b4:	4b31      	ldr	r3, [pc, #196]	@ (800847c <HAL_RCC_OscConfig+0x618>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a30      	ldr	r2, [pc, #192]	@ (800847c <HAL_RCC_OscConfig+0x618>)
 80083ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c0:	f7fb fe42 	bl	8004048 <HAL_GetTick>
 80083c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083c6:	e008      	b.n	80083da <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083c8:	f7fb fe3e 	bl	8004048 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d901      	bls.n	80083da <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e04c      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083da:	4b28      	ldr	r3, [pc, #160]	@ (800847c <HAL_RCC_OscConfig+0x618>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1f0      	bne.n	80083c8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80083e6:	4b25      	ldr	r3, [pc, #148]	@ (800847c <HAL_RCC_OscConfig+0x618>)
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	4924      	ldr	r1, [pc, #144]	@ (800847c <HAL_RCC_OscConfig+0x618>)
 80083ec:	4b25      	ldr	r3, [pc, #148]	@ (8008484 <HAL_RCC_OscConfig+0x620>)
 80083ee:	4013      	ands	r3, r2
 80083f0:	60cb      	str	r3, [r1, #12]
 80083f2:	e03e      	b.n	8008472 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d101      	bne.n	8008400 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e039      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008400:	4b1e      	ldr	r3, [pc, #120]	@ (800847c <HAL_RCC_OscConfig+0x618>)
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f003 0203 	and.w	r2, r3, #3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a1b      	ldr	r3, [r3, #32]
 8008410:	429a      	cmp	r2, r3
 8008412:	d12c      	bne.n	800846e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841e:	3b01      	subs	r3, #1
 8008420:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008422:	429a      	cmp	r2, r3
 8008424:	d123      	bne.n	800846e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008430:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008432:	429a      	cmp	r2, r3
 8008434:	d11b      	bne.n	800846e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008440:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008442:	429a      	cmp	r2, r3
 8008444:	d113      	bne.n	800846e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008450:	085b      	lsrs	r3, r3, #1
 8008452:	3b01      	subs	r3, #1
 8008454:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008456:	429a      	cmp	r2, r3
 8008458:	d109      	bne.n	800846e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008464:	085b      	lsrs	r3, r3, #1
 8008466:	3b01      	subs	r3, #1
 8008468:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800846a:	429a      	cmp	r2, r3
 800846c:	d001      	beq.n	8008472 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e000      	b.n	8008474 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3720      	adds	r7, #32
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	40021000 	.word	0x40021000
 8008480:	019f800c 	.word	0x019f800c
 8008484:	feeefffc 	.word	0xfeeefffc

08008488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e11e      	b.n	80086de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80084a0:	4b91      	ldr	r3, [pc, #580]	@ (80086e8 <HAL_RCC_ClockConfig+0x260>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 030f 	and.w	r3, r3, #15
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d910      	bls.n	80084d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084ae:	4b8e      	ldr	r3, [pc, #568]	@ (80086e8 <HAL_RCC_ClockConfig+0x260>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f023 020f 	bic.w	r2, r3, #15
 80084b6:	498c      	ldr	r1, [pc, #560]	@ (80086e8 <HAL_RCC_ClockConfig+0x260>)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084be:	4b8a      	ldr	r3, [pc, #552]	@ (80086e8 <HAL_RCC_ClockConfig+0x260>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 030f 	and.w	r3, r3, #15
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d001      	beq.n	80084d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e106      	b.n	80086de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d073      	beq.n	80085c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d129      	bne.n	8008538 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084e4:	4b81      	ldr	r3, [pc, #516]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e0f4      	b.n	80086de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80084f4:	f000 fa16 	bl	8008924 <RCC_GetSysClockFreqFromPLLSource>
 80084f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	4a7c      	ldr	r2, [pc, #496]	@ (80086f0 <HAL_RCC_ClockConfig+0x268>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d93f      	bls.n	8008582 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008502:	4b7a      	ldr	r3, [pc, #488]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d009      	beq.n	8008522 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008516:	2b00      	cmp	r3, #0
 8008518:	d033      	beq.n	8008582 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800851e:	2b00      	cmp	r3, #0
 8008520:	d12f      	bne.n	8008582 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008522:	4b72      	ldr	r3, [pc, #456]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800852a:	4a70      	ldr	r2, [pc, #448]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 800852c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008530:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008532:	2380      	movs	r3, #128	@ 0x80
 8008534:	617b      	str	r3, [r7, #20]
 8008536:	e024      	b.n	8008582 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	2b02      	cmp	r3, #2
 800853e:	d107      	bne.n	8008550 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008540:	4b6a      	ldr	r3, [pc, #424]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d109      	bne.n	8008560 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e0c6      	b.n	80086de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008550:	4b66      	ldr	r3, [pc, #408]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008558:	2b00      	cmp	r3, #0
 800855a:	d101      	bne.n	8008560 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e0be      	b.n	80086de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008560:	f000 f914 	bl	800878c <HAL_RCC_GetSysClockFreq>
 8008564:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	4a61      	ldr	r2, [pc, #388]	@ (80086f0 <HAL_RCC_ClockConfig+0x268>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d909      	bls.n	8008582 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800856e:	4b5f      	ldr	r3, [pc, #380]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008576:	4a5d      	ldr	r2, [pc, #372]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 8008578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800857c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800857e:	2380      	movs	r3, #128	@ 0x80
 8008580:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008582:	4b5a      	ldr	r3, [pc, #360]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	f023 0203 	bic.w	r2, r3, #3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	4957      	ldr	r1, [pc, #348]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 8008590:	4313      	orrs	r3, r2
 8008592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008594:	f7fb fd58 	bl	8004048 <HAL_GetTick>
 8008598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800859a:	e00a      	b.n	80085b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800859c:	f7fb fd54 	bl	8004048 <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d901      	bls.n	80085b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e095      	b.n	80086de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085b2:	4b4e      	ldr	r3, [pc, #312]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f003 020c 	and.w	r2, r3, #12
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d1eb      	bne.n	800859c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d023      	beq.n	8008618 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d005      	beq.n	80085e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085dc:	4b43      	ldr	r3, [pc, #268]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	4a42      	ldr	r2, [pc, #264]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 80085e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80085e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0308 	and.w	r3, r3, #8
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d007      	beq.n	8008604 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80085f4:	4b3d      	ldr	r3, [pc, #244]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80085fc:	4a3b      	ldr	r2, [pc, #236]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 80085fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008602:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008604:	4b39      	ldr	r3, [pc, #228]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	4936      	ldr	r1, [pc, #216]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 8008612:	4313      	orrs	r3, r2
 8008614:	608b      	str	r3, [r1, #8]
 8008616:	e008      	b.n	800862a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	2b80      	cmp	r3, #128	@ 0x80
 800861c:	d105      	bne.n	800862a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800861e:	4b33      	ldr	r3, [pc, #204]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	4a32      	ldr	r2, [pc, #200]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 8008624:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008628:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800862a:	4b2f      	ldr	r3, [pc, #188]	@ (80086e8 <HAL_RCC_ClockConfig+0x260>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 030f 	and.w	r3, r3, #15
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	429a      	cmp	r2, r3
 8008636:	d21d      	bcs.n	8008674 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008638:	4b2b      	ldr	r3, [pc, #172]	@ (80086e8 <HAL_RCC_ClockConfig+0x260>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f023 020f 	bic.w	r2, r3, #15
 8008640:	4929      	ldr	r1, [pc, #164]	@ (80086e8 <HAL_RCC_ClockConfig+0x260>)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	4313      	orrs	r3, r2
 8008646:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008648:	f7fb fcfe 	bl	8004048 <HAL_GetTick>
 800864c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800864e:	e00a      	b.n	8008666 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008650:	f7fb fcfa 	bl	8004048 <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800865e:	4293      	cmp	r3, r2
 8008660:	d901      	bls.n	8008666 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e03b      	b.n	80086de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008666:	4b20      	ldr	r3, [pc, #128]	@ (80086e8 <HAL_RCC_ClockConfig+0x260>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 030f 	and.w	r3, r3, #15
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	429a      	cmp	r2, r3
 8008672:	d1ed      	bne.n	8008650 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0304 	and.w	r3, r3, #4
 800867c:	2b00      	cmp	r3, #0
 800867e:	d008      	beq.n	8008692 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008680:	4b1a      	ldr	r3, [pc, #104]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	4917      	ldr	r1, [pc, #92]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 800868e:	4313      	orrs	r3, r2
 8008690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0308 	and.w	r3, r3, #8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d009      	beq.n	80086b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800869e:	4b13      	ldr	r3, [pc, #76]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	00db      	lsls	r3, r3, #3
 80086ac:	490f      	ldr	r1, [pc, #60]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80086b2:	f000 f86b 	bl	800878c <HAL_RCC_GetSysClockFreq>
 80086b6:	4602      	mov	r2, r0
 80086b8:	4b0c      	ldr	r3, [pc, #48]	@ (80086ec <HAL_RCC_ClockConfig+0x264>)
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	091b      	lsrs	r3, r3, #4
 80086be:	f003 030f 	and.w	r3, r3, #15
 80086c2:	490c      	ldr	r1, [pc, #48]	@ (80086f4 <HAL_RCC_ClockConfig+0x26c>)
 80086c4:	5ccb      	ldrb	r3, [r1, r3]
 80086c6:	f003 031f 	and.w	r3, r3, #31
 80086ca:	fa22 f303 	lsr.w	r3, r2, r3
 80086ce:	4a0a      	ldr	r2, [pc, #40]	@ (80086f8 <HAL_RCC_ClockConfig+0x270>)
 80086d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80086d2:	4b0a      	ldr	r3, [pc, #40]	@ (80086fc <HAL_RCC_ClockConfig+0x274>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fa fa12 	bl	8002b00 <HAL_InitTick>
 80086dc:	4603      	mov	r3, r0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	40022000 	.word	0x40022000
 80086ec:	40021000 	.word	0x40021000
 80086f0:	04c4b400 	.word	0x04c4b400
 80086f4:	08013ff0 	.word	0x08013ff0
 80086f8:	20000000 	.word	0x20000000
 80086fc:	20000004 	.word	0x20000004

08008700 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b08c      	sub	sp, #48	@ 0x30
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 800870c:	2302      	movs	r3, #2
 800870e:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008710:	2303      	movs	r3, #3
 8008712:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8008714:	2300      	movs	r3, #0
 8008716:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800871e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	0c1b      	lsrs	r3, r3, #16
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 800872c:	029b      	lsls	r3, r3, #10
 800872e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	0c1b      	lsrs	r3, r3, #16
 8008734:	f003 030f 	and.w	r3, r3, #15
 8008738:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800873a:	4b13      	ldr	r3, [pc, #76]	@ (8008788 <HAL_RCC_MCOConfig+0x88>)
 800873c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800873e:	2101      	movs	r1, #1
 8008740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008742:	fa01 f303 	lsl.w	r3, r1, r3
 8008746:	4910      	ldr	r1, [pc, #64]	@ (8008788 <HAL_RCC_MCOConfig+0x88>)
 8008748:	4313      	orrs	r3, r2
 800874a:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	b29b      	uxth	r3, r3
 8008750:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	0d1b      	lsrs	r3, r3, #20
 8008756:	b2db      	uxtb	r3, r3
 8008758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800875a:	f107 0310 	add.w	r3, r7, #16
 800875e:	4619      	mov	r1, r3
 8008760:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008762:	f7fd f9b9 	bl	8005ad8 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8008766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008768:	2b00      	cmp	r3, #0
 800876a:	d109      	bne.n	8008780 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 800876c:	4b06      	ldr	r3, [pc, #24]	@ (8008788 <HAL_RCC_MCOConfig+0x88>)
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008774:	68b9      	ldr	r1, [r7, #8]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	430b      	orrs	r3, r1
 800877a:	4903      	ldr	r1, [pc, #12]	@ (8008788 <HAL_RCC_MCOConfig+0x88>)
 800877c:	4313      	orrs	r3, r2
 800877e:	608b      	str	r3, [r1, #8]
  }
}
 8008780:	bf00      	nop
 8008782:	3730      	adds	r7, #48	@ 0x30
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	40021000 	.word	0x40021000

0800878c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008792:	4b2c      	ldr	r3, [pc, #176]	@ (8008844 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	f003 030c 	and.w	r3, r3, #12
 800879a:	2b04      	cmp	r3, #4
 800879c:	d102      	bne.n	80087a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800879e:	4b2a      	ldr	r3, [pc, #168]	@ (8008848 <HAL_RCC_GetSysClockFreq+0xbc>)
 80087a0:	613b      	str	r3, [r7, #16]
 80087a2:	e047      	b.n	8008834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80087a4:	4b27      	ldr	r3, [pc, #156]	@ (8008844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f003 030c 	and.w	r3, r3, #12
 80087ac:	2b08      	cmp	r3, #8
 80087ae:	d102      	bne.n	80087b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80087b0:	4b26      	ldr	r3, [pc, #152]	@ (800884c <HAL_RCC_GetSysClockFreq+0xc0>)
 80087b2:	613b      	str	r3, [r7, #16]
 80087b4:	e03e      	b.n	8008834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80087b6:	4b23      	ldr	r3, [pc, #140]	@ (8008844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f003 030c 	and.w	r3, r3, #12
 80087be:	2b0c      	cmp	r3, #12
 80087c0:	d136      	bne.n	8008830 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80087c2:	4b20      	ldr	r3, [pc, #128]	@ (8008844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	f003 0303 	and.w	r3, r3, #3
 80087ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80087cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	091b      	lsrs	r3, r3, #4
 80087d2:	f003 030f 	and.w	r3, r3, #15
 80087d6:	3301      	adds	r3, #1
 80087d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d10c      	bne.n	80087fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80087e0:	4a1a      	ldr	r2, [pc, #104]	@ (800884c <HAL_RCC_GetSysClockFreq+0xc0>)
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e8:	4a16      	ldr	r2, [pc, #88]	@ (8008844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087ea:	68d2      	ldr	r2, [r2, #12]
 80087ec:	0a12      	lsrs	r2, r2, #8
 80087ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80087f2:	fb02 f303 	mul.w	r3, r2, r3
 80087f6:	617b      	str	r3, [r7, #20]
      break;
 80087f8:	e00c      	b.n	8008814 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80087fa:	4a13      	ldr	r2, [pc, #76]	@ (8008848 <HAL_RCC_GetSysClockFreq+0xbc>)
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008802:	4a10      	ldr	r2, [pc, #64]	@ (8008844 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008804:	68d2      	ldr	r2, [r2, #12]
 8008806:	0a12      	lsrs	r2, r2, #8
 8008808:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800880c:	fb02 f303 	mul.w	r3, r2, r3
 8008810:	617b      	str	r3, [r7, #20]
      break;
 8008812:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008814:	4b0b      	ldr	r3, [pc, #44]	@ (8008844 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	0e5b      	lsrs	r3, r3, #25
 800881a:	f003 0303 	and.w	r3, r3, #3
 800881e:	3301      	adds	r3, #1
 8008820:	005b      	lsls	r3, r3, #1
 8008822:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	fbb2 f3f3 	udiv	r3, r2, r3
 800882c:	613b      	str	r3, [r7, #16]
 800882e:	e001      	b.n	8008834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008830:	2300      	movs	r3, #0
 8008832:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008834:	693b      	ldr	r3, [r7, #16]
}
 8008836:	4618      	mov	r0, r3
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	40021000 	.word	0x40021000
 8008848:	00f42400 	.word	0x00f42400
 800884c:	007a1200 	.word	0x007a1200

08008850 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008850:	b480      	push	{r7}
 8008852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008854:	4b03      	ldr	r3, [pc, #12]	@ (8008864 <HAL_RCC_GetHCLKFreq+0x14>)
 8008856:	681b      	ldr	r3, [r3, #0]
}
 8008858:	4618      	mov	r0, r3
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	20000000 	.word	0x20000000

08008868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800886c:	f7ff fff0 	bl	8008850 <HAL_RCC_GetHCLKFreq>
 8008870:	4602      	mov	r2, r0
 8008872:	4b06      	ldr	r3, [pc, #24]	@ (800888c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	0a1b      	lsrs	r3, r3, #8
 8008878:	f003 0307 	and.w	r3, r3, #7
 800887c:	4904      	ldr	r1, [pc, #16]	@ (8008890 <HAL_RCC_GetPCLK1Freq+0x28>)
 800887e:	5ccb      	ldrb	r3, [r1, r3]
 8008880:	f003 031f 	and.w	r3, r3, #31
 8008884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008888:	4618      	mov	r0, r3
 800888a:	bd80      	pop	{r7, pc}
 800888c:	40021000 	.word	0x40021000
 8008890:	08014000 	.word	0x08014000

08008894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008898:	f7ff ffda 	bl	8008850 <HAL_RCC_GetHCLKFreq>
 800889c:	4602      	mov	r2, r0
 800889e:	4b06      	ldr	r3, [pc, #24]	@ (80088b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	0adb      	lsrs	r3, r3, #11
 80088a4:	f003 0307 	and.w	r3, r3, #7
 80088a8:	4904      	ldr	r1, [pc, #16]	@ (80088bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80088aa:	5ccb      	ldrb	r3, [r1, r3]
 80088ac:	f003 031f 	and.w	r3, r3, #31
 80088b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	40021000 	.word	0x40021000
 80088bc:	08014000 	.word	0x08014000

080088c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	220f      	movs	r2, #15
 80088ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80088d0:	4b12      	ldr	r3, [pc, #72]	@ (800891c <HAL_RCC_GetClockConfig+0x5c>)
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f003 0203 	and.w	r2, r3, #3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80088dc:	4b0f      	ldr	r3, [pc, #60]	@ (800891c <HAL_RCC_GetClockConfig+0x5c>)
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80088e8:	4b0c      	ldr	r3, [pc, #48]	@ (800891c <HAL_RCC_GetClockConfig+0x5c>)
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80088f4:	4b09      	ldr	r3, [pc, #36]	@ (800891c <HAL_RCC_GetClockConfig+0x5c>)
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	08db      	lsrs	r3, r3, #3
 80088fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008902:	4b07      	ldr	r3, [pc, #28]	@ (8008920 <HAL_RCC_GetClockConfig+0x60>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 020f 	and.w	r2, r3, #15
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	601a      	str	r2, [r3, #0]
}
 800890e:	bf00      	nop
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	40021000 	.word	0x40021000
 8008920:	40022000 	.word	0x40022000

08008924 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008924:	b480      	push	{r7}
 8008926:	b087      	sub	sp, #28
 8008928:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800892a:	4b1e      	ldr	r3, [pc, #120]	@ (80089a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	f003 0303 	and.w	r3, r3, #3
 8008932:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008934:	4b1b      	ldr	r3, [pc, #108]	@ (80089a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	091b      	lsrs	r3, r3, #4
 800893a:	f003 030f 	and.w	r3, r3, #15
 800893e:	3301      	adds	r3, #1
 8008940:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	2b03      	cmp	r3, #3
 8008946:	d10c      	bne.n	8008962 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008948:	4a17      	ldr	r2, [pc, #92]	@ (80089a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008950:	4a14      	ldr	r2, [pc, #80]	@ (80089a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008952:	68d2      	ldr	r2, [r2, #12]
 8008954:	0a12      	lsrs	r2, r2, #8
 8008956:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800895a:	fb02 f303 	mul.w	r3, r2, r3
 800895e:	617b      	str	r3, [r7, #20]
    break;
 8008960:	e00c      	b.n	800897c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008962:	4a12      	ldr	r2, [pc, #72]	@ (80089ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	fbb2 f3f3 	udiv	r3, r2, r3
 800896a:	4a0e      	ldr	r2, [pc, #56]	@ (80089a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800896c:	68d2      	ldr	r2, [r2, #12]
 800896e:	0a12      	lsrs	r2, r2, #8
 8008970:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008974:	fb02 f303 	mul.w	r3, r2, r3
 8008978:	617b      	str	r3, [r7, #20]
    break;
 800897a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800897c:	4b09      	ldr	r3, [pc, #36]	@ (80089a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	0e5b      	lsrs	r3, r3, #25
 8008982:	f003 0303 	and.w	r3, r3, #3
 8008986:	3301      	adds	r3, #1
 8008988:	005b      	lsls	r3, r3, #1
 800898a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	fbb2 f3f3 	udiv	r3, r2, r3
 8008994:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008996:	687b      	ldr	r3, [r7, #4]
}
 8008998:	4618      	mov	r0, r3
 800899a:	371c      	adds	r7, #28
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr
 80089a4:	40021000 	.word	0x40021000
 80089a8:	007a1200 	.word	0x007a1200
 80089ac:	00f42400 	.word	0x00f42400

080089b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80089b8:	2300      	movs	r3, #0
 80089ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80089bc:	2300      	movs	r3, #0
 80089be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 8098 	beq.w	8008afe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089ce:	2300      	movs	r3, #0
 80089d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089d2:	4b43      	ldr	r3, [pc, #268]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10d      	bne.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089de:	4b40      	ldr	r3, [pc, #256]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089e2:	4a3f      	ldr	r2, [pc, #252]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80089ea:	4b3d      	ldr	r3, [pc, #244]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089f2:	60bb      	str	r3, [r7, #8]
 80089f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089f6:	2301      	movs	r3, #1
 80089f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089fa:	4b3a      	ldr	r3, [pc, #232]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a39      	ldr	r2, [pc, #228]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a06:	f7fb fb1f 	bl	8004048 <HAL_GetTick>
 8008a0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a0c:	e009      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a0e:	f7fb fb1b 	bl	8004048 <HAL_GetTick>
 8008a12:	4602      	mov	r2, r0
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d902      	bls.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	74fb      	strb	r3, [r7, #19]
        break;
 8008a20:	e005      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a22:	4b30      	ldr	r3, [pc, #192]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d0ef      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008a2e:	7cfb      	ldrb	r3, [r7, #19]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d159      	bne.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008a34:	4b2a      	ldr	r3, [pc, #168]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a3e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d01e      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d019      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008a50:	4b23      	ldr	r3, [pc, #140]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008a5c:	4b20      	ldr	r3, [pc, #128]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a62:	4a1f      	ldr	r2, [pc, #124]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a72:	4a1b      	ldr	r2, [pc, #108]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008a7c:	4a18      	ldr	r2, [pc, #96]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d016      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a8e:	f7fb fadb 	bl	8004048 <HAL_GetTick>
 8008a92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a94:	e00b      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a96:	f7fb fad7 	bl	8004048 <HAL_GetTick>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d902      	bls.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	74fb      	strb	r3, [r7, #19]
            break;
 8008aac:	e006      	b.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008aae:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ab4:	f003 0302 	and.w	r3, r3, #2
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d0ec      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008abc:	7cfb      	ldrb	r3, [r7, #19]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10b      	bne.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ac2:	4b07      	ldr	r3, [pc, #28]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ac8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ad0:	4903      	ldr	r1, [pc, #12]	@ (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008ad8:	e008      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008ada:	7cfb      	ldrb	r3, [r7, #19]
 8008adc:	74bb      	strb	r3, [r7, #18]
 8008ade:	e005      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008ae0:	40021000 	.word	0x40021000
 8008ae4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae8:	7cfb      	ldrb	r3, [r7, #19]
 8008aea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008aec:	7c7b      	ldrb	r3, [r7, #17]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d105      	bne.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008af2:	4ba7      	ldr	r3, [pc, #668]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008af6:	4aa6      	ldr	r2, [pc, #664]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008af8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008afc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00a      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008b0a:	4ba1      	ldr	r3, [pc, #644]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b10:	f023 0203 	bic.w	r2, r3, #3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	499d      	ldr	r1, [pc, #628]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0302 	and.w	r3, r3, #2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00a      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008b2c:	4b98      	ldr	r3, [pc, #608]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b32:	f023 020c 	bic.w	r2, r3, #12
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	4995      	ldr	r1, [pc, #596]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0304 	and.w	r3, r3, #4
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00a      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008b4e:	4b90      	ldr	r3, [pc, #576]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b54:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	498c      	ldr	r1, [pc, #560]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 0308 	and.w	r3, r3, #8
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00a      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008b70:	4b87      	ldr	r3, [pc, #540]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	4984      	ldr	r1, [pc, #528]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b80:	4313      	orrs	r3, r2
 8008b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0310 	and.w	r3, r3, #16
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00a      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008b92:	4b7f      	ldr	r3, [pc, #508]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	695b      	ldr	r3, [r3, #20]
 8008ba0:	497b      	ldr	r1, [pc, #492]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0320 	and.w	r3, r3, #32
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00a      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008bb4:	4b76      	ldr	r3, [pc, #472]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	4973      	ldr	r1, [pc, #460]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008bd6:	4b6e      	ldr	r3, [pc, #440]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bdc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	69db      	ldr	r3, [r3, #28]
 8008be4:	496a      	ldr	r1, [pc, #424]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008be6:	4313      	orrs	r3, r2
 8008be8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00a      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008bf8:	4b65      	ldr	r3, [pc, #404]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bfe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a1b      	ldr	r3, [r3, #32]
 8008c06:	4962      	ldr	r1, [pc, #392]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008c1a:	4b5d      	ldr	r3, [pc, #372]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c28:	4959      	ldr	r1, [pc, #356]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00a      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008c3c:	4b54      	ldr	r3, [pc, #336]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c42:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c4a:	4951      	ldr	r1, [pc, #324]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d015      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c5e:	4b4c      	ldr	r3, [pc, #304]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c64:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c6c:	4948      	ldr	r1, [pc, #288]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c7c:	d105      	bne.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c7e:	4b44      	ldr	r3, [pc, #272]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	4a43      	ldr	r2, [pc, #268]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c88:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d015      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008c96:	4b3e      	ldr	r3, [pc, #248]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c9c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca4:	493a      	ldr	r1, [pc, #232]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cb4:	d105      	bne.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008cb6:	4b36      	ldr	r3, [pc, #216]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	4a35      	ldr	r2, [pc, #212]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cbc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cc0:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d015      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008cce:	4b30      	ldr	r3, [pc, #192]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cd4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cdc:	492c      	ldr	r1, [pc, #176]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cec:	d105      	bne.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008cee:	4b28      	ldr	r3, [pc, #160]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	4a27      	ldr	r2, [pc, #156]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cf4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cf8:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d015      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d06:	4b22      	ldr	r3, [pc, #136]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d0c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d14:	491e      	ldr	r1, [pc, #120]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d24:	d105      	bne.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d26:	4b1a      	ldr	r3, [pc, #104]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	4a19      	ldr	r2, [pc, #100]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d30:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d015      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d3e:	4b14      	ldr	r3, [pc, #80]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d44:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d4c:	4910      	ldr	r1, [pc, #64]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d5c:	d105      	bne.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	4a0b      	ldr	r2, [pc, #44]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d68:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d018      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008d76:	4b06      	ldr	r3, [pc, #24]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d7c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d84:	4902      	ldr	r1, [pc, #8]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	e001      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008d90:	40021000 	.word	0x40021000
 8008d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d9a:	d105      	bne.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008d9c:	4b21      	ldr	r3, [pc, #132]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	4a20      	ldr	r2, [pc, #128]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008da2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008da6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d015      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008db4:	4b1b      	ldr	r3, [pc, #108]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dba:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dc2:	4918      	ldr	r1, [pc, #96]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dd2:	d105      	bne.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008dd4:	4b13      	ldr	r3, [pc, #76]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	4a12      	ldr	r2, [pc, #72]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008dde:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d015      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008dec:	4b0d      	ldr	r3, [pc, #52]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008df2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dfa:	490a      	ldr	r1, [pc, #40]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e0a:	d105      	bne.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e0c:	4b05      	ldr	r3, [pc, #20]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	4a04      	ldr	r2, [pc, #16]	@ (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008e12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e16:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008e18:	7cbb      	ldrb	r3, [r7, #18]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3718      	adds	r7, #24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	40021000 	.word	0x40021000

08008e28 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08a      	sub	sp, #40	@ 0x28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8008e30:	2300      	movs	r3, #0
 8008e32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  FlagStatus       backupchanged = RESET;
 8008e36:	2300      	movs	r3, #0
 8008e38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  __LSCO_CLK_ENABLE();
 8008e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8008ef4 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e40:	4a2c      	ldr	r2, [pc, #176]	@ (8008ef4 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008e42:	f043 0301 	orr.w	r3, r3, #1
 8008e46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e48:	4b2a      	ldr	r3, [pc, #168]	@ (8008ef4 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8008e54:	2304      	movs	r3, #4
 8008e56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e60:	2300      	movs	r3, #0
 8008e62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8008e64:	f107 0310 	add.w	r3, r7, #16
 8008e68:	4619      	mov	r1, r3
 8008e6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008e6e:	f7fc fe33 	bl	8005ad8 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e72:	4b20      	ldr	r3, [pc, #128]	@ (8008ef4 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10e      	bne.n	8008e9c <HAL_RCCEx_EnableLSCO+0x74>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8008ef4 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e82:	4a1c      	ldr	r2, [pc, #112]	@ (8008ef4 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e88:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ef4 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e92:	60bb      	str	r3, [r7, #8]
 8008e94:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8008e96:	2301      	movs	r3, #1
 8008e98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e9c:	4b16      	ldr	r3, [pc, #88]	@ (8008ef8 <HAL_RCCEx_EnableLSCO+0xd0>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d104      	bne.n	8008eb2 <HAL_RCCEx_EnableLSCO+0x8a>
  {
    HAL_PWR_EnableBkUpAccess();
 8008ea8:	f7fe fe98 	bl	8007bdc <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 8008eac:	2301      	movs	r3, #1
 8008eae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8008eb2:	4b10      	ldr	r3, [pc, #64]	@ (8008ef4 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eb8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8008ef4 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008ec2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ec6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  if(backupchanged == SET)
 8008eca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d101      	bne.n	8008ed6 <HAL_RCCEx_EnableLSCO+0xae>
  {
    HAL_PWR_DisableBkUpAccess();
 8008ed2:	f7fe fe93 	bl	8007bfc <HAL_PWR_DisableBkUpAccess>
  }
  if(pwrclkchanged == SET)
 8008ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d105      	bne.n	8008eea <HAL_RCCEx_EnableLSCO+0xc2>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8008ede:	4b05      	ldr	r3, [pc, #20]	@ (8008ef4 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ee2:	4a04      	ldr	r2, [pc, #16]	@ (8008ef4 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008ee4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ee8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
}
 8008eea:	bf00      	nop
 8008eec:	3728      	adds	r7, #40	@ 0x28
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	40021000 	.word	0x40021000
 8008ef8:	40007000 	.word	0x40007000

08008efc <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8008f04:	4b1c      	ldr	r3, [pc, #112]	@ (8008f78 <HAL_RCCEx_CRSConfig+0x7c>)
 8008f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f08:	4a1b      	ldr	r2, [pc, #108]	@ (8008f78 <HAL_RCCEx_CRSConfig+0x7c>)
 8008f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f0e:	6393      	str	r3, [r2, #56]	@ 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 8008f10:	4b19      	ldr	r3, [pc, #100]	@ (8008f78 <HAL_RCCEx_CRSConfig+0x7c>)
 8008f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f14:	4a18      	ldr	r2, [pc, #96]	@ (8008f78 <HAL_RCCEx_CRSConfig+0x7c>)
 8008f16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f1a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	431a      	orrs	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	041b      	lsls	r3, r3, #16
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8008f44:	4a0d      	ldr	r2, [pc, #52]	@ (8008f7c <HAL_RCCEx_CRSConfig+0x80>)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8008f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f7c <HAL_RCCEx_CRSConfig+0x80>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	021b      	lsls	r3, r3, #8
 8008f58:	4908      	ldr	r1, [pc, #32]	@ (8008f7c <HAL_RCCEx_CRSConfig+0x80>)
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8008f5e:	4b07      	ldr	r3, [pc, #28]	@ (8008f7c <HAL_RCCEx_CRSConfig+0x80>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a06      	ldr	r2, [pc, #24]	@ (8008f7c <HAL_RCCEx_CRSConfig+0x80>)
 8008f64:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008f68:	6013      	str	r3, [r2, #0]
}
 8008f6a:	bf00      	nop
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	40021000 	.word	0x40021000
 8008f7c:	40002000 	.word	0x40002000

08008f80 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e027      	b.n	8008fe2 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	7a5b      	ldrb	r3, [r3, #9]
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d105      	bne.n	8008fa8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7f9 fa74 	bl	8002490 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2202      	movs	r2, #2
 8008fac:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f023 0108 	bic.w	r1, r3, #8
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f042 0204 	orr.w	r2, r2, #4
 8008fd2:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b084      	sub	sp, #16
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d070      	beq.n	80090de <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	d106      	bne.n	8009016 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7f9 fa71 	bl	80024f8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2202      	movs	r2, #2
 800901a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	f003 0310 	and.w	r3, r3, #16
 8009028:	2b10      	cmp	r3, #16
 800902a:	d04f      	beq.n	80090cc <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	22ca      	movs	r2, #202	@ 0xca
 8009032:	625a      	str	r2, [r3, #36]	@ 0x24
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2253      	movs	r2, #83	@ 0x53
 800903a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f877 	bl	8009130 <RTC_EnterInitMode>
 8009042:	4603      	mov	r3, r0
 8009044:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009046:	7bfb      	ldrb	r3, [r7, #15]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d126      	bne.n	800909a <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	6812      	ldr	r2, [r2, #0]
 8009056:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800905a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800905e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6999      	ldr	r1, [r3, #24]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	431a      	orrs	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	431a      	orrs	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	430a      	orrs	r2, r1
 800907c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68d9      	ldr	r1, [r3, #12]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	041a      	lsls	r2, r3, #16
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	430a      	orrs	r2, r1
 800908e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f883 	bl	800919c <RTC_ExitInitMode>
 8009096:	4603      	mov	r3, r0
 8009098:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d110      	bne.n	80090c2 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	699b      	ldr	r3, [r3, #24]
 80090a6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a1a      	ldr	r2, [r3, #32]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	431a      	orrs	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	431a      	orrs	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	430a      	orrs	r2, r1
 80090c0:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	22ff      	movs	r2, #255	@ 0xff
 80090c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80090ca:	e001      	b.n	80090d0 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80090cc:	2300      	movs	r3, #0
 80090ce:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d103      	bne.n	80090de <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 80090de:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a0d      	ldr	r2, [pc, #52]	@ (800912c <HAL_RTC_WaitForSynchro+0x44>)
 80090f6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80090f8:	f7fa ffa6 	bl	8004048 <HAL_GetTick>
 80090fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80090fe:	e009      	b.n	8009114 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009100:	f7fa ffa2 	bl	8004048 <HAL_GetTick>
 8009104:	4602      	mov	r2, r0
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800910e:	d901      	bls.n	8009114 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8009110:	2303      	movs	r3, #3
 8009112:	e007      	b.n	8009124 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	f003 0320 	and.w	r3, r3, #32
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0ee      	beq.n	8009100 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	0001005f 	.word	0x0001005f

08009130 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009146:	2b00      	cmp	r3, #0
 8009148:	d123      	bne.n	8009192 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68da      	ldr	r2, [r3, #12]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009158:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800915a:	f7fa ff75 	bl	8004048 <HAL_GetTick>
 800915e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009160:	e00d      	b.n	800917e <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009162:	f7fa ff71 	bl	8004048 <HAL_GetTick>
 8009166:	4602      	mov	r2, r0
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009170:	d905      	bls.n	800917e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2203      	movs	r2, #3
 800917a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009188:	2b00      	cmp	r3, #0
 800918a:	d102      	bne.n	8009192 <RTC_EnterInitMode+0x62>
 800918c:	7bfb      	ldrb	r3, [r7, #15]
 800918e:	2b03      	cmp	r3, #3
 8009190:	d1e7      	bne.n	8009162 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8009192:	7bfb      	ldrb	r3, [r7, #15]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68da      	ldr	r2, [r3, #12]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80091b6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	f003 0320 	and.w	r3, r3, #32
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10c      	bne.n	80091e0 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f7ff ff8e 	bl	80090e8 <HAL_RTC_WaitForSynchro>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d022      	beq.n	8009218 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2203      	movs	r2, #3
 80091d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	73fb      	strb	r3, [r7, #15]
 80091de:	e01b      	b.n	8009218 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	699a      	ldr	r2, [r3, #24]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f022 0220 	bic.w	r2, r2, #32
 80091ee:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7ff ff79 	bl	80090e8 <HAL_RTC_WaitForSynchro>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d005      	beq.n	8009208 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2203      	movs	r2, #3
 8009200:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	699a      	ldr	r2, [r3, #24]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f042 0220 	orr.w	r2, r2, #32
 8009216:	619a      	str	r2, [r3, #24]
  }

  return status;
 8009218:	7bfb      	ldrb	r3, [r7, #15]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009230:	2b01      	cmp	r3, #1
 8009232:	d101      	bne.n	8009238 <HAL_RTCEx_SetRefClock+0x16>
 8009234:	2302      	movs	r3, #2
 8009236:	e034      	b.n	80092a2 <HAL_RTCEx_SetRefClock+0x80>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2202      	movs	r2, #2
 8009244:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	22ca      	movs	r2, #202	@ 0xca
 800924e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2253      	movs	r2, #83	@ 0x53
 8009256:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f7ff ff69 	bl	8009130 <RTC_EnterInitMode>
 800925e:	4603      	mov	r3, r0
 8009260:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 8009262:	7bfb      	ldrb	r3, [r7, #15]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10c      	bne.n	8009282 <HAL_RTCEx_SetRefClock+0x60>
  {
    /* Enable clockref detection */
    SET_BIT(hrtc->Instance->CR, RTC_CR_REFCKON);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	699a      	ldr	r2, [r3, #24]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f042 0210 	orr.w	r2, r2, #16
 8009276:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7ff ff8f 	bl	800919c <RTC_ExitInitMode>
 800927e:	4603      	mov	r3, r0
 8009280:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	22ff      	movs	r2, #255	@ 0xff
 8009288:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d103      	bne.n	8009298 <HAL_RTCEx_SetRefClock+0x76>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b084      	sub	sp, #16
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e09d      	b.n	80093f8 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d108      	bne.n	80092d6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092cc:	d009      	beq.n	80092e2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	61da      	str	r2, [r3, #28]
 80092d4:	e005      	b.n	80092e2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d106      	bne.n	8009302 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7f9 f95d 	bl	80025bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2202      	movs	r2, #2
 8009306:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009318:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009322:	d902      	bls.n	800932a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009324:	2300      	movs	r3, #0
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	e002      	b.n	8009330 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800932a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800932e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009338:	d007      	beq.n	800934a <HAL_SPI_Init+0xa0>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009342:	d002      	beq.n	800934a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800935a:	431a      	orrs	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	f003 0302 	and.w	r3, r3, #2
 8009364:	431a      	orrs	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	431a      	orrs	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009378:	431a      	orrs	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009382:	431a      	orrs	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a1b      	ldr	r3, [r3, #32]
 8009388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800938c:	ea42 0103 	orr.w	r1, r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009394:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	430a      	orrs	r2, r1
 800939e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	0c1b      	lsrs	r3, r3, #16
 80093a6:	f003 0204 	and.w	r2, r3, #4
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ae:	f003 0310 	and.w	r3, r3, #16
 80093b2:	431a      	orrs	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093b8:	f003 0308 	and.w	r3, r3, #8
 80093bc:	431a      	orrs	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80093c6:	ea42 0103 	orr.w	r1, r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	430a      	orrs	r2, r1
 80093d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	69da      	ldr	r2, [r3, #28]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80093e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b088      	sub	sp, #32
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	603b      	str	r3, [r7, #0]
 800940c:	4613      	mov	r3, r2
 800940e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009410:	f7fa fe1a 	bl	8004048 <HAL_GetTick>
 8009414:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009416:	88fb      	ldrh	r3, [r7, #6]
 8009418:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b01      	cmp	r3, #1
 8009424:	d001      	beq.n	800942a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009426:	2302      	movs	r3, #2
 8009428:	e15c      	b.n	80096e4 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <HAL_SPI_Transmit+0x36>
 8009430:	88fb      	ldrh	r3, [r7, #6]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e154      	b.n	80096e4 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009440:	2b01      	cmp	r3, #1
 8009442:	d101      	bne.n	8009448 <HAL_SPI_Transmit+0x48>
 8009444:	2302      	movs	r3, #2
 8009446:	e14d      	b.n	80096e4 <HAL_SPI_Transmit+0x2e4>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2203      	movs	r2, #3
 8009454:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	88fa      	ldrh	r2, [r7, #6]
 8009468:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	88fa      	ldrh	r2, [r7, #6]
 800946e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800949a:	d10f      	bne.n	80094bc <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80094ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094c6:	2b40      	cmp	r3, #64	@ 0x40
 80094c8:	d007      	beq.n	80094da <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80094e2:	d952      	bls.n	800958a <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d002      	beq.n	80094f2 <HAL_SPI_Transmit+0xf2>
 80094ec:	8b7b      	ldrh	r3, [r7, #26]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d145      	bne.n	800957e <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f6:	881a      	ldrh	r2, [r3, #0]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009502:	1c9a      	adds	r2, r3, #2
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800950c:	b29b      	uxth	r3, r3
 800950e:	3b01      	subs	r3, #1
 8009510:	b29a      	uxth	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009516:	e032      	b.n	800957e <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f003 0302 	and.w	r3, r3, #2
 8009522:	2b02      	cmp	r3, #2
 8009524:	d112      	bne.n	800954c <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800952a:	881a      	ldrh	r2, [r3, #0]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009536:	1c9a      	adds	r2, r3, #2
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009540:	b29b      	uxth	r3, r3
 8009542:	3b01      	subs	r3, #1
 8009544:	b29a      	uxth	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800954a:	e018      	b.n	800957e <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800954c:	f7fa fd7c 	bl	8004048 <HAL_GetTick>
 8009550:	4602      	mov	r2, r0
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	683a      	ldr	r2, [r7, #0]
 8009558:	429a      	cmp	r2, r3
 800955a:	d803      	bhi.n	8009564 <HAL_SPI_Transmit+0x164>
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009562:	d102      	bne.n	800956a <HAL_SPI_Transmit+0x16a>
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d109      	bne.n	800957e <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	e0b2      	b.n	80096e4 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009582:	b29b      	uxth	r3, r3
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1c7      	bne.n	8009518 <HAL_SPI_Transmit+0x118>
 8009588:	e083      	b.n	8009692 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d002      	beq.n	8009598 <HAL_SPI_Transmit+0x198>
 8009592:	8b7b      	ldrh	r3, [r7, #26]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d177      	bne.n	8009688 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800959c:	b29b      	uxth	r3, r3
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d912      	bls.n	80095c8 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a6:	881a      	ldrh	r2, [r3, #0]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095b2:	1c9a      	adds	r2, r3, #2
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095bc:	b29b      	uxth	r3, r3
 80095be:	3b02      	subs	r3, #2
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80095c6:	e05f      	b.n	8009688 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	330c      	adds	r3, #12
 80095d2:	7812      	ldrb	r2, [r2, #0]
 80095d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095da:	1c5a      	adds	r2, r3, #1
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	3b01      	subs	r3, #1
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80095ee:	e04b      	b.n	8009688 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f003 0302 	and.w	r3, r3, #2
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d12b      	bne.n	8009656 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009602:	b29b      	uxth	r3, r3
 8009604:	2b01      	cmp	r3, #1
 8009606:	d912      	bls.n	800962e <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800960c:	881a      	ldrh	r2, [r3, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009618:	1c9a      	adds	r2, r3, #2
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009622:	b29b      	uxth	r3, r3
 8009624:	3b02      	subs	r3, #2
 8009626:	b29a      	uxth	r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800962c:	e02c      	b.n	8009688 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	330c      	adds	r3, #12
 8009638:	7812      	ldrb	r2, [r2, #0]
 800963a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009640:	1c5a      	adds	r2, r3, #1
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800964a:	b29b      	uxth	r3, r3
 800964c:	3b01      	subs	r3, #1
 800964e:	b29a      	uxth	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009654:	e018      	b.n	8009688 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009656:	f7fa fcf7 	bl	8004048 <HAL_GetTick>
 800965a:	4602      	mov	r2, r0
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	429a      	cmp	r2, r3
 8009664:	d803      	bhi.n	800966e <HAL_SPI_Transmit+0x26e>
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800966c:	d102      	bne.n	8009674 <HAL_SPI_Transmit+0x274>
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d109      	bne.n	8009688 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	e02d      	b.n	80096e4 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800968c:	b29b      	uxth	r3, r3
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1ae      	bne.n	80095f0 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009692:	69fa      	ldr	r2, [r7, #28]
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 fcf6 	bl	800a088 <SPI_EndRxTxTransaction>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d002      	beq.n	80096a8 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2220      	movs	r2, #32
 80096a6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10a      	bne.n	80096c6 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096b0:	2300      	movs	r3, #0
 80096b2:	617b      	str	r3, [r7, #20]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	617b      	str	r3, [r7, #20]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	617b      	str	r3, [r7, #20]
 80096c4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e000      	b.n	80096e4 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80096e2:	2300      	movs	r3, #0
  }
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3720      	adds	r7, #32
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b088      	sub	sp, #32
 80096f0:	af02      	add	r7, sp, #8
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	603b      	str	r3, [r7, #0]
 80096f8:	4613      	mov	r3, r2
 80096fa:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b01      	cmp	r3, #1
 8009706:	d001      	beq.n	800970c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8009708:	2302      	movs	r3, #2
 800970a:	e123      	b.n	8009954 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d002      	beq.n	8009718 <HAL_SPI_Receive+0x2c>
 8009712:	88fb      	ldrh	r3, [r7, #6]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d101      	bne.n	800971c <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e11b      	b.n	8009954 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009724:	d112      	bne.n	800974c <HAL_SPI_Receive+0x60>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10e      	bne.n	800974c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2204      	movs	r2, #4
 8009732:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009736:	88fa      	ldrh	r2, [r7, #6]
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	4613      	mov	r3, r2
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	68b9      	ldr	r1, [r7, #8]
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f000 f90a 	bl	800995c <HAL_SPI_TransmitReceive>
 8009748:	4603      	mov	r3, r0
 800974a:	e103      	b.n	8009954 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800974c:	f7fa fc7c 	bl	8004048 <HAL_GetTick>
 8009750:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009758:	2b01      	cmp	r3, #1
 800975a:	d101      	bne.n	8009760 <HAL_SPI_Receive+0x74>
 800975c:	2302      	movs	r3, #2
 800975e:	e0f9      	b.n	8009954 <HAL_SPI_Receive+0x268>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2204      	movs	r2, #4
 800976c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	88fa      	ldrh	r2, [r7, #6]
 8009780:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	88fa      	ldrh	r2, [r7, #6]
 8009788:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80097b2:	d908      	bls.n	80097c6 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80097c2:	605a      	str	r2, [r3, #4]
 80097c4:	e007      	b.n	80097d6 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80097d4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097de:	d10f      	bne.n	8009800 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80097fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800980a:	2b40      	cmp	r3, #64	@ 0x40
 800980c:	d007      	beq.n	800981e <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800981c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009826:	d875      	bhi.n	8009914 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009828:	e037      	b.n	800989a <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	2b01      	cmp	r3, #1
 8009836:	d117      	bne.n	8009868 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f103 020c 	add.w	r2, r3, #12
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009844:	7812      	ldrb	r2, [r2, #0]
 8009846:	b2d2      	uxtb	r2, r2
 8009848:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800985a:	b29b      	uxth	r3, r3
 800985c:	3b01      	subs	r3, #1
 800985e:	b29a      	uxth	r2, r3
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009866:	e018      	b.n	800989a <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009868:	f7fa fbee 	bl	8004048 <HAL_GetTick>
 800986c:	4602      	mov	r2, r0
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	429a      	cmp	r2, r3
 8009876:	d803      	bhi.n	8009880 <HAL_SPI_Receive+0x194>
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800987e:	d102      	bne.n	8009886 <HAL_SPI_Receive+0x19a>
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d109      	bne.n	800989a <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2201      	movs	r2, #1
 800988a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e05c      	b.n	8009954 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1c1      	bne.n	800982a <HAL_SPI_Receive+0x13e>
 80098a6:	e03b      	b.n	8009920 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d115      	bne.n	80098e2 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68da      	ldr	r2, [r3, #12]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098c0:	b292      	uxth	r2, r2
 80098c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098c8:	1c9a      	adds	r2, r3, #2
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	3b01      	subs	r3, #1
 80098d8:	b29a      	uxth	r2, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80098e0:	e018      	b.n	8009914 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098e2:	f7fa fbb1 	bl	8004048 <HAL_GetTick>
 80098e6:	4602      	mov	r2, r0
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	683a      	ldr	r2, [r7, #0]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d803      	bhi.n	80098fa <HAL_SPI_Receive+0x20e>
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098f8:	d102      	bne.n	8009900 <HAL_SPI_Receive+0x214>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d109      	bne.n	8009914 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009910:	2303      	movs	r3, #3
 8009912:	e01f      	b.n	8009954 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800991a:	b29b      	uxth	r3, r3
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1c3      	bne.n	80098a8 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 fb57 	bl	8009fd8 <SPI_EndRxTransaction>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2220      	movs	r2, #32
 8009934:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2201      	movs	r2, #1
 800993a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e000      	b.n	8009954 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8009952:	2300      	movs	r3, #0
  }
}
 8009954:	4618      	mov	r0, r3
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b08a      	sub	sp, #40	@ 0x28
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
 8009968:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800996a:	2301      	movs	r3, #1
 800996c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800996e:	f7fa fb6b 	bl	8004048 <HAL_GetTick>
 8009972:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800997a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009982:	887b      	ldrh	r3, [r7, #2]
 8009984:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8009986:	887b      	ldrh	r3, [r7, #2]
 8009988:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800998a:	7ffb      	ldrb	r3, [r7, #31]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d00c      	beq.n	80099aa <HAL_SPI_TransmitReceive+0x4e>
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009996:	d106      	bne.n	80099a6 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d102      	bne.n	80099a6 <HAL_SPI_TransmitReceive+0x4a>
 80099a0:	7ffb      	ldrb	r3, [r7, #31]
 80099a2:	2b04      	cmp	r3, #4
 80099a4:	d001      	beq.n	80099aa <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80099a6:	2302      	movs	r3, #2
 80099a8:	e1f3      	b.n	8009d92 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d005      	beq.n	80099bc <HAL_SPI_TransmitReceive+0x60>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d002      	beq.n	80099bc <HAL_SPI_TransmitReceive+0x60>
 80099b6:	887b      	ldrh	r3, [r7, #2]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d101      	bne.n	80099c0 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e1e8      	b.n	8009d92 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d101      	bne.n	80099ce <HAL_SPI_TransmitReceive+0x72>
 80099ca:	2302      	movs	r3, #2
 80099cc:	e1e1      	b.n	8009d92 <HAL_SPI_TransmitReceive+0x436>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b04      	cmp	r3, #4
 80099e0:	d003      	beq.n	80099ea <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2205      	movs	r2, #5
 80099e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	887a      	ldrh	r2, [r7, #2]
 80099fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	887a      	ldrh	r2, [r7, #2]
 8009a02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	68ba      	ldr	r2, [r7, #8]
 8009a0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	887a      	ldrh	r2, [r7, #2]
 8009a10:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	887a      	ldrh	r2, [r7, #2]
 8009a16:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009a2c:	d802      	bhi.n	8009a34 <HAL_SPI_TransmitReceive+0xd8>
 8009a2e:	8abb      	ldrh	r3, [r7, #20]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d908      	bls.n	8009a46 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	685a      	ldr	r2, [r3, #4]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009a42:	605a      	str	r2, [r3, #4]
 8009a44:	e007      	b.n	8009a56 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009a54:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a60:	2b40      	cmp	r3, #64	@ 0x40
 8009a62:	d007      	beq.n	8009a74 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009a7c:	f240 8083 	bls.w	8009b86 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d002      	beq.n	8009a8e <HAL_SPI_TransmitReceive+0x132>
 8009a88:	8afb      	ldrh	r3, [r7, #22]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d16f      	bne.n	8009b6e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a92:	881a      	ldrh	r2, [r3, #0]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a9e:	1c9a      	adds	r2, r3, #2
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ab2:	e05c      	b.n	8009b6e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	f003 0302 	and.w	r3, r3, #2
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	d11b      	bne.n	8009afa <HAL_SPI_TransmitReceive+0x19e>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d016      	beq.n	8009afa <HAL_SPI_TransmitReceive+0x19e>
 8009acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d113      	bne.n	8009afa <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ad6:	881a      	ldrh	r2, [r3, #0]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ae2:	1c9a      	adds	r2, r3, #2
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	3b01      	subs	r3, #1
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009af6:	2300      	movs	r3, #0
 8009af8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	f003 0301 	and.w	r3, r3, #1
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d11c      	bne.n	8009b42 <HAL_SPI_TransmitReceive+0x1e6>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d016      	beq.n	8009b42 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b1e:	b292      	uxth	r2, r2
 8009b20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b26:	1c9a      	adds	r2, r3, #2
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	3b01      	subs	r3, #1
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009b42:	f7fa fa81 	bl	8004048 <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	6a3b      	ldr	r3, [r7, #32]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d80d      	bhi.n	8009b6e <HAL_SPI_TransmitReceive+0x212>
 8009b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b58:	d009      	beq.n	8009b6e <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e111      	b.n	8009d92 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d19d      	bne.n	8009ab4 <HAL_SPI_TransmitReceive+0x158>
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d197      	bne.n	8009ab4 <HAL_SPI_TransmitReceive+0x158>
 8009b84:	e0e5      	b.n	8009d52 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <HAL_SPI_TransmitReceive+0x23a>
 8009b8e:	8afb      	ldrh	r3, [r7, #22]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	f040 80d1 	bne.w	8009d38 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d912      	bls.n	8009bc6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba4:	881a      	ldrh	r2, [r3, #0]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb0:	1c9a      	adds	r2, r3, #2
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	3b02      	subs	r3, #2
 8009bbe:	b29a      	uxth	r2, r3
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009bc4:	e0b8      	b.n	8009d38 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	330c      	adds	r3, #12
 8009bd0:	7812      	ldrb	r2, [r2, #0]
 8009bd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bd8:	1c5a      	adds	r2, r3, #1
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	3b01      	subs	r3, #1
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bec:	e0a4      	b.n	8009d38 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f003 0302 	and.w	r3, r3, #2
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d134      	bne.n	8009c66 <HAL_SPI_TransmitReceive+0x30a>
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d02f      	beq.n	8009c66 <HAL_SPI_TransmitReceive+0x30a>
 8009c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d12c      	bne.n	8009c66 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d912      	bls.n	8009c3c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c1a:	881a      	ldrh	r2, [r3, #0]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c26:	1c9a      	adds	r2, r3, #2
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	3b02      	subs	r3, #2
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009c3a:	e012      	b.n	8009c62 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	330c      	adds	r3, #12
 8009c46:	7812      	ldrb	r2, [r2, #0]
 8009c48:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c4e:	1c5a      	adds	r2, r3, #1
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c62:	2300      	movs	r3, #0
 8009c64:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f003 0301 	and.w	r3, r3, #1
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d148      	bne.n	8009d06 <HAL_SPI_TransmitReceive+0x3aa>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d042      	beq.n	8009d06 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d923      	bls.n	8009cd4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68da      	ldr	r2, [r3, #12]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c96:	b292      	uxth	r2, r2
 8009c98:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c9e:	1c9a      	adds	r2, r3, #2
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	3b02      	subs	r3, #2
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d81f      	bhi.n	8009d02 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009cd0:	605a      	str	r2, [r3, #4]
 8009cd2:	e016      	b.n	8009d02 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f103 020c 	add.w	r2, r3, #12
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ce0:	7812      	ldrb	r2, [r2, #0]
 8009ce2:	b2d2      	uxtb	r2, r2
 8009ce4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d02:	2301      	movs	r3, #1
 8009d04:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009d06:	f7fa f99f 	bl	8004048 <HAL_GetTick>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d803      	bhi.n	8009d1e <HAL_SPI_TransmitReceive+0x3c2>
 8009d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d1c:	d102      	bne.n	8009d24 <HAL_SPI_TransmitReceive+0x3c8>
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d109      	bne.n	8009d38 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009d34:	2303      	movs	r3, #3
 8009d36:	e02c      	b.n	8009d92 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f47f af55 	bne.w	8009bee <HAL_SPI_TransmitReceive+0x292>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f47f af4e 	bne.w	8009bee <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d52:	6a3a      	ldr	r2, [r7, #32]
 8009d54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f000 f996 	bl	800a088 <SPI_EndRxTxTransaction>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d008      	beq.n	8009d74 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2220      	movs	r2, #32
 8009d66:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e00e      	b.n	8009d92 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e000      	b.n	8009d92 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009d90:	2300      	movs	r3, #0
  }
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3728      	adds	r7, #40	@ 0x28
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
	...

08009d9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b088      	sub	sp, #32
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	603b      	str	r3, [r7, #0]
 8009da8:	4613      	mov	r3, r2
 8009daa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009dac:	f7fa f94c 	bl	8004048 <HAL_GetTick>
 8009db0:	4602      	mov	r2, r0
 8009db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db4:	1a9b      	subs	r3, r3, r2
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	4413      	add	r3, r2
 8009dba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009dbc:	f7fa f944 	bl	8004048 <HAL_GetTick>
 8009dc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009dc2:	4b39      	ldr	r3, [pc, #228]	@ (8009ea8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	015b      	lsls	r3, r3, #5
 8009dc8:	0d1b      	lsrs	r3, r3, #20
 8009dca:	69fa      	ldr	r2, [r7, #28]
 8009dcc:	fb02 f303 	mul.w	r3, r2, r3
 8009dd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009dd2:	e054      	b.n	8009e7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009dda:	d050      	beq.n	8009e7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009ddc:	f7fa f934 	bl	8004048 <HAL_GetTick>
 8009de0:	4602      	mov	r2, r0
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	69fa      	ldr	r2, [r7, #28]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d902      	bls.n	8009df2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d13d      	bne.n	8009e6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	685a      	ldr	r2, [r3, #4]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009e00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009e0a:	d111      	bne.n	8009e30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e14:	d004      	beq.n	8009e20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e1e:	d107      	bne.n	8009e30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e38:	d10f      	bne.n	8009e5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009e48:	601a      	str	r2, [r3, #0]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009e58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009e6a:	2303      	movs	r3, #3
 8009e6c:	e017      	b.n	8009e9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d101      	bne.n	8009e78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009e74:	2300      	movs	r3, #0
 8009e76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	689a      	ldr	r2, [r3, #8]
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	4013      	ands	r3, r2
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	bf0c      	ite	eq
 8009e8e:	2301      	moveq	r3, #1
 8009e90:	2300      	movne	r3, #0
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	461a      	mov	r2, r3
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d19b      	bne.n	8009dd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3720      	adds	r7, #32
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	20000000 	.word	0x20000000

08009eac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b08a      	sub	sp, #40	@ 0x28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
 8009eb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009ebe:	f7fa f8c3 	bl	8004048 <HAL_GetTick>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec6:	1a9b      	subs	r3, r3, r2
 8009ec8:	683a      	ldr	r2, [r7, #0]
 8009eca:	4413      	add	r3, r2
 8009ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009ece:	f7fa f8bb 	bl	8004048 <HAL_GetTick>
 8009ed2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	330c      	adds	r3, #12
 8009eda:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009edc:	4b3d      	ldr	r3, [pc, #244]	@ (8009fd4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4413      	add	r3, r2
 8009ee6:	00da      	lsls	r2, r3, #3
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	0d1b      	lsrs	r3, r3, #20
 8009eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009eee:	fb02 f303 	mul.w	r3, r2, r3
 8009ef2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009ef4:	e060      	b.n	8009fb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009efc:	d107      	bne.n	8009f0e <SPI_WaitFifoStateUntilTimeout+0x62>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d104      	bne.n	8009f0e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009f0c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f14:	d050      	beq.n	8009fb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009f16:	f7fa f897 	bl	8004048 <HAL_GetTick>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d902      	bls.n	8009f2c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d13d      	bne.n	8009fa8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	685a      	ldr	r2, [r3, #4]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009f3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f44:	d111      	bne.n	8009f6a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f4e:	d004      	beq.n	8009f5a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f58:	d107      	bne.n	8009f6a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f72:	d10f      	bne.n	8009f94 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009f92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e010      	b.n	8009fca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d101      	bne.n	8009fb2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	689a      	ldr	r2, [r3, #8]
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d196      	bne.n	8009ef6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3728      	adds	r7, #40	@ 0x28
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	20000000 	.word	0x20000000

08009fd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af02      	add	r7, sp, #8
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009fec:	d111      	bne.n	800a012 <SPI_EndRxTransaction+0x3a>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ff6:	d004      	beq.n	800a002 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a000:	d107      	bne.n	800a012 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a010:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	2200      	movs	r2, #0
 800a01a:	2180      	movs	r1, #128	@ 0x80
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f7ff febd 	bl	8009d9c <SPI_WaitFlagStateUntilTimeout>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d007      	beq.n	800a038 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a02c:	f043 0220 	orr.w	r2, r3, #32
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a034:	2303      	movs	r3, #3
 800a036:	e023      	b.n	800a080 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a040:	d11d      	bne.n	800a07e <SPI_EndRxTransaction+0xa6>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a04a:	d004      	beq.n	800a056 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a054:	d113      	bne.n	800a07e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f7ff ff22 	bl	8009eac <SPI_WaitFifoStateUntilTimeout>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d007      	beq.n	800a07e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a072:	f043 0220 	orr.w	r2, r3, #32
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a07a:	2303      	movs	r3, #3
 800a07c:	e000      	b.n	800a080 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af02      	add	r7, sp, #8
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f7ff ff03 	bl	8009eac <SPI_WaitFifoStateUntilTimeout>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d007      	beq.n	800a0bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0b0:	f043 0220 	orr.w	r2, r3, #32
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e027      	b.n	800a10c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	2180      	movs	r1, #128	@ 0x80
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f7ff fe68 	bl	8009d9c <SPI_WaitFlagStateUntilTimeout>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d007      	beq.n	800a0e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0d6:	f043 0220 	orr.w	r2, r3, #32
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e014      	b.n	800a10c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f7ff fedc 	bl	8009eac <SPI_WaitFifoStateUntilTimeout>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d007      	beq.n	800a10a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0fe:	f043 0220 	orr.w	r2, r3, #32
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a106:	2303      	movs	r3, #3
 800a108:	e000      	b.n	800a10c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d101      	bne.n	800a126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e049      	b.n	800a1ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d106      	bne.n	800a140 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7f8 fb12 	bl	8002764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2202      	movs	r2, #2
 800a144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	3304      	adds	r3, #4
 800a150:	4619      	mov	r1, r3
 800a152:	4610      	mov	r0, r2
 800a154:	f000 fd32 	bl	800abbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
	...

0800a1c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d001      	beq.n	800a1dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e04f      	b.n	800a27c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2202      	movs	r2, #2
 800a1e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68da      	ldr	r2, [r3, #12]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f042 0201 	orr.w	r2, r2, #1
 800a1f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a23      	ldr	r2, [pc, #140]	@ (800a288 <HAL_TIM_Base_Start_IT+0xc4>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d01d      	beq.n	800a23a <HAL_TIM_Base_Start_IT+0x76>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a206:	d018      	beq.n	800a23a <HAL_TIM_Base_Start_IT+0x76>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a1f      	ldr	r2, [pc, #124]	@ (800a28c <HAL_TIM_Base_Start_IT+0xc8>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d013      	beq.n	800a23a <HAL_TIM_Base_Start_IT+0x76>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a1e      	ldr	r2, [pc, #120]	@ (800a290 <HAL_TIM_Base_Start_IT+0xcc>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d00e      	beq.n	800a23a <HAL_TIM_Base_Start_IT+0x76>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a1c      	ldr	r2, [pc, #112]	@ (800a294 <HAL_TIM_Base_Start_IT+0xd0>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d009      	beq.n	800a23a <HAL_TIM_Base_Start_IT+0x76>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a1b      	ldr	r2, [pc, #108]	@ (800a298 <HAL_TIM_Base_Start_IT+0xd4>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d004      	beq.n	800a23a <HAL_TIM_Base_Start_IT+0x76>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a19      	ldr	r2, [pc, #100]	@ (800a29c <HAL_TIM_Base_Start_IT+0xd8>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d115      	bne.n	800a266 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	689a      	ldr	r2, [r3, #8]
 800a240:	4b17      	ldr	r3, [pc, #92]	@ (800a2a0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a242:	4013      	ands	r3, r2
 800a244:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2b06      	cmp	r3, #6
 800a24a:	d015      	beq.n	800a278 <HAL_TIM_Base_Start_IT+0xb4>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a252:	d011      	beq.n	800a278 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f042 0201 	orr.w	r2, r2, #1
 800a262:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a264:	e008      	b.n	800a278 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f042 0201 	orr.w	r2, r2, #1
 800a274:	601a      	str	r2, [r3, #0]
 800a276:	e000      	b.n	800a27a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a278:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3714      	adds	r7, #20
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr
 800a288:	40012c00 	.word	0x40012c00
 800a28c:	40000400 	.word	0x40000400
 800a290:	40000800 	.word	0x40000800
 800a294:	40013400 	.word	0x40013400
 800a298:	40014000 	.word	0x40014000
 800a29c:	40015000 	.word	0x40015000
 800a2a0:	00010007 	.word	0x00010007

0800a2a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d101      	bne.n	800a2b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e049      	b.n	800a34a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d106      	bne.n	800a2d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7f8 fa92 	bl	80027f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	3304      	adds	r3, #4
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	4610      	mov	r0, r2
 800a2e4:	f000 fc6a 	bl	800abbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b086      	sub	sp, #24
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d101      	bne.n	800a366 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e097      	b.n	800a496 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d106      	bne.n	800a380 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f7f8 f962 	bl	8002644 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2202      	movs	r2, #2
 800a384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	6812      	ldr	r2, [r2, #0]
 800a392:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800a396:	f023 0307 	bic.w	r3, r3, #7
 800a39a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	4610      	mov	r0, r2
 800a3a8:	f000 fc08 	bl	800abbc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	699b      	ldr	r3, [r3, #24]
 800a3ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	6a1b      	ldr	r3, [r3, #32]
 800a3c2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	697a      	ldr	r2, [r7, #20]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3d4:	f023 0303 	bic.w	r3, r3, #3
 800a3d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	689a      	ldr	r2, [r3, #8]
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	021b      	lsls	r3, r3, #8
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a3f2:	f023 030c 	bic.w	r3, r3, #12
 800a3f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a3fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	68da      	ldr	r2, [r3, #12]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	69db      	ldr	r3, [r3, #28]
 800a40c:	021b      	lsls	r3, r3, #8
 800a40e:	4313      	orrs	r3, r2
 800a410:	693a      	ldr	r2, [r7, #16]
 800a412:	4313      	orrs	r3, r2
 800a414:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	011a      	lsls	r2, r3, #4
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	6a1b      	ldr	r3, [r3, #32]
 800a420:	031b      	lsls	r3, r3, #12
 800a422:	4313      	orrs	r3, r2
 800a424:	693a      	ldr	r2, [r7, #16]
 800a426:	4313      	orrs	r3, r2
 800a428:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a430:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a438:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	695b      	ldr	r3, [r3, #20]
 800a442:	011b      	lsls	r3, r3, #4
 800a444:	4313      	orrs	r3, r2
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	4313      	orrs	r3, r2
 800a44a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68fa      	ldr	r2, [r7, #12]
 800a462:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3718      	adds	r7, #24
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b084      	sub	sp, #16
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	f003 0302 	and.w	r3, r3, #2
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d020      	beq.n	800a502 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f003 0302 	and.w	r3, r3, #2
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d01b      	beq.n	800a502 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f06f 0202 	mvn.w	r2, #2
 800a4d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	f003 0303 	and.w	r3, r3, #3
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d003      	beq.n	800a4f0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 fb49 	bl	800ab80 <HAL_TIM_IC_CaptureCallback>
 800a4ee:	e005      	b.n	800a4fc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 fb3b 	bl	800ab6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fb4c 	bl	800ab94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	f003 0304 	and.w	r3, r3, #4
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d020      	beq.n	800a54e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f003 0304 	and.w	r3, r3, #4
 800a512:	2b00      	cmp	r3, #0
 800a514:	d01b      	beq.n	800a54e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f06f 0204 	mvn.w	r2, #4
 800a51e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2202      	movs	r2, #2
 800a524:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	699b      	ldr	r3, [r3, #24]
 800a52c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a530:	2b00      	cmp	r3, #0
 800a532:	d003      	beq.n	800a53c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fb23 	bl	800ab80 <HAL_TIM_IC_CaptureCallback>
 800a53a:	e005      	b.n	800a548 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 fb15 	bl	800ab6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 fb26 	bl	800ab94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	f003 0308 	and.w	r3, r3, #8
 800a554:	2b00      	cmp	r3, #0
 800a556:	d020      	beq.n	800a59a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f003 0308 	and.w	r3, r3, #8
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d01b      	beq.n	800a59a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f06f 0208 	mvn.w	r2, #8
 800a56a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2204      	movs	r2, #4
 800a570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	69db      	ldr	r3, [r3, #28]
 800a578:	f003 0303 	and.w	r3, r3, #3
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d003      	beq.n	800a588 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 fafd 	bl	800ab80 <HAL_TIM_IC_CaptureCallback>
 800a586:	e005      	b.n	800a594 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 faef 	bl	800ab6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fb00 	bl	800ab94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	f003 0310 	and.w	r3, r3, #16
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d020      	beq.n	800a5e6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f003 0310 	and.w	r3, r3, #16
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d01b      	beq.n	800a5e6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f06f 0210 	mvn.w	r2, #16
 800a5b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2208      	movs	r2, #8
 800a5bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	69db      	ldr	r3, [r3, #28]
 800a5c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 fad7 	bl	800ab80 <HAL_TIM_IC_CaptureCallback>
 800a5d2:	e005      	b.n	800a5e0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fac9 	bl	800ab6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 fada 	bl	800ab94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	f003 0301 	and.w	r3, r3, #1
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00c      	beq.n	800a60a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f003 0301 	and.w	r3, r3, #1
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d007      	beq.n	800a60a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f06f 0201 	mvn.w	r2, #1
 800a602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7f7 fe05 	bl	8002214 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a610:	2b00      	cmp	r3, #0
 800a612:	d104      	bne.n	800a61e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00c      	beq.n	800a638 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a624:	2b00      	cmp	r3, #0
 800a626:	d007      	beq.n	800a638 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f001 f899 	bl	800b76a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00c      	beq.n	800a65c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d007      	beq.n	800a65c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f001 f891 	bl	800b77e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00c      	beq.n	800a680 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d007      	beq.n	800a680 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fa94 	bl	800aba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	f003 0320 	and.w	r3, r3, #32
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00c      	beq.n	800a6a4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f003 0320 	and.w	r3, r3, #32
 800a690:	2b00      	cmp	r3, #0
 800a692:	d007      	beq.n	800a6a4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f06f 0220 	mvn.w	r2, #32
 800a69c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f001 f859 	bl	800b756 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00c      	beq.n	800a6c8 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d007      	beq.n	800a6c8 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a6c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f001 f865 	bl	800b792 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00c      	beq.n	800a6ec <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d007      	beq.n	800a6ec <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a6e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f001 f85d 	bl	800b7a6 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00c      	beq.n	800a710 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d007      	beq.n	800a710 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f001 f855 	bl	800b7ba <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00c      	beq.n	800a734 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a720:	2b00      	cmp	r3, #0
 800a722:	d007      	beq.n	800a734 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a72c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f001 f84d 	bl	800b7ce <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a734:	bf00      	nop
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b086      	sub	sp, #24
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a752:	2b01      	cmp	r3, #1
 800a754:	d101      	bne.n	800a75a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a756:	2302      	movs	r3, #2
 800a758:	e0ff      	b.n	800a95a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2201      	movs	r2, #1
 800a75e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2b14      	cmp	r3, #20
 800a766:	f200 80f0 	bhi.w	800a94a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a76a:	a201      	add	r2, pc, #4	@ (adr r2, 800a770 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a770:	0800a7c5 	.word	0x0800a7c5
 800a774:	0800a94b 	.word	0x0800a94b
 800a778:	0800a94b 	.word	0x0800a94b
 800a77c:	0800a94b 	.word	0x0800a94b
 800a780:	0800a805 	.word	0x0800a805
 800a784:	0800a94b 	.word	0x0800a94b
 800a788:	0800a94b 	.word	0x0800a94b
 800a78c:	0800a94b 	.word	0x0800a94b
 800a790:	0800a847 	.word	0x0800a847
 800a794:	0800a94b 	.word	0x0800a94b
 800a798:	0800a94b 	.word	0x0800a94b
 800a79c:	0800a94b 	.word	0x0800a94b
 800a7a0:	0800a887 	.word	0x0800a887
 800a7a4:	0800a94b 	.word	0x0800a94b
 800a7a8:	0800a94b 	.word	0x0800a94b
 800a7ac:	0800a94b 	.word	0x0800a94b
 800a7b0:	0800a8c9 	.word	0x0800a8c9
 800a7b4:	0800a94b 	.word	0x0800a94b
 800a7b8:	0800a94b 	.word	0x0800a94b
 800a7bc:	0800a94b 	.word	0x0800a94b
 800a7c0:	0800a909 	.word	0x0800a909
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68b9      	ldr	r1, [r7, #8]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f000 faa0 	bl	800ad10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	699a      	ldr	r2, [r3, #24]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f042 0208 	orr.w	r2, r2, #8
 800a7de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	699a      	ldr	r2, [r3, #24]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f022 0204 	bic.w	r2, r2, #4
 800a7ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	6999      	ldr	r1, [r3, #24]
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	691a      	ldr	r2, [r3, #16]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	430a      	orrs	r2, r1
 800a800:	619a      	str	r2, [r3, #24]
      break;
 800a802:	e0a5      	b.n	800a950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	68b9      	ldr	r1, [r7, #8]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 fb1a 	bl	800ae44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	699a      	ldr	r2, [r3, #24]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a81e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	699a      	ldr	r2, [r3, #24]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a82e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	6999      	ldr	r1, [r3, #24]
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	021a      	lsls	r2, r3, #8
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	430a      	orrs	r2, r1
 800a842:	619a      	str	r2, [r3, #24]
      break;
 800a844:	e084      	b.n	800a950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	68b9      	ldr	r1, [r7, #8]
 800a84c:	4618      	mov	r0, r3
 800a84e:	f000 fb8d 	bl	800af6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	69da      	ldr	r2, [r3, #28]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f042 0208 	orr.w	r2, r2, #8
 800a860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	69da      	ldr	r2, [r3, #28]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f022 0204 	bic.w	r2, r2, #4
 800a870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	69d9      	ldr	r1, [r3, #28]
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	691a      	ldr	r2, [r3, #16]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	430a      	orrs	r2, r1
 800a882:	61da      	str	r2, [r3, #28]
      break;
 800a884:	e064      	b.n	800a950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68b9      	ldr	r1, [r7, #8]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 fbff 	bl	800b090 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	69da      	ldr	r2, [r3, #28]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a8a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	69da      	ldr	r2, [r3, #28]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	69d9      	ldr	r1, [r3, #28]
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	021a      	lsls	r2, r3, #8
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	430a      	orrs	r2, r1
 800a8c4:	61da      	str	r2, [r3, #28]
      break;
 800a8c6:	e043      	b.n	800a950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68b9      	ldr	r1, [r7, #8]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 fc72 	bl	800b1b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f042 0208 	orr.w	r2, r2, #8
 800a8e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f022 0204 	bic.w	r2, r2, #4
 800a8f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	691a      	ldr	r2, [r3, #16]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	430a      	orrs	r2, r1
 800a904:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a906:	e023      	b.n	800a950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	68b9      	ldr	r1, [r7, #8]
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 fcbc 	bl	800b28c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a922:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a932:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	021a      	lsls	r2, r3, #8
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	430a      	orrs	r2, r1
 800a946:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a948:	e002      	b.n	800a950 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	75fb      	strb	r3, [r7, #23]
      break;
 800a94e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2200      	movs	r2, #0
 800a954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a958:	7dfb      	ldrb	r3, [r7, #23]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3718      	adds	r7, #24
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop

0800a964 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a96e:	2300      	movs	r3, #0
 800a970:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d101      	bne.n	800a980 <HAL_TIM_ConfigClockSource+0x1c>
 800a97c:	2302      	movs	r3, #2
 800a97e:	e0e6      	b.n	800ab4e <HAL_TIM_ConfigClockSource+0x1ea>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2202      	movs	r2, #2
 800a98c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a99e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a9a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a9aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68ba      	ldr	r2, [r7, #8]
 800a9b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a67      	ldr	r2, [pc, #412]	@ (800ab58 <HAL_TIM_ConfigClockSource+0x1f4>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	f000 80b1 	beq.w	800ab22 <HAL_TIM_ConfigClockSource+0x1be>
 800a9c0:	4a65      	ldr	r2, [pc, #404]	@ (800ab58 <HAL_TIM_ConfigClockSource+0x1f4>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	f200 80b6 	bhi.w	800ab34 <HAL_TIM_ConfigClockSource+0x1d0>
 800a9c8:	4a64      	ldr	r2, [pc, #400]	@ (800ab5c <HAL_TIM_ConfigClockSource+0x1f8>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	f000 80a9 	beq.w	800ab22 <HAL_TIM_ConfigClockSource+0x1be>
 800a9d0:	4a62      	ldr	r2, [pc, #392]	@ (800ab5c <HAL_TIM_ConfigClockSource+0x1f8>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	f200 80ae 	bhi.w	800ab34 <HAL_TIM_ConfigClockSource+0x1d0>
 800a9d8:	4a61      	ldr	r2, [pc, #388]	@ (800ab60 <HAL_TIM_ConfigClockSource+0x1fc>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	f000 80a1 	beq.w	800ab22 <HAL_TIM_ConfigClockSource+0x1be>
 800a9e0:	4a5f      	ldr	r2, [pc, #380]	@ (800ab60 <HAL_TIM_ConfigClockSource+0x1fc>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	f200 80a6 	bhi.w	800ab34 <HAL_TIM_ConfigClockSource+0x1d0>
 800a9e8:	4a5e      	ldr	r2, [pc, #376]	@ (800ab64 <HAL_TIM_ConfigClockSource+0x200>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	f000 8099 	beq.w	800ab22 <HAL_TIM_ConfigClockSource+0x1be>
 800a9f0:	4a5c      	ldr	r2, [pc, #368]	@ (800ab64 <HAL_TIM_ConfigClockSource+0x200>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	f200 809e 	bhi.w	800ab34 <HAL_TIM_ConfigClockSource+0x1d0>
 800a9f8:	4a5b      	ldr	r2, [pc, #364]	@ (800ab68 <HAL_TIM_ConfigClockSource+0x204>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	f000 8091 	beq.w	800ab22 <HAL_TIM_ConfigClockSource+0x1be>
 800aa00:	4a59      	ldr	r2, [pc, #356]	@ (800ab68 <HAL_TIM_ConfigClockSource+0x204>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	f200 8096 	bhi.w	800ab34 <HAL_TIM_ConfigClockSource+0x1d0>
 800aa08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa0c:	f000 8089 	beq.w	800ab22 <HAL_TIM_ConfigClockSource+0x1be>
 800aa10:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa14:	f200 808e 	bhi.w	800ab34 <HAL_TIM_ConfigClockSource+0x1d0>
 800aa18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa1c:	d03e      	beq.n	800aa9c <HAL_TIM_ConfigClockSource+0x138>
 800aa1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa22:	f200 8087 	bhi.w	800ab34 <HAL_TIM_ConfigClockSource+0x1d0>
 800aa26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa2a:	f000 8086 	beq.w	800ab3a <HAL_TIM_ConfigClockSource+0x1d6>
 800aa2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa32:	d87f      	bhi.n	800ab34 <HAL_TIM_ConfigClockSource+0x1d0>
 800aa34:	2b70      	cmp	r3, #112	@ 0x70
 800aa36:	d01a      	beq.n	800aa6e <HAL_TIM_ConfigClockSource+0x10a>
 800aa38:	2b70      	cmp	r3, #112	@ 0x70
 800aa3a:	d87b      	bhi.n	800ab34 <HAL_TIM_ConfigClockSource+0x1d0>
 800aa3c:	2b60      	cmp	r3, #96	@ 0x60
 800aa3e:	d050      	beq.n	800aae2 <HAL_TIM_ConfigClockSource+0x17e>
 800aa40:	2b60      	cmp	r3, #96	@ 0x60
 800aa42:	d877      	bhi.n	800ab34 <HAL_TIM_ConfigClockSource+0x1d0>
 800aa44:	2b50      	cmp	r3, #80	@ 0x50
 800aa46:	d03c      	beq.n	800aac2 <HAL_TIM_ConfigClockSource+0x15e>
 800aa48:	2b50      	cmp	r3, #80	@ 0x50
 800aa4a:	d873      	bhi.n	800ab34 <HAL_TIM_ConfigClockSource+0x1d0>
 800aa4c:	2b40      	cmp	r3, #64	@ 0x40
 800aa4e:	d058      	beq.n	800ab02 <HAL_TIM_ConfigClockSource+0x19e>
 800aa50:	2b40      	cmp	r3, #64	@ 0x40
 800aa52:	d86f      	bhi.n	800ab34 <HAL_TIM_ConfigClockSource+0x1d0>
 800aa54:	2b30      	cmp	r3, #48	@ 0x30
 800aa56:	d064      	beq.n	800ab22 <HAL_TIM_ConfigClockSource+0x1be>
 800aa58:	2b30      	cmp	r3, #48	@ 0x30
 800aa5a:	d86b      	bhi.n	800ab34 <HAL_TIM_ConfigClockSource+0x1d0>
 800aa5c:	2b20      	cmp	r3, #32
 800aa5e:	d060      	beq.n	800ab22 <HAL_TIM_ConfigClockSource+0x1be>
 800aa60:	2b20      	cmp	r3, #32
 800aa62:	d867      	bhi.n	800ab34 <HAL_TIM_ConfigClockSource+0x1d0>
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d05c      	beq.n	800ab22 <HAL_TIM_ConfigClockSource+0x1be>
 800aa68:	2b10      	cmp	r3, #16
 800aa6a:	d05a      	beq.n	800ab22 <HAL_TIM_ConfigClockSource+0x1be>
 800aa6c:	e062      	b.n	800ab34 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa7e:	f000 fced 	bl	800b45c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	609a      	str	r2, [r3, #8]
      break;
 800aa9a:	e04f      	b.n	800ab3c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aaac:	f000 fcd6 	bl	800b45c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	689a      	ldr	r2, [r3, #8]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aabe:	609a      	str	r2, [r3, #8]
      break;
 800aac0:	e03c      	b.n	800ab3c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aace:	461a      	mov	r2, r3
 800aad0:	f000 fc48 	bl	800b364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2150      	movs	r1, #80	@ 0x50
 800aada:	4618      	mov	r0, r3
 800aadc:	f000 fca1 	bl	800b422 <TIM_ITRx_SetConfig>
      break;
 800aae0:	e02c      	b.n	800ab3c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f000 fc67 	bl	800b3c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2160      	movs	r1, #96	@ 0x60
 800aafa:	4618      	mov	r0, r3
 800aafc:	f000 fc91 	bl	800b422 <TIM_ITRx_SetConfig>
      break;
 800ab00:	e01c      	b.n	800ab3c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab0e:	461a      	mov	r2, r3
 800ab10:	f000 fc28 	bl	800b364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2140      	movs	r1, #64	@ 0x40
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 fc81 	bl	800b422 <TIM_ITRx_SetConfig>
      break;
 800ab20:	e00c      	b.n	800ab3c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	4610      	mov	r0, r2
 800ab2e:	f000 fc78 	bl	800b422 <TIM_ITRx_SetConfig>
      break;
 800ab32:	e003      	b.n	800ab3c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	73fb      	strb	r3, [r7, #15]
      break;
 800ab38:	e000      	b.n	800ab3c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800ab3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3710      	adds	r7, #16
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	00100070 	.word	0x00100070
 800ab5c:	00100050 	.word	0x00100050
 800ab60:	00100040 	.word	0x00100040
 800ab64:	00100030 	.word	0x00100030
 800ab68:	00100020 	.word	0x00100020

0800ab6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab74:	bf00      	nop
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab9c:	bf00      	nop
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4a48      	ldr	r2, [pc, #288]	@ (800acf0 <TIM_Base_SetConfig+0x134>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d013      	beq.n	800abfc <TIM_Base_SetConfig+0x40>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abda:	d00f      	beq.n	800abfc <TIM_Base_SetConfig+0x40>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4a45      	ldr	r2, [pc, #276]	@ (800acf4 <TIM_Base_SetConfig+0x138>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d00b      	beq.n	800abfc <TIM_Base_SetConfig+0x40>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a44      	ldr	r2, [pc, #272]	@ (800acf8 <TIM_Base_SetConfig+0x13c>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d007      	beq.n	800abfc <TIM_Base_SetConfig+0x40>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a43      	ldr	r2, [pc, #268]	@ (800acfc <TIM_Base_SetConfig+0x140>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d003      	beq.n	800abfc <TIM_Base_SetConfig+0x40>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4a42      	ldr	r2, [pc, #264]	@ (800ad00 <TIM_Base_SetConfig+0x144>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d108      	bne.n	800ac0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a37      	ldr	r2, [pc, #220]	@ (800acf0 <TIM_Base_SetConfig+0x134>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d01f      	beq.n	800ac56 <TIM_Base_SetConfig+0x9a>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac1c:	d01b      	beq.n	800ac56 <TIM_Base_SetConfig+0x9a>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a34      	ldr	r2, [pc, #208]	@ (800acf4 <TIM_Base_SetConfig+0x138>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d017      	beq.n	800ac56 <TIM_Base_SetConfig+0x9a>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a33      	ldr	r2, [pc, #204]	@ (800acf8 <TIM_Base_SetConfig+0x13c>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d013      	beq.n	800ac56 <TIM_Base_SetConfig+0x9a>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a32      	ldr	r2, [pc, #200]	@ (800acfc <TIM_Base_SetConfig+0x140>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d00f      	beq.n	800ac56 <TIM_Base_SetConfig+0x9a>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a32      	ldr	r2, [pc, #200]	@ (800ad04 <TIM_Base_SetConfig+0x148>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d00b      	beq.n	800ac56 <TIM_Base_SetConfig+0x9a>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a31      	ldr	r2, [pc, #196]	@ (800ad08 <TIM_Base_SetConfig+0x14c>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d007      	beq.n	800ac56 <TIM_Base_SetConfig+0x9a>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4a30      	ldr	r2, [pc, #192]	@ (800ad0c <TIM_Base_SetConfig+0x150>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d003      	beq.n	800ac56 <TIM_Base_SetConfig+0x9a>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4a2b      	ldr	r2, [pc, #172]	@ (800ad00 <TIM_Base_SetConfig+0x144>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d108      	bne.n	800ac68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	4313      	orrs	r3, r2
 800ac66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	695b      	ldr	r3, [r3, #20]
 800ac72:	4313      	orrs	r3, r2
 800ac74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	689a      	ldr	r2, [r3, #8]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a18      	ldr	r2, [pc, #96]	@ (800acf0 <TIM_Base_SetConfig+0x134>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d013      	beq.n	800acbc <TIM_Base_SetConfig+0x100>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a19      	ldr	r2, [pc, #100]	@ (800acfc <TIM_Base_SetConfig+0x140>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d00f      	beq.n	800acbc <TIM_Base_SetConfig+0x100>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4a19      	ldr	r2, [pc, #100]	@ (800ad04 <TIM_Base_SetConfig+0x148>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d00b      	beq.n	800acbc <TIM_Base_SetConfig+0x100>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4a18      	ldr	r2, [pc, #96]	@ (800ad08 <TIM_Base_SetConfig+0x14c>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d007      	beq.n	800acbc <TIM_Base_SetConfig+0x100>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a17      	ldr	r2, [pc, #92]	@ (800ad0c <TIM_Base_SetConfig+0x150>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d003      	beq.n	800acbc <TIM_Base_SetConfig+0x100>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a12      	ldr	r2, [pc, #72]	@ (800ad00 <TIM_Base_SetConfig+0x144>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d103      	bne.n	800acc4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	691a      	ldr	r2, [r3, #16]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	f003 0301 	and.w	r3, r3, #1
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d105      	bne.n	800ace2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	f023 0201 	bic.w	r2, r3, #1
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	611a      	str	r2, [r3, #16]
  }
}
 800ace2:	bf00      	nop
 800ace4:	3714      	adds	r7, #20
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	40012c00 	.word	0x40012c00
 800acf4:	40000400 	.word	0x40000400
 800acf8:	40000800 	.word	0x40000800
 800acfc:	40013400 	.word	0x40013400
 800ad00:	40015000 	.word	0x40015000
 800ad04:	40014000 	.word	0x40014000
 800ad08:	40014400 	.word	0x40014400
 800ad0c:	40014800 	.word	0x40014800

0800ad10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b087      	sub	sp, #28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a1b      	ldr	r3, [r3, #32]
 800ad1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a1b      	ldr	r3, [r3, #32]
 800ad24:	f023 0201 	bic.w	r2, r3, #1
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	699b      	ldr	r3, [r3, #24]
 800ad36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f023 0303 	bic.w	r3, r3, #3
 800ad4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	f023 0302 	bic.w	r3, r3, #2
 800ad5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	4313      	orrs	r3, r2
 800ad66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a30      	ldr	r2, [pc, #192]	@ (800ae2c <TIM_OC1_SetConfig+0x11c>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d013      	beq.n	800ad98 <TIM_OC1_SetConfig+0x88>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a2f      	ldr	r2, [pc, #188]	@ (800ae30 <TIM_OC1_SetConfig+0x120>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d00f      	beq.n	800ad98 <TIM_OC1_SetConfig+0x88>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a2e      	ldr	r2, [pc, #184]	@ (800ae34 <TIM_OC1_SetConfig+0x124>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d00b      	beq.n	800ad98 <TIM_OC1_SetConfig+0x88>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a2d      	ldr	r2, [pc, #180]	@ (800ae38 <TIM_OC1_SetConfig+0x128>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d007      	beq.n	800ad98 <TIM_OC1_SetConfig+0x88>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a2c      	ldr	r2, [pc, #176]	@ (800ae3c <TIM_OC1_SetConfig+0x12c>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d003      	beq.n	800ad98 <TIM_OC1_SetConfig+0x88>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a2b      	ldr	r2, [pc, #172]	@ (800ae40 <TIM_OC1_SetConfig+0x130>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d10c      	bne.n	800adb2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	f023 0308 	bic.w	r3, r3, #8
 800ad9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	697a      	ldr	r2, [r7, #20]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f023 0304 	bic.w	r3, r3, #4
 800adb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a1d      	ldr	r2, [pc, #116]	@ (800ae2c <TIM_OC1_SetConfig+0x11c>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d013      	beq.n	800ade2 <TIM_OC1_SetConfig+0xd2>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a1c      	ldr	r2, [pc, #112]	@ (800ae30 <TIM_OC1_SetConfig+0x120>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d00f      	beq.n	800ade2 <TIM_OC1_SetConfig+0xd2>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a1b      	ldr	r2, [pc, #108]	@ (800ae34 <TIM_OC1_SetConfig+0x124>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d00b      	beq.n	800ade2 <TIM_OC1_SetConfig+0xd2>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a1a      	ldr	r2, [pc, #104]	@ (800ae38 <TIM_OC1_SetConfig+0x128>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d007      	beq.n	800ade2 <TIM_OC1_SetConfig+0xd2>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4a19      	ldr	r2, [pc, #100]	@ (800ae3c <TIM_OC1_SetConfig+0x12c>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d003      	beq.n	800ade2 <TIM_OC1_SetConfig+0xd2>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a18      	ldr	r2, [pc, #96]	@ (800ae40 <TIM_OC1_SetConfig+0x130>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d111      	bne.n	800ae06 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ade8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800adf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	695b      	ldr	r3, [r3, #20]
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	699b      	ldr	r3, [r3, #24]
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	685a      	ldr	r2, [r3, #4]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	697a      	ldr	r2, [r7, #20]
 800ae1e:	621a      	str	r2, [r3, #32]
}
 800ae20:	bf00      	nop
 800ae22:	371c      	adds	r7, #28
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr
 800ae2c:	40012c00 	.word	0x40012c00
 800ae30:	40013400 	.word	0x40013400
 800ae34:	40014000 	.word	0x40014000
 800ae38:	40014400 	.word	0x40014400
 800ae3c:	40014800 	.word	0x40014800
 800ae40:	40015000 	.word	0x40015000

0800ae44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b087      	sub	sp, #28
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a1b      	ldr	r3, [r3, #32]
 800ae52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6a1b      	ldr	r3, [r3, #32]
 800ae58:	f023 0210 	bic.w	r2, r3, #16
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	699b      	ldr	r3, [r3, #24]
 800ae6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ae72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	021b      	lsls	r3, r3, #8
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	f023 0320 	bic.w	r3, r3, #32
 800ae92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	011b      	lsls	r3, r3, #4
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a2c      	ldr	r2, [pc, #176]	@ (800af54 <TIM_OC2_SetConfig+0x110>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d007      	beq.n	800aeb8 <TIM_OC2_SetConfig+0x74>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a2b      	ldr	r2, [pc, #172]	@ (800af58 <TIM_OC2_SetConfig+0x114>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d003      	beq.n	800aeb8 <TIM_OC2_SetConfig+0x74>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a2a      	ldr	r2, [pc, #168]	@ (800af5c <TIM_OC2_SetConfig+0x118>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d10d      	bne.n	800aed4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	011b      	lsls	r3, r3, #4
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aed2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a1f      	ldr	r2, [pc, #124]	@ (800af54 <TIM_OC2_SetConfig+0x110>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d013      	beq.n	800af04 <TIM_OC2_SetConfig+0xc0>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a1e      	ldr	r2, [pc, #120]	@ (800af58 <TIM_OC2_SetConfig+0x114>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d00f      	beq.n	800af04 <TIM_OC2_SetConfig+0xc0>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a1e      	ldr	r2, [pc, #120]	@ (800af60 <TIM_OC2_SetConfig+0x11c>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d00b      	beq.n	800af04 <TIM_OC2_SetConfig+0xc0>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4a1d      	ldr	r2, [pc, #116]	@ (800af64 <TIM_OC2_SetConfig+0x120>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d007      	beq.n	800af04 <TIM_OC2_SetConfig+0xc0>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a1c      	ldr	r2, [pc, #112]	@ (800af68 <TIM_OC2_SetConfig+0x124>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d003      	beq.n	800af04 <TIM_OC2_SetConfig+0xc0>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a17      	ldr	r2, [pc, #92]	@ (800af5c <TIM_OC2_SetConfig+0x118>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d113      	bne.n	800af2c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800af0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	695b      	ldr	r3, [r3, #20]
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	693a      	ldr	r2, [r7, #16]
 800af1c:	4313      	orrs	r3, r2
 800af1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	693a      	ldr	r2, [r7, #16]
 800af28:	4313      	orrs	r3, r2
 800af2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	693a      	ldr	r2, [r7, #16]
 800af30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	685a      	ldr	r2, [r3, #4]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	697a      	ldr	r2, [r7, #20]
 800af44:	621a      	str	r2, [r3, #32]
}
 800af46:	bf00      	nop
 800af48:	371c      	adds	r7, #28
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	40012c00 	.word	0x40012c00
 800af58:	40013400 	.word	0x40013400
 800af5c:	40015000 	.word	0x40015000
 800af60:	40014000 	.word	0x40014000
 800af64:	40014400 	.word	0x40014400
 800af68:	40014800 	.word	0x40014800

0800af6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b087      	sub	sp, #28
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a1b      	ldr	r3, [r3, #32]
 800af80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	69db      	ldr	r3, [r3, #28]
 800af92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f023 0303 	bic.w	r3, r3, #3
 800afa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	4313      	orrs	r3, r2
 800afb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800afb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	021b      	lsls	r3, r3, #8
 800afc0:	697a      	ldr	r2, [r7, #20]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a2b      	ldr	r2, [pc, #172]	@ (800b078 <TIM_OC3_SetConfig+0x10c>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d007      	beq.n	800afde <TIM_OC3_SetConfig+0x72>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a2a      	ldr	r2, [pc, #168]	@ (800b07c <TIM_OC3_SetConfig+0x110>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d003      	beq.n	800afde <TIM_OC3_SetConfig+0x72>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4a29      	ldr	r2, [pc, #164]	@ (800b080 <TIM_OC3_SetConfig+0x114>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d10d      	bne.n	800affa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800afe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	021b      	lsls	r3, r3, #8
 800afec:	697a      	ldr	r2, [r7, #20]
 800afee:	4313      	orrs	r3, r2
 800aff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a1e      	ldr	r2, [pc, #120]	@ (800b078 <TIM_OC3_SetConfig+0x10c>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d013      	beq.n	800b02a <TIM_OC3_SetConfig+0xbe>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4a1d      	ldr	r2, [pc, #116]	@ (800b07c <TIM_OC3_SetConfig+0x110>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d00f      	beq.n	800b02a <TIM_OC3_SetConfig+0xbe>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4a1d      	ldr	r2, [pc, #116]	@ (800b084 <TIM_OC3_SetConfig+0x118>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d00b      	beq.n	800b02a <TIM_OC3_SetConfig+0xbe>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4a1c      	ldr	r2, [pc, #112]	@ (800b088 <TIM_OC3_SetConfig+0x11c>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d007      	beq.n	800b02a <TIM_OC3_SetConfig+0xbe>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4a1b      	ldr	r2, [pc, #108]	@ (800b08c <TIM_OC3_SetConfig+0x120>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d003      	beq.n	800b02a <TIM_OC3_SetConfig+0xbe>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4a16      	ldr	r2, [pc, #88]	@ (800b080 <TIM_OC3_SetConfig+0x114>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d113      	bne.n	800b052 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	695b      	ldr	r3, [r3, #20]
 800b03e:	011b      	lsls	r3, r3, #4
 800b040:	693a      	ldr	r2, [r7, #16]
 800b042:	4313      	orrs	r3, r2
 800b044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	699b      	ldr	r3, [r3, #24]
 800b04a:	011b      	lsls	r3, r3, #4
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	4313      	orrs	r3, r2
 800b050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	693a      	ldr	r2, [r7, #16]
 800b056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	685a      	ldr	r2, [r3, #4]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	621a      	str	r2, [r3, #32]
}
 800b06c:	bf00      	nop
 800b06e:	371c      	adds	r7, #28
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	40012c00 	.word	0x40012c00
 800b07c:	40013400 	.word	0x40013400
 800b080:	40015000 	.word	0x40015000
 800b084:	40014000 	.word	0x40014000
 800b088:	40014400 	.word	0x40014400
 800b08c:	40014800 	.word	0x40014800

0800b090 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b090:	b480      	push	{r7}
 800b092:	b087      	sub	sp, #28
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a1b      	ldr	r3, [r3, #32]
 800b09e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6a1b      	ldr	r3, [r3, #32]
 800b0a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	69db      	ldr	r3, [r3, #28]
 800b0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	021b      	lsls	r3, r3, #8
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b0de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	031b      	lsls	r3, r3, #12
 800b0e6:	697a      	ldr	r2, [r7, #20]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a2c      	ldr	r2, [pc, #176]	@ (800b1a0 <TIM_OC4_SetConfig+0x110>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d007      	beq.n	800b104 <TIM_OC4_SetConfig+0x74>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a2b      	ldr	r2, [pc, #172]	@ (800b1a4 <TIM_OC4_SetConfig+0x114>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d003      	beq.n	800b104 <TIM_OC4_SetConfig+0x74>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a2a      	ldr	r2, [pc, #168]	@ (800b1a8 <TIM_OC4_SetConfig+0x118>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d10d      	bne.n	800b120 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b10a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	031b      	lsls	r3, r3, #12
 800b112:	697a      	ldr	r2, [r7, #20]
 800b114:	4313      	orrs	r3, r2
 800b116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b11e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4a1f      	ldr	r2, [pc, #124]	@ (800b1a0 <TIM_OC4_SetConfig+0x110>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d013      	beq.n	800b150 <TIM_OC4_SetConfig+0xc0>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4a1e      	ldr	r2, [pc, #120]	@ (800b1a4 <TIM_OC4_SetConfig+0x114>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d00f      	beq.n	800b150 <TIM_OC4_SetConfig+0xc0>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4a1e      	ldr	r2, [pc, #120]	@ (800b1ac <TIM_OC4_SetConfig+0x11c>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d00b      	beq.n	800b150 <TIM_OC4_SetConfig+0xc0>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4a1d      	ldr	r2, [pc, #116]	@ (800b1b0 <TIM_OC4_SetConfig+0x120>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d007      	beq.n	800b150 <TIM_OC4_SetConfig+0xc0>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	4a1c      	ldr	r2, [pc, #112]	@ (800b1b4 <TIM_OC4_SetConfig+0x124>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d003      	beq.n	800b150 <TIM_OC4_SetConfig+0xc0>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4a17      	ldr	r2, [pc, #92]	@ (800b1a8 <TIM_OC4_SetConfig+0x118>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d113      	bne.n	800b178 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b156:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b15e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	695b      	ldr	r3, [r3, #20]
 800b164:	019b      	lsls	r3, r3, #6
 800b166:	693a      	ldr	r2, [r7, #16]
 800b168:	4313      	orrs	r3, r2
 800b16a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	699b      	ldr	r3, [r3, #24]
 800b170:	019b      	lsls	r3, r3, #6
 800b172:	693a      	ldr	r2, [r7, #16]
 800b174:	4313      	orrs	r3, r2
 800b176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	693a      	ldr	r2, [r7, #16]
 800b17c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	685a      	ldr	r2, [r3, #4]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	697a      	ldr	r2, [r7, #20]
 800b190:	621a      	str	r2, [r3, #32]
}
 800b192:	bf00      	nop
 800b194:	371c      	adds	r7, #28
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	40012c00 	.word	0x40012c00
 800b1a4:	40013400 	.word	0x40013400
 800b1a8:	40015000 	.word	0x40015000
 800b1ac:	40014000 	.word	0x40014000
 800b1b0:	40014400 	.word	0x40014400
 800b1b4:	40014800 	.word	0x40014800

0800b1b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b087      	sub	sp, #28
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a1b      	ldr	r3, [r3, #32]
 800b1cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b1e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b1fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	041b      	lsls	r3, r3, #16
 800b204:	693a      	ldr	r2, [r7, #16]
 800b206:	4313      	orrs	r3, r2
 800b208:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a19      	ldr	r2, [pc, #100]	@ (800b274 <TIM_OC5_SetConfig+0xbc>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d013      	beq.n	800b23a <TIM_OC5_SetConfig+0x82>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a18      	ldr	r2, [pc, #96]	@ (800b278 <TIM_OC5_SetConfig+0xc0>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d00f      	beq.n	800b23a <TIM_OC5_SetConfig+0x82>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a17      	ldr	r2, [pc, #92]	@ (800b27c <TIM_OC5_SetConfig+0xc4>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d00b      	beq.n	800b23a <TIM_OC5_SetConfig+0x82>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a16      	ldr	r2, [pc, #88]	@ (800b280 <TIM_OC5_SetConfig+0xc8>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d007      	beq.n	800b23a <TIM_OC5_SetConfig+0x82>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a15      	ldr	r2, [pc, #84]	@ (800b284 <TIM_OC5_SetConfig+0xcc>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d003      	beq.n	800b23a <TIM_OC5_SetConfig+0x82>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4a14      	ldr	r2, [pc, #80]	@ (800b288 <TIM_OC5_SetConfig+0xd0>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d109      	bne.n	800b24e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b240:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	021b      	lsls	r3, r3, #8
 800b248:	697a      	ldr	r2, [r7, #20]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	697a      	ldr	r2, [r7, #20]
 800b252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	685a      	ldr	r2, [r3, #4]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	693a      	ldr	r2, [r7, #16]
 800b266:	621a      	str	r2, [r3, #32]
}
 800b268:	bf00      	nop
 800b26a:	371c      	adds	r7, #28
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr
 800b274:	40012c00 	.word	0x40012c00
 800b278:	40013400 	.word	0x40013400
 800b27c:	40014000 	.word	0x40014000
 800b280:	40014400 	.word	0x40014400
 800b284:	40014800 	.word	0x40014800
 800b288:	40015000 	.word	0x40015000

0800b28c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b087      	sub	sp, #28
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6a1b      	ldr	r3, [r3, #32]
 800b29a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6a1b      	ldr	r3, [r3, #32]
 800b2a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b2ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	021b      	lsls	r3, r3, #8
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b2d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	051b      	lsls	r3, r3, #20
 800b2da:	693a      	ldr	r2, [r7, #16]
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a1a      	ldr	r2, [pc, #104]	@ (800b34c <TIM_OC6_SetConfig+0xc0>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d013      	beq.n	800b310 <TIM_OC6_SetConfig+0x84>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a19      	ldr	r2, [pc, #100]	@ (800b350 <TIM_OC6_SetConfig+0xc4>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d00f      	beq.n	800b310 <TIM_OC6_SetConfig+0x84>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a18      	ldr	r2, [pc, #96]	@ (800b354 <TIM_OC6_SetConfig+0xc8>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d00b      	beq.n	800b310 <TIM_OC6_SetConfig+0x84>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a17      	ldr	r2, [pc, #92]	@ (800b358 <TIM_OC6_SetConfig+0xcc>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d007      	beq.n	800b310 <TIM_OC6_SetConfig+0x84>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4a16      	ldr	r2, [pc, #88]	@ (800b35c <TIM_OC6_SetConfig+0xd0>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d003      	beq.n	800b310 <TIM_OC6_SetConfig+0x84>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4a15      	ldr	r2, [pc, #84]	@ (800b360 <TIM_OC6_SetConfig+0xd4>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d109      	bne.n	800b324 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b316:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	695b      	ldr	r3, [r3, #20]
 800b31c:	029b      	lsls	r3, r3, #10
 800b31e:	697a      	ldr	r2, [r7, #20]
 800b320:	4313      	orrs	r3, r2
 800b322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	697a      	ldr	r2, [r7, #20]
 800b328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	685a      	ldr	r2, [r3, #4]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	693a      	ldr	r2, [r7, #16]
 800b33c:	621a      	str	r2, [r3, #32]
}
 800b33e:	bf00      	nop
 800b340:	371c      	adds	r7, #28
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	40012c00 	.word	0x40012c00
 800b350:	40013400 	.word	0x40013400
 800b354:	40014000 	.word	0x40014000
 800b358:	40014400 	.word	0x40014400
 800b35c:	40014800 	.word	0x40014800
 800b360:	40015000 	.word	0x40015000

0800b364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b364:	b480      	push	{r7}
 800b366:	b087      	sub	sp, #28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6a1b      	ldr	r3, [r3, #32]
 800b374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6a1b      	ldr	r3, [r3, #32]
 800b37a:	f023 0201 	bic.w	r2, r3, #1
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	699b      	ldr	r3, [r3, #24]
 800b386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b38e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	011b      	lsls	r3, r3, #4
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	4313      	orrs	r3, r2
 800b398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	f023 030a 	bic.w	r3, r3, #10
 800b3a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b3a2:	697a      	ldr	r2, [r7, #20]
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	693a      	ldr	r2, [r7, #16]
 800b3ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	697a      	ldr	r2, [r7, #20]
 800b3b4:	621a      	str	r2, [r3, #32]
}
 800b3b6:	bf00      	nop
 800b3b8:	371c      	adds	r7, #28
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr

0800b3c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3c2:	b480      	push	{r7}
 800b3c4:	b087      	sub	sp, #28
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	60f8      	str	r0, [r7, #12]
 800b3ca:	60b9      	str	r1, [r7, #8]
 800b3cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	6a1b      	ldr	r3, [r3, #32]
 800b3d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6a1b      	ldr	r3, [r3, #32]
 800b3d8:	f023 0210 	bic.w	r2, r3, #16
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b3ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	031b      	lsls	r3, r3, #12
 800b3f2:	693a      	ldr	r2, [r7, #16]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b3fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	011b      	lsls	r3, r3, #4
 800b404:	697a      	ldr	r2, [r7, #20]
 800b406:	4313      	orrs	r3, r2
 800b408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	693a      	ldr	r2, [r7, #16]
 800b40e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	697a      	ldr	r2, [r7, #20]
 800b414:	621a      	str	r2, [r3, #32]
}
 800b416:	bf00      	nop
 800b418:	371c      	adds	r7, #28
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr

0800b422 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b422:	b480      	push	{r7}
 800b424:	b085      	sub	sp, #20
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
 800b42a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b43c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b43e:	683a      	ldr	r2, [r7, #0]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	4313      	orrs	r3, r2
 800b444:	f043 0307 	orr.w	r3, r3, #7
 800b448:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	609a      	str	r2, [r3, #8]
}
 800b450:	bf00      	nop
 800b452:	3714      	adds	r7, #20
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b087      	sub	sp, #28
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
 800b468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	021a      	lsls	r2, r3, #8
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	431a      	orrs	r2, r3
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	4313      	orrs	r3, r2
 800b484:	697a      	ldr	r2, [r7, #20]
 800b486:	4313      	orrs	r3, r2
 800b488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	697a      	ldr	r2, [r7, #20]
 800b48e:	609a      	str	r2, [r3, #8]
}
 800b490:	bf00      	nop
 800b492:	371c      	adds	r7, #28
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d101      	bne.n	800b4b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	e06f      	b.n	800b594 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2202      	movs	r2, #2
 800b4c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a31      	ldr	r2, [pc, #196]	@ (800b5a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d009      	beq.n	800b4f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a30      	ldr	r2, [pc, #192]	@ (800b5a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d004      	beq.n	800b4f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a2e      	ldr	r2, [pc, #184]	@ (800b5a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d108      	bne.n	800b504 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b4f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	68fa      	ldr	r2, [r7, #12]
 800b500:	4313      	orrs	r3, r2
 800b502:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b50a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b50e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68fa      	ldr	r2, [r7, #12]
 800b516:	4313      	orrs	r3, r2
 800b518:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a1e      	ldr	r2, [pc, #120]	@ (800b5a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d01d      	beq.n	800b568 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b534:	d018      	beq.n	800b568 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a1c      	ldr	r2, [pc, #112]	@ (800b5ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d013      	beq.n	800b568 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a1a      	ldr	r2, [pc, #104]	@ (800b5b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d00e      	beq.n	800b568 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a15      	ldr	r2, [pc, #84]	@ (800b5a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d009      	beq.n	800b568 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a16      	ldr	r2, [pc, #88]	@ (800b5b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d004      	beq.n	800b568 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a11      	ldr	r2, [pc, #68]	@ (800b5a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d10c      	bne.n	800b582 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b56e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	4313      	orrs	r3, r2
 800b578:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2201      	movs	r2, #1
 800b586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b592:	2300      	movs	r3, #0
}
 800b594:	4618      	mov	r0, r3
 800b596:	3714      	adds	r7, #20
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr
 800b5a0:	40012c00 	.word	0x40012c00
 800b5a4:	40013400 	.word	0x40013400
 800b5a8:	40015000 	.word	0x40015000
 800b5ac:	40000400 	.word	0x40000400
 800b5b0:	40000800 	.word	0x40000800
 800b5b4:	40014000 	.word	0x40014000

0800b5b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d101      	bne.n	800b5d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	e078      	b.n	800b6c6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	4313      	orrs	r3, r2
 800b604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4313      	orrs	r3, r2
 800b612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	4313      	orrs	r3, r2
 800b620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	695b      	ldr	r3, [r3, #20]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b63a:	4313      	orrs	r3, r2
 800b63c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	699b      	ldr	r3, [r3, #24]
 800b648:	041b      	lsls	r3, r3, #16
 800b64a:	4313      	orrs	r3, r2
 800b64c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	69db      	ldr	r3, [r3, #28]
 800b658:	4313      	orrs	r3, r2
 800b65a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a1c      	ldr	r2, [pc, #112]	@ (800b6d4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d009      	beq.n	800b67a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a1b      	ldr	r2, [pc, #108]	@ (800b6d8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d004      	beq.n	800b67a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4a19      	ldr	r2, [pc, #100]	@ (800b6dc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d11c      	bne.n	800b6b4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b684:	051b      	lsls	r3, r3, #20
 800b686:	4313      	orrs	r3, r2
 800b688:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	6a1b      	ldr	r3, [r3, #32]
 800b694:	4313      	orrs	r3, r2
 800b696:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3714      	adds	r7, #20
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	40012c00 	.word	0x40012c00
 800b6d8:	40013400 	.word	0x40013400
 800b6dc:	40015000 	.word	0x40015000

0800b6e0 <HAL_TIMEx_ConfigEncoderIndex>:
  * @param  sEncoderIndexConfig Encoder index configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigEncoderIndex(TIM_HandleTypeDef *htim,
                                               TIMEx_EncoderIndexConfigTypeDef *sEncoderIndexConfig)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FUNCTIONAL_STATE(sEncoderIndexConfig->FirstIndexEnable));
  assert_param(IS_TIM_ENCODERINDEX_POSITION(sEncoderIndexConfig->Position));
  assert_param(IS_TIM_ENCODERINDEX_DIRECTION(sEncoderIndexConfig->Direction));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d101      	bne.n	800b6f8 <HAL_TIMEx_ConfigEncoderIndex+0x18>
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	e02a      	b.n	800b74e <HAL_TIMEx_ConfigEncoderIndex+0x6e>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Configures the TIMx External Trigger (ETR) which is used as Index input */
  TIM_ETR_SetConfig(htim->Instance,
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6818      	ldr	r0, [r3, #0]
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	6859      	ldr	r1, [r3, #4]
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	f7ff fea4 	bl	800b45c <TIM_ETR_SetConfig>
                    sEncoderIndexConfig->Prescaler,
                    sEncoderIndexConfig->Polarity,
                    sEncoderIndexConfig->Filter);

  /* Configures the encoder index */
  MODIFY_REG(htim->Instance->ECR,
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b71a:	f023 02e6 	bic.w	r2, r3, #230	@ 0xe6
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	695b      	ldr	r3, [r3, #20]
 800b722:	6839      	ldr	r1, [r7, #0]
 800b724:	7b09      	ldrb	r1, [r1, #12]
 800b726:	2901      	cmp	r1, #1
 800b728:	d101      	bne.n	800b72e <HAL_TIMEx_ConfigEncoderIndex+0x4e>
 800b72a:	2120      	movs	r1, #32
 800b72c:	e000      	b.n	800b730 <HAL_TIMEx_ConfigEncoderIndex+0x50>
 800b72e:	2100      	movs	r1, #0
 800b730:	4319      	orrs	r1, r3
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	691b      	ldr	r3, [r3, #16]
 800b736:	430b      	orrs	r3, r1
 800b738:	431a      	orrs	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f042 0201 	orr.w	r2, r2, #1
 800b742:	659a      	str	r2, [r3, #88]	@ 0x58
             (sEncoderIndexConfig->Direction |
              ((sEncoderIndexConfig->FirstIndexEnable == ENABLE) ? (0x1U << TIM_ECR_FIDX_Pos) : 0U) |
              sEncoderIndexConfig->Position |
              TIM_ECR_IE));

  __HAL_UNLOCK(htim);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b756:	b480      	push	{r7}
 800b758:	b083      	sub	sp, #12
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b75e:	bf00      	nop
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr

0800b76a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b76a:	b480      	push	{r7}
 800b76c:	b083      	sub	sp, #12
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b772:	bf00      	nop
 800b774:	370c      	adds	r7, #12
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr

0800b77e <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b77e:	b480      	push	{r7}
 800b780:	b083      	sub	sp, #12
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b792:	b480      	push	{r7}
 800b794:	b083      	sub	sp, #12
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b79a:	bf00      	nop
 800b79c:	370c      	adds	r7, #12
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr

0800b7a6 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b7a6:	b480      	push	{r7}
 800b7a8:	b083      	sub	sp, #12
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b7ae:	bf00      	nop
 800b7b0:	370c      	adds	r7, #12
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b7ba:	b480      	push	{r7}
 800b7bc:	b083      	sub	sp, #12
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b7c2:	bf00      	nop
 800b7c4:	370c      	adds	r7, #12
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr

0800b7ce <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b7ce:	b480      	push	{r7}
 800b7d0:	b083      	sub	sp, #12
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b7d6:	bf00      	nop
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr

0800b7e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b082      	sub	sp, #8
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d101      	bne.n	800b7f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e042      	b.n	800b87a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d106      	bne.n	800b80c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f7f7 f88e 	bl	8002928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2224      	movs	r2, #36	@ 0x24
 800b810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f022 0201 	bic.w	r2, r2, #1
 800b822:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d002      	beq.n	800b832 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 ffdd 	bl	800c7ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 fcde 	bl	800c1f4 <UART_SetConfig>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d101      	bne.n	800b842 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e01b      	b.n	800b87a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	685a      	ldr	r2, [r3, #4]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b850:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	689a      	ldr	r2, [r3, #8]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b860:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f042 0201 	orr.w	r2, r2, #1
 800b870:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f001 f85c 	bl	800c930 <UART_CheckIdleState>
 800b878:	4603      	mov	r3, r0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b08a      	sub	sp, #40	@ 0x28
 800b886:	af02      	add	r7, sp, #8
 800b888:	60f8      	str	r0, [r7, #12]
 800b88a:	60b9      	str	r1, [r7, #8]
 800b88c:	603b      	str	r3, [r7, #0]
 800b88e:	4613      	mov	r3, r2
 800b890:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b898:	2b20      	cmp	r3, #32
 800b89a:	d17b      	bne.n	800b994 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d002      	beq.n	800b8a8 <HAL_UART_Transmit+0x26>
 800b8a2:	88fb      	ldrh	r3, [r7, #6]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d101      	bne.n	800b8ac <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e074      	b.n	800b996 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2221      	movs	r2, #33	@ 0x21
 800b8b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b8bc:	f7f8 fbc4 	bl	8004048 <HAL_GetTick>
 800b8c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	88fa      	ldrh	r2, [r7, #6]
 800b8c6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	88fa      	ldrh	r2, [r7, #6]
 800b8ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8da:	d108      	bne.n	800b8ee <HAL_UART_Transmit+0x6c>
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	691b      	ldr	r3, [r3, #16]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d104      	bne.n	800b8ee <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	61bb      	str	r3, [r7, #24]
 800b8ec:	e003      	b.n	800b8f6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b8f6:	e030      	b.n	800b95a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	2200      	movs	r2, #0
 800b900:	2180      	movs	r1, #128	@ 0x80
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f001 f8be 	bl	800ca84 <UART_WaitOnFlagUntilTimeout>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d005      	beq.n	800b91a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2220      	movs	r2, #32
 800b912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b916:	2303      	movs	r3, #3
 800b918:	e03d      	b.n	800b996 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d10b      	bne.n	800b938 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	881b      	ldrh	r3, [r3, #0]
 800b924:	461a      	mov	r2, r3
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b92e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	3302      	adds	r3, #2
 800b934:	61bb      	str	r3, [r7, #24]
 800b936:	e007      	b.n	800b948 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	781a      	ldrb	r2, [r3, #0]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	3301      	adds	r3, #1
 800b946:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b94e:	b29b      	uxth	r3, r3
 800b950:	3b01      	subs	r3, #1
 800b952:	b29a      	uxth	r2, r3
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b960:	b29b      	uxth	r3, r3
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1c8      	bne.n	800b8f8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	9300      	str	r3, [sp, #0]
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	2200      	movs	r2, #0
 800b96e:	2140      	movs	r1, #64	@ 0x40
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	f001 f887 	bl	800ca84 <UART_WaitOnFlagUntilTimeout>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d005      	beq.n	800b988 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2220      	movs	r2, #32
 800b980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	e006      	b.n	800b996 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2220      	movs	r2, #32
 800b98c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	e000      	b.n	800b996 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b994:	2302      	movs	r3, #2
  }
}
 800b996:	4618      	mov	r0, r3
 800b998:	3720      	adds	r7, #32
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b08a      	sub	sp, #40	@ 0x28
 800b9a2:	af02      	add	r7, sp, #8
 800b9a4:	60f8      	str	r0, [r7, #12]
 800b9a6:	60b9      	str	r1, [r7, #8]
 800b9a8:	603b      	str	r3, [r7, #0]
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b9b4:	2b20      	cmp	r3, #32
 800b9b6:	f040 80b5 	bne.w	800bb24 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <HAL_UART_Receive+0x28>
 800b9c0:	88fb      	ldrh	r3, [r7, #6]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d101      	bne.n	800b9ca <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e0ad      	b.n	800bb26 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2222      	movs	r2, #34	@ 0x22
 800b9d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b9e0:	f7f8 fb32 	bl	8004048 <HAL_GetTick>
 800b9e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	88fa      	ldrh	r2, [r7, #6]
 800b9ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	88fa      	ldrh	r2, [r7, #6]
 800b9f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9fe:	d10e      	bne.n	800ba1e <HAL_UART_Receive+0x80>
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d105      	bne.n	800ba14 <HAL_UART_Receive+0x76>
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800ba0e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ba12:	e02d      	b.n	800ba70 <HAL_UART_Receive+0xd2>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	22ff      	movs	r2, #255	@ 0xff
 800ba18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ba1c:	e028      	b.n	800ba70 <HAL_UART_Receive+0xd2>
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10d      	bne.n	800ba42 <HAL_UART_Receive+0xa4>
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	691b      	ldr	r3, [r3, #16]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d104      	bne.n	800ba38 <HAL_UART_Receive+0x9a>
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	22ff      	movs	r2, #255	@ 0xff
 800ba32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ba36:	e01b      	b.n	800ba70 <HAL_UART_Receive+0xd2>
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	227f      	movs	r2, #127	@ 0x7f
 800ba3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ba40:	e016      	b.n	800ba70 <HAL_UART_Receive+0xd2>
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba4a:	d10d      	bne.n	800ba68 <HAL_UART_Receive+0xca>
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	691b      	ldr	r3, [r3, #16]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d104      	bne.n	800ba5e <HAL_UART_Receive+0xc0>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	227f      	movs	r2, #127	@ 0x7f
 800ba58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ba5c:	e008      	b.n	800ba70 <HAL_UART_Receive+0xd2>
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	223f      	movs	r2, #63	@ 0x3f
 800ba62:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ba66:	e003      	b.n	800ba70 <HAL_UART_Receive+0xd2>
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ba76:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba80:	d108      	bne.n	800ba94 <HAL_UART_Receive+0xf6>
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	691b      	ldr	r3, [r3, #16]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d104      	bne.n	800ba94 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	61bb      	str	r3, [r7, #24]
 800ba92:	e003      	b.n	800ba9c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ba9c:	e036      	b.n	800bb0c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	2200      	movs	r2, #0
 800baa6:	2120      	movs	r1, #32
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f000 ffeb 	bl	800ca84 <UART_WaitOnFlagUntilTimeout>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d005      	beq.n	800bac0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2220      	movs	r2, #32
 800bab8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800babc:	2303      	movs	r3, #3
 800babe:	e032      	b.n	800bb26 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d10c      	bne.n	800bae0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bacc:	b29a      	uxth	r2, r3
 800bace:	8a7b      	ldrh	r3, [r7, #18]
 800bad0:	4013      	ands	r3, r2
 800bad2:	b29a      	uxth	r2, r3
 800bad4:	69bb      	ldr	r3, [r7, #24]
 800bad6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	3302      	adds	r3, #2
 800badc:	61bb      	str	r3, [r7, #24]
 800bade:	e00c      	b.n	800bafa <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae6:	b2da      	uxtb	r2, r3
 800bae8:	8a7b      	ldrh	r3, [r7, #18]
 800baea:	b2db      	uxtb	r3, r3
 800baec:	4013      	ands	r3, r2
 800baee:	b2da      	uxtb	r2, r3
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	3301      	adds	r3, #1
 800baf8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	3b01      	subs	r3, #1
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d1c2      	bne.n	800ba9e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2220      	movs	r2, #32
 800bb1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	e000      	b.n	800bb26 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800bb24:	2302      	movs	r3, #2
  }
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3720      	adds	r7, #32
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
	...

0800bb30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b0ba      	sub	sp, #232	@ 0xe8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	69db      	ldr	r3, [r3, #28]
 800bb3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	689b      	ldr	r3, [r3, #8]
 800bb52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bb56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800bb5a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bb5e:	4013      	ands	r3, r2
 800bb60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800bb64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d11b      	bne.n	800bba4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb70:	f003 0320 	and.w	r3, r3, #32
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d015      	beq.n	800bba4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb7c:	f003 0320 	and.w	r3, r3, #32
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d105      	bne.n	800bb90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d009      	beq.n	800bba4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 8300 	beq.w	800c19a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	4798      	blx	r3
      }
      return;
 800bba2:	e2fa      	b.n	800c19a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f000 8123 	beq.w	800bdf4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bbae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bbb2:	4b8d      	ldr	r3, [pc, #564]	@ (800bde8 <HAL_UART_IRQHandler+0x2b8>)
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d106      	bne.n	800bbc8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bbba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800bbbe:	4b8b      	ldr	r3, [pc, #556]	@ (800bdec <HAL_UART_IRQHandler+0x2bc>)
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	f000 8116 	beq.w	800bdf4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bbc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bbcc:	f003 0301 	and.w	r3, r3, #1
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d011      	beq.n	800bbf8 <HAL_UART_IRQHandler+0xc8>
 800bbd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00b      	beq.n	800bbf8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbee:	f043 0201 	orr.w	r2, r3, #1
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bbf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bbfc:	f003 0302 	and.w	r3, r3, #2
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d011      	beq.n	800bc28 <HAL_UART_IRQHandler+0xf8>
 800bc04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bc08:	f003 0301 	and.w	r3, r3, #1
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d00b      	beq.n	800bc28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2202      	movs	r2, #2
 800bc16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc1e:	f043 0204 	orr.w	r2, r3, #4
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc2c:	f003 0304 	and.w	r3, r3, #4
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d011      	beq.n	800bc58 <HAL_UART_IRQHandler+0x128>
 800bc34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bc38:	f003 0301 	and.w	r3, r3, #1
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00b      	beq.n	800bc58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2204      	movs	r2, #4
 800bc46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc4e:	f043 0202 	orr.w	r2, r3, #2
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bc58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc5c:	f003 0308 	and.w	r3, r3, #8
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d017      	beq.n	800bc94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc68:	f003 0320 	and.w	r3, r3, #32
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d105      	bne.n	800bc7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bc70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bc74:	4b5c      	ldr	r3, [pc, #368]	@ (800bde8 <HAL_UART_IRQHandler+0x2b8>)
 800bc76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00b      	beq.n	800bc94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2208      	movs	r2, #8
 800bc82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc8a:	f043 0208 	orr.w	r2, r3, #8
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bc94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d012      	beq.n	800bcc6 <HAL_UART_IRQHandler+0x196>
 800bca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bca4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00c      	beq.n	800bcc6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bcb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcbc:	f043 0220 	orr.w	r2, r3, #32
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	f000 8266 	beq.w	800c19e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bcd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcd6:	f003 0320 	and.w	r3, r3, #32
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d013      	beq.n	800bd06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bcde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bce2:	f003 0320 	and.w	r3, r3, #32
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d105      	bne.n	800bcf6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bcea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bcee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d007      	beq.n	800bd06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d003      	beq.n	800bd06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd1a:	2b40      	cmp	r3, #64	@ 0x40
 800bd1c:	d005      	beq.n	800bd2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bd1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bd22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d054      	beq.n	800bdd4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 ff17 	bl	800cb5e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd3a:	2b40      	cmp	r3, #64	@ 0x40
 800bd3c:	d146      	bne.n	800bdcc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	3308      	adds	r3, #8
 800bd44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bd4c:	e853 3f00 	ldrex	r3, [r3]
 800bd50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bd54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bd58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	3308      	adds	r3, #8
 800bd66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bd6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bd6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bd76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bd7a:	e841 2300 	strex	r3, r2, [r1]
 800bd7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bd82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1d9      	bne.n	800bd3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d017      	beq.n	800bdc4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd9a:	4a15      	ldr	r2, [pc, #84]	@ (800bdf0 <HAL_UART_IRQHandler+0x2c0>)
 800bd9c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7f9 fc72 	bl	800568e <HAL_DMA_Abort_IT>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d019      	beq.n	800bde4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800bdbe:	4610      	mov	r0, r2
 800bdc0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdc2:	e00f      	b.n	800bde4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f000 f9ff 	bl	800c1c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdca:	e00b      	b.n	800bde4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 f9fb 	bl	800c1c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdd2:	e007      	b.n	800bde4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 f9f7 	bl	800c1c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2200      	movs	r2, #0
 800bdde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bde2:	e1dc      	b.n	800c19e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bde4:	bf00      	nop
    return;
 800bde6:	e1da      	b.n	800c19e <HAL_UART_IRQHandler+0x66e>
 800bde8:	10000001 	.word	0x10000001
 800bdec:	04000120 	.word	0x04000120
 800bdf0:	0800cc2b 	.word	0x0800cc2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	f040 8170 	bne.w	800c0de <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bdfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be02:	f003 0310 	and.w	r3, r3, #16
 800be06:	2b00      	cmp	r3, #0
 800be08:	f000 8169 	beq.w	800c0de <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800be0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be10:	f003 0310 	and.w	r3, r3, #16
 800be14:	2b00      	cmp	r3, #0
 800be16:	f000 8162 	beq.w	800c0de <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2210      	movs	r2, #16
 800be20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	689b      	ldr	r3, [r3, #8]
 800be28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be2c:	2b40      	cmp	r3, #64	@ 0x40
 800be2e:	f040 80d8 	bne.w	800bfe2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800be40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800be44:	2b00      	cmp	r3, #0
 800be46:	f000 80af 	beq.w	800bfa8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800be50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800be54:	429a      	cmp	r2, r3
 800be56:	f080 80a7 	bcs.w	800bfa8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800be60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f003 0320 	and.w	r3, r3, #32
 800be72:	2b00      	cmp	r3, #0
 800be74:	f040 8087 	bne.w	800bf86 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800be84:	e853 3f00 	ldrex	r3, [r3]
 800be88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800be8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800be90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800be94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	461a      	mov	r2, r3
 800be9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bea2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bea6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800beae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800beb2:	e841 2300 	strex	r3, r2, [r1]
 800beb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800beba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d1da      	bne.n	800be78 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	3308      	adds	r3, #8
 800bec8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800becc:	e853 3f00 	ldrex	r3, [r3]
 800bed0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bed2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bed4:	f023 0301 	bic.w	r3, r3, #1
 800bed8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	3308      	adds	r3, #8
 800bee2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bee6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800beea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800beee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bef2:	e841 2300 	strex	r3, r2, [r1]
 800bef6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bef8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800befa:	2b00      	cmp	r3, #0
 800befc:	d1e1      	bne.n	800bec2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	3308      	adds	r3, #8
 800bf04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf08:	e853 3f00 	ldrex	r3, [r3]
 800bf0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bf0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	3308      	adds	r3, #8
 800bf1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bf22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bf24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bf28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bf2a:	e841 2300 	strex	r3, r2, [r1]
 800bf2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bf30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d1e3      	bne.n	800befe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2220      	movs	r2, #32
 800bf3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf4c:	e853 3f00 	ldrex	r3, [r3]
 800bf50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bf52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf54:	f023 0310 	bic.w	r3, r3, #16
 800bf58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	461a      	mov	r2, r3
 800bf62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf66:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bf6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf6e:	e841 2300 	strex	r3, r2, [r1]
 800bf72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bf74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d1e4      	bne.n	800bf44 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7f9 fb2b 	bl	80055dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2202      	movs	r2, #2
 800bf8a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 f91b 	bl	800c1dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800bfa6:	e0fc      	b.n	800c1a2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bfae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	f040 80f5 	bne.w	800c1a2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f003 0320 	and.w	r3, r3, #32
 800bfc6:	2b20      	cmp	r3, #32
 800bfc8:	f040 80eb 	bne.w	800c1a2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2202      	movs	r2, #2
 800bfd0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bfd8:	4619      	mov	r1, r3
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f8fe 	bl	800c1dc <HAL_UARTEx_RxEventCallback>
      return;
 800bfe0:	e0df      	b.n	800c1a2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	2b00      	cmp	r3, #0
 800c000:	f000 80d1 	beq.w	800c1a6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800c004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f000 80cc 	beq.w	800c1a6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c016:	e853 3f00 	ldrex	r3, [r3]
 800c01a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c01c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c01e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c022:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	461a      	mov	r2, r3
 800c02c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c030:	647b      	str	r3, [r7, #68]	@ 0x44
 800c032:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c034:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c036:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c038:	e841 2300 	strex	r3, r2, [r1]
 800c03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c03e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c040:	2b00      	cmp	r3, #0
 800c042:	d1e4      	bne.n	800c00e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	3308      	adds	r3, #8
 800c04a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c04e:	e853 3f00 	ldrex	r3, [r3]
 800c052:	623b      	str	r3, [r7, #32]
   return(result);
 800c054:	6a3b      	ldr	r3, [r7, #32]
 800c056:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c05a:	f023 0301 	bic.w	r3, r3, #1
 800c05e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	3308      	adds	r3, #8
 800c068:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c06c:	633a      	str	r2, [r7, #48]	@ 0x30
 800c06e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c070:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c074:	e841 2300 	strex	r3, r2, [r1]
 800c078:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d1e1      	bne.n	800c044 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2220      	movs	r2, #32
 800c084:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	e853 3f00 	ldrex	r3, [r3]
 800c0a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f023 0310 	bic.w	r3, r3, #16
 800c0a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c0b6:	61fb      	str	r3, [r7, #28]
 800c0b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ba:	69b9      	ldr	r1, [r7, #24]
 800c0bc:	69fa      	ldr	r2, [r7, #28]
 800c0be:	e841 2300 	strex	r3, r2, [r1]
 800c0c2:	617b      	str	r3, [r7, #20]
   return(result);
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d1e4      	bne.n	800c094 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2202      	movs	r2, #2
 800c0ce:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c0d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f880 	bl	800c1dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c0dc:	e063      	b.n	800c1a6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c0de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00e      	beq.n	800c108 <HAL_UART_IRQHandler+0x5d8>
 800c0ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d008      	beq.n	800c108 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c0fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 fdcf 	bl	800cca4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c106:	e051      	b.n	800c1ac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c10c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c110:	2b00      	cmp	r3, #0
 800c112:	d014      	beq.n	800c13e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d105      	bne.n	800c12c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c124:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d008      	beq.n	800c13e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c130:	2b00      	cmp	r3, #0
 800c132:	d03a      	beq.n	800c1aa <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	4798      	blx	r3
    }
    return;
 800c13c:	e035      	b.n	800c1aa <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c13e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c146:	2b00      	cmp	r3, #0
 800c148:	d009      	beq.n	800c15e <HAL_UART_IRQHandler+0x62e>
 800c14a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c14e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c152:	2b00      	cmp	r3, #0
 800c154:	d003      	beq.n	800c15e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fd79 	bl	800cc4e <UART_EndTransmit_IT>
    return;
 800c15c:	e026      	b.n	800c1ac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c15e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c162:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c166:	2b00      	cmp	r3, #0
 800c168:	d009      	beq.n	800c17e <HAL_UART_IRQHandler+0x64e>
 800c16a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c16e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c172:	2b00      	cmp	r3, #0
 800c174:	d003      	beq.n	800c17e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 fda8 	bl	800cccc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c17c:	e016      	b.n	800c1ac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c17e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c182:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c186:	2b00      	cmp	r3, #0
 800c188:	d010      	beq.n	800c1ac <HAL_UART_IRQHandler+0x67c>
 800c18a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	da0c      	bge.n	800c1ac <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fd90 	bl	800ccb8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c198:	e008      	b.n	800c1ac <HAL_UART_IRQHandler+0x67c>
      return;
 800c19a:	bf00      	nop
 800c19c:	e006      	b.n	800c1ac <HAL_UART_IRQHandler+0x67c>
    return;
 800c19e:	bf00      	nop
 800c1a0:	e004      	b.n	800c1ac <HAL_UART_IRQHandler+0x67c>
      return;
 800c1a2:	bf00      	nop
 800c1a4:	e002      	b.n	800c1ac <HAL_UART_IRQHandler+0x67c>
      return;
 800c1a6:	bf00      	nop
 800c1a8:	e000      	b.n	800c1ac <HAL_UART_IRQHandler+0x67c>
    return;
 800c1aa:	bf00      	nop
  }
}
 800c1ac:	37e8      	adds	r7, #232	@ 0xe8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop

0800c1b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c1bc:	bf00      	nop
 800c1be:	370c      	adds	r7, #12
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c1d0:	bf00      	nop
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c1e8:	bf00      	nop
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c1f8:	b08c      	sub	sp, #48	@ 0x30
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	689a      	ldr	r2, [r3, #8]
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	431a      	orrs	r2, r3
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	431a      	orrs	r2, r3
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	69db      	ldr	r3, [r3, #28]
 800c218:	4313      	orrs	r3, r2
 800c21a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	4baa      	ldr	r3, [pc, #680]	@ (800c4cc <UART_SetConfig+0x2d8>)
 800c224:	4013      	ands	r3, r2
 800c226:	697a      	ldr	r2, [r7, #20]
 800c228:	6812      	ldr	r2, [r2, #0]
 800c22a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c22c:	430b      	orrs	r3, r1
 800c22e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	68da      	ldr	r2, [r3, #12]
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	430a      	orrs	r2, r1
 800c244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	699b      	ldr	r3, [r3, #24]
 800c24a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a9f      	ldr	r2, [pc, #636]	@ (800c4d0 <UART_SetConfig+0x2dc>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d004      	beq.n	800c260 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	6a1b      	ldr	r3, [r3, #32]
 800c25a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c25c:	4313      	orrs	r3, r2
 800c25e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c26a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c26e:	697a      	ldr	r2, [r7, #20]
 800c270:	6812      	ldr	r2, [r2, #0]
 800c272:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c274:	430b      	orrs	r3, r1
 800c276:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c27e:	f023 010f 	bic.w	r1, r3, #15
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	430a      	orrs	r2, r1
 800c28c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4a90      	ldr	r2, [pc, #576]	@ (800c4d4 <UART_SetConfig+0x2e0>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d125      	bne.n	800c2e4 <UART_SetConfig+0xf0>
 800c298:	4b8f      	ldr	r3, [pc, #572]	@ (800c4d8 <UART_SetConfig+0x2e4>)
 800c29a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c29e:	f003 0303 	and.w	r3, r3, #3
 800c2a2:	2b03      	cmp	r3, #3
 800c2a4:	d81a      	bhi.n	800c2dc <UART_SetConfig+0xe8>
 800c2a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c2ac <UART_SetConfig+0xb8>)
 800c2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ac:	0800c2bd 	.word	0x0800c2bd
 800c2b0:	0800c2cd 	.word	0x0800c2cd
 800c2b4:	0800c2c5 	.word	0x0800c2c5
 800c2b8:	0800c2d5 	.word	0x0800c2d5
 800c2bc:	2301      	movs	r3, #1
 800c2be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2c2:	e116      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c2c4:	2302      	movs	r3, #2
 800c2c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2ca:	e112      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c2cc:	2304      	movs	r3, #4
 800c2ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2d2:	e10e      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c2d4:	2308      	movs	r3, #8
 800c2d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2da:	e10a      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c2dc:	2310      	movs	r3, #16
 800c2de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2e2:	e106      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a7c      	ldr	r2, [pc, #496]	@ (800c4dc <UART_SetConfig+0x2e8>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d138      	bne.n	800c360 <UART_SetConfig+0x16c>
 800c2ee:	4b7a      	ldr	r3, [pc, #488]	@ (800c4d8 <UART_SetConfig+0x2e4>)
 800c2f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2f4:	f003 030c 	and.w	r3, r3, #12
 800c2f8:	2b0c      	cmp	r3, #12
 800c2fa:	d82d      	bhi.n	800c358 <UART_SetConfig+0x164>
 800c2fc:	a201      	add	r2, pc, #4	@ (adr r2, 800c304 <UART_SetConfig+0x110>)
 800c2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c302:	bf00      	nop
 800c304:	0800c339 	.word	0x0800c339
 800c308:	0800c359 	.word	0x0800c359
 800c30c:	0800c359 	.word	0x0800c359
 800c310:	0800c359 	.word	0x0800c359
 800c314:	0800c349 	.word	0x0800c349
 800c318:	0800c359 	.word	0x0800c359
 800c31c:	0800c359 	.word	0x0800c359
 800c320:	0800c359 	.word	0x0800c359
 800c324:	0800c341 	.word	0x0800c341
 800c328:	0800c359 	.word	0x0800c359
 800c32c:	0800c359 	.word	0x0800c359
 800c330:	0800c359 	.word	0x0800c359
 800c334:	0800c351 	.word	0x0800c351
 800c338:	2300      	movs	r3, #0
 800c33a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c33e:	e0d8      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c340:	2302      	movs	r3, #2
 800c342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c346:	e0d4      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c348:	2304      	movs	r3, #4
 800c34a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c34e:	e0d0      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c350:	2308      	movs	r3, #8
 800c352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c356:	e0cc      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c358:	2310      	movs	r3, #16
 800c35a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c35e:	e0c8      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a5e      	ldr	r2, [pc, #376]	@ (800c4e0 <UART_SetConfig+0x2ec>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d125      	bne.n	800c3b6 <UART_SetConfig+0x1c2>
 800c36a:	4b5b      	ldr	r3, [pc, #364]	@ (800c4d8 <UART_SetConfig+0x2e4>)
 800c36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c370:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c374:	2b30      	cmp	r3, #48	@ 0x30
 800c376:	d016      	beq.n	800c3a6 <UART_SetConfig+0x1b2>
 800c378:	2b30      	cmp	r3, #48	@ 0x30
 800c37a:	d818      	bhi.n	800c3ae <UART_SetConfig+0x1ba>
 800c37c:	2b20      	cmp	r3, #32
 800c37e:	d00a      	beq.n	800c396 <UART_SetConfig+0x1a2>
 800c380:	2b20      	cmp	r3, #32
 800c382:	d814      	bhi.n	800c3ae <UART_SetConfig+0x1ba>
 800c384:	2b00      	cmp	r3, #0
 800c386:	d002      	beq.n	800c38e <UART_SetConfig+0x19a>
 800c388:	2b10      	cmp	r3, #16
 800c38a:	d008      	beq.n	800c39e <UART_SetConfig+0x1aa>
 800c38c:	e00f      	b.n	800c3ae <UART_SetConfig+0x1ba>
 800c38e:	2300      	movs	r3, #0
 800c390:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c394:	e0ad      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c396:	2302      	movs	r3, #2
 800c398:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c39c:	e0a9      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c39e:	2304      	movs	r3, #4
 800c3a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3a4:	e0a5      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c3a6:	2308      	movs	r3, #8
 800c3a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3ac:	e0a1      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c3ae:	2310      	movs	r3, #16
 800c3b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3b4:	e09d      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a4a      	ldr	r2, [pc, #296]	@ (800c4e4 <UART_SetConfig+0x2f0>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d125      	bne.n	800c40c <UART_SetConfig+0x218>
 800c3c0:	4b45      	ldr	r3, [pc, #276]	@ (800c4d8 <UART_SetConfig+0x2e4>)
 800c3c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c3ca:	2bc0      	cmp	r3, #192	@ 0xc0
 800c3cc:	d016      	beq.n	800c3fc <UART_SetConfig+0x208>
 800c3ce:	2bc0      	cmp	r3, #192	@ 0xc0
 800c3d0:	d818      	bhi.n	800c404 <UART_SetConfig+0x210>
 800c3d2:	2b80      	cmp	r3, #128	@ 0x80
 800c3d4:	d00a      	beq.n	800c3ec <UART_SetConfig+0x1f8>
 800c3d6:	2b80      	cmp	r3, #128	@ 0x80
 800c3d8:	d814      	bhi.n	800c404 <UART_SetConfig+0x210>
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d002      	beq.n	800c3e4 <UART_SetConfig+0x1f0>
 800c3de:	2b40      	cmp	r3, #64	@ 0x40
 800c3e0:	d008      	beq.n	800c3f4 <UART_SetConfig+0x200>
 800c3e2:	e00f      	b.n	800c404 <UART_SetConfig+0x210>
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3ea:	e082      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c3ec:	2302      	movs	r3, #2
 800c3ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3f2:	e07e      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c3f4:	2304      	movs	r3, #4
 800c3f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3fa:	e07a      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c3fc:	2308      	movs	r3, #8
 800c3fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c402:	e076      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c404:	2310      	movs	r3, #16
 800c406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c40a:	e072      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a35      	ldr	r2, [pc, #212]	@ (800c4e8 <UART_SetConfig+0x2f4>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d12a      	bne.n	800c46c <UART_SetConfig+0x278>
 800c416:	4b30      	ldr	r3, [pc, #192]	@ (800c4d8 <UART_SetConfig+0x2e4>)
 800c418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c41c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c420:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c424:	d01a      	beq.n	800c45c <UART_SetConfig+0x268>
 800c426:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c42a:	d81b      	bhi.n	800c464 <UART_SetConfig+0x270>
 800c42c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c430:	d00c      	beq.n	800c44c <UART_SetConfig+0x258>
 800c432:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c436:	d815      	bhi.n	800c464 <UART_SetConfig+0x270>
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d003      	beq.n	800c444 <UART_SetConfig+0x250>
 800c43c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c440:	d008      	beq.n	800c454 <UART_SetConfig+0x260>
 800c442:	e00f      	b.n	800c464 <UART_SetConfig+0x270>
 800c444:	2300      	movs	r3, #0
 800c446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c44a:	e052      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c44c:	2302      	movs	r3, #2
 800c44e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c452:	e04e      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c454:	2304      	movs	r3, #4
 800c456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c45a:	e04a      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c45c:	2308      	movs	r3, #8
 800c45e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c462:	e046      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c464:	2310      	movs	r3, #16
 800c466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c46a:	e042      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a17      	ldr	r2, [pc, #92]	@ (800c4d0 <UART_SetConfig+0x2dc>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d13a      	bne.n	800c4ec <UART_SetConfig+0x2f8>
 800c476:	4b18      	ldr	r3, [pc, #96]	@ (800c4d8 <UART_SetConfig+0x2e4>)
 800c478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c47c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c480:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c484:	d01a      	beq.n	800c4bc <UART_SetConfig+0x2c8>
 800c486:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c48a:	d81b      	bhi.n	800c4c4 <UART_SetConfig+0x2d0>
 800c48c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c490:	d00c      	beq.n	800c4ac <UART_SetConfig+0x2b8>
 800c492:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c496:	d815      	bhi.n	800c4c4 <UART_SetConfig+0x2d0>
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d003      	beq.n	800c4a4 <UART_SetConfig+0x2b0>
 800c49c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4a0:	d008      	beq.n	800c4b4 <UART_SetConfig+0x2c0>
 800c4a2:	e00f      	b.n	800c4c4 <UART_SetConfig+0x2d0>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4aa:	e022      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c4ac:	2302      	movs	r3, #2
 800c4ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4b2:	e01e      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c4b4:	2304      	movs	r3, #4
 800c4b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4ba:	e01a      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c4bc:	2308      	movs	r3, #8
 800c4be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4c2:	e016      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c4c4:	2310      	movs	r3, #16
 800c4c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4ca:	e012      	b.n	800c4f2 <UART_SetConfig+0x2fe>
 800c4cc:	cfff69f3 	.word	0xcfff69f3
 800c4d0:	40008000 	.word	0x40008000
 800c4d4:	40013800 	.word	0x40013800
 800c4d8:	40021000 	.word	0x40021000
 800c4dc:	40004400 	.word	0x40004400
 800c4e0:	40004800 	.word	0x40004800
 800c4e4:	40004c00 	.word	0x40004c00
 800c4e8:	40005000 	.word	0x40005000
 800c4ec:	2310      	movs	r3, #16
 800c4ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4aae      	ldr	r2, [pc, #696]	@ (800c7b0 <UART_SetConfig+0x5bc>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	f040 8097 	bne.w	800c62c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c4fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c502:	2b08      	cmp	r3, #8
 800c504:	d823      	bhi.n	800c54e <UART_SetConfig+0x35a>
 800c506:	a201      	add	r2, pc, #4	@ (adr r2, 800c50c <UART_SetConfig+0x318>)
 800c508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c50c:	0800c531 	.word	0x0800c531
 800c510:	0800c54f 	.word	0x0800c54f
 800c514:	0800c539 	.word	0x0800c539
 800c518:	0800c54f 	.word	0x0800c54f
 800c51c:	0800c53f 	.word	0x0800c53f
 800c520:	0800c54f 	.word	0x0800c54f
 800c524:	0800c54f 	.word	0x0800c54f
 800c528:	0800c54f 	.word	0x0800c54f
 800c52c:	0800c547 	.word	0x0800c547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c530:	f7fc f99a 	bl	8008868 <HAL_RCC_GetPCLK1Freq>
 800c534:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c536:	e010      	b.n	800c55a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c538:	4b9e      	ldr	r3, [pc, #632]	@ (800c7b4 <UART_SetConfig+0x5c0>)
 800c53a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c53c:	e00d      	b.n	800c55a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c53e:	f7fc f925 	bl	800878c <HAL_RCC_GetSysClockFreq>
 800c542:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c544:	e009      	b.n	800c55a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c546:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c54a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c54c:	e005      	b.n	800c55a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c54e:	2300      	movs	r3, #0
 800c550:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c552:	2301      	movs	r3, #1
 800c554:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c558:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f000 8130 	beq.w	800c7c2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c566:	4a94      	ldr	r2, [pc, #592]	@ (800c7b8 <UART_SetConfig+0x5c4>)
 800c568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c56c:	461a      	mov	r2, r3
 800c56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c570:	fbb3 f3f2 	udiv	r3, r3, r2
 800c574:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	685a      	ldr	r2, [r3, #4]
 800c57a:	4613      	mov	r3, r2
 800c57c:	005b      	lsls	r3, r3, #1
 800c57e:	4413      	add	r3, r2
 800c580:	69ba      	ldr	r2, [r7, #24]
 800c582:	429a      	cmp	r2, r3
 800c584:	d305      	bcc.n	800c592 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c58c:	69ba      	ldr	r2, [r7, #24]
 800c58e:	429a      	cmp	r2, r3
 800c590:	d903      	bls.n	800c59a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c592:	2301      	movs	r3, #1
 800c594:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c598:	e113      	b.n	800c7c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59c:	2200      	movs	r2, #0
 800c59e:	60bb      	str	r3, [r7, #8]
 800c5a0:	60fa      	str	r2, [r7, #12]
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5a6:	4a84      	ldr	r2, [pc, #528]	@ (800c7b8 <UART_SetConfig+0x5c4>)
 800c5a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	603b      	str	r3, [r7, #0]
 800c5b2:	607a      	str	r2, [r7, #4]
 800c5b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c5bc:	f7f4 fb6c 	bl	8000c98 <__aeabi_uldivmod>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	4610      	mov	r0, r2
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	f04f 0200 	mov.w	r2, #0
 800c5cc:	f04f 0300 	mov.w	r3, #0
 800c5d0:	020b      	lsls	r3, r1, #8
 800c5d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c5d6:	0202      	lsls	r2, r0, #8
 800c5d8:	6979      	ldr	r1, [r7, #20]
 800c5da:	6849      	ldr	r1, [r1, #4]
 800c5dc:	0849      	lsrs	r1, r1, #1
 800c5de:	2000      	movs	r0, #0
 800c5e0:	460c      	mov	r4, r1
 800c5e2:	4605      	mov	r5, r0
 800c5e4:	eb12 0804 	adds.w	r8, r2, r4
 800c5e8:	eb43 0905 	adc.w	r9, r3, r5
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	469a      	mov	sl, r3
 800c5f4:	4693      	mov	fp, r2
 800c5f6:	4652      	mov	r2, sl
 800c5f8:	465b      	mov	r3, fp
 800c5fa:	4640      	mov	r0, r8
 800c5fc:	4649      	mov	r1, r9
 800c5fe:	f7f4 fb4b 	bl	8000c98 <__aeabi_uldivmod>
 800c602:	4602      	mov	r2, r0
 800c604:	460b      	mov	r3, r1
 800c606:	4613      	mov	r3, r2
 800c608:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c60a:	6a3b      	ldr	r3, [r7, #32]
 800c60c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c610:	d308      	bcc.n	800c624 <UART_SetConfig+0x430>
 800c612:	6a3b      	ldr	r3, [r7, #32]
 800c614:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c618:	d204      	bcs.n	800c624 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	6a3a      	ldr	r2, [r7, #32]
 800c620:	60da      	str	r2, [r3, #12]
 800c622:	e0ce      	b.n	800c7c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c624:	2301      	movs	r3, #1
 800c626:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c62a:	e0ca      	b.n	800c7c2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	69db      	ldr	r3, [r3, #28]
 800c630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c634:	d166      	bne.n	800c704 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c636:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c63a:	2b08      	cmp	r3, #8
 800c63c:	d827      	bhi.n	800c68e <UART_SetConfig+0x49a>
 800c63e:	a201      	add	r2, pc, #4	@ (adr r2, 800c644 <UART_SetConfig+0x450>)
 800c640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c644:	0800c669 	.word	0x0800c669
 800c648:	0800c671 	.word	0x0800c671
 800c64c:	0800c679 	.word	0x0800c679
 800c650:	0800c68f 	.word	0x0800c68f
 800c654:	0800c67f 	.word	0x0800c67f
 800c658:	0800c68f 	.word	0x0800c68f
 800c65c:	0800c68f 	.word	0x0800c68f
 800c660:	0800c68f 	.word	0x0800c68f
 800c664:	0800c687 	.word	0x0800c687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c668:	f7fc f8fe 	bl	8008868 <HAL_RCC_GetPCLK1Freq>
 800c66c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c66e:	e014      	b.n	800c69a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c670:	f7fc f910 	bl	8008894 <HAL_RCC_GetPCLK2Freq>
 800c674:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c676:	e010      	b.n	800c69a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c678:	4b4e      	ldr	r3, [pc, #312]	@ (800c7b4 <UART_SetConfig+0x5c0>)
 800c67a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c67c:	e00d      	b.n	800c69a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c67e:	f7fc f885 	bl	800878c <HAL_RCC_GetSysClockFreq>
 800c682:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c684:	e009      	b.n	800c69a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c686:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c68a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c68c:	e005      	b.n	800c69a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c68e:	2300      	movs	r3, #0
 800c690:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c692:	2301      	movs	r3, #1
 800c694:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c698:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	f000 8090 	beq.w	800c7c2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6a6:	4a44      	ldr	r2, [pc, #272]	@ (800c7b8 <UART_SetConfig+0x5c4>)
 800c6a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6b4:	005a      	lsls	r2, r3, #1
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	085b      	lsrs	r3, r3, #1
 800c6bc:	441a      	add	r2, r3
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c6c8:	6a3b      	ldr	r3, [r7, #32]
 800c6ca:	2b0f      	cmp	r3, #15
 800c6cc:	d916      	bls.n	800c6fc <UART_SetConfig+0x508>
 800c6ce:	6a3b      	ldr	r3, [r7, #32]
 800c6d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6d4:	d212      	bcs.n	800c6fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c6d6:	6a3b      	ldr	r3, [r7, #32]
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	f023 030f 	bic.w	r3, r3, #15
 800c6de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c6e0:	6a3b      	ldr	r3, [r7, #32]
 800c6e2:	085b      	lsrs	r3, r3, #1
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	f003 0307 	and.w	r3, r3, #7
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	8bfb      	ldrh	r3, [r7, #30]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	8bfa      	ldrh	r2, [r7, #30]
 800c6f8:	60da      	str	r2, [r3, #12]
 800c6fa:	e062      	b.n	800c7c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c702:	e05e      	b.n	800c7c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c704:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c708:	2b08      	cmp	r3, #8
 800c70a:	d828      	bhi.n	800c75e <UART_SetConfig+0x56a>
 800c70c:	a201      	add	r2, pc, #4	@ (adr r2, 800c714 <UART_SetConfig+0x520>)
 800c70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c712:	bf00      	nop
 800c714:	0800c739 	.word	0x0800c739
 800c718:	0800c741 	.word	0x0800c741
 800c71c:	0800c749 	.word	0x0800c749
 800c720:	0800c75f 	.word	0x0800c75f
 800c724:	0800c74f 	.word	0x0800c74f
 800c728:	0800c75f 	.word	0x0800c75f
 800c72c:	0800c75f 	.word	0x0800c75f
 800c730:	0800c75f 	.word	0x0800c75f
 800c734:	0800c757 	.word	0x0800c757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c738:	f7fc f896 	bl	8008868 <HAL_RCC_GetPCLK1Freq>
 800c73c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c73e:	e014      	b.n	800c76a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c740:	f7fc f8a8 	bl	8008894 <HAL_RCC_GetPCLK2Freq>
 800c744:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c746:	e010      	b.n	800c76a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c748:	4b1a      	ldr	r3, [pc, #104]	@ (800c7b4 <UART_SetConfig+0x5c0>)
 800c74a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c74c:	e00d      	b.n	800c76a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c74e:	f7fc f81d 	bl	800878c <HAL_RCC_GetSysClockFreq>
 800c752:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c754:	e009      	b.n	800c76a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c756:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c75a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c75c:	e005      	b.n	800c76a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c75e:	2300      	movs	r3, #0
 800c760:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c768:	bf00      	nop
    }

    if (pclk != 0U)
 800c76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d028      	beq.n	800c7c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c774:	4a10      	ldr	r2, [pc, #64]	@ (800c7b8 <UART_SetConfig+0x5c4>)
 800c776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c77a:	461a      	mov	r2, r3
 800c77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	085b      	lsrs	r3, r3, #1
 800c788:	441a      	add	r2, r3
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c792:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c794:	6a3b      	ldr	r3, [r7, #32]
 800c796:	2b0f      	cmp	r3, #15
 800c798:	d910      	bls.n	800c7bc <UART_SetConfig+0x5c8>
 800c79a:	6a3b      	ldr	r3, [r7, #32]
 800c79c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7a0:	d20c      	bcs.n	800c7bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c7a2:	6a3b      	ldr	r3, [r7, #32]
 800c7a4:	b29a      	uxth	r2, r3
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	60da      	str	r2, [r3, #12]
 800c7ac:	e009      	b.n	800c7c2 <UART_SetConfig+0x5ce>
 800c7ae:	bf00      	nop
 800c7b0:	40008000 	.word	0x40008000
 800c7b4:	00f42400 	.word	0x00f42400
 800c7b8:	08014008 	.word	0x08014008
      }
      else
      {
        ret = HAL_ERROR;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c7de:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3730      	adds	r7, #48	@ 0x30
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c7ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7f8:	f003 0308 	and.w	r3, r3, #8
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d00a      	beq.n	800c816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	430a      	orrs	r2, r1
 800c814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c81a:	f003 0301 	and.w	r3, r3, #1
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d00a      	beq.n	800c838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	430a      	orrs	r2, r1
 800c836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c83c:	f003 0302 	and.w	r3, r3, #2
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00a      	beq.n	800c85a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	430a      	orrs	r2, r1
 800c858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c85e:	f003 0304 	and.w	r3, r3, #4
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00a      	beq.n	800c87c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	430a      	orrs	r2, r1
 800c87a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c880:	f003 0310 	and.w	r3, r3, #16
 800c884:	2b00      	cmp	r3, #0
 800c886:	d00a      	beq.n	800c89e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	430a      	orrs	r2, r1
 800c89c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8a2:	f003 0320 	and.w	r3, r3, #32
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00a      	beq.n	800c8c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	689b      	ldr	r3, [r3, #8]
 800c8b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	430a      	orrs	r2, r1
 800c8be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d01a      	beq.n	800c902 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	430a      	orrs	r2, r1
 800c8e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8ea:	d10a      	bne.n	800c902 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	430a      	orrs	r2, r1
 800c900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00a      	beq.n	800c924 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	430a      	orrs	r2, r1
 800c922:	605a      	str	r2, [r3, #4]
  }
}
 800c924:	bf00      	nop
 800c926:	370c      	adds	r7, #12
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b098      	sub	sp, #96	@ 0x60
 800c934:	af02      	add	r7, sp, #8
 800c936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c940:	f7f7 fb82 	bl	8004048 <HAL_GetTick>
 800c944:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f003 0308 	and.w	r3, r3, #8
 800c950:	2b08      	cmp	r3, #8
 800c952:	d12f      	bne.n	800c9b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c954:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c95c:	2200      	movs	r2, #0
 800c95e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 f88e 	bl	800ca84 <UART_WaitOnFlagUntilTimeout>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d022      	beq.n	800c9b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c976:	e853 3f00 	ldrex	r3, [r3]
 800c97a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c97c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c97e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c982:	653b      	str	r3, [r7, #80]	@ 0x50
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	461a      	mov	r2, r3
 800c98a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c98c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c98e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c990:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c992:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c994:	e841 2300 	strex	r3, r2, [r1]
 800c998:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c99a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d1e6      	bne.n	800c96e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2220      	movs	r2, #32
 800c9a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9b0:	2303      	movs	r3, #3
 800c9b2:	e063      	b.n	800ca7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f003 0304 	and.w	r3, r3, #4
 800c9be:	2b04      	cmp	r3, #4
 800c9c0:	d149      	bne.n	800ca56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c9c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c9c6:	9300      	str	r3, [sp, #0]
 800c9c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 f857 	bl	800ca84 <UART_WaitOnFlagUntilTimeout>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d03c      	beq.n	800ca56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e4:	e853 3f00 	ldrex	r3, [r3]
 800c9e8:	623b      	str	r3, [r7, #32]
   return(result);
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c9f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca02:	e841 2300 	strex	r3, r2, [r1]
 800ca06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d1e6      	bne.n	800c9dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	3308      	adds	r3, #8
 800ca14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	e853 3f00 	ldrex	r3, [r3]
 800ca1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f023 0301 	bic.w	r3, r3, #1
 800ca24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	3308      	adds	r3, #8
 800ca2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca2e:	61fa      	str	r2, [r7, #28]
 800ca30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca32:	69b9      	ldr	r1, [r7, #24]
 800ca34:	69fa      	ldr	r2, [r7, #28]
 800ca36:	e841 2300 	strex	r3, r2, [r1]
 800ca3a:	617b      	str	r3, [r7, #20]
   return(result);
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1e5      	bne.n	800ca0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2220      	movs	r2, #32
 800ca46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca52:	2303      	movs	r3, #3
 800ca54:	e012      	b.n	800ca7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2220      	movs	r2, #32
 800ca5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2220      	movs	r2, #32
 800ca62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2200      	movs	r2, #0
 800ca76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca7a:	2300      	movs	r3, #0
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3758      	adds	r7, #88	@ 0x58
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	603b      	str	r3, [r7, #0]
 800ca90:	4613      	mov	r3, r2
 800ca92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca94:	e04f      	b.n	800cb36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca96:	69bb      	ldr	r3, [r7, #24]
 800ca98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca9c:	d04b      	beq.n	800cb36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca9e:	f7f7 fad3 	bl	8004048 <HAL_GetTick>
 800caa2:	4602      	mov	r2, r0
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	1ad3      	subs	r3, r2, r3
 800caa8:	69ba      	ldr	r2, [r7, #24]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d302      	bcc.n	800cab4 <UART_WaitOnFlagUntilTimeout+0x30>
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d101      	bne.n	800cab8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cab4:	2303      	movs	r3, #3
 800cab6:	e04e      	b.n	800cb56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f003 0304 	and.w	r3, r3, #4
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d037      	beq.n	800cb36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	2b80      	cmp	r3, #128	@ 0x80
 800caca:	d034      	beq.n	800cb36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	2b40      	cmp	r3, #64	@ 0x40
 800cad0:	d031      	beq.n	800cb36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	69db      	ldr	r3, [r3, #28]
 800cad8:	f003 0308 	and.w	r3, r3, #8
 800cadc:	2b08      	cmp	r3, #8
 800cade:	d110      	bne.n	800cb02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	2208      	movs	r2, #8
 800cae6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	f000 f838 	bl	800cb5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2208      	movs	r2, #8
 800caf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2200      	movs	r2, #0
 800cafa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	e029      	b.n	800cb56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	69db      	ldr	r3, [r3, #28]
 800cb08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cb0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cb10:	d111      	bne.n	800cb36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cb1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cb1c:	68f8      	ldr	r0, [r7, #12]
 800cb1e:	f000 f81e 	bl	800cb5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2220      	movs	r2, #32
 800cb26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cb32:	2303      	movs	r3, #3
 800cb34:	e00f      	b.n	800cb56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	69da      	ldr	r2, [r3, #28]
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	4013      	ands	r3, r2
 800cb40:	68ba      	ldr	r2, [r7, #8]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	bf0c      	ite	eq
 800cb46:	2301      	moveq	r3, #1
 800cb48:	2300      	movne	r3, #0
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	79fb      	ldrb	r3, [r7, #7]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d0a0      	beq.n	800ca96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb5e:	b480      	push	{r7}
 800cb60:	b095      	sub	sp, #84	@ 0x54
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb6e:	e853 3f00 	ldrex	r3, [r3]
 800cb72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cb74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	461a      	mov	r2, r3
 800cb82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb84:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cb8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cb8c:	e841 2300 	strex	r3, r2, [r1]
 800cb90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1e6      	bne.n	800cb66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	3308      	adds	r3, #8
 800cb9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba0:	6a3b      	ldr	r3, [r7, #32]
 800cba2:	e853 3f00 	ldrex	r3, [r3]
 800cba6:	61fb      	str	r3, [r7, #28]
   return(result);
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cbae:	f023 0301 	bic.w	r3, r3, #1
 800cbb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	3308      	adds	r3, #8
 800cbba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cbbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cbbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cbc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbc4:	e841 2300 	strex	r3, r2, [r1]
 800cbc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d1e3      	bne.n	800cb98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d118      	bne.n	800cc0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	e853 3f00 	ldrex	r3, [r3]
 800cbe4:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	f023 0310 	bic.w	r3, r3, #16
 800cbec:	647b      	str	r3, [r7, #68]	@ 0x44
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbf6:	61bb      	str	r3, [r7, #24]
 800cbf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfa:	6979      	ldr	r1, [r7, #20]
 800cbfc:	69ba      	ldr	r2, [r7, #24]
 800cbfe:	e841 2300 	strex	r3, r2, [r1]
 800cc02:	613b      	str	r3, [r7, #16]
   return(result);
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d1e6      	bne.n	800cbd8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2220      	movs	r2, #32
 800cc0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cc1e:	bf00      	nop
 800cc20:	3754      	adds	r7, #84	@ 0x54
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr

0800cc2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b084      	sub	sp, #16
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc40:	68f8      	ldr	r0, [r7, #12]
 800cc42:	f7ff fac1 	bl	800c1c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc46:	bf00      	nop
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc4e:	b580      	push	{r7, lr}
 800cc50:	b088      	sub	sp, #32
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	e853 3f00 	ldrex	r3, [r3]
 800cc62:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc6a:	61fb      	str	r3, [r7, #28]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	461a      	mov	r2, r3
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	61bb      	str	r3, [r7, #24]
 800cc76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc78:	6979      	ldr	r1, [r7, #20]
 800cc7a:	69ba      	ldr	r2, [r7, #24]
 800cc7c:	e841 2300 	strex	r3, r2, [r1]
 800cc80:	613b      	str	r3, [r7, #16]
   return(result);
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d1e6      	bne.n	800cc56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2220      	movs	r2, #32
 800cc8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2200      	movs	r2, #0
 800cc94:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f7ff fa8c 	bl	800c1b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc9c:	bf00      	nop
 800cc9e:	3720      	adds	r7, #32
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ccac:	bf00      	nop
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ccc0:	bf00      	nop
 800ccc2:	370c      	adds	r7, #12
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ccd4:	bf00      	nop
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b085      	sub	sp, #20
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d101      	bne.n	800ccf6 <HAL_UARTEx_DisableFifoMode+0x16>
 800ccf2:	2302      	movs	r3, #2
 800ccf4:	e027      	b.n	800cd46 <HAL_UARTEx_DisableFifoMode+0x66>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2224      	movs	r2, #36	@ 0x24
 800cd02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f022 0201 	bic.w	r2, r2, #1
 800cd1c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cd24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2220      	movs	r2, #32
 800cd38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd44:	2300      	movs	r3, #0
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3714      	adds	r7, #20
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr

0800cd52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd52:	b580      	push	{r7, lr}
 800cd54:	b084      	sub	sp, #16
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
 800cd5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d101      	bne.n	800cd6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd66:	2302      	movs	r3, #2
 800cd68:	e02d      	b.n	800cdc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2224      	movs	r2, #36	@ 0x24
 800cd76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f022 0201 	bic.w	r2, r2, #1
 800cd90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	683a      	ldr	r2, [r7, #0]
 800cda2:	430a      	orrs	r2, r1
 800cda4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 f850 	bl	800ce4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	68fa      	ldr	r2, [r7, #12]
 800cdb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2220      	movs	r2, #32
 800cdb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cdc4:	2300      	movs	r3, #0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3710      	adds	r7, #16
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b084      	sub	sp, #16
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
 800cdd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d101      	bne.n	800cde6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cde2:	2302      	movs	r3, #2
 800cde4:	e02d      	b.n	800ce42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2201      	movs	r2, #1
 800cdea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2224      	movs	r2, #36	@ 0x24
 800cdf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	681a      	ldr	r2, [r3, #0]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f022 0201 	bic.w	r2, r2, #1
 800ce0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	683a      	ldr	r2, [r7, #0]
 800ce1e:	430a      	orrs	r2, r1
 800ce20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f812 	bl	800ce4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2220      	movs	r2, #32
 800ce34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce40:	2300      	movs	r3, #0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3710      	adds	r7, #16
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
	...

0800ce4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b085      	sub	sp, #20
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d108      	bne.n	800ce6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2201      	movs	r2, #1
 800ce68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ce6c:	e031      	b.n	800ced2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ce6e:	2308      	movs	r3, #8
 800ce70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ce72:	2308      	movs	r3, #8
 800ce74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	689b      	ldr	r3, [r3, #8]
 800ce7c:	0e5b      	lsrs	r3, r3, #25
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	f003 0307 	and.w	r3, r3, #7
 800ce84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	0f5b      	lsrs	r3, r3, #29
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	f003 0307 	and.w	r3, r3, #7
 800ce94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce96:	7bbb      	ldrb	r3, [r7, #14]
 800ce98:	7b3a      	ldrb	r2, [r7, #12]
 800ce9a:	4911      	ldr	r1, [pc, #68]	@ (800cee0 <UARTEx_SetNbDataToProcess+0x94>)
 800ce9c:	5c8a      	ldrb	r2, [r1, r2]
 800ce9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cea2:	7b3a      	ldrb	r2, [r7, #12]
 800cea4:	490f      	ldr	r1, [pc, #60]	@ (800cee4 <UARTEx_SetNbDataToProcess+0x98>)
 800cea6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cea8:	fb93 f3f2 	sdiv	r3, r3, r2
 800ceac:	b29a      	uxth	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ceb4:	7bfb      	ldrb	r3, [r7, #15]
 800ceb6:	7b7a      	ldrb	r2, [r7, #13]
 800ceb8:	4909      	ldr	r1, [pc, #36]	@ (800cee0 <UARTEx_SetNbDataToProcess+0x94>)
 800ceba:	5c8a      	ldrb	r2, [r1, r2]
 800cebc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cec0:	7b7a      	ldrb	r2, [r7, #13]
 800cec2:	4908      	ldr	r1, [pc, #32]	@ (800cee4 <UARTEx_SetNbDataToProcess+0x98>)
 800cec4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cec6:	fb93 f3f2 	sdiv	r3, r3, r2
 800ceca:	b29a      	uxth	r2, r3
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ced2:	bf00      	nop
 800ced4:	3714      	adds	r7, #20
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	08014020 	.word	0x08014020
 800cee4:	08014028 	.word	0x08014028

0800cee8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cef8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cefc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cf08:	2300      	movs	r3, #0
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3714      	adds	r7, #20
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr

0800cf16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800cf16:	b480      	push	{r7}
 800cf18:	b085      	sub	sp, #20
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cf1e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cf22:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cf2a:	b29a      	uxth	r2, r3
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	43db      	mvns	r3, r3
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	4013      	ands	r3, r2
 800cf36:	b29a      	uxth	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3714      	adds	r7, #20
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b085      	sub	sp, #20
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	1d3b      	adds	r3, r7, #4
 800cf56:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2200      	movs	r2, #0
 800cf66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2200      	movs	r2, #0
 800cf76:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800cf7a:	2300      	movs	r3, #0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3714      	adds	r7, #20
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b0a7      	sub	sp, #156	@ 0x9c
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800cf92:	2300      	movs	r3, #0
 800cf94:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	4413      	add	r3, r2
 800cfa2:	881b      	ldrh	r3, [r3, #0]
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800cfaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfae:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	78db      	ldrb	r3, [r3, #3]
 800cfb6:	2b03      	cmp	r3, #3
 800cfb8:	d81f      	bhi.n	800cffa <USB_ActivateEndpoint+0x72>
 800cfba:	a201      	add	r2, pc, #4	@ (adr r2, 800cfc0 <USB_ActivateEndpoint+0x38>)
 800cfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc0:	0800cfd1 	.word	0x0800cfd1
 800cfc4:	0800cfed 	.word	0x0800cfed
 800cfc8:	0800d003 	.word	0x0800d003
 800cfcc:	0800cfdf 	.word	0x0800cfdf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800cfd0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800cfd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cfd8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800cfdc:	e012      	b.n	800d004 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800cfde:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800cfe2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800cfe6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800cfea:	e00b      	b.n	800d004 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800cfec:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800cff0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cff4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800cff8:	e004      	b.n	800d004 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800cffa:	2301      	movs	r3, #1
 800cffc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800d000:	e000      	b.n	800d004 <USB_ActivateEndpoint+0x7c>
      break;
 800d002:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	441a      	add	r2, r3
 800d00e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800d012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d016:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d01a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d01e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d022:	b29b      	uxth	r3, r3
 800d024:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	4413      	add	r3, r2
 800d030:	881b      	ldrh	r3, [r3, #0]
 800d032:	b29b      	uxth	r3, r3
 800d034:	b21b      	sxth	r3, r3
 800d036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d03a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d03e:	b21a      	sxth	r2, r3
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	b21b      	sxth	r3, r3
 800d046:	4313      	orrs	r3, r2
 800d048:	b21b      	sxth	r3, r3
 800d04a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	441a      	add	r2, r3
 800d058:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800d05c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d06c:	b29b      	uxth	r3, r3
 800d06e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	7b1b      	ldrb	r3, [r3, #12]
 800d074:	2b00      	cmp	r3, #0
 800d076:	f040 8180 	bne.w	800d37a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	785b      	ldrb	r3, [r3, #1]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f000 8084 	beq.w	800d18c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	61bb      	str	r3, [r7, #24]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d08e:	b29b      	uxth	r3, r3
 800d090:	461a      	mov	r2, r3
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	4413      	add	r3, r2
 800d096:	61bb      	str	r3, [r7, #24]
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	00da      	lsls	r2, r3, #3
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d0a6:	617b      	str	r3, [r7, #20]
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	88db      	ldrh	r3, [r3, #6]
 800d0ac:	085b      	lsrs	r3, r3, #1
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	005b      	lsls	r3, r3, #1
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	4413      	add	r3, r2
 800d0c2:	881b      	ldrh	r3, [r3, #0]
 800d0c4:	827b      	strh	r3, [r7, #18]
 800d0c6:	8a7b      	ldrh	r3, [r7, #18]
 800d0c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d01b      	beq.n	800d108 <USB_ActivateEndpoint+0x180>
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	4413      	add	r3, r2
 800d0da:	881b      	ldrh	r3, [r3, #0]
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d0e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0e6:	823b      	strh	r3, [r7, #16]
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	441a      	add	r2, r3
 800d0f2:	8a3b      	ldrh	r3, [r7, #16]
 800d0f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d100:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d104:	b29b      	uxth	r3, r3
 800d106:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	78db      	ldrb	r3, [r3, #3]
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d020      	beq.n	800d152 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	4413      	add	r3, r2
 800d11a:	881b      	ldrh	r3, [r3, #0]
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d126:	81bb      	strh	r3, [r7, #12]
 800d128:	89bb      	ldrh	r3, [r7, #12]
 800d12a:	f083 0320 	eor.w	r3, r3, #32
 800d12e:	81bb      	strh	r3, [r7, #12]
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	441a      	add	r2, r3
 800d13a:	89bb      	ldrh	r3, [r7, #12]
 800d13c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d140:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d144:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	8013      	strh	r3, [r2, #0]
 800d150:	e3f9      	b.n	800d946 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4413      	add	r3, r2
 800d15c:	881b      	ldrh	r3, [r3, #0]
 800d15e:	b29b      	uxth	r3, r3
 800d160:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d168:	81fb      	strh	r3, [r7, #14]
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	441a      	add	r2, r3
 800d174:	89fb      	ldrh	r3, [r7, #14]
 800d176:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d17a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d17e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d186:	b29b      	uxth	r3, r3
 800d188:	8013      	strh	r3, [r2, #0]
 800d18a:	e3dc      	b.n	800d946 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d196:	b29b      	uxth	r3, r3
 800d198:	461a      	mov	r2, r3
 800d19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d19c:	4413      	add	r3, r2
 800d19e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	00da      	lsls	r2, r3, #3
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a8:	4413      	add	r3, r2
 800d1aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d1ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	88db      	ldrh	r3, [r3, #6]
 800d1b4:	085b      	lsrs	r3, r3, #1
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	005b      	lsls	r3, r3, #1
 800d1ba:	b29a      	uxth	r2, r3
 800d1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1be:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d0:	4413      	add	r3, r2
 800d1d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	00da      	lsls	r2, r3, #3
 800d1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1dc:	4413      	add	r3, r2
 800d1de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d1e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e6:	881b      	ldrh	r3, [r3, #0]
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1ee:	b29a      	uxth	r2, r3
 800d1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f2:	801a      	strh	r2, [r3, #0]
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d10a      	bne.n	800d212 <USB_ActivateEndpoint+0x28a>
 800d1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1fe:	881b      	ldrh	r3, [r3, #0]
 800d200:	b29b      	uxth	r3, r3
 800d202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d20a:	b29a      	uxth	r2, r3
 800d20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d20e:	801a      	strh	r2, [r3, #0]
 800d210:	e041      	b.n	800d296 <USB_ActivateEndpoint+0x30e>
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	691b      	ldr	r3, [r3, #16]
 800d216:	2b3e      	cmp	r3, #62	@ 0x3e
 800d218:	d81c      	bhi.n	800d254 <USB_ActivateEndpoint+0x2cc>
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	691b      	ldr	r3, [r3, #16]
 800d21e:	085b      	lsrs	r3, r3, #1
 800d220:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	691b      	ldr	r3, [r3, #16]
 800d228:	f003 0301 	and.w	r3, r3, #1
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d004      	beq.n	800d23a <USB_ActivateEndpoint+0x2b2>
 800d230:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d234:	3301      	adds	r3, #1
 800d236:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d23c:	881b      	ldrh	r3, [r3, #0]
 800d23e:	b29a      	uxth	r2, r3
 800d240:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d244:	b29b      	uxth	r3, r3
 800d246:	029b      	lsls	r3, r3, #10
 800d248:	b29b      	uxth	r3, r3
 800d24a:	4313      	orrs	r3, r2
 800d24c:	b29a      	uxth	r2, r3
 800d24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d250:	801a      	strh	r2, [r3, #0]
 800d252:	e020      	b.n	800d296 <USB_ActivateEndpoint+0x30e>
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	691b      	ldr	r3, [r3, #16]
 800d258:	095b      	lsrs	r3, r3, #5
 800d25a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	691b      	ldr	r3, [r3, #16]
 800d262:	f003 031f 	and.w	r3, r3, #31
 800d266:	2b00      	cmp	r3, #0
 800d268:	d104      	bne.n	800d274 <USB_ActivateEndpoint+0x2ec>
 800d26a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d26e:	3b01      	subs	r3, #1
 800d270:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d276:	881b      	ldrh	r3, [r3, #0]
 800d278:	b29a      	uxth	r2, r3
 800d27a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d27e:	b29b      	uxth	r3, r3
 800d280:	029b      	lsls	r3, r3, #10
 800d282:	b29b      	uxth	r3, r3
 800d284:	4313      	orrs	r3, r2
 800d286:	b29b      	uxth	r3, r3
 800d288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d28c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d290:	b29a      	uxth	r2, r3
 800d292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d294:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	009b      	lsls	r3, r3, #2
 800d29e:	4413      	add	r3, r2
 800d2a0:	881b      	ldrh	r3, [r3, #0]
 800d2a2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d2a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d2a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d01b      	beq.n	800d2e6 <USB_ActivateEndpoint+0x35e>
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	4413      	add	r3, r2
 800d2b8:	881b      	ldrh	r3, [r3, #0]
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d2c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2c4:	843b      	strh	r3, [r7, #32]
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	441a      	add	r2, r3
 800d2d0:	8c3b      	ldrh	r3, [r7, #32]
 800d2d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d2d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d2da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d2de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d124      	bne.n	800d338 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	4413      	add	r3, r2
 800d2f8:	881b      	ldrh	r3, [r3, #0]
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d304:	83bb      	strh	r3, [r7, #28]
 800d306:	8bbb      	ldrh	r3, [r7, #28]
 800d308:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d30c:	83bb      	strh	r3, [r7, #28]
 800d30e:	8bbb      	ldrh	r3, [r7, #28]
 800d310:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d314:	83bb      	strh	r3, [r7, #28]
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	441a      	add	r2, r3
 800d320:	8bbb      	ldrh	r3, [r7, #28]
 800d322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d32a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d32e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d332:	b29b      	uxth	r3, r3
 800d334:	8013      	strh	r3, [r2, #0]
 800d336:	e306      	b.n	800d946 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	4413      	add	r3, r2
 800d342:	881b      	ldrh	r3, [r3, #0]
 800d344:	b29b      	uxth	r3, r3
 800d346:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d34a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d34e:	83fb      	strh	r3, [r7, #30]
 800d350:	8bfb      	ldrh	r3, [r7, #30]
 800d352:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d356:	83fb      	strh	r3, [r7, #30]
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	781b      	ldrb	r3, [r3, #0]
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	441a      	add	r2, r3
 800d362:	8bfb      	ldrh	r3, [r7, #30]
 800d364:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d368:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d36c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d374:	b29b      	uxth	r3, r3
 800d376:	8013      	strh	r3, [r2, #0]
 800d378:	e2e5      	b.n	800d946 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	78db      	ldrb	r3, [r3, #3]
 800d37e:	2b02      	cmp	r3, #2
 800d380:	d11e      	bne.n	800d3c0 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	4413      	add	r3, r2
 800d38c:	881b      	ldrh	r3, [r3, #0]
 800d38e:	b29b      	uxth	r3, r3
 800d390:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d394:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d398:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	441a      	add	r2, r3
 800d3a6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800d3aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d3ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d3b2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d3b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	8013      	strh	r3, [r2, #0]
 800d3be:	e01d      	b.n	800d3fc <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	4413      	add	r3, r2
 800d3ca:	881b      	ldrh	r3, [r3, #0]
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d3d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3d6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	441a      	add	r2, r3
 800d3e4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800d3e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d3ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d3f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d406:	b29b      	uxth	r3, r3
 800d408:	461a      	mov	r2, r3
 800d40a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d40c:	4413      	add	r3, r2
 800d40e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	00da      	lsls	r2, r3, #3
 800d416:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d418:	4413      	add	r3, r2
 800d41a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d41e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	891b      	ldrh	r3, [r3, #8]
 800d424:	085b      	lsrs	r3, r3, #1
 800d426:	b29b      	uxth	r3, r3
 800d428:	005b      	lsls	r3, r3, #1
 800d42a:	b29a      	uxth	r2, r3
 800d42c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d42e:	801a      	strh	r2, [r3, #0]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	677b      	str	r3, [r7, #116]	@ 0x74
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	461a      	mov	r2, r3
 800d43e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d440:	4413      	add	r3, r2
 800d442:	677b      	str	r3, [r7, #116]	@ 0x74
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	00da      	lsls	r2, r3, #3
 800d44a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d44c:	4413      	add	r3, r2
 800d44e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d452:	673b      	str	r3, [r7, #112]	@ 0x70
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	895b      	ldrh	r3, [r3, #10]
 800d458:	085b      	lsrs	r3, r3, #1
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	005b      	lsls	r3, r3, #1
 800d45e:	b29a      	uxth	r2, r3
 800d460:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d462:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	785b      	ldrb	r3, [r3, #1]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	f040 81af 	bne.w	800d7cc <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	009b      	lsls	r3, r3, #2
 800d476:	4413      	add	r3, r2
 800d478:	881b      	ldrh	r3, [r3, #0]
 800d47a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800d47e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800d482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d486:	2b00      	cmp	r3, #0
 800d488:	d01d      	beq.n	800d4c6 <USB_ActivateEndpoint+0x53e>
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	009b      	lsls	r3, r3, #2
 800d492:	4413      	add	r3, r2
 800d494:	881b      	ldrh	r3, [r3, #0]
 800d496:	b29b      	uxth	r3, r3
 800d498:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d49c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4a0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800d4a4:	687a      	ldr	r2, [r7, #4]
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	009b      	lsls	r3, r3, #2
 800d4ac:	441a      	add	r2, r3
 800d4ae:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800d4b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d4b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d4ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d4be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	4413      	add	r3, r2
 800d4d0:	881b      	ldrh	r3, [r3, #0]
 800d4d2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800d4d6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800d4da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d01d      	beq.n	800d51e <USB_ActivateEndpoint+0x596>
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	4413      	add	r3, r2
 800d4ec:	881b      	ldrh	r3, [r3, #0]
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d4f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4f8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	441a      	add	r2, r3
 800d506:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800d50a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d50e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d516:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	785b      	ldrb	r3, [r3, #1]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d16b      	bne.n	800d5fe <USB_ActivateEndpoint+0x676>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d530:	b29b      	uxth	r3, r3
 800d532:	461a      	mov	r2, r3
 800d534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d536:	4413      	add	r3, r2
 800d538:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	00da      	lsls	r2, r3, #3
 800d540:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d542:	4413      	add	r3, r2
 800d544:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d548:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d54a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d54c:	881b      	ldrh	r3, [r3, #0]
 800d54e:	b29b      	uxth	r3, r3
 800d550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d554:	b29a      	uxth	r2, r3
 800d556:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d558:	801a      	strh	r2, [r3, #0]
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	691b      	ldr	r3, [r3, #16]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d10a      	bne.n	800d578 <USB_ActivateEndpoint+0x5f0>
 800d562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d564:	881b      	ldrh	r3, [r3, #0]
 800d566:	b29b      	uxth	r3, r3
 800d568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d56c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d570:	b29a      	uxth	r2, r3
 800d572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d574:	801a      	strh	r2, [r3, #0]
 800d576:	e05d      	b.n	800d634 <USB_ActivateEndpoint+0x6ac>
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	691b      	ldr	r3, [r3, #16]
 800d57c:	2b3e      	cmp	r3, #62	@ 0x3e
 800d57e:	d81c      	bhi.n	800d5ba <USB_ActivateEndpoint+0x632>
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	691b      	ldr	r3, [r3, #16]
 800d584:	085b      	lsrs	r3, r3, #1
 800d586:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	691b      	ldr	r3, [r3, #16]
 800d58e:	f003 0301 	and.w	r3, r3, #1
 800d592:	2b00      	cmp	r3, #0
 800d594:	d004      	beq.n	800d5a0 <USB_ActivateEndpoint+0x618>
 800d596:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d59a:	3301      	adds	r3, #1
 800d59c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d5a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5a2:	881b      	ldrh	r3, [r3, #0]
 800d5a4:	b29a      	uxth	r2, r3
 800d5a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	029b      	lsls	r3, r3, #10
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5b6:	801a      	strh	r2, [r3, #0]
 800d5b8:	e03c      	b.n	800d634 <USB_ActivateEndpoint+0x6ac>
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	691b      	ldr	r3, [r3, #16]
 800d5be:	095b      	lsrs	r3, r3, #5
 800d5c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	691b      	ldr	r3, [r3, #16]
 800d5c8:	f003 031f 	and.w	r3, r3, #31
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d104      	bne.n	800d5da <USB_ActivateEndpoint+0x652>
 800d5d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d5d4:	3b01      	subs	r3, #1
 800d5d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d5da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5dc:	881b      	ldrh	r3, [r3, #0]
 800d5de:	b29a      	uxth	r2, r3
 800d5e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	029b      	lsls	r3, r3, #10
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	b29b      	uxth	r3, r3
 800d5ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5f6:	b29a      	uxth	r2, r3
 800d5f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5fa:	801a      	strh	r2, [r3, #0]
 800d5fc:	e01a      	b.n	800d634 <USB_ActivateEndpoint+0x6ac>
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	785b      	ldrb	r3, [r3, #1]
 800d602:	2b01      	cmp	r3, #1
 800d604:	d116      	bne.n	800d634 <USB_ActivateEndpoint+0x6ac>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	657b      	str	r3, [r7, #84]	@ 0x54
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d610:	b29b      	uxth	r3, r3
 800d612:	461a      	mov	r2, r3
 800d614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d616:	4413      	add	r3, r2
 800d618:	657b      	str	r3, [r7, #84]	@ 0x54
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	00da      	lsls	r2, r3, #3
 800d620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d622:	4413      	add	r3, r2
 800d624:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d628:	653b      	str	r3, [r7, #80]	@ 0x50
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	691b      	ldr	r3, [r3, #16]
 800d62e:	b29a      	uxth	r2, r3
 800d630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d632:	801a      	strh	r2, [r3, #0]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	647b      	str	r3, [r7, #68]	@ 0x44
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	785b      	ldrb	r3, [r3, #1]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d16b      	bne.n	800d718 <USB_ActivateEndpoint+0x790>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	461a      	mov	r2, r3
 800d64e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d650:	4413      	add	r3, r2
 800d652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	00da      	lsls	r2, r3, #3
 800d65a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d65c:	4413      	add	r3, r2
 800d65e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d662:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d666:	881b      	ldrh	r3, [r3, #0]
 800d668:	b29b      	uxth	r3, r3
 800d66a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d66e:	b29a      	uxth	r2, r3
 800d670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d672:	801a      	strh	r2, [r3, #0]
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	691b      	ldr	r3, [r3, #16]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d10a      	bne.n	800d692 <USB_ActivateEndpoint+0x70a>
 800d67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d67e:	881b      	ldrh	r3, [r3, #0]
 800d680:	b29b      	uxth	r3, r3
 800d682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d68e:	801a      	strh	r2, [r3, #0]
 800d690:	e05b      	b.n	800d74a <USB_ActivateEndpoint+0x7c2>
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	691b      	ldr	r3, [r3, #16]
 800d696:	2b3e      	cmp	r3, #62	@ 0x3e
 800d698:	d81c      	bhi.n	800d6d4 <USB_ActivateEndpoint+0x74c>
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	691b      	ldr	r3, [r3, #16]
 800d69e:	085b      	lsrs	r3, r3, #1
 800d6a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	691b      	ldr	r3, [r3, #16]
 800d6a8:	f003 0301 	and.w	r3, r3, #1
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d004      	beq.n	800d6ba <USB_ActivateEndpoint+0x732>
 800d6b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6bc:	881b      	ldrh	r3, [r3, #0]
 800d6be:	b29a      	uxth	r2, r3
 800d6c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	029b      	lsls	r3, r3, #10
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	b29a      	uxth	r2, r3
 800d6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6d0:	801a      	strh	r2, [r3, #0]
 800d6d2:	e03a      	b.n	800d74a <USB_ActivateEndpoint+0x7c2>
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	691b      	ldr	r3, [r3, #16]
 800d6d8:	095b      	lsrs	r3, r3, #5
 800d6da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	691b      	ldr	r3, [r3, #16]
 800d6e2:	f003 031f 	and.w	r3, r3, #31
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d104      	bne.n	800d6f4 <USB_ActivateEndpoint+0x76c>
 800d6ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f6:	881b      	ldrh	r3, [r3, #0]
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	029b      	lsls	r3, r3, #10
 800d702:	b29b      	uxth	r3, r3
 800d704:	4313      	orrs	r3, r2
 800d706:	b29b      	uxth	r3, r3
 800d708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d70c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d710:	b29a      	uxth	r2, r3
 800d712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d714:	801a      	strh	r2, [r3, #0]
 800d716:	e018      	b.n	800d74a <USB_ActivateEndpoint+0x7c2>
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	785b      	ldrb	r3, [r3, #1]
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d114      	bne.n	800d74a <USB_ActivateEndpoint+0x7c2>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d726:	b29b      	uxth	r3, r3
 800d728:	461a      	mov	r2, r3
 800d72a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d72c:	4413      	add	r3, r2
 800d72e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	00da      	lsls	r2, r3, #3
 800d736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d738:	4413      	add	r3, r2
 800d73a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d73e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	691b      	ldr	r3, [r3, #16]
 800d744:	b29a      	uxth	r2, r3
 800d746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d748:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	4413      	add	r3, r2
 800d754:	881b      	ldrh	r3, [r3, #0]
 800d756:	b29b      	uxth	r3, r3
 800d758:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d75c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d760:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d762:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d764:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d768:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d76a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d76c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d770:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	441a      	add	r2, r3
 800d77c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d77e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d782:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d786:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d78a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d78e:	b29b      	uxth	r3, r3
 800d790:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	4413      	add	r3, r2
 800d79c:	881b      	ldrh	r3, [r3, #0]
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7a8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	441a      	add	r2, r3
 800d7b4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d7b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	8013      	strh	r3, [r2, #0]
 800d7ca:	e0bc      	b.n	800d946 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d7cc:	687a      	ldr	r2, [r7, #4]
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	009b      	lsls	r3, r3, #2
 800d7d4:	4413      	add	r3, r2
 800d7d6:	881b      	ldrh	r3, [r3, #0]
 800d7d8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800d7dc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d7e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d01d      	beq.n	800d824 <USB_ActivateEndpoint+0x89c>
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	4413      	add	r3, r2
 800d7f2:	881b      	ldrh	r3, [r3, #0]
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7fe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	441a      	add	r2, r3
 800d80c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d810:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d814:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d818:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d81c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d820:	b29b      	uxth	r3, r3
 800d822:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	4413      	add	r3, r2
 800d82e:	881b      	ldrh	r3, [r3, #0]
 800d830:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800d834:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800d838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d01d      	beq.n	800d87c <USB_ActivateEndpoint+0x8f4>
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	4413      	add	r3, r2
 800d84a:	881b      	ldrh	r3, [r3, #0]
 800d84c:	b29b      	uxth	r3, r3
 800d84e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d856:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	009b      	lsls	r3, r3, #2
 800d862:	441a      	add	r2, r3
 800d864:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800d868:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d86c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d870:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d874:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d878:	b29b      	uxth	r3, r3
 800d87a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	78db      	ldrb	r3, [r3, #3]
 800d880:	2b01      	cmp	r3, #1
 800d882:	d024      	beq.n	800d8ce <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	4413      	add	r3, r2
 800d88e:	881b      	ldrh	r3, [r3, #0]
 800d890:	b29b      	uxth	r3, r3
 800d892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d896:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d89a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d89e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d8a2:	f083 0320 	eor.w	r3, r3, #32
 800d8a6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	009b      	lsls	r3, r3, #2
 800d8b2:	441a      	add	r2, r3
 800d8b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d8b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d8c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	8013      	strh	r3, [r2, #0]
 800d8cc:	e01d      	b.n	800d90a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	4413      	add	r3, r2
 800d8d8:	881b      	ldrh	r3, [r3, #0]
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d8e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8e4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d8e8:	687a      	ldr	r2, [r7, #4]
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	009b      	lsls	r3, r3, #2
 800d8f0:	441a      	add	r2, r3
 800d8f2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800d8f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d906:	b29b      	uxth	r3, r3
 800d908:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d90a:	687a      	ldr	r2, [r7, #4]
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	781b      	ldrb	r3, [r3, #0]
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	4413      	add	r3, r2
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	b29b      	uxth	r3, r3
 800d918:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d91c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d920:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	441a      	add	r2, r3
 800d92e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d93a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d93e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d942:	b29b      	uxth	r3, r3
 800d944:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d946:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	379c      	adds	r7, #156	@ 0x9c
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop

0800d958 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b0ac      	sub	sp, #176	@ 0xb0
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	785b      	ldrb	r3, [r3, #1]
 800d966:	2b01      	cmp	r3, #1
 800d968:	f040 84ca 	bne.w	800e300 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	699a      	ldr	r2, [r3, #24]
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	691b      	ldr	r3, [r3, #16]
 800d974:	429a      	cmp	r2, r3
 800d976:	d904      	bls.n	800d982 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	691b      	ldr	r3, [r3, #16]
 800d97c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d980:	e003      	b.n	800d98a <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	699b      	ldr	r3, [r3, #24]
 800d986:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	7b1b      	ldrb	r3, [r3, #12]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d122      	bne.n	800d9d8 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	6959      	ldr	r1, [r3, #20]
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	88da      	ldrh	r2, [r3, #6]
 800d99a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 fed2 	bl	800e74a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	613b      	str	r3, [r7, #16]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	4413      	add	r3, r2
 800d9b8:	613b      	str	r3, [r7, #16]
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	00da      	lsls	r2, r3, #3
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	4413      	add	r3, r2
 800d9c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d9c8:	60fb      	str	r3, [r7, #12]
 800d9ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9ce:	b29a      	uxth	r2, r3
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	801a      	strh	r2, [r3, #0]
 800d9d4:	f000 bc6f 	b.w	800e2b6 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	78db      	ldrb	r3, [r3, #3]
 800d9dc:	2b02      	cmp	r3, #2
 800d9de:	f040 831e 	bne.w	800e01e <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	6a1a      	ldr	r2, [r3, #32]
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	f240 82cf 	bls.w	800df8e <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d9f0:	687a      	ldr	r2, [r7, #4]
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	4413      	add	r3, r2
 800d9fa:	881b      	ldrh	r3, [r3, #0]
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da06:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	009b      	lsls	r3, r3, #2
 800da12:	441a      	add	r2, r3
 800da14:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800da18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da20:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800da24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da28:	b29b      	uxth	r3, r3
 800da2a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	6a1a      	ldr	r2, [r3, #32]
 800da30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da34:	1ad2      	subs	r2, r2, r3
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800da3a:	687a      	ldr	r2, [r7, #4]
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	009b      	lsls	r3, r3, #2
 800da42:	4413      	add	r3, r2
 800da44:	881b      	ldrh	r3, [r3, #0]
 800da46:	b29b      	uxth	r3, r3
 800da48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	f000 814f 	beq.w	800dcf0 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	633b      	str	r3, [r7, #48]	@ 0x30
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	785b      	ldrb	r3, [r3, #1]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d16b      	bne.n	800db36 <USB_EPStartXfer+0x1de>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	62bb      	str	r3, [r7, #40]	@ 0x28
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da68:	b29b      	uxth	r3, r3
 800da6a:	461a      	mov	r2, r3
 800da6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da6e:	4413      	add	r3, r2
 800da70:	62bb      	str	r3, [r7, #40]	@ 0x28
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	00da      	lsls	r2, r3, #3
 800da78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da7a:	4413      	add	r3, r2
 800da7c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800da80:	627b      	str	r3, [r7, #36]	@ 0x24
 800da82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da84:	881b      	ldrh	r3, [r3, #0]
 800da86:	b29b      	uxth	r3, r3
 800da88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da8c:	b29a      	uxth	r2, r3
 800da8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da90:	801a      	strh	r2, [r3, #0]
 800da92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da96:	2b00      	cmp	r3, #0
 800da98:	d10a      	bne.n	800dab0 <USB_EPStartXfer+0x158>
 800da9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da9c:	881b      	ldrh	r3, [r3, #0]
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800daa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800daa8:	b29a      	uxth	r2, r3
 800daaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daac:	801a      	strh	r2, [r3, #0]
 800daae:	e05b      	b.n	800db68 <USB_EPStartXfer+0x210>
 800dab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dab4:	2b3e      	cmp	r3, #62	@ 0x3e
 800dab6:	d81c      	bhi.n	800daf2 <USB_EPStartXfer+0x19a>
 800dab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dabc:	085b      	lsrs	r3, r3, #1
 800dabe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800dac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dac6:	f003 0301 	and.w	r3, r3, #1
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d004      	beq.n	800dad8 <USB_EPStartXfer+0x180>
 800dace:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dad2:	3301      	adds	r3, #1
 800dad4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800dad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dada:	881b      	ldrh	r3, [r3, #0]
 800dadc:	b29a      	uxth	r2, r3
 800dade:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	029b      	lsls	r3, r3, #10
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	4313      	orrs	r3, r2
 800daea:	b29a      	uxth	r2, r3
 800daec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daee:	801a      	strh	r2, [r3, #0]
 800daf0:	e03a      	b.n	800db68 <USB_EPStartXfer+0x210>
 800daf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800daf6:	095b      	lsrs	r3, r3, #5
 800daf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800dafc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db00:	f003 031f 	and.w	r3, r3, #31
 800db04:	2b00      	cmp	r3, #0
 800db06:	d104      	bne.n	800db12 <USB_EPStartXfer+0x1ba>
 800db08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800db0c:	3b01      	subs	r3, #1
 800db0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800db12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db14:	881b      	ldrh	r3, [r3, #0]
 800db16:	b29a      	uxth	r2, r3
 800db18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	029b      	lsls	r3, r3, #10
 800db20:	b29b      	uxth	r3, r3
 800db22:	4313      	orrs	r3, r2
 800db24:	b29b      	uxth	r3, r3
 800db26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db2e:	b29a      	uxth	r2, r3
 800db30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db32:	801a      	strh	r2, [r3, #0]
 800db34:	e018      	b.n	800db68 <USB_EPStartXfer+0x210>
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	785b      	ldrb	r3, [r3, #1]
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d114      	bne.n	800db68 <USB_EPStartXfer+0x210>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db44:	b29b      	uxth	r3, r3
 800db46:	461a      	mov	r2, r3
 800db48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db4a:	4413      	add	r3, r2
 800db4c:	633b      	str	r3, [r7, #48]	@ 0x30
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	00da      	lsls	r2, r3, #3
 800db54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db56:	4413      	add	r3, r2
 800db58:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800db5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db62:	b29a      	uxth	r2, r3
 800db64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db66:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	895b      	ldrh	r3, [r3, #10]
 800db6c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	6959      	ldr	r1, [r3, #20]
 800db74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db78:	b29b      	uxth	r3, r3
 800db7a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 fde3 	bl	800e74a <USB_WritePMA>
            ep->xfer_buff += len;
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	695a      	ldr	r2, [r3, #20]
 800db88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db8c:	441a      	add	r2, r3
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	6a1a      	ldr	r2, [r3, #32]
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	691b      	ldr	r3, [r3, #16]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d907      	bls.n	800dbae <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	6a1a      	ldr	r2, [r3, #32]
 800dba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dba6:	1ad2      	subs	r2, r2, r3
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	621a      	str	r2, [r3, #32]
 800dbac:	e006      	b.n	800dbbc <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	6a1b      	ldr	r3, [r3, #32]
 800dbb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	785b      	ldrb	r3, [r3, #1]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d16b      	bne.n	800dc9c <USB_EPStartXfer+0x344>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	61bb      	str	r3, [r7, #24]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	69bb      	ldr	r3, [r7, #24]
 800dbd4:	4413      	add	r3, r2
 800dbd6:	61bb      	str	r3, [r7, #24]
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	00da      	lsls	r2, r3, #3
 800dbde:	69bb      	ldr	r3, [r7, #24]
 800dbe0:	4413      	add	r3, r2
 800dbe2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dbe6:	617b      	str	r3, [r7, #20]
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	881b      	ldrh	r3, [r3, #0]
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dbf2:	b29a      	uxth	r2, r3
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	801a      	strh	r2, [r3, #0]
 800dbf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d10a      	bne.n	800dc16 <USB_EPStartXfer+0x2be>
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	881b      	ldrh	r3, [r3, #0]
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	801a      	strh	r2, [r3, #0]
 800dc14:	e05d      	b.n	800dcd2 <USB_EPStartXfer+0x37a>
 800dc16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc1a:	2b3e      	cmp	r3, #62	@ 0x3e
 800dc1c:	d81c      	bhi.n	800dc58 <USB_EPStartXfer+0x300>
 800dc1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc22:	085b      	lsrs	r3, r3, #1
 800dc24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dc28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc2c:	f003 0301 	and.w	r3, r3, #1
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d004      	beq.n	800dc3e <USB_EPStartXfer+0x2e6>
 800dc34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dc38:	3301      	adds	r3, #1
 800dc3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	881b      	ldrh	r3, [r3, #0]
 800dc42:	b29a      	uxth	r2, r3
 800dc44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	029b      	lsls	r3, r3, #10
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	801a      	strh	r2, [r3, #0]
 800dc56:	e03c      	b.n	800dcd2 <USB_EPStartXfer+0x37a>
 800dc58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc5c:	095b      	lsrs	r3, r3, #5
 800dc5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dc62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc66:	f003 031f 	and.w	r3, r3, #31
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d104      	bne.n	800dc78 <USB_EPStartXfer+0x320>
 800dc6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dc72:	3b01      	subs	r3, #1
 800dc74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	881b      	ldrh	r3, [r3, #0]
 800dc7c:	b29a      	uxth	r2, r3
 800dc7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	029b      	lsls	r3, r3, #10
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc94:	b29a      	uxth	r2, r3
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	801a      	strh	r2, [r3, #0]
 800dc9a:	e01a      	b.n	800dcd2 <USB_EPStartXfer+0x37a>
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	785b      	ldrb	r3, [r3, #1]
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d116      	bne.n	800dcd2 <USB_EPStartXfer+0x37a>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	623b      	str	r3, [r7, #32]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	6a3b      	ldr	r3, [r7, #32]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	623b      	str	r3, [r7, #32]
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	781b      	ldrb	r3, [r3, #0]
 800dcbc:	00da      	lsls	r2, r3, #3
 800dcbe:	6a3b      	ldr	r3, [r7, #32]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dcc6:	61fb      	str	r3, [r7, #28]
 800dcc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dccc:	b29a      	uxth	r2, r3
 800dcce:	69fb      	ldr	r3, [r7, #28]
 800dcd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	891b      	ldrh	r3, [r3, #8]
 800dcd6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	6959      	ldr	r1, [r3, #20]
 800dcde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 fd2e 	bl	800e74a <USB_WritePMA>
 800dcee:	e2e2      	b.n	800e2b6 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	785b      	ldrb	r3, [r3, #1]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d16b      	bne.n	800ddd0 <USB_EPStartXfer+0x478>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	461a      	mov	r2, r3
 800dd06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd08:	4413      	add	r3, r2
 800dd0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	00da      	lsls	r2, r3, #3
 800dd12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd14:	4413      	add	r3, r2
 800dd16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dd1a:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd1e:	881b      	ldrh	r3, [r3, #0]
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd2a:	801a      	strh	r2, [r3, #0]
 800dd2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d10a      	bne.n	800dd4a <USB_EPStartXfer+0x3f2>
 800dd34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd36:	881b      	ldrh	r3, [r3, #0]
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd46:	801a      	strh	r2, [r3, #0]
 800dd48:	e05d      	b.n	800de06 <USB_EPStartXfer+0x4ae>
 800dd4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd4e:	2b3e      	cmp	r3, #62	@ 0x3e
 800dd50:	d81c      	bhi.n	800dd8c <USB_EPStartXfer+0x434>
 800dd52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd56:	085b      	lsrs	r3, r3, #1
 800dd58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dd5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd60:	f003 0301 	and.w	r3, r3, #1
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d004      	beq.n	800dd72 <USB_EPStartXfer+0x41a>
 800dd68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dd72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd74:	881b      	ldrh	r3, [r3, #0]
 800dd76:	b29a      	uxth	r2, r3
 800dd78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	029b      	lsls	r3, r3, #10
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	4313      	orrs	r3, r2
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd88:	801a      	strh	r2, [r3, #0]
 800dd8a:	e03c      	b.n	800de06 <USB_EPStartXfer+0x4ae>
 800dd8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd90:	095b      	lsrs	r3, r3, #5
 800dd92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dd96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd9a:	f003 031f 	and.w	r3, r3, #31
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d104      	bne.n	800ddac <USB_EPStartXfer+0x454>
 800dda2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dda6:	3b01      	subs	r3, #1
 800dda8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ddac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddae:	881b      	ldrh	r3, [r3, #0]
 800ddb0:	b29a      	uxth	r2, r3
 800ddb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	029b      	lsls	r3, r3, #10
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddc8:	b29a      	uxth	r2, r3
 800ddca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddcc:	801a      	strh	r2, [r3, #0]
 800ddce:	e01a      	b.n	800de06 <USB_EPStartXfer+0x4ae>
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	785b      	ldrb	r3, [r3, #1]
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d116      	bne.n	800de06 <USB_EPStartXfer+0x4ae>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	653b      	str	r3, [r7, #80]	@ 0x50
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	461a      	mov	r2, r3
 800dde6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dde8:	4413      	add	r3, r2
 800ddea:	653b      	str	r3, [r7, #80]	@ 0x50
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	00da      	lsls	r2, r3, #3
 800ddf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddf4:	4413      	add	r3, r2
 800ddf6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ddfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ddfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de00:	b29a      	uxth	r2, r3
 800de02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	891b      	ldrh	r3, [r3, #8]
 800de0a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	6959      	ldr	r1, [r3, #20]
 800de12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de16:	b29b      	uxth	r3, r3
 800de18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 fc94 	bl	800e74a <USB_WritePMA>
            ep->xfer_buff += len;
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	695a      	ldr	r2, [r3, #20]
 800de26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de2a:	441a      	add	r2, r3
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	6a1a      	ldr	r2, [r3, #32]
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	691b      	ldr	r3, [r3, #16]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d907      	bls.n	800de4c <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	6a1a      	ldr	r2, [r3, #32]
 800de40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de44:	1ad2      	subs	r2, r2, r3
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	621a      	str	r2, [r3, #32]
 800de4a:	e006      	b.n	800de5a <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	6a1b      	ldr	r3, [r3, #32]
 800de50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	2200      	movs	r2, #0
 800de58:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	643b      	str	r3, [r7, #64]	@ 0x40
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	785b      	ldrb	r3, [r3, #1]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d16b      	bne.n	800df3e <USB_EPStartXfer+0x5e6>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	63bb      	str	r3, [r7, #56]	@ 0x38
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de70:	b29b      	uxth	r3, r3
 800de72:	461a      	mov	r2, r3
 800de74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de76:	4413      	add	r3, r2
 800de78:	63bb      	str	r3, [r7, #56]	@ 0x38
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	00da      	lsls	r2, r3, #3
 800de80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de82:	4413      	add	r3, r2
 800de84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800de88:	637b      	str	r3, [r7, #52]	@ 0x34
 800de8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de8c:	881b      	ldrh	r3, [r3, #0]
 800de8e:	b29b      	uxth	r3, r3
 800de90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de94:	b29a      	uxth	r2, r3
 800de96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de98:	801a      	strh	r2, [r3, #0]
 800de9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d10a      	bne.n	800deb8 <USB_EPStartXfer+0x560>
 800dea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dea4:	881b      	ldrh	r3, [r3, #0]
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800deac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800deb4:	801a      	strh	r2, [r3, #0]
 800deb6:	e05b      	b.n	800df70 <USB_EPStartXfer+0x618>
 800deb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800debc:	2b3e      	cmp	r3, #62	@ 0x3e
 800debe:	d81c      	bhi.n	800defa <USB_EPStartXfer+0x5a2>
 800dec0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dec4:	085b      	lsrs	r3, r3, #1
 800dec6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800deca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dece:	f003 0301 	and.w	r3, r3, #1
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d004      	beq.n	800dee0 <USB_EPStartXfer+0x588>
 800ded6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800deda:	3301      	adds	r3, #1
 800dedc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dee2:	881b      	ldrh	r3, [r3, #0]
 800dee4:	b29a      	uxth	r2, r3
 800dee6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800deea:	b29b      	uxth	r3, r3
 800deec:	029b      	lsls	r3, r3, #10
 800deee:	b29b      	uxth	r3, r3
 800def0:	4313      	orrs	r3, r2
 800def2:	b29a      	uxth	r2, r3
 800def4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800def6:	801a      	strh	r2, [r3, #0]
 800def8:	e03a      	b.n	800df70 <USB_EPStartXfer+0x618>
 800defa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800defe:	095b      	lsrs	r3, r3, #5
 800df00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800df04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df08:	f003 031f 	and.w	r3, r3, #31
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d104      	bne.n	800df1a <USB_EPStartXfer+0x5c2>
 800df10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800df14:	3b01      	subs	r3, #1
 800df16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800df1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df1c:	881b      	ldrh	r3, [r3, #0]
 800df1e:	b29a      	uxth	r2, r3
 800df20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800df24:	b29b      	uxth	r3, r3
 800df26:	029b      	lsls	r3, r3, #10
 800df28:	b29b      	uxth	r3, r3
 800df2a:	4313      	orrs	r3, r2
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df36:	b29a      	uxth	r2, r3
 800df38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df3a:	801a      	strh	r2, [r3, #0]
 800df3c:	e018      	b.n	800df70 <USB_EPStartXfer+0x618>
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	785b      	ldrb	r3, [r3, #1]
 800df42:	2b01      	cmp	r3, #1
 800df44:	d114      	bne.n	800df70 <USB_EPStartXfer+0x618>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	461a      	mov	r2, r3
 800df50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800df52:	4413      	add	r3, r2
 800df54:	643b      	str	r3, [r7, #64]	@ 0x40
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	00da      	lsls	r2, r3, #3
 800df5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800df5e:	4413      	add	r3, r2
 800df60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800df64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df6e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	895b      	ldrh	r3, [r3, #10]
 800df74:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	6959      	ldr	r1, [r3, #20]
 800df7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df80:	b29b      	uxth	r3, r3
 800df82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f000 fbdf 	bl	800e74a <USB_WritePMA>
 800df8c:	e193      	b.n	800e2b6 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	6a1b      	ldr	r3, [r3, #32]
 800df92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	4413      	add	r3, r2
 800dfa0:	881b      	ldrh	r3, [r3, #0]
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800dfa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dfac:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	441a      	add	r2, r3
 800dfba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800dfbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dfc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dfc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dfca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	461a      	mov	r2, r3
 800dfe0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfe2:	4413      	add	r3, r2
 800dfe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	00da      	lsls	r2, r3, #3
 800dfec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfee:	4413      	add	r3, r2
 800dff0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dff4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dffa:	b29a      	uxth	r2, r3
 800dffc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dffe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	891b      	ldrh	r3, [r3, #8]
 800e004:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	6959      	ldr	r1, [r3, #20]
 800e00c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e010:	b29b      	uxth	r3, r3
 800e012:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 fb97 	bl	800e74a <USB_WritePMA>
 800e01c:	e14b      	b.n	800e2b6 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	6a1a      	ldr	r2, [r3, #32]
 800e022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e026:	1ad2      	subs	r2, r2, r3
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	4413      	add	r3, r2
 800e036:	881b      	ldrh	r3, [r3, #0]
 800e038:	b29b      	uxth	r3, r3
 800e03a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e03e:	2b00      	cmp	r3, #0
 800e040:	f000 809a 	beq.w	800e178 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	673b      	str	r3, [r7, #112]	@ 0x70
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	785b      	ldrb	r3, [r3, #1]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d16b      	bne.n	800e128 <USB_EPStartXfer+0x7d0>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	461a      	mov	r2, r3
 800e05e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e060:	4413      	add	r3, r2
 800e062:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	00da      	lsls	r2, r3, #3
 800e06a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e06c:	4413      	add	r3, r2
 800e06e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e072:	667b      	str	r3, [r7, #100]	@ 0x64
 800e074:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e076:	881b      	ldrh	r3, [r3, #0]
 800e078:	b29b      	uxth	r3, r3
 800e07a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e07e:	b29a      	uxth	r2, r3
 800e080:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e082:	801a      	strh	r2, [r3, #0]
 800e084:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d10a      	bne.n	800e0a2 <USB_EPStartXfer+0x74a>
 800e08c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e08e:	881b      	ldrh	r3, [r3, #0]
 800e090:	b29b      	uxth	r3, r3
 800e092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e09a:	b29a      	uxth	r2, r3
 800e09c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e09e:	801a      	strh	r2, [r3, #0]
 800e0a0:	e05b      	b.n	800e15a <USB_EPStartXfer+0x802>
 800e0a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0a6:	2b3e      	cmp	r3, #62	@ 0x3e
 800e0a8:	d81c      	bhi.n	800e0e4 <USB_EPStartXfer+0x78c>
 800e0aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0ae:	085b      	lsrs	r3, r3, #1
 800e0b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e0b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0b8:	f003 0301 	and.w	r3, r3, #1
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d004      	beq.n	800e0ca <USB_EPStartXfer+0x772>
 800e0c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e0ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e0cc:	881b      	ldrh	r3, [r3, #0]
 800e0ce:	b29a      	uxth	r2, r3
 800e0d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	029b      	lsls	r3, r3, #10
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e0e0:	801a      	strh	r2, [r3, #0]
 800e0e2:	e03a      	b.n	800e15a <USB_EPStartXfer+0x802>
 800e0e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0e8:	095b      	lsrs	r3, r3, #5
 800e0ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e0ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0f2:	f003 031f 	and.w	r3, r3, #31
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d104      	bne.n	800e104 <USB_EPStartXfer+0x7ac>
 800e0fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e0fe:	3b01      	subs	r3, #1
 800e100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e104:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e106:	881b      	ldrh	r3, [r3, #0]
 800e108:	b29a      	uxth	r2, r3
 800e10a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e10e:	b29b      	uxth	r3, r3
 800e110:	029b      	lsls	r3, r3, #10
 800e112:	b29b      	uxth	r3, r3
 800e114:	4313      	orrs	r3, r2
 800e116:	b29b      	uxth	r3, r3
 800e118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e11c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e120:	b29a      	uxth	r2, r3
 800e122:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e124:	801a      	strh	r2, [r3, #0]
 800e126:	e018      	b.n	800e15a <USB_EPStartXfer+0x802>
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	785b      	ldrb	r3, [r3, #1]
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d114      	bne.n	800e15a <USB_EPStartXfer+0x802>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e136:	b29b      	uxth	r3, r3
 800e138:	461a      	mov	r2, r3
 800e13a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e13c:	4413      	add	r3, r2
 800e13e:	673b      	str	r3, [r7, #112]	@ 0x70
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	00da      	lsls	r2, r3, #3
 800e146:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e148:	4413      	add	r3, r2
 800e14a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e14e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e150:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e154:	b29a      	uxth	r2, r3
 800e156:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e158:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	895b      	ldrh	r3, [r3, #10]
 800e15e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	6959      	ldr	r1, [r3, #20]
 800e166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f000 faea 	bl	800e74a <USB_WritePMA>
 800e176:	e09e      	b.n	800e2b6 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	785b      	ldrb	r3, [r3, #1]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d16b      	bne.n	800e258 <USB_EPStartXfer+0x900>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e18a:	b29b      	uxth	r3, r3
 800e18c:	461a      	mov	r2, r3
 800e18e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e190:	4413      	add	r3, r2
 800e192:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	00da      	lsls	r2, r3, #3
 800e19a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e19c:	4413      	add	r3, r2
 800e19e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e1a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e1a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e1a6:	881b      	ldrh	r3, [r3, #0]
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e1ae:	b29a      	uxth	r2, r3
 800e1b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e1b2:	801a      	strh	r2, [r3, #0]
 800e1b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d10a      	bne.n	800e1d2 <USB_EPStartXfer+0x87a>
 800e1bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e1be:	881b      	ldrh	r3, [r3, #0]
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1ca:	b29a      	uxth	r2, r3
 800e1cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e1ce:	801a      	strh	r2, [r3, #0]
 800e1d0:	e063      	b.n	800e29a <USB_EPStartXfer+0x942>
 800e1d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1d6:	2b3e      	cmp	r3, #62	@ 0x3e
 800e1d8:	d81c      	bhi.n	800e214 <USB_EPStartXfer+0x8bc>
 800e1da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1de:	085b      	lsrs	r3, r3, #1
 800e1e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e1e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1e8:	f003 0301 	and.w	r3, r3, #1
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d004      	beq.n	800e1fa <USB_EPStartXfer+0x8a2>
 800e1f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e1fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e1fc:	881b      	ldrh	r3, [r3, #0]
 800e1fe:	b29a      	uxth	r2, r3
 800e200:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e204:	b29b      	uxth	r3, r3
 800e206:	029b      	lsls	r3, r3, #10
 800e208:	b29b      	uxth	r3, r3
 800e20a:	4313      	orrs	r3, r2
 800e20c:	b29a      	uxth	r2, r3
 800e20e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e210:	801a      	strh	r2, [r3, #0]
 800e212:	e042      	b.n	800e29a <USB_EPStartXfer+0x942>
 800e214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e218:	095b      	lsrs	r3, r3, #5
 800e21a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e21e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e222:	f003 031f 	and.w	r3, r3, #31
 800e226:	2b00      	cmp	r3, #0
 800e228:	d104      	bne.n	800e234 <USB_EPStartXfer+0x8dc>
 800e22a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e22e:	3b01      	subs	r3, #1
 800e230:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e236:	881b      	ldrh	r3, [r3, #0]
 800e238:	b29a      	uxth	r2, r3
 800e23a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e23e:	b29b      	uxth	r3, r3
 800e240:	029b      	lsls	r3, r3, #10
 800e242:	b29b      	uxth	r3, r3
 800e244:	4313      	orrs	r3, r2
 800e246:	b29b      	uxth	r3, r3
 800e248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e24c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e250:	b29a      	uxth	r2, r3
 800e252:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e254:	801a      	strh	r2, [r3, #0]
 800e256:	e020      	b.n	800e29a <USB_EPStartXfer+0x942>
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	785b      	ldrb	r3, [r3, #1]
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d11c      	bne.n	800e29a <USB_EPStartXfer+0x942>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	461a      	mov	r2, r3
 800e270:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e274:	4413      	add	r3, r2
 800e276:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	00da      	lsls	r2, r3, #3
 800e280:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e284:	4413      	add	r3, r2
 800e286:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e28a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e28e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e292:	b29a      	uxth	r2, r3
 800e294:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e298:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	891b      	ldrh	r3, [r3, #8]
 800e29e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	6959      	ldr	r1, [r3, #20]
 800e2a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e2aa:	b29b      	uxth	r3, r3
 800e2ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f000 fa4a 	bl	800e74a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e2b6:	687a      	ldr	r2, [r7, #4]
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	4413      	add	r3, r2
 800e2c0:	881b      	ldrh	r3, [r3, #0]
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e2c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e2cc:	817b      	strh	r3, [r7, #10]
 800e2ce:	897b      	ldrh	r3, [r7, #10]
 800e2d0:	f083 0310 	eor.w	r3, r3, #16
 800e2d4:	817b      	strh	r3, [r7, #10]
 800e2d6:	897b      	ldrh	r3, [r7, #10]
 800e2d8:	f083 0320 	eor.w	r3, r3, #32
 800e2dc:	817b      	strh	r3, [r7, #10]
 800e2de:	687a      	ldr	r2, [r7, #4]
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	441a      	add	r2, r3
 800e2e8:	897b      	ldrh	r3, [r7, #10]
 800e2ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e2ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e2f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	8013      	strh	r3, [r2, #0]
 800e2fe:	e0d5      	b.n	800e4ac <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	7b1b      	ldrb	r3, [r3, #12]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d156      	bne.n	800e3b6 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	699b      	ldr	r3, [r3, #24]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d122      	bne.n	800e356 <USB_EPStartXfer+0x9fe>
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	78db      	ldrb	r3, [r3, #3]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d11e      	bne.n	800e356 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	4413      	add	r3, r2
 800e322:	881b      	ldrh	r3, [r3, #0]
 800e324:	b29b      	uxth	r3, r3
 800e326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e32a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e32e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800e332:	687a      	ldr	r2, [r7, #4]
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	441a      	add	r2, r3
 800e33c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e340:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e344:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e348:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e34c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e350:	b29b      	uxth	r3, r3
 800e352:	8013      	strh	r3, [r2, #0]
 800e354:	e01d      	b.n	800e392 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	009b      	lsls	r3, r3, #2
 800e35e:	4413      	add	r3, r2
 800e360:	881b      	ldrh	r3, [r3, #0]
 800e362:	b29b      	uxth	r3, r3
 800e364:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800e368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e36c:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	009b      	lsls	r3, r3, #2
 800e378:	441a      	add	r2, r3
 800e37a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800e37e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e382:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e38a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e38e:	b29b      	uxth	r3, r3
 800e390:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	699a      	ldr	r2, [r3, #24]
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	691b      	ldr	r3, [r3, #16]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d907      	bls.n	800e3ae <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	699a      	ldr	r2, [r3, #24]
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	691b      	ldr	r3, [r3, #16]
 800e3a6:	1ad2      	subs	r2, r2, r3
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	619a      	str	r2, [r3, #24]
 800e3ac:	e054      	b.n	800e458 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	619a      	str	r2, [r3, #24]
 800e3b4:	e050      	b.n	800e458 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	78db      	ldrb	r3, [r3, #3]
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	d142      	bne.n	800e444 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	69db      	ldr	r3, [r3, #28]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d048      	beq.n	800e458 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e3c6:	687a      	ldr	r2, [r7, #4]
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	009b      	lsls	r3, r3, #2
 800e3ce:	4413      	add	r3, r2
 800e3d0:	881b      	ldrh	r3, [r3, #0]
 800e3d2:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e3d6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e3da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d005      	beq.n	800e3ee <USB_EPStartXfer+0xa96>
 800e3e2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e3e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d10b      	bne.n	800e406 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e3ee:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e3f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d12e      	bne.n	800e458 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e3fa:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e3fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e402:	2b00      	cmp	r3, #0
 800e404:	d128      	bne.n	800e458 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e406:	687a      	ldr	r2, [r7, #4]
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	009b      	lsls	r3, r3, #2
 800e40e:	4413      	add	r3, r2
 800e410:	881b      	ldrh	r3, [r3, #0]
 800e412:	b29b      	uxth	r3, r3
 800e414:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e41c:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800e420:	687a      	ldr	r2, [r7, #4]
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	441a      	add	r2, r3
 800e42a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800e42e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e432:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e43a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e43e:	b29b      	uxth	r3, r3
 800e440:	8013      	strh	r3, [r2, #0]
 800e442:	e009      	b.n	800e458 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	78db      	ldrb	r3, [r3, #3]
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d103      	bne.n	800e454 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	2200      	movs	r2, #0
 800e450:	619a      	str	r2, [r3, #24]
 800e452:	e001      	b.n	800e458 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800e454:	2301      	movs	r3, #1
 800e456:	e02a      	b.n	800e4ae <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e458:	687a      	ldr	r2, [r7, #4]
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	009b      	lsls	r3, r3, #2
 800e460:	4413      	add	r3, r2
 800e462:	881b      	ldrh	r3, [r3, #0]
 800e464:	b29b      	uxth	r3, r3
 800e466:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e46a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e46e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e472:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e476:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e47a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e47e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e482:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e486:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e48a:	687a      	ldr	r2, [r7, #4]
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	009b      	lsls	r3, r3, #2
 800e492:	441a      	add	r2, r3
 800e494:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e498:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e49c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e4a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4a8:	b29b      	uxth	r3, r3
 800e4aa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e4ac:	2300      	movs	r3, #0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	37b0      	adds	r7, #176	@ 0xb0
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e4b6:	b480      	push	{r7}
 800e4b8:	b085      	sub	sp, #20
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
 800e4be:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	785b      	ldrb	r3, [r3, #1]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d020      	beq.n	800e50a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	4413      	add	r3, r2
 800e4d2:	881b      	ldrh	r3, [r3, #0]
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e4da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e4de:	81bb      	strh	r3, [r7, #12]
 800e4e0:	89bb      	ldrh	r3, [r7, #12]
 800e4e2:	f083 0310 	eor.w	r3, r3, #16
 800e4e6:	81bb      	strh	r3, [r7, #12]
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	441a      	add	r2, r3
 800e4f2:	89bb      	ldrh	r3, [r7, #12]
 800e4f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e4f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e4fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e504:	b29b      	uxth	r3, r3
 800e506:	8013      	strh	r3, [r2, #0]
 800e508:	e01f      	b.n	800e54a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e50a:	687a      	ldr	r2, [r7, #4]
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	4413      	add	r3, r2
 800e514:	881b      	ldrh	r3, [r3, #0]
 800e516:	b29b      	uxth	r3, r3
 800e518:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e51c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e520:	81fb      	strh	r3, [r7, #14]
 800e522:	89fb      	ldrh	r3, [r7, #14]
 800e524:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e528:	81fb      	strh	r3, [r7, #14]
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	441a      	add	r2, r3
 800e534:	89fb      	ldrh	r3, [r7, #14]
 800e536:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e53a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e53e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e546:	b29b      	uxth	r3, r3
 800e548:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e54a:	2300      	movs	r3, #0
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3714      	adds	r7, #20
 800e550:	46bd      	mov	sp, r7
 800e552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e556:	4770      	bx	lr

0800e558 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e558:	b480      	push	{r7}
 800e55a:	b087      	sub	sp, #28
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	785b      	ldrb	r3, [r3, #1]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d04c      	beq.n	800e604 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	009b      	lsls	r3, r3, #2
 800e572:	4413      	add	r3, r2
 800e574:	881b      	ldrh	r3, [r3, #0]
 800e576:	823b      	strh	r3, [r7, #16]
 800e578:	8a3b      	ldrh	r3, [r7, #16]
 800e57a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d01b      	beq.n	800e5ba <USB_EPClearStall+0x62>
 800e582:	687a      	ldr	r2, [r7, #4]
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	4413      	add	r3, r2
 800e58c:	881b      	ldrh	r3, [r3, #0]
 800e58e:	b29b      	uxth	r3, r3
 800e590:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e594:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e598:	81fb      	strh	r3, [r7, #14]
 800e59a:	687a      	ldr	r2, [r7, #4]
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	009b      	lsls	r3, r3, #2
 800e5a2:	441a      	add	r2, r3
 800e5a4:	89fb      	ldrh	r3, [r7, #14]
 800e5a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e5aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e5ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e5b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	78db      	ldrb	r3, [r3, #3]
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d06c      	beq.n	800e69c <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	009b      	lsls	r3, r3, #2
 800e5ca:	4413      	add	r3, r2
 800e5cc:	881b      	ldrh	r3, [r3, #0]
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e5d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e5d8:	81bb      	strh	r3, [r7, #12]
 800e5da:	89bb      	ldrh	r3, [r7, #12]
 800e5dc:	f083 0320 	eor.w	r3, r3, #32
 800e5e0:	81bb      	strh	r3, [r7, #12]
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	441a      	add	r2, r3
 800e5ec:	89bb      	ldrh	r3, [r7, #12]
 800e5ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e5f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e5f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e5fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	8013      	strh	r3, [r2, #0]
 800e602:	e04b      	b.n	800e69c <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	4413      	add	r3, r2
 800e60e:	881b      	ldrh	r3, [r3, #0]
 800e610:	82fb      	strh	r3, [r7, #22]
 800e612:	8afb      	ldrh	r3, [r7, #22]
 800e614:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d01b      	beq.n	800e654 <USB_EPClearStall+0xfc>
 800e61c:	687a      	ldr	r2, [r7, #4]
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	4413      	add	r3, r2
 800e626:	881b      	ldrh	r3, [r3, #0]
 800e628:	b29b      	uxth	r3, r3
 800e62a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e62e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e632:	82bb      	strh	r3, [r7, #20]
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	009b      	lsls	r3, r3, #2
 800e63c:	441a      	add	r2, r3
 800e63e:	8abb      	ldrh	r3, [r7, #20]
 800e640:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e644:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e648:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e64c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e650:	b29b      	uxth	r3, r3
 800e652:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e654:	687a      	ldr	r2, [r7, #4]
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	4413      	add	r3, r2
 800e65e:	881b      	ldrh	r3, [r3, #0]
 800e660:	b29b      	uxth	r3, r3
 800e662:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e66a:	827b      	strh	r3, [r7, #18]
 800e66c:	8a7b      	ldrh	r3, [r7, #18]
 800e66e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e672:	827b      	strh	r3, [r7, #18]
 800e674:	8a7b      	ldrh	r3, [r7, #18]
 800e676:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e67a:	827b      	strh	r3, [r7, #18]
 800e67c:	687a      	ldr	r2, [r7, #4]
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	441a      	add	r2, r3
 800e686:	8a7b      	ldrh	r3, [r7, #18]
 800e688:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e68c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e690:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e698:	b29b      	uxth	r3, r3
 800e69a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e69c:	2300      	movs	r3, #0
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	371c      	adds	r7, #28
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a8:	4770      	bx	lr

0800e6aa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e6aa:	b480      	push	{r7}
 800e6ac:	b083      	sub	sp, #12
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	6078      	str	r0, [r7, #4]
 800e6b2:	460b      	mov	r3, r1
 800e6b4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e6b6:	78fb      	ldrb	r3, [r7, #3]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d103      	bne.n	800e6c4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2280      	movs	r2, #128	@ 0x80
 800e6c0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e6c4:	2300      	movs	r3, #0
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	370c      	adds	r7, #12
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr

0800e6d2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e6d2:	b480      	push	{r7}
 800e6d4:	b083      	sub	sp, #12
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e6e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e6ea:	b29a      	uxth	r2, r3
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e6f2:	2300      	movs	r3, #0
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	370c      	adds	r7, #12
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr

0800e700 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800e700:	b480      	push	{r7}
 800e702:	b083      	sub	sp, #12
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e70e:	b29b      	uxth	r3, r3
 800e710:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e714:	b29a      	uxth	r2, r3
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e71c:	2300      	movs	r3, #0
}
 800e71e:	4618      	mov	r0, r3
 800e720:	370c      	adds	r7, #12
 800e722:	46bd      	mov	sp, r7
 800e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e728:	4770      	bx	lr

0800e72a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e72a:	b480      	push	{r7}
 800e72c:	b085      	sub	sp, #20
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e738:	b29b      	uxth	r3, r3
 800e73a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e73c:	68fb      	ldr	r3, [r7, #12]
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3714      	adds	r7, #20
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr

0800e74a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e74a:	b480      	push	{r7}
 800e74c:	b08b      	sub	sp, #44	@ 0x2c
 800e74e:	af00      	add	r7, sp, #0
 800e750:	60f8      	str	r0, [r7, #12]
 800e752:	60b9      	str	r1, [r7, #8]
 800e754:	4611      	mov	r1, r2
 800e756:	461a      	mov	r2, r3
 800e758:	460b      	mov	r3, r1
 800e75a:	80fb      	strh	r3, [r7, #6]
 800e75c:	4613      	mov	r3, r2
 800e75e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e760:	88bb      	ldrh	r3, [r7, #4]
 800e762:	3301      	adds	r3, #1
 800e764:	085b      	lsrs	r3, r3, #1
 800e766:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e770:	88fa      	ldrh	r2, [r7, #6]
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	4413      	add	r3, r2
 800e776:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e77a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e780:	e01b      	b.n	800e7ba <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e782:	69fb      	ldr	r3, [r7, #28]
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e788:	69fb      	ldr	r3, [r7, #28]
 800e78a:	3301      	adds	r3, #1
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	021b      	lsls	r3, r3, #8
 800e790:	b21a      	sxth	r2, r3
 800e792:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e796:	4313      	orrs	r3, r2
 800e798:	b21b      	sxth	r3, r3
 800e79a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e79c:	6a3b      	ldr	r3, [r7, #32]
 800e79e:	8a7a      	ldrh	r2, [r7, #18]
 800e7a0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e7a2:	6a3b      	ldr	r3, [r7, #32]
 800e7a4:	3302      	adds	r3, #2
 800e7a6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e7a8:	69fb      	ldr	r3, [r7, #28]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b6:	3b01      	subs	r3, #1
 800e7b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d1e0      	bne.n	800e782 <USB_WritePMA+0x38>
  }
}
 800e7c0:	bf00      	nop
 800e7c2:	bf00      	nop
 800e7c4:	372c      	adds	r7, #44	@ 0x2c
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr

0800e7ce <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e7ce:	b480      	push	{r7}
 800e7d0:	b08b      	sub	sp, #44	@ 0x2c
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	60f8      	str	r0, [r7, #12]
 800e7d6:	60b9      	str	r1, [r7, #8]
 800e7d8:	4611      	mov	r1, r2
 800e7da:	461a      	mov	r2, r3
 800e7dc:	460b      	mov	r3, r1
 800e7de:	80fb      	strh	r3, [r7, #6]
 800e7e0:	4613      	mov	r3, r2
 800e7e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e7e4:	88bb      	ldrh	r3, [r7, #4]
 800e7e6:	085b      	lsrs	r3, r3, #1
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e7f4:	88fa      	ldrh	r2, [r7, #6]
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	4413      	add	r3, r2
 800e7fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e7fe:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e800:	69bb      	ldr	r3, [r7, #24]
 800e802:	627b      	str	r3, [r7, #36]	@ 0x24
 800e804:	e018      	b.n	800e838 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e806:	6a3b      	ldr	r3, [r7, #32]
 800e808:	881b      	ldrh	r3, [r3, #0]
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e80e:	6a3b      	ldr	r3, [r7, #32]
 800e810:	3302      	adds	r3, #2
 800e812:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	b2da      	uxtb	r2, r3
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e81c:	69fb      	ldr	r3, [r7, #28]
 800e81e:	3301      	adds	r3, #1
 800e820:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	0a1b      	lsrs	r3, r3, #8
 800e826:	b2da      	uxtb	r2, r3
 800e828:	69fb      	ldr	r3, [r7, #28]
 800e82a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	3301      	adds	r3, #1
 800e830:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e834:	3b01      	subs	r3, #1
 800e836:	627b      	str	r3, [r7, #36]	@ 0x24
 800e838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d1e3      	bne.n	800e806 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e83e:	88bb      	ldrh	r3, [r7, #4]
 800e840:	f003 0301 	and.w	r3, r3, #1
 800e844:	b29b      	uxth	r3, r3
 800e846:	2b00      	cmp	r3, #0
 800e848:	d007      	beq.n	800e85a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e84a:	6a3b      	ldr	r3, [r7, #32]
 800e84c:	881b      	ldrh	r3, [r3, #0]
 800e84e:	b29b      	uxth	r3, r3
 800e850:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e852:	693b      	ldr	r3, [r7, #16]
 800e854:	b2da      	uxtb	r2, r3
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	701a      	strb	r2, [r3, #0]
  }
}
 800e85a:	bf00      	nop
 800e85c:	372c      	adds	r7, #44	@ 0x2c
 800e85e:	46bd      	mov	sp, r7
 800e860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e864:	4770      	bx	lr
	...

0800e868 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800e868:	b480      	push	{r7}
 800e86a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e86c:	f3bf 8f4f 	dsb	sy
}
 800e870:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e872:	4b06      	ldr	r3, [pc, #24]	@ (800e88c <__NVIC_SystemReset+0x24>)
 800e874:	68db      	ldr	r3, [r3, #12]
 800e876:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e87a:	4904      	ldr	r1, [pc, #16]	@ (800e88c <__NVIC_SystemReset+0x24>)
 800e87c:	4b04      	ldr	r3, [pc, #16]	@ (800e890 <__NVIC_SystemReset+0x28>)
 800e87e:	4313      	orrs	r3, r2
 800e880:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e882:	f3bf 8f4f 	dsb	sy
}
 800e886:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800e888:	bf00      	nop
 800e88a:	e7fd      	b.n	800e888 <__NVIC_SystemReset+0x20>
 800e88c:	e000ed00 	.word	0xe000ed00
 800e890:	05fa0004 	.word	0x05fa0004

0800e894 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b084      	sub	sp, #16
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	460b      	mov	r3, r1
 800e89e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800e8a0:	f240 401c 	movw	r0, #1052	@ 0x41c
 800e8a4:	f002 fbfc 	bl	80110a0 <USBD_static_malloc>
 800e8a8:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d105      	bne.n	800e8bc <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800e8b8:	2302      	movs	r3, #2
 800e8ba:	e03f      	b.n	800e93c <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	68fa      	ldr	r2, [r7, #12]
 800e8c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800e8d2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2202      	movs	r2, #2
 800e8f2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2200      	movs	r2, #0
 800e902:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	2200      	movs	r2, #0
 800e90a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2200      	movs	r2, #0
 800e912:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	2202      	movs	r2, #2
 800e91a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2200      	movs	r2, #0
 800e922:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	4798      	blx	r3
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d001      	beq.n	800e93a <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 800e936:	2303      	movs	r3, #3
 800e938:	e000      	b.n	800e93c <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 800e93a:	2300      	movs	r3, #0
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3710      	adds	r7, #16
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	460b      	mov	r3, r1
 800e94e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e956:	2b00      	cmp	r3, #0
 800e958:	d101      	bne.n	800e95e <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800e95a:	2302      	movs	r3, #2
 800e95c:	e027      	b.n	800e9ae <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e964:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2200      	movs	r2, #0
 800e96a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2200      	movs	r2, #0
 800e972:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2202      	movs	r2, #2
 800e97a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2200      	movs	r2, #0
 800e982:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2202      	movs	r2, #2
 800e98a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e994:	689b      	ldr	r3, [r3, #8]
 800e996:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f002 fb8c 	bl	80110bc <USBD_static_free>
  pdev->pClassData = NULL;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 800e9ac:	2300      	movs	r3, #0
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3710      	adds	r7, #16
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
	...

0800e9b8 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b088      	sub	sp, #32
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
 800e9c0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e9c8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d101      	bne.n	800e9e4 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800e9e0:	2303      	movs	r3, #3
 800e9e2:	e0d5      	b.n	800eb90 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d03e      	beq.n	800ea6e <USBD_DFU_Setup+0xb6>
 800e9f0:	2b20      	cmp	r3, #32
 800e9f2:	f040 80c5 	bne.w	800eb80 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	785b      	ldrb	r3, [r3, #1]
 800e9fa:	2b06      	cmp	r3, #6
 800e9fc:	d82f      	bhi.n	800ea5e <USBD_DFU_Setup+0xa6>
 800e9fe:	a201      	add	r2, pc, #4	@ (adr r2, 800ea04 <USBD_DFU_Setup+0x4c>)
 800ea00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea04:	0800ea55 	.word	0x0800ea55
 800ea08:	0800ea21 	.word	0x0800ea21
 800ea0c:	0800ea2b 	.word	0x0800ea2b
 800ea10:	0800ea35 	.word	0x0800ea35
 800ea14:	0800ea3d 	.word	0x0800ea3d
 800ea18:	0800ea45 	.word	0x0800ea45
 800ea1c:	0800ea4d 	.word	0x0800ea4d
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 800ea20:	6839      	ldr	r1, [r7, #0]
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 fa6c 	bl	800ef00 <DFU_Download>
          break;
 800ea28:	e020      	b.n	800ea6c <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800ea2a:	6839      	ldr	r1, [r7, #0]
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f000 fad3 	bl	800efd8 <DFU_Upload>
          break;
 800ea32:	e01b      	b.n	800ea6c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f000 fba9 	bl	800f18c <DFU_GetStatus>
          break;
 800ea3a:	e017      	b.n	800ea6c <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f000 fc5b 	bl	800f2f8 <DFU_ClearStatus>
          break;
 800ea42:	e013      	b.n	800ea6c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f000 fcab 	bl	800f3a0 <DFU_GetState>
          break;
 800ea4a:	e00f      	b.n	800ea6c <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f000 fcbf 	bl	800f3d0 <DFU_Abort>
          break;
 800ea52:	e00b      	b.n	800ea6c <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800ea54:	6839      	ldr	r1, [r7, #0]
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f000 f9ee 	bl	800ee38 <DFU_Detach>
          break;
 800ea5c:	e006      	b.n	800ea6c <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800ea5e:	6839      	ldr	r1, [r7, #0]
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f001 fdb1 	bl	80105c8 <USBD_CtlError>
          ret = USBD_FAIL;
 800ea66:	2303      	movs	r3, #3
 800ea68:	77fb      	strb	r3, [r7, #31]
          break;
 800ea6a:	bf00      	nop
      }
      break;
 800ea6c:	e08f      	b.n	800eb8e <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	785b      	ldrb	r3, [r3, #1]
 800ea72:	2b0b      	cmp	r3, #11
 800ea74:	d87b      	bhi.n	800eb6e <USBD_DFU_Setup+0x1b6>
 800ea76:	a201      	add	r2, pc, #4	@ (adr r2, 800ea7c <USBD_DFU_Setup+0xc4>)
 800ea78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea7c:	0800eaad 	.word	0x0800eaad
 800ea80:	0800eb7d 	.word	0x0800eb7d
 800ea84:	0800eb6f 	.word	0x0800eb6f
 800ea88:	0800eb6f 	.word	0x0800eb6f
 800ea8c:	0800eb6f 	.word	0x0800eb6f
 800ea90:	0800eb6f 	.word	0x0800eb6f
 800ea94:	0800ead7 	.word	0x0800ead7
 800ea98:	0800eb6f 	.word	0x0800eb6f
 800ea9c:	0800eb6f 	.word	0x0800eb6f
 800eaa0:	0800eb6f 	.word	0x0800eb6f
 800eaa4:	0800eb01 	.word	0x0800eb01
 800eaa8:	0800eb2d 	.word	0x0800eb2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	2b03      	cmp	r3, #3
 800eab6:	d107      	bne.n	800eac8 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800eab8:	f107 030e 	add.w	r3, r7, #14
 800eabc:	2202      	movs	r2, #2
 800eabe:	4619      	mov	r1, r3
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f001 fdf2 	bl	80106aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eac6:	e05a      	b.n	800eb7e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800eac8:	6839      	ldr	r1, [r7, #0]
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f001 fd7c 	bl	80105c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800ead0:	2303      	movs	r3, #3
 800ead2:	77fb      	strb	r3, [r7, #31]
          break;
 800ead4:	e053      	b.n	800eb7e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	885b      	ldrh	r3, [r3, #2]
 800eada:	0a1b      	lsrs	r3, r3, #8
 800eadc:	b29b      	uxth	r3, r3
 800eade:	2b21      	cmp	r3, #33	@ 0x21
 800eae0:	d107      	bne.n	800eaf2 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800eae2:	4b2d      	ldr	r3, [pc, #180]	@ (800eb98 <USBD_DFU_Setup+0x1e0>)
 800eae4:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	88db      	ldrh	r3, [r3, #6]
 800eaea:	2b09      	cmp	r3, #9
 800eaec:	bf28      	it	cs
 800eaee:	2309      	movcs	r3, #9
 800eaf0:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800eaf2:	8afb      	ldrh	r3, [r7, #22]
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	69b9      	ldr	r1, [r7, #24]
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f001 fdd6 	bl	80106aa <USBD_CtlSendData>
          break;
 800eafe:	e03e      	b.n	800eb7e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	2b03      	cmp	r3, #3
 800eb0a:	d108      	bne.n	800eb1e <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800eb12:	2201      	movs	r2, #1
 800eb14:	4619      	mov	r1, r3
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f001 fdc7 	bl	80106aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eb1c:	e02f      	b.n	800eb7e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800eb1e:	6839      	ldr	r1, [r7, #0]
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f001 fd51 	bl	80105c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800eb26:	2303      	movs	r3, #3
 800eb28:	77fb      	strb	r3, [r7, #31]
          break;
 800eb2a:	e028      	b.n	800eb7e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	885b      	ldrh	r3, [r3, #2]
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d114      	bne.n	800eb60 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	2b03      	cmp	r3, #3
 800eb40:	d107      	bne.n	800eb52 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	885b      	ldrh	r3, [r3, #2]
 800eb46:	b2db      	uxtb	r3, r3
 800eb48:	461a      	mov	r2, r3
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eb50:	e015      	b.n	800eb7e <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 800eb52:	6839      	ldr	r1, [r7, #0]
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f001 fd37 	bl	80105c8 <USBD_CtlError>
              ret = USBD_FAIL;
 800eb5a:	2303      	movs	r3, #3
 800eb5c:	77fb      	strb	r3, [r7, #31]
          break;
 800eb5e:	e00e      	b.n	800eb7e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800eb60:	6839      	ldr	r1, [r7, #0]
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f001 fd30 	bl	80105c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800eb68:	2303      	movs	r3, #3
 800eb6a:	77fb      	strb	r3, [r7, #31]
          break;
 800eb6c:	e007      	b.n	800eb7e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800eb6e:	6839      	ldr	r1, [r7, #0]
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f001 fd29 	bl	80105c8 <USBD_CtlError>
          ret = USBD_FAIL;
 800eb76:	2303      	movs	r3, #3
 800eb78:	77fb      	strb	r3, [r7, #31]
          break;
 800eb7a:	e000      	b.n	800eb7e <USBD_DFU_Setup+0x1c6>
          break;
 800eb7c:	bf00      	nop
      }
      break;
 800eb7e:	e006      	b.n	800eb8e <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 800eb80:	6839      	ldr	r1, [r7, #0]
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f001 fd20 	bl	80105c8 <USBD_CtlError>
      ret = USBD_FAIL;
 800eb88:	2303      	movs	r3, #3
 800eb8a:	77fb      	strb	r3, [r7, #31]
      break;
 800eb8c:	bf00      	nop
  }

  return (uint8_t)ret;
 800eb8e:	7ffb      	ldrb	r3, [r7, #31]
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3720      	adds	r7, #32
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	2000005a 	.word	0x2000005a

0800eb9c <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	221b      	movs	r2, #27
 800eba8:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800ebaa:	4b03      	ldr	r3, [pc, #12]	@ (800ebb8 <USBD_DFU_GetCfgDesc+0x1c>)
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	370c      	adds	r7, #12
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr
 800ebb8:	20000048 	.word	0x20000048

0800ebbc <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800ebc4:	2300      	movs	r3, #0
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	370c      	adds	r7, #12
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd0:	4770      	bx	lr

0800ebd2 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800ebd2:	b580      	push	{r7, lr}
 800ebd4:	b088      	sub	sp, #32
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ebe0:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ebe8:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d101      	bne.n	800ebf4 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ebf0:	2303      	movs	r3, #3
 800ebf2:	e0ce      	b.n	800ed92 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ebfa:	2b04      	cmp	r3, #4
 800ebfc:	f040 80bd 	bne.w	800ed7a <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d17c      	bne.n	800ed04 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 800ec0a:	69fb      	ldr	r3, [r7, #28]
 800ec0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	f000 8093 	beq.w	800ed3c <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 800ec16:	69fb      	ldr	r3, [r7, #28]
 800ec18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800ec1c:	2b05      	cmp	r3, #5
 800ec1e:	d15e      	bne.n	800ecde <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800ec20:	69fb      	ldr	r3, [r7, #28]
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	2b21      	cmp	r3, #33	@ 0x21
 800ec26:	d124      	bne.n	800ec72 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	785b      	ldrb	r3, [r3, #1]
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	69fb      	ldr	r3, [r7, #28]
 800ec30:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800ec3a:	69fb      	ldr	r3, [r7, #28]
 800ec3c:	789b      	ldrb	r3, [r3, #2]
 800ec3e:	021b      	lsls	r3, r3, #8
 800ec40:	441a      	add	r2, r3
 800ec42:	69fb      	ldr	r3, [r7, #28]
 800ec44:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800ec48:	69fb      	ldr	r3, [r7, #28]
 800ec4a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800ec4e:	69fb      	ldr	r3, [r7, #28]
 800ec50:	78db      	ldrb	r3, [r3, #3]
 800ec52:	041b      	lsls	r3, r3, #16
 800ec54:	441a      	add	r2, r3
 800ec56:	69fb      	ldr	r3, [r7, #28]
 800ec58:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800ec62:	69fb      	ldr	r3, [r7, #28]
 800ec64:	791b      	ldrb	r3, [r3, #4]
 800ec66:	061b      	lsls	r3, r3, #24
 800ec68:	441a      	add	r2, r3
 800ec6a:	69fb      	ldr	r3, [r7, #28]
 800ec6c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 800ec70:	e064      	b.n	800ed3c <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	2b41      	cmp	r3, #65	@ 0x41
 800ec78:	d12f      	bne.n	800ecda <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800ec7a:	69fb      	ldr	r3, [r7, #28]
 800ec7c:	785b      	ldrb	r3, [r3, #1]
 800ec7e:	461a      	mov	r2, r3
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	789b      	ldrb	r3, [r3, #2]
 800ec90:	021b      	lsls	r3, r3, #8
 800ec92:	441a      	add	r2, r3
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	78db      	ldrb	r3, [r3, #3]
 800eca4:	041b      	lsls	r3, r3, #16
 800eca6:	441a      	add	r2, r3
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800ecae:	69fb      	ldr	r3, [r7, #28]
 800ecb0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	791b      	ldrb	r3, [r3, #4]
 800ecb8:	061b      	lsls	r3, r3, #24
 800ecba:	441a      	add	r2, r3
 800ecbc:	69fb      	ldr	r3, [r7, #28]
 800ecbe:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 800ecc2:	69bb      	ldr	r3, [r7, #24]
 800ecc4:	68db      	ldr	r3, [r3, #12]
 800ecc6:	69fa      	ldr	r2, [r7, #28]
 800ecc8:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 800eccc:	4610      	mov	r0, r2
 800ecce:	4798      	blx	r3
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d032      	beq.n	800ed3c <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 800ecd6:	2303      	movs	r3, #3
 800ecd8:	e05b      	b.n	800ed92 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 800ecda:	2303      	movs	r3, #3
 800ecdc:	e059      	b.n	800ed92 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	2200      	movs	r2, #0
 800ece2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	2200      	movs	r2, #0
 800ecea:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 800ecf6:	f107 030c 	add.w	r3, r7, #12
 800ecfa:	4619      	mov	r1, r3
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f001 fc63 	bl	80105c8 <USBD_CtlError>
 800ed02:	e01b      	b.n	800ed3c <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d916      	bls.n	800ed3c <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800ed0e:	69fb      	ldr	r3, [r7, #28]
 800ed10:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800ed14:	3b02      	subs	r3, #2
 800ed16:	029a      	lsls	r2, r3, #10
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800ed1e:	4413      	add	r3, r2
 800ed20:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	691b      	ldr	r3, [r3, #16]
 800ed26:	69f8      	ldr	r0, [r7, #28]
 800ed28:	6979      	ldr	r1, [r7, #20]
 800ed2a:	69fa      	ldr	r2, [r7, #28]
 800ed2c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 800ed30:	4798      	blx	r3
 800ed32:	4603      	mov	r3, r0
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d001      	beq.n	800ed3c <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 800ed38:	2303      	movs	r3, #3
 800ed3a:	e02a      	b.n	800ed92 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 800ed44:	69fb      	ldr	r3, [r7, #28]
 800ed46:	2200      	movs	r2, #0
 800ed48:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800ed4c:	69fb      	ldr	r3, [r7, #28]
 800ed4e:	2203      	movs	r2, #3
 800ed50:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800ed54:	69fb      	ldr	r3, [r7, #28]
 800ed56:	2200      	movs	r2, #0
 800ed58:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800ed5c:	69fb      	ldr	r3, [r7, #28]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800ed64:	69fb      	ldr	r3, [r7, #28]
 800ed66:	2200      	movs	r2, #0
 800ed68:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ed72:	69fb      	ldr	r3, [r7, #28]
 800ed74:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800ed78:	e00a      	b.n	800ed90 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800ed7a:	69fb      	ldr	r3, [r7, #28]
 800ed7c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ed80:	2b07      	cmp	r3, #7
 800ed82:	d103      	bne.n	800ed8c <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 fb75 	bl	800f474 <DFU_Leave>
 800ed8a:	e001      	b.n	800ed90 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 800ed8c:	2303      	movs	r3, #3
 800ed8e:	e000      	b.n	800ed92 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 800ed90:	2300      	movs	r3, #0
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3720      	adds	r7, #32
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800ed9a:	b480      	push	{r7}
 800ed9c:	b083      	sub	sp, #12
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800eda2:	2300      	movs	r3, #0
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	370c      	adds	r7, #12
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b083      	sub	sp, #12
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	220a      	movs	r2, #10
 800edbc:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800edbe:	4b03      	ldr	r3, [pc, #12]	@ (800edcc <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	370c      	adds	r7, #12
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr
 800edcc:	20000064 	.word	0x20000064

0800edd0 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b086      	sub	sp, #24
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	460b      	mov	r3, r1
 800edda:	607a      	str	r2, [r7, #4]
 800eddc:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ede4:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800ede6:	7afb      	ldrb	r3, [r7, #11]
 800ede8:	2b06      	cmp	r3, #6
 800edea:	d808      	bhi.n	800edfe <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	4905      	ldr	r1, [pc, #20]	@ (800ee08 <USBD_DFU_GetUsrStringDesc+0x38>)
 800edf4:	4618      	mov	r0, r3
 800edf6:	f001 fbf8 	bl	80105ea <USBD_GetString>
    return USBD_StrDesc;
 800edfa:	4b03      	ldr	r3, [pc, #12]	@ (800ee08 <USBD_DFU_GetUsrStringDesc+0x38>)
 800edfc:	e000      	b.n	800ee00 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800edfe:	2300      	movs	r3, #0
  }
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3718      	adds	r7, #24
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	200008e0 	.word	0x200008e0

0800ee0c <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b083      	sub	sp, #12
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d101      	bne.n	800ee20 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ee1c:	2303      	movs	r3, #3
 800ee1e:	e004      	b.n	800ee2a <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	683a      	ldr	r2, [r7, #0]
 800ee24:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800ee28:	2300      	movs	r3, #0
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	370c      	adds	r7, #12
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee34:	4770      	bx	lr
	...

0800ee38 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee48:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d051      	beq.n	800eef4 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ee56:	2b02      	cmp	r3, #2
 800ee58:	d013      	beq.n	800ee82 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800ee60:	2b03      	cmp	r3, #3
 800ee62:	d00e      	beq.n	800ee82 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800ee6a:	2b05      	cmp	r3, #5
 800ee6c:	d009      	beq.n	800ee82 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800ee74:	2b06      	cmp	r3, #6
 800ee76:	d004      	beq.n	800ee82 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800ee7e:	2b09      	cmp	r3, #9
 800ee80:	d125      	bne.n	800eece <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2202      	movs	r2, #2
 800ee86:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2200      	movs	r2, #0
 800ee96:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2200      	movs	r2, #0
 800eea6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	2200      	movs	r2, #0
 800eec2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2200      	movs	r2, #0
 800eeca:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 800eece:	4b0b      	ldr	r3, [pc, #44]	@ (800eefc <DFU_Detach+0xc4>)
 800eed0:	7d5b      	ldrb	r3, [r3, #21]
 800eed2:	f003 0310 	and.w	r3, r3, #16
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d006      	beq.n	800eee8 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f000 fb7b 	bl	800f5d6 <USBD_Stop>
    (void)USBD_Start(pdev);
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f000 fb6c 	bl	800f5be <USBD_Start>
 800eee6:	e006      	b.n	800eef6 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	885b      	ldrh	r3, [r3, #2]
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7f5 f8b7 	bl	8004060 <HAL_Delay>
 800eef2:	e000      	b.n	800eef6 <DFU_Detach+0xbe>
    return;
 800eef4:	bf00      	nop
  }
}
 800eef6:	3710      	adds	r7, #16
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}
 800eefc:	20000048 	.word	0x20000048

0800ef00 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b084      	sub	sp, #16
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef10:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d05b      	beq.n	800efd0 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	88db      	ldrh	r3, [r3, #6]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d02d      	beq.n	800ef7c <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ef26:	2b02      	cmp	r3, #2
 800ef28:	d004      	beq.n	800ef34 <DFU_Download+0x34>
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ef30:	2b05      	cmp	r3, #5
 800ef32:	d11e      	bne.n	800ef72 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	885b      	ldrh	r3, [r3, #2]
 800ef38:	461a      	mov	r2, r3
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	88db      	ldrh	r3, [r3, #6]
 800ef44:	461a      	mov	r2, r3
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2203      	movs	r2, #3
 800ef50:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800ef60:	68f9      	ldr	r1, [r7, #12]
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800ef68:	461a      	mov	r2, r3
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f001 fbc9 	bl	8010702 <USBD_CtlPrepareRx>
 800ef70:	e02f      	b.n	800efd2 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800ef72:	6839      	ldr	r1, [r7, #0]
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f001 fb27 	bl	80105c8 <USBD_CtlError>
 800ef7a:	e02a      	b.n	800efd2 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ef82:	2b05      	cmp	r3, #5
 800ef84:	d004      	beq.n	800ef90 <DFU_Download+0x90>
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800ef8c:	2b02      	cmp	r3, #2
 800ef8e:	d11a      	bne.n	800efc6 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2201      	movs	r2, #1
 800ef94:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2206      	movs	r2, #6
 800ef9c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2200      	movs	r2, #0
 800efa4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2200      	movs	r2, #0
 800efac:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2200      	movs	r2, #0
 800efb4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800efc4:	e005      	b.n	800efd2 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800efc6:	6839      	ldr	r1, [r7, #0]
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f001 fafd 	bl	80105c8 <USBD_CtlError>
 800efce:	e000      	b.n	800efd2 <DFU_Download+0xd2>
    return;
 800efd0:	bf00      	nop
    }
  }
}
 800efd2:	3710      	adds	r7, #16
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b086      	sub	sp, #24
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800efe8:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800eff0:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	f000 80c4 	beq.w	800f182 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	88db      	ldrh	r3, [r3, #6]
 800effe:	2b00      	cmp	r3, #0
 800f000:	f000 80a8 	beq.w	800f154 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f00a:	2b02      	cmp	r3, #2
 800f00c:	d005      	beq.n	800f01a <DFU_Upload+0x42>
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f014:	2b09      	cmp	r3, #9
 800f016:	f040 8090 	bne.w	800f13a <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	885b      	ldrh	r3, [r3, #2]
 800f01e:	461a      	mov	r2, r3
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	88db      	ldrh	r3, [r3, #6]
 800f02a:	461a      	mov	r2, r3
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d12c      	bne.n	800f096 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800f042:	2b03      	cmp	r3, #3
 800f044:	d901      	bls.n	800f04a <DFU_Upload+0x72>
 800f046:	2202      	movs	r2, #2
 800f048:	e000      	b.n	800f04c <DFU_Upload+0x74>
 800f04a:	2209      	movs	r2, #9
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	2200      	movs	r2, #0
 800f056:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	2200      	movs	r2, #0
 800f05e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	2200      	movs	r2, #0
 800f066:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	2200      	movs	r2, #0
 800f07a:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	2221      	movs	r2, #33	@ 0x21
 800f080:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	2241      	movs	r2, #65	@ 0x41
 800f086:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	2203      	movs	r2, #3
 800f08c:	4619      	mov	r1, r3
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f001 fb0b 	bl	80106aa <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800f094:	e076      	b.n	800f184 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d931      	bls.n	800f104 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	2209      	movs	r2, #9
 800f0a4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800f0d2:	3b02      	subs	r3, #2
 800f0d4:	029a      	lsls	r2, r3, #10
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800f0dc:	4413      	add	r3, r2
 800f0de:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	695b      	ldr	r3, [r3, #20]
 800f0e4:	68f8      	ldr	r0, [r7, #12]
 800f0e6:	6979      	ldr	r1, [r7, #20]
 800f0e8:	697a      	ldr	r2, [r7, #20]
 800f0ea:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 800f0ee:	4798      	blx	r3
 800f0f0:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	68b9      	ldr	r1, [r7, #8]
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f001 fad4 	bl	80106aa <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800f102:	e03f      	b.n	800f184 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	220f      	movs	r2, #15
 800f108:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	2200      	movs	r2, #0
 800f110:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	2200      	movs	r2, #0
 800f118:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	2200      	movs	r2, #0
 800f120:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 800f130:	6839      	ldr	r1, [r7, #0]
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f001 fa48 	bl	80105c8 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800f138:	e024      	b.n	800f184 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	2200      	movs	r2, #0
 800f13e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	2200      	movs	r2, #0
 800f146:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800f14a:	6839      	ldr	r1, [r7, #0]
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f001 fa3b 	bl	80105c8 <USBD_CtlError>
 800f152:	e017      	b.n	800f184 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	2202      	movs	r2, #2
 800f158:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	2200      	movs	r2, #0
 800f160:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	2200      	movs	r2, #0
 800f168:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	2200      	movs	r2, #0
 800f170:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800f180:	e000      	b.n	800f184 <DFU_Upload+0x1ac>
    return;
 800f182:	bf00      	nop
  }
}
 800f184:	3718      	adds	r7, #24
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
	...

0800f18c <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b084      	sub	sp, #16
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f19a:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f1a2:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	f000 80a0 	beq.w	800f2ec <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f1b2:	2b03      	cmp	r3, #3
 800f1b4:	d002      	beq.n	800f1bc <DFU_GetStatus+0x30>
 800f1b6:	2b06      	cmp	r3, #6
 800f1b8:	d051      	beq.n	800f25e <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 800f1ba:	e08e      	b.n	800f2da <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d034      	beq.n	800f230 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2204      	movs	r2, #4
 800f1ca:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d10e      	bne.n	800f21a <DFU_GetStatus+0x8e>
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	2b41      	cmp	r3, #65	@ 0x41
 800f202:	d10a      	bne.n	800f21a <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	699b      	ldr	r3, [r3, #24]
 800f208:	68fa      	ldr	r2, [r7, #12]
 800f20a:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 800f20e:	68fa      	ldr	r2, [r7, #12]
 800f210:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 800f214:	2100      	movs	r1, #0
 800f216:	4798      	blx	r3
      break;
 800f218:	e05f      	b.n	800f2da <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	699b      	ldr	r3, [r3, #24]
 800f21e:	68fa      	ldr	r2, [r7, #12]
 800f220:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 800f224:	68fa      	ldr	r2, [r7, #12]
 800f226:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 800f22a:	2101      	movs	r1, #1
 800f22c:	4798      	blx	r3
      break;
 800f22e:	e054      	b.n	800f2da <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2205      	movs	r2, #5
 800f234:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	2200      	movs	r2, #0
 800f23c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	2200      	movs	r2, #0
 800f244:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2200      	movs	r2, #0
 800f24c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800f25c:	e03d      	b.n	800f2da <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800f264:	2b01      	cmp	r3, #1
 800f266:	d116      	bne.n	800f296 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2207      	movs	r2, #7
 800f26c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2201      	movs	r2, #1
 800f274:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2200      	movs	r2, #0
 800f27c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2200      	movs	r2, #0
 800f284:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800f294:	e020      	b.n	800f2d8 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d11b      	bne.n	800f2d8 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 800f2a0:	4b14      	ldr	r3, [pc, #80]	@ (800f2f4 <DFU_GetStatus+0x168>)
 800f2a2:	7d1b      	ldrb	r3, [r3, #20]
 800f2a4:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d015      	beq.n	800f2d8 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2202      	movs	r2, #2
 800f2b0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800f2d8:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 800f2e0:	2206      	movs	r2, #6
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f001 f9e0 	bl	80106aa <USBD_CtlSendData>
 800f2ea:	e000      	b.n	800f2ee <DFU_GetStatus+0x162>
    return;
 800f2ec:	bf00      	nop
}
 800f2ee:	3710      	adds	r7, #16
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	20000048 	.word	0x20000048

0800f2f8 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b085      	sub	sp, #20
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f306:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d042      	beq.n	800f394 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f314:	2b0a      	cmp	r3, #10
 800f316:	d11e      	bne.n	800f356 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	2202      	movs	r2, #2
 800f31c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2200      	movs	r2, #0
 800f324:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2200      	movs	r2, #0
 800f32c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	2200      	movs	r2, #0
 800f334:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	2200      	movs	r2, #0
 800f33c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	2200      	movs	r2, #0
 800f350:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 800f354:	e01f      	b.n	800f396 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	220a      	movs	r2, #10
 800f35a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	220e      	movs	r2, #14
 800f362:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2200      	movs	r2, #0
 800f36a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2200      	movs	r2, #0
 800f372:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2200      	movs	r2, #0
 800f37a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	2200      	movs	r2, #0
 800f38e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 800f392:	e000      	b.n	800f396 <DFU_ClearStatus+0x9e>
    return;
 800f394:	bf00      	nop
  }
}
 800f396:	3714      	adds	r7, #20
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr

0800f3a0 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b084      	sub	sp, #16
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f3ae:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d008      	beq.n	800f3c8 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 800f3bc:	2201      	movs	r2, #1
 800f3be:	4619      	mov	r1, r3
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f001 f972 	bl	80106aa <USBD_CtlSendData>
 800f3c6:	e000      	b.n	800f3ca <DFU_GetState+0x2a>
    return;
 800f3c8:	bf00      	nop
}
 800f3ca:	3710      	adds	r7, #16
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800f3d0:	b480      	push	{r7}
 800f3d2:	b085      	sub	sp, #20
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f3de:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d03f      	beq.n	800f466 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800f3ec:	2b02      	cmp	r3, #2
 800f3ee:	d013      	beq.n	800f418 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800f3f6:	2b03      	cmp	r3, #3
 800f3f8:	d00e      	beq.n	800f418 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800f400:	2b05      	cmp	r3, #5
 800f402:	d009      	beq.n	800f418 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800f40a:	2b06      	cmp	r3, #6
 800f40c:	d004      	beq.n	800f418 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800f414:	2b09      	cmp	r3, #9
 800f416:	d127      	bne.n	800f468 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2202      	movs	r2, #2
 800f41c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2200      	movs	r2, #0
 800f424:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	2200      	movs	r2, #0
 800f42c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	2200      	movs	r2, #0
 800f434:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	2200      	movs	r2, #0
 800f43c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2200      	movs	r2, #0
 800f450:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	2200      	movs	r2, #0
 800f458:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2200      	movs	r2, #0
 800f460:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800f464:	e000      	b.n	800f468 <DFU_Abort+0x98>
    return;
 800f466:	bf00      	nop
  }
}
 800f468:	3714      	adds	r7, #20
 800f46a:	46bd      	mov	sp, r7
 800f46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f470:	4770      	bx	lr
	...

0800f474 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f482:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d03b      	beq.n	800f502 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2200      	movs	r2, #0
 800f48e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 800f492:	4b1e      	ldr	r3, [pc, #120]	@ (800f50c <DFU_Leave+0x98>)
 800f494:	7d1b      	ldrb	r3, [r3, #20]
 800f496:	f003 0304 	and.w	r3, r3, #4
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d016      	beq.n	800f4cc <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2206      	movs	r2, #6
 800f4a2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 800f4ca:	e01b      	b.n	800f504 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	2208      	movs	r2, #8
 800f4d0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f000 f86c 	bl	800f5d6 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800f4fe:	f7ff f9b3 	bl	800e868 <__NVIC_SystemReset>
    return;
 800f502:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 800f504:	3710      	adds	r7, #16
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop
 800f50c:	20000048 	.word	0x20000048

0800f510 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b086      	sub	sp, #24
 800f514:	af00      	add	r7, sp, #0
 800f516:	60f8      	str	r0, [r7, #12]
 800f518:	60b9      	str	r1, [r7, #8]
 800f51a:	4613      	mov	r3, r2
 800f51c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d101      	bne.n	800f528 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f524:	2303      	movs	r3, #3
 800f526:	e01f      	b.n	800f568 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	2200      	movs	r2, #0
 800f52c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	2200      	movs	r2, #0
 800f534:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	2200      	movs	r2, #0
 800f53c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d003      	beq.n	800f54e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	68ba      	ldr	r2, [r7, #8]
 800f54a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2201      	movs	r2, #1
 800f552:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	79fa      	ldrb	r2, [r7, #7]
 800f55a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f55c:	68f8      	ldr	r0, [r7, #12]
 800f55e:	f001 fbd9 	bl	8010d14 <USBD_LL_Init>
 800f562:	4603      	mov	r3, r0
 800f564:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f566:	7dfb      	ldrb	r3, [r7, #23]
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3718      	adds	r7, #24
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}

0800f570 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b084      	sub	sp, #16
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f57a:	2300      	movs	r3, #0
 800f57c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d101      	bne.n	800f588 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f584:	2303      	movs	r3, #3
 800f586:	e016      	b.n	800f5b6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	683a      	ldr	r2, [r7, #0]
 800f58c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d00b      	beq.n	800f5b4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5a4:	f107 020e 	add.w	r2, r7, #14
 800f5a8:	4610      	mov	r0, r2
 800f5aa:	4798      	blx	r3
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f5b4:	2300      	movs	r3, #0
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3710      	adds	r7, #16
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}

0800f5be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f5be:	b580      	push	{r7, lr}
 800f5c0:	b082      	sub	sp, #8
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f001 fbea 	bl	8010da0 <USBD_LL_Start>
 800f5cc:	4603      	mov	r3, r0
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3708      	adds	r7, #8
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800f5d6:	b580      	push	{r7, lr}
 800f5d8:	b082      	sub	sp, #8
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f001 fbf9 	bl	8010dd6 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d009      	beq.n	800f602 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5f4:	685b      	ldr	r3, [r3, #4]
 800f5f6:	687a      	ldr	r2, [r7, #4]
 800f5f8:	6852      	ldr	r2, [r2, #4]
 800f5fa:	b2d2      	uxtb	r2, r2
 800f5fc:	4611      	mov	r1, r2
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	4798      	blx	r3
  }

  return USBD_OK;
 800f602:	2300      	movs	r3, #0
}
 800f604:	4618      	mov	r0, r3
 800f606:	3708      	adds	r7, #8
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f60c:	b480      	push	{r7}
 800f60e:	b083      	sub	sp, #12
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f614:	2300      	movs	r3, #0
}
 800f616:	4618      	mov	r0, r3
 800f618:	370c      	adds	r7, #12
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr

0800f622 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f622:	b580      	push	{r7, lr}
 800f624:	b084      	sub	sp, #16
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
 800f62a:	460b      	mov	r3, r1
 800f62c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f62e:	2303      	movs	r3, #3
 800f630:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d009      	beq.n	800f650 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	78fa      	ldrb	r2, [r7, #3]
 800f646:	4611      	mov	r1, r2
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	4798      	blx	r3
 800f64c:	4603      	mov	r3, r0
 800f64e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f650:	7bfb      	ldrb	r3, [r7, #15]
}
 800f652:	4618      	mov	r0, r3
 800f654:	3710      	adds	r7, #16
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}

0800f65a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f65a:	b580      	push	{r7, lr}
 800f65c:	b082      	sub	sp, #8
 800f65e:	af00      	add	r7, sp, #0
 800f660:	6078      	str	r0, [r7, #4]
 800f662:	460b      	mov	r3, r1
 800f664:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d007      	beq.n	800f680 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	78fa      	ldrb	r2, [r7, #3]
 800f67a:	4611      	mov	r1, r2
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	4798      	blx	r3
  }

  return USBD_OK;
 800f680:	2300      	movs	r3, #0
}
 800f682:	4618      	mov	r0, r3
 800f684:	3708      	adds	r7, #8
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}

0800f68a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f68a:	b580      	push	{r7, lr}
 800f68c:	b084      	sub	sp, #16
 800f68e:	af00      	add	r7, sp, #0
 800f690:	6078      	str	r0, [r7, #4]
 800f692:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f69a:	6839      	ldr	r1, [r7, #0]
 800f69c:	4618      	mov	r0, r3
 800f69e:	f000 ff59 	bl	8010554 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f6be:	f003 031f 	and.w	r3, r3, #31
 800f6c2:	2b02      	cmp	r3, #2
 800f6c4:	d01a      	beq.n	800f6fc <USBD_LL_SetupStage+0x72>
 800f6c6:	2b02      	cmp	r3, #2
 800f6c8:	d822      	bhi.n	800f710 <USBD_LL_SetupStage+0x86>
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d002      	beq.n	800f6d4 <USBD_LL_SetupStage+0x4a>
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d00a      	beq.n	800f6e8 <USBD_LL_SetupStage+0x5e>
 800f6d2:	e01d      	b.n	800f710 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f6da:	4619      	mov	r1, r3
 800f6dc:	6878      	ldr	r0, [r7, #4]
 800f6de:	f000 f9ef 	bl	800fac0 <USBD_StdDevReq>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	73fb      	strb	r3, [r7, #15]
      break;
 800f6e6:	e020      	b.n	800f72a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f000 fa53 	bl	800fb9c <USBD_StdItfReq>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	73fb      	strb	r3, [r7, #15]
      break;
 800f6fa:	e016      	b.n	800f72a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f702:	4619      	mov	r1, r3
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f000 fa92 	bl	800fc2e <USBD_StdEPReq>
 800f70a:	4603      	mov	r3, r0
 800f70c:	73fb      	strb	r3, [r7, #15]
      break;
 800f70e:	e00c      	b.n	800f72a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f716:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	4619      	mov	r1, r3
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f001 fb9a 	bl	8010e58 <USBD_LL_StallEP>
 800f724:	4603      	mov	r3, r0
 800f726:	73fb      	strb	r3, [r7, #15]
      break;
 800f728:	bf00      	nop
  }

  return ret;
 800f72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3710      	adds	r7, #16
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b086      	sub	sp, #24
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	460b      	mov	r3, r1
 800f73e:	607a      	str	r2, [r7, #4]
 800f740:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f742:	7afb      	ldrb	r3, [r7, #11]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d138      	bne.n	800f7ba <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f74e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f756:	2b03      	cmp	r3, #3
 800f758:	d14a      	bne.n	800f7f0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	689a      	ldr	r2, [r3, #8]
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	68db      	ldr	r3, [r3, #12]
 800f762:	429a      	cmp	r2, r3
 800f764:	d913      	bls.n	800f78e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	689a      	ldr	r2, [r3, #8]
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	68db      	ldr	r3, [r3, #12]
 800f76e:	1ad2      	subs	r2, r2, r3
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	68da      	ldr	r2, [r3, #12]
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	689b      	ldr	r3, [r3, #8]
 800f77c:	4293      	cmp	r3, r2
 800f77e:	bf28      	it	cs
 800f780:	4613      	movcs	r3, r2
 800f782:	461a      	mov	r2, r3
 800f784:	6879      	ldr	r1, [r7, #4]
 800f786:	68f8      	ldr	r0, [r7, #12]
 800f788:	f000 ffd8 	bl	801073c <USBD_CtlContinueRx>
 800f78c:	e030      	b.n	800f7f0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f794:	b2db      	uxtb	r3, r3
 800f796:	2b03      	cmp	r3, #3
 800f798:	d10b      	bne.n	800f7b2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7a0:	691b      	ldr	r3, [r3, #16]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d005      	beq.n	800f7b2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7ac:	691b      	ldr	r3, [r3, #16]
 800f7ae:	68f8      	ldr	r0, [r7, #12]
 800f7b0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f7b2:	68f8      	ldr	r0, [r7, #12]
 800f7b4:	f000 ffd3 	bl	801075e <USBD_CtlSendStatus>
 800f7b8:	e01a      	b.n	800f7f0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7c0:	b2db      	uxtb	r3, r3
 800f7c2:	2b03      	cmp	r3, #3
 800f7c4:	d114      	bne.n	800f7f0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7cc:	699b      	ldr	r3, [r3, #24]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d00e      	beq.n	800f7f0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7d8:	699b      	ldr	r3, [r3, #24]
 800f7da:	7afa      	ldrb	r2, [r7, #11]
 800f7dc:	4611      	mov	r1, r2
 800f7de:	68f8      	ldr	r0, [r7, #12]
 800f7e0:	4798      	blx	r3
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f7e6:	7dfb      	ldrb	r3, [r7, #23]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d001      	beq.n	800f7f0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f7ec:	7dfb      	ldrb	r3, [r7, #23]
 800f7ee:	e000      	b.n	800f7f2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f7f0:	2300      	movs	r3, #0
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3718      	adds	r7, #24
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}

0800f7fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f7fa:	b580      	push	{r7, lr}
 800f7fc:	b086      	sub	sp, #24
 800f7fe:	af00      	add	r7, sp, #0
 800f800:	60f8      	str	r0, [r7, #12]
 800f802:	460b      	mov	r3, r1
 800f804:	607a      	str	r2, [r7, #4]
 800f806:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f808:	7afb      	ldrb	r3, [r7, #11]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d16b      	bne.n	800f8e6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	3314      	adds	r3, #20
 800f812:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f81a:	2b02      	cmp	r3, #2
 800f81c:	d156      	bne.n	800f8cc <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	689a      	ldr	r2, [r3, #8]
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	68db      	ldr	r3, [r3, #12]
 800f826:	429a      	cmp	r2, r3
 800f828:	d914      	bls.n	800f854 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	689a      	ldr	r2, [r3, #8]
 800f82e:	693b      	ldr	r3, [r7, #16]
 800f830:	68db      	ldr	r3, [r3, #12]
 800f832:	1ad2      	subs	r2, r2, r3
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	689b      	ldr	r3, [r3, #8]
 800f83c:	461a      	mov	r2, r3
 800f83e:	6879      	ldr	r1, [r7, #4]
 800f840:	68f8      	ldr	r0, [r7, #12]
 800f842:	f000 ff4d 	bl	80106e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f846:	2300      	movs	r3, #0
 800f848:	2200      	movs	r2, #0
 800f84a:	2100      	movs	r1, #0
 800f84c:	68f8      	ldr	r0, [r7, #12]
 800f84e:	f001 fbad 	bl	8010fac <USBD_LL_PrepareReceive>
 800f852:	e03b      	b.n	800f8cc <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	68da      	ldr	r2, [r3, #12]
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	689b      	ldr	r3, [r3, #8]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d11c      	bne.n	800f89a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f860:	693b      	ldr	r3, [r7, #16]
 800f862:	685a      	ldr	r2, [r3, #4]
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f868:	429a      	cmp	r2, r3
 800f86a:	d316      	bcc.n	800f89a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	685a      	ldr	r2, [r3, #4]
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f876:	429a      	cmp	r2, r3
 800f878:	d20f      	bcs.n	800f89a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f87a:	2200      	movs	r2, #0
 800f87c:	2100      	movs	r1, #0
 800f87e:	68f8      	ldr	r0, [r7, #12]
 800f880:	f000 ff2e 	bl	80106e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	2200      	movs	r2, #0
 800f888:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f88c:	2300      	movs	r3, #0
 800f88e:	2200      	movs	r2, #0
 800f890:	2100      	movs	r1, #0
 800f892:	68f8      	ldr	r0, [r7, #12]
 800f894:	f001 fb8a 	bl	8010fac <USBD_LL_PrepareReceive>
 800f898:	e018      	b.n	800f8cc <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8a0:	b2db      	uxtb	r3, r3
 800f8a2:	2b03      	cmp	r3, #3
 800f8a4:	d10b      	bne.n	800f8be <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8ac:	68db      	ldr	r3, [r3, #12]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d005      	beq.n	800f8be <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	68f8      	ldr	r0, [r7, #12]
 800f8bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f8be:	2180      	movs	r1, #128	@ 0x80
 800f8c0:	68f8      	ldr	r0, [r7, #12]
 800f8c2:	f001 fac9 	bl	8010e58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f8c6:	68f8      	ldr	r0, [r7, #12]
 800f8c8:	f000 ff5c 	bl	8010784 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f8d2:	2b01      	cmp	r3, #1
 800f8d4:	d122      	bne.n	800f91c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f8d6:	68f8      	ldr	r0, [r7, #12]
 800f8d8:	f7ff fe98 	bl	800f60c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2200      	movs	r2, #0
 800f8e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f8e4:	e01a      	b.n	800f91c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8ec:	b2db      	uxtb	r3, r3
 800f8ee:	2b03      	cmp	r3, #3
 800f8f0:	d114      	bne.n	800f91c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8f8:	695b      	ldr	r3, [r3, #20]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d00e      	beq.n	800f91c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f904:	695b      	ldr	r3, [r3, #20]
 800f906:	7afa      	ldrb	r2, [r7, #11]
 800f908:	4611      	mov	r1, r2
 800f90a:	68f8      	ldr	r0, [r7, #12]
 800f90c:	4798      	blx	r3
 800f90e:	4603      	mov	r3, r0
 800f910:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f912:	7dfb      	ldrb	r3, [r7, #23]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d001      	beq.n	800f91c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f918:	7dfb      	ldrb	r3, [r7, #23]
 800f91a:	e000      	b.n	800f91e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f91c:	2300      	movs	r3, #0
}
 800f91e:	4618      	mov	r0, r3
 800f920:	3718      	adds	r7, #24
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}

0800f926 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f926:	b580      	push	{r7, lr}
 800f928:	b082      	sub	sp, #8
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2201      	movs	r2, #1
 800f932:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2200      	movs	r2, #0
 800f93a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2200      	movs	r2, #0
 800f942:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2200      	movs	r2, #0
 800f948:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f952:	2b00      	cmp	r3, #0
 800f954:	d101      	bne.n	800f95a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f956:	2303      	movs	r3, #3
 800f958:	e02f      	b.n	800f9ba <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f960:	2b00      	cmp	r3, #0
 800f962:	d00f      	beq.n	800f984 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d009      	beq.n	800f984 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	687a      	ldr	r2, [r7, #4]
 800f97a:	6852      	ldr	r2, [r2, #4]
 800f97c:	b2d2      	uxtb	r2, r2
 800f97e:	4611      	mov	r1, r2
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f984:	2340      	movs	r3, #64	@ 0x40
 800f986:	2200      	movs	r2, #0
 800f988:	2100      	movs	r1, #0
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f001 fa3e 	bl	8010e0c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2201      	movs	r2, #1
 800f994:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2240      	movs	r2, #64	@ 0x40
 800f99c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f9a0:	2340      	movs	r3, #64	@ 0x40
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	2180      	movs	r1, #128	@ 0x80
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f001 fa30 	bl	8010e0c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2240      	movs	r2, #64	@ 0x40
 800f9b6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f9b8:	2300      	movs	r3, #0
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3708      	adds	r7, #8
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}

0800f9c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f9c2:	b480      	push	{r7}
 800f9c4:	b083      	sub	sp, #12
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	78fa      	ldrb	r2, [r7, #3]
 800f9d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f9d4:	2300      	movs	r3, #0
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	370c      	adds	r7, #12
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e0:	4770      	bx	lr

0800f9e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f9e2:	b480      	push	{r7}
 800f9e4:	b083      	sub	sp, #12
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9f0:	b2da      	uxtb	r2, r3
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	2204      	movs	r2, #4
 800f9fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800fa00:	2300      	movs	r3, #0
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	370c      	adds	r7, #12
 800fa06:	46bd      	mov	sp, r7
 800fa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0c:	4770      	bx	lr

0800fa0e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fa0e:	b480      	push	{r7}
 800fa10:	b083      	sub	sp, #12
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	2b04      	cmp	r3, #4
 800fa20:	d106      	bne.n	800fa30 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800fa28:	b2da      	uxtb	r2, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	370c      	adds	r7, #12
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr

0800fa3e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fa3e:	b580      	push	{r7, lr}
 800fa40:	b082      	sub	sp, #8
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d101      	bne.n	800fa54 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800fa50:	2303      	movs	r3, #3
 800fa52:	e012      	b.n	800fa7a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa5a:	b2db      	uxtb	r3, r3
 800fa5c:	2b03      	cmp	r3, #3
 800fa5e:	d10b      	bne.n	800fa78 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa66:	69db      	ldr	r3, [r3, #28]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d005      	beq.n	800fa78 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa72:	69db      	ldr	r3, [r3, #28]
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fa78:	2300      	movs	r3, #0
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3708      	adds	r7, #8
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}

0800fa82 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fa82:	b480      	push	{r7}
 800fa84:	b087      	sub	sp, #28
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	3301      	adds	r3, #1
 800fa98:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	781b      	ldrb	r3, [r3, #0]
 800fa9e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800faa0:	8a3b      	ldrh	r3, [r7, #16]
 800faa2:	021b      	lsls	r3, r3, #8
 800faa4:	b21a      	sxth	r2, r3
 800faa6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800faaa:	4313      	orrs	r3, r2
 800faac:	b21b      	sxth	r3, r3
 800faae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fab0:	89fb      	ldrh	r3, [r7, #14]
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	371c      	adds	r7, #28
 800fab6:	46bd      	mov	sp, r7
 800fab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabc:	4770      	bx	lr
	...

0800fac0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800faca:	2300      	movs	r3, #0
 800facc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fad6:	2b40      	cmp	r3, #64	@ 0x40
 800fad8:	d005      	beq.n	800fae6 <USBD_StdDevReq+0x26>
 800fada:	2b40      	cmp	r3, #64	@ 0x40
 800fadc:	d853      	bhi.n	800fb86 <USBD_StdDevReq+0xc6>
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d00b      	beq.n	800fafa <USBD_StdDevReq+0x3a>
 800fae2:	2b20      	cmp	r3, #32
 800fae4:	d14f      	bne.n	800fb86 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800faec:	689b      	ldr	r3, [r3, #8]
 800faee:	6839      	ldr	r1, [r7, #0]
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	4798      	blx	r3
 800faf4:	4603      	mov	r3, r0
 800faf6:	73fb      	strb	r3, [r7, #15]
      break;
 800faf8:	e04a      	b.n	800fb90 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	785b      	ldrb	r3, [r3, #1]
 800fafe:	2b09      	cmp	r3, #9
 800fb00:	d83b      	bhi.n	800fb7a <USBD_StdDevReq+0xba>
 800fb02:	a201      	add	r2, pc, #4	@ (adr r2, 800fb08 <USBD_StdDevReq+0x48>)
 800fb04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb08:	0800fb5d 	.word	0x0800fb5d
 800fb0c:	0800fb71 	.word	0x0800fb71
 800fb10:	0800fb7b 	.word	0x0800fb7b
 800fb14:	0800fb67 	.word	0x0800fb67
 800fb18:	0800fb7b 	.word	0x0800fb7b
 800fb1c:	0800fb3b 	.word	0x0800fb3b
 800fb20:	0800fb31 	.word	0x0800fb31
 800fb24:	0800fb7b 	.word	0x0800fb7b
 800fb28:	0800fb53 	.word	0x0800fb53
 800fb2c:	0800fb45 	.word	0x0800fb45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fb30:	6839      	ldr	r1, [r7, #0]
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f000 f9de 	bl	800fef4 <USBD_GetDescriptor>
          break;
 800fb38:	e024      	b.n	800fb84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fb3a:	6839      	ldr	r1, [r7, #0]
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f000 fb7f 	bl	8010240 <USBD_SetAddress>
          break;
 800fb42:	e01f      	b.n	800fb84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fb44:	6839      	ldr	r1, [r7, #0]
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 fbbe 	bl	80102c8 <USBD_SetConfig>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	73fb      	strb	r3, [r7, #15]
          break;
 800fb50:	e018      	b.n	800fb84 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fb52:	6839      	ldr	r1, [r7, #0]
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f000 fc5d 	bl	8010414 <USBD_GetConfig>
          break;
 800fb5a:	e013      	b.n	800fb84 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fb5c:	6839      	ldr	r1, [r7, #0]
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f000 fc8e 	bl	8010480 <USBD_GetStatus>
          break;
 800fb64:	e00e      	b.n	800fb84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fb66:	6839      	ldr	r1, [r7, #0]
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f000 fcbd 	bl	80104e8 <USBD_SetFeature>
          break;
 800fb6e:	e009      	b.n	800fb84 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fb70:	6839      	ldr	r1, [r7, #0]
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f000 fccc 	bl	8010510 <USBD_ClrFeature>
          break;
 800fb78:	e004      	b.n	800fb84 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800fb7a:	6839      	ldr	r1, [r7, #0]
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 fd23 	bl	80105c8 <USBD_CtlError>
          break;
 800fb82:	bf00      	nop
      }
      break;
 800fb84:	e004      	b.n	800fb90 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800fb86:	6839      	ldr	r1, [r7, #0]
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f000 fd1d 	bl	80105c8 <USBD_CtlError>
      break;
 800fb8e:	bf00      	nop
  }

  return ret;
 800fb90:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3710      	adds	r7, #16
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop

0800fb9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b084      	sub	sp, #16
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fba6:	2300      	movs	r3, #0
 800fba8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	781b      	ldrb	r3, [r3, #0]
 800fbae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fbb2:	2b40      	cmp	r3, #64	@ 0x40
 800fbb4:	d005      	beq.n	800fbc2 <USBD_StdItfReq+0x26>
 800fbb6:	2b40      	cmp	r3, #64	@ 0x40
 800fbb8:	d82f      	bhi.n	800fc1a <USBD_StdItfReq+0x7e>
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d001      	beq.n	800fbc2 <USBD_StdItfReq+0x26>
 800fbbe:	2b20      	cmp	r3, #32
 800fbc0:	d12b      	bne.n	800fc1a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fbc8:	b2db      	uxtb	r3, r3
 800fbca:	3b01      	subs	r3, #1
 800fbcc:	2b02      	cmp	r3, #2
 800fbce:	d81d      	bhi.n	800fc0c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	889b      	ldrh	r3, [r3, #4]
 800fbd4:	b2db      	uxtb	r3, r3
 800fbd6:	2b01      	cmp	r3, #1
 800fbd8:	d813      	bhi.n	800fc02 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fbe0:	689b      	ldr	r3, [r3, #8]
 800fbe2:	6839      	ldr	r1, [r7, #0]
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	4798      	blx	r3
 800fbe8:	4603      	mov	r3, r0
 800fbea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	88db      	ldrh	r3, [r3, #6]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d110      	bne.n	800fc16 <USBD_StdItfReq+0x7a>
 800fbf4:	7bfb      	ldrb	r3, [r7, #15]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d10d      	bne.n	800fc16 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 fdaf 	bl	801075e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fc00:	e009      	b.n	800fc16 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800fc02:	6839      	ldr	r1, [r7, #0]
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f000 fcdf 	bl	80105c8 <USBD_CtlError>
          break;
 800fc0a:	e004      	b.n	800fc16 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800fc0c:	6839      	ldr	r1, [r7, #0]
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f000 fcda 	bl	80105c8 <USBD_CtlError>
          break;
 800fc14:	e000      	b.n	800fc18 <USBD_StdItfReq+0x7c>
          break;
 800fc16:	bf00      	nop
      }
      break;
 800fc18:	e004      	b.n	800fc24 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800fc1a:	6839      	ldr	r1, [r7, #0]
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f000 fcd3 	bl	80105c8 <USBD_CtlError>
      break;
 800fc22:	bf00      	nop
  }

  return ret;
 800fc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3710      	adds	r7, #16
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}

0800fc2e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc2e:	b580      	push	{r7, lr}
 800fc30:	b084      	sub	sp, #16
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	6078      	str	r0, [r7, #4]
 800fc36:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fc38:	2300      	movs	r3, #0
 800fc3a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	889b      	ldrh	r3, [r3, #4]
 800fc40:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fc4a:	2b40      	cmp	r3, #64	@ 0x40
 800fc4c:	d007      	beq.n	800fc5e <USBD_StdEPReq+0x30>
 800fc4e:	2b40      	cmp	r3, #64	@ 0x40
 800fc50:	f200 8145 	bhi.w	800fede <USBD_StdEPReq+0x2b0>
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d00c      	beq.n	800fc72 <USBD_StdEPReq+0x44>
 800fc58:	2b20      	cmp	r3, #32
 800fc5a:	f040 8140 	bne.w	800fede <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc64:	689b      	ldr	r3, [r3, #8]
 800fc66:	6839      	ldr	r1, [r7, #0]
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	4798      	blx	r3
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	73fb      	strb	r3, [r7, #15]
      break;
 800fc70:	e13a      	b.n	800fee8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	785b      	ldrb	r3, [r3, #1]
 800fc76:	2b03      	cmp	r3, #3
 800fc78:	d007      	beq.n	800fc8a <USBD_StdEPReq+0x5c>
 800fc7a:	2b03      	cmp	r3, #3
 800fc7c:	f300 8129 	bgt.w	800fed2 <USBD_StdEPReq+0x2a4>
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d07f      	beq.n	800fd84 <USBD_StdEPReq+0x156>
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	d03c      	beq.n	800fd02 <USBD_StdEPReq+0xd4>
 800fc88:	e123      	b.n	800fed2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc90:	b2db      	uxtb	r3, r3
 800fc92:	2b02      	cmp	r3, #2
 800fc94:	d002      	beq.n	800fc9c <USBD_StdEPReq+0x6e>
 800fc96:	2b03      	cmp	r3, #3
 800fc98:	d016      	beq.n	800fcc8 <USBD_StdEPReq+0x9a>
 800fc9a:	e02c      	b.n	800fcf6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc9c:	7bbb      	ldrb	r3, [r7, #14]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d00d      	beq.n	800fcbe <USBD_StdEPReq+0x90>
 800fca2:	7bbb      	ldrb	r3, [r7, #14]
 800fca4:	2b80      	cmp	r3, #128	@ 0x80
 800fca6:	d00a      	beq.n	800fcbe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fca8:	7bbb      	ldrb	r3, [r7, #14]
 800fcaa:	4619      	mov	r1, r3
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f001 f8d3 	bl	8010e58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fcb2:	2180      	movs	r1, #128	@ 0x80
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f001 f8cf 	bl	8010e58 <USBD_LL_StallEP>
 800fcba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fcbc:	e020      	b.n	800fd00 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800fcbe:	6839      	ldr	r1, [r7, #0]
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f000 fc81 	bl	80105c8 <USBD_CtlError>
              break;
 800fcc6:	e01b      	b.n	800fd00 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	885b      	ldrh	r3, [r3, #2]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d10e      	bne.n	800fcee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fcd0:	7bbb      	ldrb	r3, [r7, #14]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d00b      	beq.n	800fcee <USBD_StdEPReq+0xc0>
 800fcd6:	7bbb      	ldrb	r3, [r7, #14]
 800fcd8:	2b80      	cmp	r3, #128	@ 0x80
 800fcda:	d008      	beq.n	800fcee <USBD_StdEPReq+0xc0>
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	88db      	ldrh	r3, [r3, #6]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d104      	bne.n	800fcee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fce4:	7bbb      	ldrb	r3, [r7, #14]
 800fce6:	4619      	mov	r1, r3
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f001 f8b5 	bl	8010e58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f000 fd35 	bl	801075e <USBD_CtlSendStatus>

              break;
 800fcf4:	e004      	b.n	800fd00 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800fcf6:	6839      	ldr	r1, [r7, #0]
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f000 fc65 	bl	80105c8 <USBD_CtlError>
              break;
 800fcfe:	bf00      	nop
          }
          break;
 800fd00:	e0ec      	b.n	800fedc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd08:	b2db      	uxtb	r3, r3
 800fd0a:	2b02      	cmp	r3, #2
 800fd0c:	d002      	beq.n	800fd14 <USBD_StdEPReq+0xe6>
 800fd0e:	2b03      	cmp	r3, #3
 800fd10:	d016      	beq.n	800fd40 <USBD_StdEPReq+0x112>
 800fd12:	e030      	b.n	800fd76 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fd14:	7bbb      	ldrb	r3, [r7, #14]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d00d      	beq.n	800fd36 <USBD_StdEPReq+0x108>
 800fd1a:	7bbb      	ldrb	r3, [r7, #14]
 800fd1c:	2b80      	cmp	r3, #128	@ 0x80
 800fd1e:	d00a      	beq.n	800fd36 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fd20:	7bbb      	ldrb	r3, [r7, #14]
 800fd22:	4619      	mov	r1, r3
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f001 f897 	bl	8010e58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fd2a:	2180      	movs	r1, #128	@ 0x80
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f001 f893 	bl	8010e58 <USBD_LL_StallEP>
 800fd32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fd34:	e025      	b.n	800fd82 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800fd36:	6839      	ldr	r1, [r7, #0]
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f000 fc45 	bl	80105c8 <USBD_CtlError>
              break;
 800fd3e:	e020      	b.n	800fd82 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	885b      	ldrh	r3, [r3, #2]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d11b      	bne.n	800fd80 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fd48:	7bbb      	ldrb	r3, [r7, #14]
 800fd4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d004      	beq.n	800fd5c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fd52:	7bbb      	ldrb	r3, [r7, #14]
 800fd54:	4619      	mov	r1, r3
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f001 f89d 	bl	8010e96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f000 fcfe 	bl	801075e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd68:	689b      	ldr	r3, [r3, #8]
 800fd6a:	6839      	ldr	r1, [r7, #0]
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	4798      	blx	r3
 800fd70:	4603      	mov	r3, r0
 800fd72:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800fd74:	e004      	b.n	800fd80 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800fd76:	6839      	ldr	r1, [r7, #0]
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f000 fc25 	bl	80105c8 <USBD_CtlError>
              break;
 800fd7e:	e000      	b.n	800fd82 <USBD_StdEPReq+0x154>
              break;
 800fd80:	bf00      	nop
          }
          break;
 800fd82:	e0ab      	b.n	800fedc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd8a:	b2db      	uxtb	r3, r3
 800fd8c:	2b02      	cmp	r3, #2
 800fd8e:	d002      	beq.n	800fd96 <USBD_StdEPReq+0x168>
 800fd90:	2b03      	cmp	r3, #3
 800fd92:	d032      	beq.n	800fdfa <USBD_StdEPReq+0x1cc>
 800fd94:	e097      	b.n	800fec6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fd96:	7bbb      	ldrb	r3, [r7, #14]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d007      	beq.n	800fdac <USBD_StdEPReq+0x17e>
 800fd9c:	7bbb      	ldrb	r3, [r7, #14]
 800fd9e:	2b80      	cmp	r3, #128	@ 0x80
 800fda0:	d004      	beq.n	800fdac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800fda2:	6839      	ldr	r1, [r7, #0]
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f000 fc0f 	bl	80105c8 <USBD_CtlError>
                break;
 800fdaa:	e091      	b.n	800fed0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fdac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	da0b      	bge.n	800fdcc <USBD_StdEPReq+0x19e>
 800fdb4:	7bbb      	ldrb	r3, [r7, #14]
 800fdb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fdba:	4613      	mov	r3, r2
 800fdbc:	009b      	lsls	r3, r3, #2
 800fdbe:	4413      	add	r3, r2
 800fdc0:	009b      	lsls	r3, r3, #2
 800fdc2:	3310      	adds	r3, #16
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	4413      	add	r3, r2
 800fdc8:	3304      	adds	r3, #4
 800fdca:	e00b      	b.n	800fde4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fdcc:	7bbb      	ldrb	r3, [r7, #14]
 800fdce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fdd2:	4613      	mov	r3, r2
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	4413      	add	r3, r2
 800fdd8:	009b      	lsls	r3, r3, #2
 800fdda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fdde:	687a      	ldr	r2, [r7, #4]
 800fde0:	4413      	add	r3, r2
 800fde2:	3304      	adds	r3, #4
 800fde4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	2200      	movs	r2, #0
 800fdea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	2202      	movs	r2, #2
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f000 fc59 	bl	80106aa <USBD_CtlSendData>
              break;
 800fdf8:	e06a      	b.n	800fed0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fdfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	da11      	bge.n	800fe26 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fe02:	7bbb      	ldrb	r3, [r7, #14]
 800fe04:	f003 020f 	and.w	r2, r3, #15
 800fe08:	6879      	ldr	r1, [r7, #4]
 800fe0a:	4613      	mov	r3, r2
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	4413      	add	r3, r2
 800fe10:	009b      	lsls	r3, r3, #2
 800fe12:	440b      	add	r3, r1
 800fe14:	3324      	adds	r3, #36	@ 0x24
 800fe16:	881b      	ldrh	r3, [r3, #0]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d117      	bne.n	800fe4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fe1c:	6839      	ldr	r1, [r7, #0]
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f000 fbd2 	bl	80105c8 <USBD_CtlError>
                  break;
 800fe24:	e054      	b.n	800fed0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fe26:	7bbb      	ldrb	r3, [r7, #14]
 800fe28:	f003 020f 	and.w	r2, r3, #15
 800fe2c:	6879      	ldr	r1, [r7, #4]
 800fe2e:	4613      	mov	r3, r2
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	4413      	add	r3, r2
 800fe34:	009b      	lsls	r3, r3, #2
 800fe36:	440b      	add	r3, r1
 800fe38:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fe3c:	881b      	ldrh	r3, [r3, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d104      	bne.n	800fe4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fe42:	6839      	ldr	r1, [r7, #0]
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f000 fbbf 	bl	80105c8 <USBD_CtlError>
                  break;
 800fe4a:	e041      	b.n	800fed0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	da0b      	bge.n	800fe6c <USBD_StdEPReq+0x23e>
 800fe54:	7bbb      	ldrb	r3, [r7, #14]
 800fe56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fe5a:	4613      	mov	r3, r2
 800fe5c:	009b      	lsls	r3, r3, #2
 800fe5e:	4413      	add	r3, r2
 800fe60:	009b      	lsls	r3, r3, #2
 800fe62:	3310      	adds	r3, #16
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	4413      	add	r3, r2
 800fe68:	3304      	adds	r3, #4
 800fe6a:	e00b      	b.n	800fe84 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fe6c:	7bbb      	ldrb	r3, [r7, #14]
 800fe6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe72:	4613      	mov	r3, r2
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	4413      	add	r3, r2
 800fe78:	009b      	lsls	r3, r3, #2
 800fe7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fe7e:	687a      	ldr	r2, [r7, #4]
 800fe80:	4413      	add	r3, r2
 800fe82:	3304      	adds	r3, #4
 800fe84:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fe86:	7bbb      	ldrb	r3, [r7, #14]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d002      	beq.n	800fe92 <USBD_StdEPReq+0x264>
 800fe8c:	7bbb      	ldrb	r3, [r7, #14]
 800fe8e:	2b80      	cmp	r3, #128	@ 0x80
 800fe90:	d103      	bne.n	800fe9a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	2200      	movs	r2, #0
 800fe96:	601a      	str	r2, [r3, #0]
 800fe98:	e00e      	b.n	800feb8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fe9a:	7bbb      	ldrb	r3, [r7, #14]
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f001 f818 	bl	8010ed4 <USBD_LL_IsStallEP>
 800fea4:	4603      	mov	r3, r0
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d003      	beq.n	800feb2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	2201      	movs	r2, #1
 800feae:	601a      	str	r2, [r3, #0]
 800feb0:	e002      	b.n	800feb8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	2200      	movs	r2, #0
 800feb6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	2202      	movs	r2, #2
 800febc:	4619      	mov	r1, r3
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f000 fbf3 	bl	80106aa <USBD_CtlSendData>
              break;
 800fec4:	e004      	b.n	800fed0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800fec6:	6839      	ldr	r1, [r7, #0]
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f000 fb7d 	bl	80105c8 <USBD_CtlError>
              break;
 800fece:	bf00      	nop
          }
          break;
 800fed0:	e004      	b.n	800fedc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800fed2:	6839      	ldr	r1, [r7, #0]
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f000 fb77 	bl	80105c8 <USBD_CtlError>
          break;
 800feda:	bf00      	nop
      }
      break;
 800fedc:	e004      	b.n	800fee8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800fede:	6839      	ldr	r1, [r7, #0]
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f000 fb71 	bl	80105c8 <USBD_CtlError>
      break;
 800fee6:	bf00      	nop
  }

  return ret;
 800fee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800feea:	4618      	mov	r0, r3
 800feec:	3710      	adds	r7, #16
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}
	...

0800fef4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b084      	sub	sp, #16
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fefe:	2300      	movs	r3, #0
 800ff00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ff02:	2300      	movs	r3, #0
 800ff04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ff06:	2300      	movs	r3, #0
 800ff08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	885b      	ldrh	r3, [r3, #2]
 800ff0e:	0a1b      	lsrs	r3, r3, #8
 800ff10:	b29b      	uxth	r3, r3
 800ff12:	3b01      	subs	r3, #1
 800ff14:	2b0e      	cmp	r3, #14
 800ff16:	f200 8165 	bhi.w	80101e4 <USBD_GetDescriptor+0x2f0>
 800ff1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ff20 <USBD_GetDescriptor+0x2c>)
 800ff1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff20:	0800ff91 	.word	0x0800ff91
 800ff24:	0800ffa9 	.word	0x0800ffa9
 800ff28:	0800ffe9 	.word	0x0800ffe9
 800ff2c:	080101e5 	.word	0x080101e5
 800ff30:	080101e5 	.word	0x080101e5
 800ff34:	08010185 	.word	0x08010185
 800ff38:	080101b1 	.word	0x080101b1
 800ff3c:	080101e5 	.word	0x080101e5
 800ff40:	080101e5 	.word	0x080101e5
 800ff44:	080101e5 	.word	0x080101e5
 800ff48:	080101e5 	.word	0x080101e5
 800ff4c:	080101e5 	.word	0x080101e5
 800ff50:	080101e5 	.word	0x080101e5
 800ff54:	080101e5 	.word	0x080101e5
 800ff58:	0800ff5d 	.word	0x0800ff5d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff62:	69db      	ldr	r3, [r3, #28]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d00b      	beq.n	800ff80 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff6e:	69db      	ldr	r3, [r3, #28]
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	7c12      	ldrb	r2, [r2, #16]
 800ff74:	f107 0108 	add.w	r1, r7, #8
 800ff78:	4610      	mov	r0, r2
 800ff7a:	4798      	blx	r3
 800ff7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff7e:	e139      	b.n	80101f4 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 800ff80:	6839      	ldr	r1, [r7, #0]
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f000 fb20 	bl	80105c8 <USBD_CtlError>
        err++;
 800ff88:	7afb      	ldrb	r3, [r7, #11]
 800ff8a:	3301      	adds	r3, #1
 800ff8c:	72fb      	strb	r3, [r7, #11]
      break;
 800ff8e:	e131      	b.n	80101f4 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	7c12      	ldrb	r2, [r2, #16]
 800ff9c:	f107 0108 	add.w	r1, r7, #8
 800ffa0:	4610      	mov	r0, r2
 800ffa2:	4798      	blx	r3
 800ffa4:	60f8      	str	r0, [r7, #12]
      break;
 800ffa6:	e125      	b.n	80101f4 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	7c1b      	ldrb	r3, [r3, #16]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d10d      	bne.n	800ffcc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ffb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffb8:	f107 0208 	add.w	r2, r7, #8
 800ffbc:	4610      	mov	r0, r2
 800ffbe:	4798      	blx	r3
 800ffc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	3301      	adds	r3, #1
 800ffc6:	2202      	movs	r2, #2
 800ffc8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ffca:	e113      	b.n	80101f4 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ffd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffd4:	f107 0208 	add.w	r2, r7, #8
 800ffd8:	4610      	mov	r0, r2
 800ffda:	4798      	blx	r3
 800ffdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	2202      	movs	r2, #2
 800ffe4:	701a      	strb	r2, [r3, #0]
      break;
 800ffe6:	e105      	b.n	80101f4 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	885b      	ldrh	r3, [r3, #2]
 800ffec:	b2db      	uxtb	r3, r3
 800ffee:	2b05      	cmp	r3, #5
 800fff0:	f200 80ac 	bhi.w	801014c <USBD_GetDescriptor+0x258>
 800fff4:	a201      	add	r2, pc, #4	@ (adr r2, 800fffc <USBD_GetDescriptor+0x108>)
 800fff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fffa:	bf00      	nop
 800fffc:	08010015 	.word	0x08010015
 8010000:	08010049 	.word	0x08010049
 8010004:	0801007d 	.word	0x0801007d
 8010008:	080100b1 	.word	0x080100b1
 801000c:	080100e5 	.word	0x080100e5
 8010010:	08010119 	.word	0x08010119
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801001a:	685b      	ldr	r3, [r3, #4]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d00b      	beq.n	8010038 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	7c12      	ldrb	r2, [r2, #16]
 801002c:	f107 0108 	add.w	r1, r7, #8
 8010030:	4610      	mov	r0, r2
 8010032:	4798      	blx	r3
 8010034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010036:	e0a4      	b.n	8010182 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010038:	6839      	ldr	r1, [r7, #0]
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f000 fac4 	bl	80105c8 <USBD_CtlError>
            err++;
 8010040:	7afb      	ldrb	r3, [r7, #11]
 8010042:	3301      	adds	r3, #1
 8010044:	72fb      	strb	r3, [r7, #11]
          break;
 8010046:	e09c      	b.n	8010182 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801004e:	689b      	ldr	r3, [r3, #8]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d00b      	beq.n	801006c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801005a:	689b      	ldr	r3, [r3, #8]
 801005c:	687a      	ldr	r2, [r7, #4]
 801005e:	7c12      	ldrb	r2, [r2, #16]
 8010060:	f107 0108 	add.w	r1, r7, #8
 8010064:	4610      	mov	r0, r2
 8010066:	4798      	blx	r3
 8010068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801006a:	e08a      	b.n	8010182 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 801006c:	6839      	ldr	r1, [r7, #0]
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f000 faaa 	bl	80105c8 <USBD_CtlError>
            err++;
 8010074:	7afb      	ldrb	r3, [r7, #11]
 8010076:	3301      	adds	r3, #1
 8010078:	72fb      	strb	r3, [r7, #11]
          break;
 801007a:	e082      	b.n	8010182 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010082:	68db      	ldr	r3, [r3, #12]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d00b      	beq.n	80100a0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801008e:	68db      	ldr	r3, [r3, #12]
 8010090:	687a      	ldr	r2, [r7, #4]
 8010092:	7c12      	ldrb	r2, [r2, #16]
 8010094:	f107 0108 	add.w	r1, r7, #8
 8010098:	4610      	mov	r0, r2
 801009a:	4798      	blx	r3
 801009c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801009e:	e070      	b.n	8010182 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80100a0:	6839      	ldr	r1, [r7, #0]
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f000 fa90 	bl	80105c8 <USBD_CtlError>
            err++;
 80100a8:	7afb      	ldrb	r3, [r7, #11]
 80100aa:	3301      	adds	r3, #1
 80100ac:	72fb      	strb	r3, [r7, #11]
          break;
 80100ae:	e068      	b.n	8010182 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100b6:	691b      	ldr	r3, [r3, #16]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d00b      	beq.n	80100d4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100c2:	691b      	ldr	r3, [r3, #16]
 80100c4:	687a      	ldr	r2, [r7, #4]
 80100c6:	7c12      	ldrb	r2, [r2, #16]
 80100c8:	f107 0108 	add.w	r1, r7, #8
 80100cc:	4610      	mov	r0, r2
 80100ce:	4798      	blx	r3
 80100d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80100d2:	e056      	b.n	8010182 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80100d4:	6839      	ldr	r1, [r7, #0]
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f000 fa76 	bl	80105c8 <USBD_CtlError>
            err++;
 80100dc:	7afb      	ldrb	r3, [r7, #11]
 80100de:	3301      	adds	r3, #1
 80100e0:	72fb      	strb	r3, [r7, #11]
          break;
 80100e2:	e04e      	b.n	8010182 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100ea:	695b      	ldr	r3, [r3, #20]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d00b      	beq.n	8010108 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100f6:	695b      	ldr	r3, [r3, #20]
 80100f8:	687a      	ldr	r2, [r7, #4]
 80100fa:	7c12      	ldrb	r2, [r2, #16]
 80100fc:	f107 0108 	add.w	r1, r7, #8
 8010100:	4610      	mov	r0, r2
 8010102:	4798      	blx	r3
 8010104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010106:	e03c      	b.n	8010182 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010108:	6839      	ldr	r1, [r7, #0]
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f000 fa5c 	bl	80105c8 <USBD_CtlError>
            err++;
 8010110:	7afb      	ldrb	r3, [r7, #11]
 8010112:	3301      	adds	r3, #1
 8010114:	72fb      	strb	r3, [r7, #11]
          break;
 8010116:	e034      	b.n	8010182 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801011e:	699b      	ldr	r3, [r3, #24]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d00b      	beq.n	801013c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801012a:	699b      	ldr	r3, [r3, #24]
 801012c:	687a      	ldr	r2, [r7, #4]
 801012e:	7c12      	ldrb	r2, [r2, #16]
 8010130:	f107 0108 	add.w	r1, r7, #8
 8010134:	4610      	mov	r0, r2
 8010136:	4798      	blx	r3
 8010138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801013a:	e022      	b.n	8010182 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 801013c:	6839      	ldr	r1, [r7, #0]
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f000 fa42 	bl	80105c8 <USBD_CtlError>
            err++;
 8010144:	7afb      	ldrb	r3, [r7, #11]
 8010146:	3301      	adds	r3, #1
 8010148:	72fb      	strb	r3, [r7, #11]
          break;
 801014a:	e01a      	b.n	8010182 <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010154:	2b00      	cmp	r3, #0
 8010156:	d00c      	beq.n	8010172 <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801015e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010160:	683a      	ldr	r2, [r7, #0]
 8010162:	8852      	ldrh	r2, [r2, #2]
 8010164:	b2d1      	uxtb	r1, r2
 8010166:	f107 0208 	add.w	r2, r7, #8
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	4798      	blx	r3
 801016e:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8010170:	e006      	b.n	8010180 <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 8010172:	6839      	ldr	r1, [r7, #0]
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f000 fa27 	bl	80105c8 <USBD_CtlError>
            err++;
 801017a:	7afb      	ldrb	r3, [r7, #11]
 801017c:	3301      	adds	r3, #1
 801017e:	72fb      	strb	r3, [r7, #11]
          break;
 8010180:	bf00      	nop
      }
      break;
 8010182:	e037      	b.n	80101f4 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	7c1b      	ldrb	r3, [r3, #16]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d109      	bne.n	80101a0 <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010194:	f107 0208 	add.w	r2, r7, #8
 8010198:	4610      	mov	r0, r2
 801019a:	4798      	blx	r3
 801019c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801019e:	e029      	b.n	80101f4 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80101a0:	6839      	ldr	r1, [r7, #0]
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f000 fa10 	bl	80105c8 <USBD_CtlError>
        err++;
 80101a8:	7afb      	ldrb	r3, [r7, #11]
 80101aa:	3301      	adds	r3, #1
 80101ac:	72fb      	strb	r3, [r7, #11]
      break;
 80101ae:	e021      	b.n	80101f4 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	7c1b      	ldrb	r3, [r3, #16]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d10d      	bne.n	80101d4 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101c0:	f107 0208 	add.w	r2, r7, #8
 80101c4:	4610      	mov	r0, r2
 80101c6:	4798      	blx	r3
 80101c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	3301      	adds	r3, #1
 80101ce:	2207      	movs	r2, #7
 80101d0:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80101d2:	e00f      	b.n	80101f4 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80101d4:	6839      	ldr	r1, [r7, #0]
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f000 f9f6 	bl	80105c8 <USBD_CtlError>
        err++;
 80101dc:	7afb      	ldrb	r3, [r7, #11]
 80101de:	3301      	adds	r3, #1
 80101e0:	72fb      	strb	r3, [r7, #11]
      break;
 80101e2:	e007      	b.n	80101f4 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 80101e4:	6839      	ldr	r1, [r7, #0]
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f000 f9ee 	bl	80105c8 <USBD_CtlError>
      err++;
 80101ec:	7afb      	ldrb	r3, [r7, #11]
 80101ee:	3301      	adds	r3, #1
 80101f0:	72fb      	strb	r3, [r7, #11]
      break;
 80101f2:	bf00      	nop
  }

  if (err != 0U)
 80101f4:	7afb      	ldrb	r3, [r7, #11]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d11e      	bne.n	8010238 <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	88db      	ldrh	r3, [r3, #6]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d016      	beq.n	8010230 <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 8010202:	893b      	ldrh	r3, [r7, #8]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d00e      	beq.n	8010226 <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	88da      	ldrh	r2, [r3, #6]
 801020c:	893b      	ldrh	r3, [r7, #8]
 801020e:	4293      	cmp	r3, r2
 8010210:	bf28      	it	cs
 8010212:	4613      	movcs	r3, r2
 8010214:	b29b      	uxth	r3, r3
 8010216:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010218:	893b      	ldrh	r3, [r7, #8]
 801021a:	461a      	mov	r2, r3
 801021c:	68f9      	ldr	r1, [r7, #12]
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f000 fa43 	bl	80106aa <USBD_CtlSendData>
 8010224:	e009      	b.n	801023a <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010226:	6839      	ldr	r1, [r7, #0]
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 f9cd 	bl	80105c8 <USBD_CtlError>
 801022e:	e004      	b.n	801023a <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f000 fa94 	bl	801075e <USBD_CtlSendStatus>
 8010236:	e000      	b.n	801023a <USBD_GetDescriptor+0x346>
    return;
 8010238:	bf00      	nop
  }
}
 801023a:	3710      	adds	r7, #16
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}

08010240 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b084      	sub	sp, #16
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	889b      	ldrh	r3, [r3, #4]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d131      	bne.n	80102b6 <USBD_SetAddress+0x76>
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	88db      	ldrh	r3, [r3, #6]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d12d      	bne.n	80102b6 <USBD_SetAddress+0x76>
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	885b      	ldrh	r3, [r3, #2]
 801025e:	2b7f      	cmp	r3, #127	@ 0x7f
 8010260:	d829      	bhi.n	80102b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	885b      	ldrh	r3, [r3, #2]
 8010266:	b2db      	uxtb	r3, r3
 8010268:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801026c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010274:	b2db      	uxtb	r3, r3
 8010276:	2b03      	cmp	r3, #3
 8010278:	d104      	bne.n	8010284 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801027a:	6839      	ldr	r1, [r7, #0]
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f000 f9a3 	bl	80105c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010282:	e01d      	b.n	80102c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	7bfa      	ldrb	r2, [r7, #15]
 8010288:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801028c:	7bfb      	ldrb	r3, [r7, #15]
 801028e:	4619      	mov	r1, r3
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f000 fe4b 	bl	8010f2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	f000 fa61 	bl	801075e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801029c:	7bfb      	ldrb	r3, [r7, #15]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d004      	beq.n	80102ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2202      	movs	r2, #2
 80102a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102aa:	e009      	b.n	80102c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2201      	movs	r2, #1
 80102b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102b4:	e004      	b.n	80102c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80102b6:	6839      	ldr	r1, [r7, #0]
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f000 f985 	bl	80105c8 <USBD_CtlError>
  }
}
 80102be:	bf00      	nop
 80102c0:	bf00      	nop
 80102c2:	3710      	adds	r7, #16
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}

080102c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b084      	sub	sp, #16
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
 80102d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80102d2:	2300      	movs	r3, #0
 80102d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	885b      	ldrh	r3, [r3, #2]
 80102da:	b2da      	uxtb	r2, r3
 80102dc:	4b4c      	ldr	r3, [pc, #304]	@ (8010410 <USBD_SetConfig+0x148>)
 80102de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80102e0:	4b4b      	ldr	r3, [pc, #300]	@ (8010410 <USBD_SetConfig+0x148>)
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	2b01      	cmp	r3, #1
 80102e6:	d905      	bls.n	80102f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80102e8:	6839      	ldr	r1, [r7, #0]
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	f000 f96c 	bl	80105c8 <USBD_CtlError>
    return USBD_FAIL;
 80102f0:	2303      	movs	r3, #3
 80102f2:	e088      	b.n	8010406 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102fa:	b2db      	uxtb	r3, r3
 80102fc:	2b02      	cmp	r3, #2
 80102fe:	d002      	beq.n	8010306 <USBD_SetConfig+0x3e>
 8010300:	2b03      	cmp	r3, #3
 8010302:	d025      	beq.n	8010350 <USBD_SetConfig+0x88>
 8010304:	e071      	b.n	80103ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010306:	4b42      	ldr	r3, [pc, #264]	@ (8010410 <USBD_SetConfig+0x148>)
 8010308:	781b      	ldrb	r3, [r3, #0]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d01c      	beq.n	8010348 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801030e:	4b40      	ldr	r3, [pc, #256]	@ (8010410 <USBD_SetConfig+0x148>)
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	461a      	mov	r2, r3
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010318:	4b3d      	ldr	r3, [pc, #244]	@ (8010410 <USBD_SetConfig+0x148>)
 801031a:	781b      	ldrb	r3, [r3, #0]
 801031c:	4619      	mov	r1, r3
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f7ff f97f 	bl	800f622 <USBD_SetClassConfig>
 8010324:	4603      	mov	r3, r0
 8010326:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010328:	7bfb      	ldrb	r3, [r7, #15]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d004      	beq.n	8010338 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801032e:	6839      	ldr	r1, [r7, #0]
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f000 f949 	bl	80105c8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010336:	e065      	b.n	8010404 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f000 fa10 	bl	801075e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2203      	movs	r2, #3
 8010342:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010346:	e05d      	b.n	8010404 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f000 fa08 	bl	801075e <USBD_CtlSendStatus>
      break;
 801034e:	e059      	b.n	8010404 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010350:	4b2f      	ldr	r3, [pc, #188]	@ (8010410 <USBD_SetConfig+0x148>)
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d112      	bne.n	801037e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2202      	movs	r2, #2
 801035c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010360:	4b2b      	ldr	r3, [pc, #172]	@ (8010410 <USBD_SetConfig+0x148>)
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	461a      	mov	r2, r3
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801036a:	4b29      	ldr	r3, [pc, #164]	@ (8010410 <USBD_SetConfig+0x148>)
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	4619      	mov	r1, r3
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f7ff f972 	bl	800f65a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f000 f9f1 	bl	801075e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801037c:	e042      	b.n	8010404 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801037e:	4b24      	ldr	r3, [pc, #144]	@ (8010410 <USBD_SetConfig+0x148>)
 8010380:	781b      	ldrb	r3, [r3, #0]
 8010382:	461a      	mov	r2, r3
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	429a      	cmp	r2, r3
 801038a:	d02a      	beq.n	80103e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	b2db      	uxtb	r3, r3
 8010392:	4619      	mov	r1, r3
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f7ff f960 	bl	800f65a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801039a:	4b1d      	ldr	r3, [pc, #116]	@ (8010410 <USBD_SetConfig+0x148>)
 801039c:	781b      	ldrb	r3, [r3, #0]
 801039e:	461a      	mov	r2, r3
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80103a4:	4b1a      	ldr	r3, [pc, #104]	@ (8010410 <USBD_SetConfig+0x148>)
 80103a6:	781b      	ldrb	r3, [r3, #0]
 80103a8:	4619      	mov	r1, r3
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f7ff f939 	bl	800f622 <USBD_SetClassConfig>
 80103b0:	4603      	mov	r3, r0
 80103b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80103b4:	7bfb      	ldrb	r3, [r7, #15]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d00f      	beq.n	80103da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80103ba:	6839      	ldr	r1, [r7, #0]
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f000 f903 	bl	80105c8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	685b      	ldr	r3, [r3, #4]
 80103c6:	b2db      	uxtb	r3, r3
 80103c8:	4619      	mov	r1, r3
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f7ff f945 	bl	800f65a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2202      	movs	r2, #2
 80103d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80103d8:	e014      	b.n	8010404 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f000 f9bf 	bl	801075e <USBD_CtlSendStatus>
      break;
 80103e0:	e010      	b.n	8010404 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f000 f9bb 	bl	801075e <USBD_CtlSendStatus>
      break;
 80103e8:	e00c      	b.n	8010404 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80103ea:	6839      	ldr	r1, [r7, #0]
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f000 f8eb 	bl	80105c8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80103f2:	4b07      	ldr	r3, [pc, #28]	@ (8010410 <USBD_SetConfig+0x148>)
 80103f4:	781b      	ldrb	r3, [r3, #0]
 80103f6:	4619      	mov	r1, r3
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f7ff f92e 	bl	800f65a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80103fe:	2303      	movs	r3, #3
 8010400:	73fb      	strb	r3, [r7, #15]
      break;
 8010402:	bf00      	nop
  }

  return ret;
 8010404:	7bfb      	ldrb	r3, [r7, #15]
}
 8010406:	4618      	mov	r0, r3
 8010408:	3710      	adds	r7, #16
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	200009df 	.word	0x200009df

08010414 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	88db      	ldrh	r3, [r3, #6]
 8010422:	2b01      	cmp	r3, #1
 8010424:	d004      	beq.n	8010430 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010426:	6839      	ldr	r1, [r7, #0]
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f000 f8cd 	bl	80105c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801042e:	e023      	b.n	8010478 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010436:	b2db      	uxtb	r3, r3
 8010438:	2b02      	cmp	r3, #2
 801043a:	dc02      	bgt.n	8010442 <USBD_GetConfig+0x2e>
 801043c:	2b00      	cmp	r3, #0
 801043e:	dc03      	bgt.n	8010448 <USBD_GetConfig+0x34>
 8010440:	e015      	b.n	801046e <USBD_GetConfig+0x5a>
 8010442:	2b03      	cmp	r3, #3
 8010444:	d00b      	beq.n	801045e <USBD_GetConfig+0x4a>
 8010446:	e012      	b.n	801046e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2200      	movs	r2, #0
 801044c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	3308      	adds	r3, #8
 8010452:	2201      	movs	r2, #1
 8010454:	4619      	mov	r1, r3
 8010456:	6878      	ldr	r0, [r7, #4]
 8010458:	f000 f927 	bl	80106aa <USBD_CtlSendData>
        break;
 801045c:	e00c      	b.n	8010478 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	3304      	adds	r3, #4
 8010462:	2201      	movs	r2, #1
 8010464:	4619      	mov	r1, r3
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f000 f91f 	bl	80106aa <USBD_CtlSendData>
        break;
 801046c:	e004      	b.n	8010478 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801046e:	6839      	ldr	r1, [r7, #0]
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f000 f8a9 	bl	80105c8 <USBD_CtlError>
        break;
 8010476:	bf00      	nop
}
 8010478:	bf00      	nop
 801047a:	3708      	adds	r7, #8
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}

08010480 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b082      	sub	sp, #8
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010490:	b2db      	uxtb	r3, r3
 8010492:	3b01      	subs	r3, #1
 8010494:	2b02      	cmp	r3, #2
 8010496:	d81e      	bhi.n	80104d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	88db      	ldrh	r3, [r3, #6]
 801049c:	2b02      	cmp	r3, #2
 801049e:	d004      	beq.n	80104aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80104a0:	6839      	ldr	r1, [r7, #0]
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f000 f890 	bl	80105c8 <USBD_CtlError>
        break;
 80104a8:	e01a      	b.n	80104e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2201      	movs	r2, #1
 80104ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d005      	beq.n	80104c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	68db      	ldr	r3, [r3, #12]
 80104be:	f043 0202 	orr.w	r2, r3, #2
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	330c      	adds	r3, #12
 80104ca:	2202      	movs	r2, #2
 80104cc:	4619      	mov	r1, r3
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f000 f8eb 	bl	80106aa <USBD_CtlSendData>
      break;
 80104d4:	e004      	b.n	80104e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80104d6:	6839      	ldr	r1, [r7, #0]
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f000 f875 	bl	80105c8 <USBD_CtlError>
      break;
 80104de:	bf00      	nop
  }
}
 80104e0:	bf00      	nop
 80104e2:	3708      	adds	r7, #8
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}

080104e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	885b      	ldrh	r3, [r3, #2]
 80104f6:	2b01      	cmp	r3, #1
 80104f8:	d106      	bne.n	8010508 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2201      	movs	r2, #1
 80104fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f000 f92b 	bl	801075e <USBD_CtlSendStatus>
  }
}
 8010508:	bf00      	nop
 801050a:	3708      	adds	r7, #8
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b082      	sub	sp, #8
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010520:	b2db      	uxtb	r3, r3
 8010522:	3b01      	subs	r3, #1
 8010524:	2b02      	cmp	r3, #2
 8010526:	d80b      	bhi.n	8010540 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	885b      	ldrh	r3, [r3, #2]
 801052c:	2b01      	cmp	r3, #1
 801052e:	d10c      	bne.n	801054a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2200      	movs	r2, #0
 8010534:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f000 f910 	bl	801075e <USBD_CtlSendStatus>
      }
      break;
 801053e:	e004      	b.n	801054a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010540:	6839      	ldr	r1, [r7, #0]
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f000 f840 	bl	80105c8 <USBD_CtlError>
      break;
 8010548:	e000      	b.n	801054c <USBD_ClrFeature+0x3c>
      break;
 801054a:	bf00      	nop
  }
}
 801054c:	bf00      	nop
 801054e:	3708      	adds	r7, #8
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b084      	sub	sp, #16
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	781a      	ldrb	r2, [r3, #0]
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	3301      	adds	r3, #1
 801056e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	781a      	ldrb	r2, [r3, #0]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	3301      	adds	r3, #1
 801057c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801057e:	68f8      	ldr	r0, [r7, #12]
 8010580:	f7ff fa7f 	bl	800fa82 <SWAPBYTE>
 8010584:	4603      	mov	r3, r0
 8010586:	461a      	mov	r2, r3
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	3301      	adds	r3, #1
 8010590:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	3301      	adds	r3, #1
 8010596:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010598:	68f8      	ldr	r0, [r7, #12]
 801059a:	f7ff fa72 	bl	800fa82 <SWAPBYTE>
 801059e:	4603      	mov	r3, r0
 80105a0:	461a      	mov	r2, r3
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	3301      	adds	r3, #1
 80105aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	3301      	adds	r3, #1
 80105b0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80105b2:	68f8      	ldr	r0, [r7, #12]
 80105b4:	f7ff fa65 	bl	800fa82 <SWAPBYTE>
 80105b8:	4603      	mov	r3, r0
 80105ba:	461a      	mov	r2, r3
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	80da      	strh	r2, [r3, #6]
}
 80105c0:	bf00      	nop
 80105c2:	3710      	adds	r7, #16
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b082      	sub	sp, #8
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80105d2:	2180      	movs	r1, #128	@ 0x80
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f000 fc3f 	bl	8010e58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80105da:	2100      	movs	r1, #0
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f000 fc3b 	bl	8010e58 <USBD_LL_StallEP>
}
 80105e2:	bf00      	nop
 80105e4:	3708      	adds	r7, #8
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}

080105ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80105ea:	b580      	push	{r7, lr}
 80105ec:	b086      	sub	sp, #24
 80105ee:	af00      	add	r7, sp, #0
 80105f0:	60f8      	str	r0, [r7, #12]
 80105f2:	60b9      	str	r1, [r7, #8]
 80105f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80105f6:	2300      	movs	r3, #0
 80105f8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d036      	beq.n	801066e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010604:	6938      	ldr	r0, [r7, #16]
 8010606:	f000 f836 	bl	8010676 <USBD_GetLen>
 801060a:	4603      	mov	r3, r0
 801060c:	3301      	adds	r3, #1
 801060e:	b29b      	uxth	r3, r3
 8010610:	005b      	lsls	r3, r3, #1
 8010612:	b29a      	uxth	r2, r3
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010618:	7dfb      	ldrb	r3, [r7, #23]
 801061a:	68ba      	ldr	r2, [r7, #8]
 801061c:	4413      	add	r3, r2
 801061e:	687a      	ldr	r2, [r7, #4]
 8010620:	7812      	ldrb	r2, [r2, #0]
 8010622:	701a      	strb	r2, [r3, #0]
  idx++;
 8010624:	7dfb      	ldrb	r3, [r7, #23]
 8010626:	3301      	adds	r3, #1
 8010628:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801062a:	7dfb      	ldrb	r3, [r7, #23]
 801062c:	68ba      	ldr	r2, [r7, #8]
 801062e:	4413      	add	r3, r2
 8010630:	2203      	movs	r2, #3
 8010632:	701a      	strb	r2, [r3, #0]
  idx++;
 8010634:	7dfb      	ldrb	r3, [r7, #23]
 8010636:	3301      	adds	r3, #1
 8010638:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801063a:	e013      	b.n	8010664 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801063c:	7dfb      	ldrb	r3, [r7, #23]
 801063e:	68ba      	ldr	r2, [r7, #8]
 8010640:	4413      	add	r3, r2
 8010642:	693a      	ldr	r2, [r7, #16]
 8010644:	7812      	ldrb	r2, [r2, #0]
 8010646:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	3301      	adds	r3, #1
 801064c:	613b      	str	r3, [r7, #16]
    idx++;
 801064e:	7dfb      	ldrb	r3, [r7, #23]
 8010650:	3301      	adds	r3, #1
 8010652:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010654:	7dfb      	ldrb	r3, [r7, #23]
 8010656:	68ba      	ldr	r2, [r7, #8]
 8010658:	4413      	add	r3, r2
 801065a:	2200      	movs	r2, #0
 801065c:	701a      	strb	r2, [r3, #0]
    idx++;
 801065e:	7dfb      	ldrb	r3, [r7, #23]
 8010660:	3301      	adds	r3, #1
 8010662:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d1e7      	bne.n	801063c <USBD_GetString+0x52>
 801066c:	e000      	b.n	8010670 <USBD_GetString+0x86>
    return;
 801066e:	bf00      	nop
  }
}
 8010670:	3718      	adds	r7, #24
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}

08010676 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010676:	b480      	push	{r7}
 8010678:	b085      	sub	sp, #20
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801067e:	2300      	movs	r3, #0
 8010680:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010686:	e005      	b.n	8010694 <USBD_GetLen+0x1e>
  {
    len++;
 8010688:	7bfb      	ldrb	r3, [r7, #15]
 801068a:	3301      	adds	r3, #1
 801068c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	3301      	adds	r3, #1
 8010692:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d1f5      	bne.n	8010688 <USBD_GetLen+0x12>
  }

  return len;
 801069c:	7bfb      	ldrb	r3, [r7, #15]
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3714      	adds	r7, #20
 80106a2:	46bd      	mov	sp, r7
 80106a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a8:	4770      	bx	lr

080106aa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80106aa:	b580      	push	{r7, lr}
 80106ac:	b084      	sub	sp, #16
 80106ae:	af00      	add	r7, sp, #0
 80106b0:	60f8      	str	r0, [r7, #12]
 80106b2:	60b9      	str	r1, [r7, #8]
 80106b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	2202      	movs	r2, #2
 80106ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	687a      	ldr	r2, [r7, #4]
 80106c2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	687a      	ldr	r2, [r7, #4]
 80106c8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	68ba      	ldr	r2, [r7, #8]
 80106ce:	2100      	movs	r1, #0
 80106d0:	68f8      	ldr	r0, [r7, #12]
 80106d2:	f000 fc4a 	bl	8010f6a <USBD_LL_Transmit>

  return USBD_OK;
 80106d6:	2300      	movs	r3, #0
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3710      	adds	r7, #16
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}

080106e0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b084      	sub	sp, #16
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	60f8      	str	r0, [r7, #12]
 80106e8:	60b9      	str	r1, [r7, #8]
 80106ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	68ba      	ldr	r2, [r7, #8]
 80106f0:	2100      	movs	r1, #0
 80106f2:	68f8      	ldr	r0, [r7, #12]
 80106f4:	f000 fc39 	bl	8010f6a <USBD_LL_Transmit>

  return USBD_OK;
 80106f8:	2300      	movs	r3, #0
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3710      	adds	r7, #16
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}

08010702 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010702:	b580      	push	{r7, lr}
 8010704:	b084      	sub	sp, #16
 8010706:	af00      	add	r7, sp, #0
 8010708:	60f8      	str	r0, [r7, #12]
 801070a:	60b9      	str	r1, [r7, #8]
 801070c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	2203      	movs	r2, #3
 8010712:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	687a      	ldr	r2, [r7, #4]
 801071a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	687a      	ldr	r2, [r7, #4]
 8010722:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	68ba      	ldr	r2, [r7, #8]
 801072a:	2100      	movs	r1, #0
 801072c:	68f8      	ldr	r0, [r7, #12]
 801072e:	f000 fc3d 	bl	8010fac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010732:	2300      	movs	r3, #0
}
 8010734:	4618      	mov	r0, r3
 8010736:	3710      	adds	r7, #16
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}

0801073c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b084      	sub	sp, #16
 8010740:	af00      	add	r7, sp, #0
 8010742:	60f8      	str	r0, [r7, #12]
 8010744:	60b9      	str	r1, [r7, #8]
 8010746:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	68ba      	ldr	r2, [r7, #8]
 801074c:	2100      	movs	r1, #0
 801074e:	68f8      	ldr	r0, [r7, #12]
 8010750:	f000 fc2c 	bl	8010fac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010754:	2300      	movs	r3, #0
}
 8010756:	4618      	mov	r0, r3
 8010758:	3710      	adds	r7, #16
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}

0801075e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801075e:	b580      	push	{r7, lr}
 8010760:	b082      	sub	sp, #8
 8010762:	af00      	add	r7, sp, #0
 8010764:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2204      	movs	r2, #4
 801076a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801076e:	2300      	movs	r3, #0
 8010770:	2200      	movs	r2, #0
 8010772:	2100      	movs	r1, #0
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f000 fbf8 	bl	8010f6a <USBD_LL_Transmit>

  return USBD_OK;
 801077a:	2300      	movs	r3, #0
}
 801077c:	4618      	mov	r0, r3
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2205      	movs	r2, #5
 8010790:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010794:	2300      	movs	r3, #0
 8010796:	2200      	movs	r2, #0
 8010798:	2100      	movs	r1, #0
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f000 fc06 	bl	8010fac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80107a0:	2300      	movs	r3, #0
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	3708      	adds	r7, #8
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}
	...

080107ac <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 80107b0:	2200      	movs	r2, #0
 80107b2:	4912      	ldr	r1, [pc, #72]	@ (80107fc <MX_USB_Device_Init+0x50>)
 80107b4:	4812      	ldr	r0, [pc, #72]	@ (8010800 <MX_USB_Device_Init+0x54>)
 80107b6:	f7fe feab 	bl	800f510 <USBD_Init>
 80107ba:	4603      	mov	r3, r0
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d001      	beq.n	80107c4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80107c0:	f7f1 fd3a 	bl	8002238 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 80107c4:	490f      	ldr	r1, [pc, #60]	@ (8010804 <MX_USB_Device_Init+0x58>)
 80107c6:	480e      	ldr	r0, [pc, #56]	@ (8010800 <MX_USB_Device_Init+0x54>)
 80107c8:	f7fe fed2 	bl	800f570 <USBD_RegisterClass>
 80107cc:	4603      	mov	r3, r0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d001      	beq.n	80107d6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80107d2:	f7f1 fd31 	bl	8002238 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 80107d6:	490c      	ldr	r1, [pc, #48]	@ (8010808 <MX_USB_Device_Init+0x5c>)
 80107d8:	4809      	ldr	r0, [pc, #36]	@ (8010800 <MX_USB_Device_Init+0x54>)
 80107da:	f7fe fb17 	bl	800ee0c <USBD_DFU_RegisterMedia>
 80107de:	4603      	mov	r3, r0
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d001      	beq.n	80107e8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80107e4:	f7f1 fd28 	bl	8002238 <Error_Handler>
  }
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  if (USBD_LL_BatterryCharging(&hUsbDeviceFS) != USBD_OK) {
 80107e8:	4805      	ldr	r0, [pc, #20]	@ (8010800 <MX_USB_Device_Init+0x54>)
 80107ea:	f000 fc01 	bl	8010ff0 <USBD_LL_BatterryCharging>
 80107ee:	4603      	mov	r3, r0
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d001      	beq.n	80107f8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80107f4:	f7f1 fd20 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80107f8:	bf00      	nop
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	20000070 	.word	0x20000070
 8010800:	200009e0 	.word	0x200009e0
 8010804:	2000000c 	.word	0x2000000c
 8010808:	200000c4 	.word	0x200000c4

0801080c <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801080c:	b480      	push	{r7}
 801080e:	b083      	sub	sp, #12
 8010810:	af00      	add	r7, sp, #0
 8010812:	4603      	mov	r3, r0
 8010814:	6039      	str	r1, [r7, #0]
 8010816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	2212      	movs	r2, #18
 801081c:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 801081e:	4b03      	ldr	r3, [pc, #12]	@ (801082c <USBD_DFU_DeviceDescriptor+0x20>)
}
 8010820:	4618      	mov	r0, r3
 8010822:	370c      	adds	r7, #12
 8010824:	46bd      	mov	sp, r7
 8010826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082a:	4770      	bx	lr
 801082c:	20000090 	.word	0x20000090

08010830 <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010830:	b480      	push	{r7}
 8010832:	b083      	sub	sp, #12
 8010834:	af00      	add	r7, sp, #0
 8010836:	4603      	mov	r3, r0
 8010838:	6039      	str	r1, [r7, #0]
 801083a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	2204      	movs	r2, #4
 8010840:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010842:	4b03      	ldr	r3, [pc, #12]	@ (8010850 <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 8010844:	4618      	mov	r0, r3
 8010846:	370c      	adds	r7, #12
 8010848:	46bd      	mov	sp, r7
 801084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084e:	4770      	bx	lr
 8010850:	200000a4 	.word	0x200000a4

08010854 <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
 801085a:	4603      	mov	r3, r0
 801085c:	6039      	str	r1, [r7, #0]
 801085e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010860:	79fb      	ldrb	r3, [r7, #7]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d105      	bne.n	8010872 <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010866:	683a      	ldr	r2, [r7, #0]
 8010868:	4907      	ldr	r1, [pc, #28]	@ (8010888 <USBD_DFU_ProductStrDescriptor+0x34>)
 801086a:	4808      	ldr	r0, [pc, #32]	@ (801088c <USBD_DFU_ProductStrDescriptor+0x38>)
 801086c:	f7ff febd 	bl	80105ea <USBD_GetString>
 8010870:	e004      	b.n	801087c <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010872:	683a      	ldr	r2, [r7, #0]
 8010874:	4904      	ldr	r1, [pc, #16]	@ (8010888 <USBD_DFU_ProductStrDescriptor+0x34>)
 8010876:	4805      	ldr	r0, [pc, #20]	@ (801088c <USBD_DFU_ProductStrDescriptor+0x38>)
 8010878:	f7ff feb7 	bl	80105ea <USBD_GetString>
  }
  return USBD_StrDesc;
 801087c:	4b02      	ldr	r3, [pc, #8]	@ (8010888 <USBD_DFU_ProductStrDescriptor+0x34>)
}
 801087e:	4618      	mov	r0, r3
 8010880:	3708      	adds	r7, #8
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}
 8010886:	bf00      	nop
 8010888:	20000cb0 	.word	0x20000cb0
 801088c:	08013f40 	.word	0x08013f40

08010890 <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b082      	sub	sp, #8
 8010894:	af00      	add	r7, sp, #0
 8010896:	4603      	mov	r3, r0
 8010898:	6039      	str	r1, [r7, #0]
 801089a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801089c:	683a      	ldr	r2, [r7, #0]
 801089e:	4904      	ldr	r1, [pc, #16]	@ (80108b0 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 80108a0:	4804      	ldr	r0, [pc, #16]	@ (80108b4 <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 80108a2:	f7ff fea2 	bl	80105ea <USBD_GetString>
  return USBD_StrDesc;
 80108a6:	4b02      	ldr	r3, [pc, #8]	@ (80108b0 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3708      	adds	r7, #8
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}
 80108b0:	20000cb0 	.word	0x20000cb0
 80108b4:	08013f60 	.word	0x08013f60

080108b8 <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b082      	sub	sp, #8
 80108bc:	af00      	add	r7, sp, #0
 80108be:	4603      	mov	r3, r0
 80108c0:	6039      	str	r1, [r7, #0]
 80108c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	221a      	movs	r2, #26
 80108c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80108ca:	f000 f843 	bl	8010954 <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80108ce:	4b02      	ldr	r3, [pc, #8]	@ (80108d8 <USBD_DFU_SerialStrDescriptor+0x20>)
}
 80108d0:	4618      	mov	r0, r3
 80108d2:	3708      	adds	r7, #8
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}
 80108d8:	200000a8 	.word	0x200000a8

080108dc <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	4603      	mov	r3, r0
 80108e4:	6039      	str	r1, [r7, #0]
 80108e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80108e8:	79fb      	ldrb	r3, [r7, #7]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d105      	bne.n	80108fa <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80108ee:	683a      	ldr	r2, [r7, #0]
 80108f0:	4907      	ldr	r1, [pc, #28]	@ (8010910 <USBD_DFU_ConfigStrDescriptor+0x34>)
 80108f2:	4808      	ldr	r0, [pc, #32]	@ (8010914 <USBD_DFU_ConfigStrDescriptor+0x38>)
 80108f4:	f7ff fe79 	bl	80105ea <USBD_GetString>
 80108f8:	e004      	b.n	8010904 <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80108fa:	683a      	ldr	r2, [r7, #0]
 80108fc:	4904      	ldr	r1, [pc, #16]	@ (8010910 <USBD_DFU_ConfigStrDescriptor+0x34>)
 80108fe:	4805      	ldr	r0, [pc, #20]	@ (8010914 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8010900:	f7ff fe73 	bl	80105ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8010904:	4b02      	ldr	r3, [pc, #8]	@ (8010910 <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 8010906:	4618      	mov	r0, r3
 8010908:	3708      	adds	r7, #8
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	20000cb0 	.word	0x20000cb0
 8010914:	08013f74 	.word	0x08013f74

08010918 <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	4603      	mov	r3, r0
 8010920:	6039      	str	r1, [r7, #0]
 8010922:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010924:	79fb      	ldrb	r3, [r7, #7]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d105      	bne.n	8010936 <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801092a:	683a      	ldr	r2, [r7, #0]
 801092c:	4907      	ldr	r1, [pc, #28]	@ (801094c <USBD_DFU_InterfaceStrDescriptor+0x34>)
 801092e:	4808      	ldr	r0, [pc, #32]	@ (8010950 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8010930:	f7ff fe5b 	bl	80105ea <USBD_GetString>
 8010934:	e004      	b.n	8010940 <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010936:	683a      	ldr	r2, [r7, #0]
 8010938:	4904      	ldr	r1, [pc, #16]	@ (801094c <USBD_DFU_InterfaceStrDescriptor+0x34>)
 801093a:	4805      	ldr	r0, [pc, #20]	@ (8010950 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 801093c:	f7ff fe55 	bl	80105ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8010940:	4b02      	ldr	r3, [pc, #8]	@ (801094c <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 8010942:	4618      	mov	r0, r3
 8010944:	3708      	adds	r7, #8
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}
 801094a:	bf00      	nop
 801094c:	20000cb0 	.word	0x20000cb0
 8010950:	08013f80 	.word	0x08013f80

08010954 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b084      	sub	sp, #16
 8010958:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801095a:	4b0f      	ldr	r3, [pc, #60]	@ (8010998 <Get_SerialNum+0x44>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010960:	4b0e      	ldr	r3, [pc, #56]	@ (801099c <Get_SerialNum+0x48>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010966:	4b0e      	ldr	r3, [pc, #56]	@ (80109a0 <Get_SerialNum+0x4c>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801096c:	68fa      	ldr	r2, [r7, #12]
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	4413      	add	r3, r2
 8010972:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d009      	beq.n	801098e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801097a:	2208      	movs	r2, #8
 801097c:	4909      	ldr	r1, [pc, #36]	@ (80109a4 <Get_SerialNum+0x50>)
 801097e:	68f8      	ldr	r0, [r7, #12]
 8010980:	f000 f814 	bl	80109ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010984:	2204      	movs	r2, #4
 8010986:	4908      	ldr	r1, [pc, #32]	@ (80109a8 <Get_SerialNum+0x54>)
 8010988:	68b8      	ldr	r0, [r7, #8]
 801098a:	f000 f80f 	bl	80109ac <IntToUnicode>
  }
}
 801098e:	bf00      	nop
 8010990:	3710      	adds	r7, #16
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}
 8010996:	bf00      	nop
 8010998:	1fff7590 	.word	0x1fff7590
 801099c:	1fff7594 	.word	0x1fff7594
 80109a0:	1fff7598 	.word	0x1fff7598
 80109a4:	200000aa 	.word	0x200000aa
 80109a8:	200000ba 	.word	0x200000ba

080109ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80109ac:	b480      	push	{r7}
 80109ae:	b087      	sub	sp, #28
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	60f8      	str	r0, [r7, #12]
 80109b4:	60b9      	str	r1, [r7, #8]
 80109b6:	4613      	mov	r3, r2
 80109b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80109ba:	2300      	movs	r3, #0
 80109bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80109be:	2300      	movs	r3, #0
 80109c0:	75fb      	strb	r3, [r7, #23]
 80109c2:	e027      	b.n	8010a14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	0f1b      	lsrs	r3, r3, #28
 80109c8:	2b09      	cmp	r3, #9
 80109ca:	d80b      	bhi.n	80109e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	0f1b      	lsrs	r3, r3, #28
 80109d0:	b2da      	uxtb	r2, r3
 80109d2:	7dfb      	ldrb	r3, [r7, #23]
 80109d4:	005b      	lsls	r3, r3, #1
 80109d6:	4619      	mov	r1, r3
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	440b      	add	r3, r1
 80109dc:	3230      	adds	r2, #48	@ 0x30
 80109de:	b2d2      	uxtb	r2, r2
 80109e0:	701a      	strb	r2, [r3, #0]
 80109e2:	e00a      	b.n	80109fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	0f1b      	lsrs	r3, r3, #28
 80109e8:	b2da      	uxtb	r2, r3
 80109ea:	7dfb      	ldrb	r3, [r7, #23]
 80109ec:	005b      	lsls	r3, r3, #1
 80109ee:	4619      	mov	r1, r3
 80109f0:	68bb      	ldr	r3, [r7, #8]
 80109f2:	440b      	add	r3, r1
 80109f4:	3237      	adds	r2, #55	@ 0x37
 80109f6:	b2d2      	uxtb	r2, r2
 80109f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	011b      	lsls	r3, r3, #4
 80109fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010a00:	7dfb      	ldrb	r3, [r7, #23]
 8010a02:	005b      	lsls	r3, r3, #1
 8010a04:	3301      	adds	r3, #1
 8010a06:	68ba      	ldr	r2, [r7, #8]
 8010a08:	4413      	add	r3, r2
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010a0e:	7dfb      	ldrb	r3, [r7, #23]
 8010a10:	3301      	adds	r3, #1
 8010a12:	75fb      	strb	r3, [r7, #23]
 8010a14:	7dfa      	ldrb	r2, [r7, #23]
 8010a16:	79fb      	ldrb	r3, [r7, #7]
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d3d3      	bcc.n	80109c4 <IntToUnicode+0x18>
  }
}
 8010a1c:	bf00      	nop
 8010a1e:	bf00      	nop
 8010a20:	371c      	adds	r7, #28
 8010a22:	46bd      	mov	sp, r7
 8010a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a28:	4770      	bx	lr

08010a2a <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 8010a2a:	b480      	push	{r7}
 8010a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8010a2e:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr

08010a3a <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 8010a3a:	b480      	push	{r7}
 8010a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8010a3e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	46bd      	mov	sp, r7
 8010a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a48:	4770      	bx	lr

08010a4a <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 8010a4a:	b480      	push	{r7}
 8010a4c:	b083      	sub	sp, #12
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 8010a52:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8010a54:	4618      	mov	r0, r3
 8010a56:	370c      	adds	r7, #12
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5e:	4770      	bx	lr

08010a60 <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8010a60:	b480      	push	{r7}
 8010a62:	b085      	sub	sp, #20
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	60f8      	str	r0, [r7, #12]
 8010a68:	60b9      	str	r1, [r7, #8]
 8010a6a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8010a6c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3714      	adds	r7, #20
 8010a72:	46bd      	mov	sp, r7
 8010a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a78:	4770      	bx	lr

08010a7a <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8010a7a:	b480      	push	{r7}
 8010a7c:	b085      	sub	sp, #20
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	60f8      	str	r0, [r7, #12]
 8010a82:	60b9      	str	r1, [r7, #8]
 8010a84:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 8010a86:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  /* USER CODE END 4 */
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3714      	adds	r7, #20
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a94:	4770      	bx	lr

08010a96 <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8010a96:	b480      	push	{r7}
 8010a98:	b085      	sub	sp, #20
 8010a9a:	af00      	add	r7, sp, #0
 8010a9c:	60f8      	str	r0, [r7, #12]
 8010a9e:	460b      	mov	r3, r1
 8010aa0:	607a      	str	r2, [r7, #4]
 8010aa2:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8010aa4:	7afb      	ldrb	r3, [r7, #11]
 8010aa6:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8010aa8:	bf00      	nop
  }
  return (USBD_OK);
 8010aaa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3714      	adds	r7, #20
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab6:	4770      	bx	lr

08010ab8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b098      	sub	sp, #96	@ 0x60
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010ac0:	f107 0310 	add.w	r3, r7, #16
 8010ac4:	2250      	movs	r2, #80	@ 0x50
 8010ac6:	2100      	movs	r1, #0
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f001 f961 	bl	8011d90 <memset>
  if(pcdHandle->Instance==USB)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	4a15      	ldr	r2, [pc, #84]	@ (8010b28 <HAL_PCD_MspInit+0x70>)
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	d122      	bne.n	8010b1e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010ad8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010adc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010ae2:	f107 0310 	add.w	r3, r7, #16
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7f7 ff62 	bl	80089b0 <HAL_RCCEx_PeriphCLKConfig>
 8010aec:	4603      	mov	r3, r0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d001      	beq.n	8010af6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8010af2:	f7f1 fba1 	bl	8002238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010af6:	4b0d      	ldr	r3, [pc, #52]	@ (8010b2c <HAL_PCD_MspInit+0x74>)
 8010af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010afa:	4a0c      	ldr	r2, [pc, #48]	@ (8010b2c <HAL_PCD_MspInit+0x74>)
 8010afc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8010b02:	4b0a      	ldr	r3, [pc, #40]	@ (8010b2c <HAL_PCD_MspInit+0x74>)
 8010b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010b06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010b0a:	60fb      	str	r3, [r7, #12]
 8010b0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8010b0e:	2200      	movs	r2, #0
 8010b10:	2100      	movs	r1, #0
 8010b12:	2014      	movs	r0, #20
 8010b14:	f7f4 fc92 	bl	800543c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010b18:	2014      	movs	r0, #20
 8010b1a:	f7f4 fca9 	bl	8005470 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010b1e:	bf00      	nop
 8010b20:	3760      	adds	r7, #96	@ 0x60
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
 8010b26:	bf00      	nop
 8010b28:	40005c00 	.word	0x40005c00
 8010b2c:	40021000 	.word	0x40021000

08010b30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b082      	sub	sp, #8
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8010b44:	4619      	mov	r1, r3
 8010b46:	4610      	mov	r0, r2
 8010b48:	f7fe fd9f 	bl	800f68a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8010b4c:	bf00      	nop
 8010b4e:	3708      	adds	r7, #8
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}

08010b54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b082      	sub	sp, #8
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	460b      	mov	r3, r1
 8010b5e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010b66:	78fa      	ldrb	r2, [r7, #3]
 8010b68:	6879      	ldr	r1, [r7, #4]
 8010b6a:	4613      	mov	r3, r2
 8010b6c:	009b      	lsls	r3, r3, #2
 8010b6e:	4413      	add	r3, r2
 8010b70:	00db      	lsls	r3, r3, #3
 8010b72:	440b      	add	r3, r1
 8010b74:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	78fb      	ldrb	r3, [r7, #3]
 8010b7c:	4619      	mov	r1, r3
 8010b7e:	f7fe fdd9 	bl	800f734 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8010b82:	bf00      	nop
 8010b84:	3708      	adds	r7, #8
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b8a:	b580      	push	{r7, lr}
 8010b8c:	b082      	sub	sp, #8
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
 8010b92:	460b      	mov	r3, r1
 8010b94:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010b9c:	78fa      	ldrb	r2, [r7, #3]
 8010b9e:	6879      	ldr	r1, [r7, #4]
 8010ba0:	4613      	mov	r3, r2
 8010ba2:	009b      	lsls	r3, r3, #2
 8010ba4:	4413      	add	r3, r2
 8010ba6:	00db      	lsls	r3, r3, #3
 8010ba8:	440b      	add	r3, r1
 8010baa:	3324      	adds	r3, #36	@ 0x24
 8010bac:	681a      	ldr	r2, [r3, #0]
 8010bae:	78fb      	ldrb	r3, [r7, #3]
 8010bb0:	4619      	mov	r1, r3
 8010bb2:	f7fe fe22 	bl	800f7fa <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8010bb6:	bf00      	nop
 8010bb8:	3708      	adds	r7, #8
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}

08010bbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bbe:	b580      	push	{r7, lr}
 8010bc0:	b082      	sub	sp, #8
 8010bc2:	af00      	add	r7, sp, #0
 8010bc4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7fe ff36 	bl	800fa3e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8010bd2:	bf00      	nop
 8010bd4:	3708      	adds	r7, #8
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}

08010bda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bda:	b580      	push	{r7, lr}
 8010bdc:	b084      	sub	sp, #16
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010be2:	2301      	movs	r3, #1
 8010be4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	795b      	ldrb	r3, [r3, #5]
 8010bea:	2b02      	cmp	r3, #2
 8010bec:	d001      	beq.n	8010bf2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010bee:	f7f1 fb23 	bl	8002238 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010bf8:	7bfa      	ldrb	r2, [r7, #15]
 8010bfa:	4611      	mov	r1, r2
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7fe fee0 	bl	800f9c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7fe fe8c 	bl	800f926 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8010c0e:	bf00      	nop
 8010c10:	3710      	adds	r7, #16
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}
	...

08010c18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b082      	sub	sp, #8
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7fe fedb 	bl	800f9e2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	7a5b      	ldrb	r3, [r3, #9]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d005      	beq.n	8010c40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010c34:	4b04      	ldr	r3, [pc, #16]	@ (8010c48 <HAL_PCD_SuspendCallback+0x30>)
 8010c36:	691b      	ldr	r3, [r3, #16]
 8010c38:	4a03      	ldr	r2, [pc, #12]	@ (8010c48 <HAL_PCD_SuspendCallback+0x30>)
 8010c3a:	f043 0306 	orr.w	r3, r3, #6
 8010c3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8010c40:	bf00      	nop
 8010c42:	3708      	adds	r7, #8
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}
 8010c48:	e000ed00 	.word	0xe000ed00

08010c4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	7a5b      	ldrb	r3, [r3, #9]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d007      	beq.n	8010c6c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010c5c:	4b08      	ldr	r3, [pc, #32]	@ (8010c80 <HAL_PCD_ResumeCallback+0x34>)
 8010c5e:	691b      	ldr	r3, [r3, #16]
 8010c60:	4a07      	ldr	r2, [pc, #28]	@ (8010c80 <HAL_PCD_ResumeCallback+0x34>)
 8010c62:	f023 0306 	bic.w	r3, r3, #6
 8010c66:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010c68:	f000 fa32 	bl	80110d0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7fe fecb 	bl	800fa0e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010c78:	bf00      	nop
 8010c7a:	3708      	adds	r7, #8
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	e000ed00 	.word	0xe000ed00

08010c84 <HAL_PCDEx_BCD_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_BCDCallback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
#else
void HAL_PCDEx_BCD_Callback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCDEx_BCD_Callback_PreTreatment */

  /* USER CODE END HAL_PCDEx_BCD_Callback_PreTreatment */
  switch(msg)
 8010c90:	78fb      	ldrb	r3, [r7, #3]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d026      	beq.n	8010ce4 <HAL_PCDEx_BCD_Callback+0x60>
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	db34      	blt.n	8010d04 <HAL_PCDEx_BCD_Callback+0x80>
 8010c9a:	2bff      	cmp	r3, #255	@ 0xff
 8010c9c:	dc32      	bgt.n	8010d04 <HAL_PCDEx_BCD_Callback+0x80>
 8010c9e:	2bfb      	cmp	r3, #251	@ 0xfb
 8010ca0:	db30      	blt.n	8010d04 <HAL_PCDEx_BCD_Callback+0x80>
 8010ca2:	3bfb      	subs	r3, #251	@ 0xfb
 8010ca4:	2b04      	cmp	r3, #4
 8010ca6:	d82d      	bhi.n	8010d04 <HAL_PCDEx_BCD_Callback+0x80>
 8010ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8010cb0 <HAL_PCDEx_BCD_Callback+0x2c>)
 8010caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cae:	bf00      	nop
 8010cb0:	08010cdd 	.word	0x08010cdd
 8010cb4:	08010cd5 	.word	0x08010cd5
 8010cb8:	08010ccd 	.word	0x08010ccd
 8010cbc:	08010cc5 	.word	0x08010cc5
 8010cc0:	08010cff 	.word	0x08010cff
  {
    case PCD_BCD_CONTACT_DETECTION:
      USBD_BCD_PortState = USB_BCD_CONTACT_DETECTION;
 8010cc4:	4b12      	ldr	r3, [pc, #72]	@ (8010d10 <HAL_PCDEx_BCD_Callback+0x8c>)
 8010cc6:	22fe      	movs	r2, #254	@ 0xfe
 8010cc8:	701a      	strb	r2, [r3, #0]
    break;
 8010cca:	e01c      	b.n	8010d06 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_STD_DOWNSTREAM_PORT:
      USBD_BCD_PortState = USB_BCD_STD_DOWNSTREAM_PORT;
 8010ccc:	4b10      	ldr	r3, [pc, #64]	@ (8010d10 <HAL_PCDEx_BCD_Callback+0x8c>)
 8010cce:	22fd      	movs	r2, #253	@ 0xfd
 8010cd0:	701a      	strb	r2, [r3, #0]
    break;
 8010cd2:	e018      	b.n	8010d06 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_CHARGING_DOWNSTREAM_PORT:
      USBD_BCD_PortState = USB_BCD_CHARGING_DOWNSTREAM_PORT;
 8010cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8010d10 <HAL_PCDEx_BCD_Callback+0x8c>)
 8010cd6:	22fc      	movs	r2, #252	@ 0xfc
 8010cd8:	701a      	strb	r2, [r3, #0]
    break;
 8010cda:	e014      	b.n	8010d06 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_DEDICATED_CHARGING_PORT:
      USBD_BCD_PortState = USB_BCD_DEDICATED_CHARGING_PORT;
 8010cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8010d10 <HAL_PCDEx_BCD_Callback+0x8c>)
 8010cde:	22fb      	movs	r2, #251	@ 0xfb
 8010ce0:	701a      	strb	r2, [r3, #0]
    break;
 8010ce2:	e010      	b.n	8010d06 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_DISCOVERY_COMPLETED:
      HAL_Delay(20);
 8010ce4:	2014      	movs	r0, #20
 8010ce6:	f7f3 f9bb 	bl	8004060 <HAL_Delay>
      /* Start USB */
      USBD_Start(hpcd->pData);
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7fe fc64 	bl	800f5be <USBD_Start>
      USBD_BCD_PortState = USB_BCD_DISCOVERY_COMPLETED;
 8010cf6:	4b06      	ldr	r3, [pc, #24]	@ (8010d10 <HAL_PCDEx_BCD_Callback+0x8c>)
 8010cf8:	22fa      	movs	r2, #250	@ 0xfa
 8010cfa:	701a      	strb	r2, [r3, #0]
    break;
 8010cfc:	e003      	b.n	8010d06 <HAL_PCDEx_BCD_Callback+0x82>

    case PCD_BCD_ERROR:
      Error_Handler();
 8010cfe:	f7f1 fa9b 	bl	8002238 <Error_Handler>
    break;
 8010d02:	e000      	b.n	8010d06 <HAL_PCDEx_BCD_Callback+0x82>

    default:
    break;
 8010d04:	bf00      	nop
  }
  /* USER CODE BEGIN HAL_PCDEx_BCD_Callback_PostTreatment */

  /* USER CODE END HAL_PCDEx_BCD_Callback_PostTreatment */
}
 8010d06:	bf00      	nop
 8010d08:	3708      	adds	r7, #8
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	20000eb0 	.word	0x20000eb0

08010d14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b082      	sub	sp, #8
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8010d98 <USBD_LL_Init+0x84>)
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	4a1c      	ldr	r2, [pc, #112]	@ (8010d98 <USBD_LL_Init+0x84>)
 8010d28:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8010d98 <USBD_LL_Init+0x84>)
 8010d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8010d9c <USBD_LL_Init+0x88>)
 8010d30:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010d32:	4b19      	ldr	r3, [pc, #100]	@ (8010d98 <USBD_LL_Init+0x84>)
 8010d34:	2208      	movs	r2, #8
 8010d36:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010d38:	4b17      	ldr	r3, [pc, #92]	@ (8010d98 <USBD_LL_Init+0x84>)
 8010d3a:	2202      	movs	r2, #2
 8010d3c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010d3e:	4b16      	ldr	r3, [pc, #88]	@ (8010d98 <USBD_LL_Init+0x84>)
 8010d40:	2202      	movs	r2, #2
 8010d42:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010d44:	4b14      	ldr	r3, [pc, #80]	@ (8010d98 <USBD_LL_Init+0x84>)
 8010d46:	2200      	movs	r2, #0
 8010d48:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010d4a:	4b13      	ldr	r3, [pc, #76]	@ (8010d98 <USBD_LL_Init+0x84>)
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010d50:	4b11      	ldr	r3, [pc, #68]	@ (8010d98 <USBD_LL_Init+0x84>)
 8010d52:	2200      	movs	r2, #0
 8010d54:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = ENABLE;
 8010d56:	4b10      	ldr	r3, [pc, #64]	@ (8010d98 <USBD_LL_Init+0x84>)
 8010d58:	2201      	movs	r2, #1
 8010d5a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010d5c:	480e      	ldr	r0, [pc, #56]	@ (8010d98 <USBD_LL_Init+0x84>)
 8010d5e:	f7f5 f99f 	bl	80060a0 <HAL_PCD_Init>
 8010d62:	4603      	mov	r3, r0
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d001      	beq.n	8010d6c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8010d68:	f7f1 fa66 	bl	8002238 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010d72:	2318      	movs	r3, #24
 8010d74:	2200      	movs	r2, #0
 8010d76:	2100      	movs	r1, #0
 8010d78:	f7f6 fde8 	bl	800794c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010d82:	2358      	movs	r3, #88	@ 0x58
 8010d84:	2200      	movs	r2, #0
 8010d86:	2180      	movs	r1, #128	@ 0x80
 8010d88:	f7f6 fde0 	bl	800794c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 8010d8c:	2300      	movs	r3, #0
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3708      	adds	r7, #8
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}
 8010d96:	bf00      	nop
 8010d98:	20000eb4 	.word	0x20000eb4
 8010d9c:	40005c00 	.word	0x40005c00

08010da0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b084      	sub	sp, #16
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010da8:	2300      	movs	r3, #0
 8010daa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010dac:	2300      	movs	r3, #0
 8010dae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7f5 fa40 	bl	800623c <HAL_PCD_Start>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010dc0:	7bfb      	ldrb	r3, [r7, #15]
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f000 f98a 	bl	80110dc <USBD_Get_USB_Status>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010dcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	3710      	adds	r7, #16
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bd80      	pop	{r7, pc}

08010dd6 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8010dd6:	b580      	push	{r7, lr}
 8010dd8:	b084      	sub	sp, #16
 8010dda:	af00      	add	r7, sp, #0
 8010ddc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010dde:	2300      	movs	r3, #0
 8010de0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010de2:	2300      	movs	r3, #0
 8010de4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7f5 fa47 	bl	8006280 <HAL_PCD_Stop>
 8010df2:	4603      	mov	r3, r0
 8010df4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010df6:	7bfb      	ldrb	r3, [r7, #15]
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f000 f96f 	bl	80110dc <USBD_Get_USB_Status>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e02:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3710      	adds	r7, #16
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	4608      	mov	r0, r1
 8010e16:	4611      	mov	r1, r2
 8010e18:	461a      	mov	r2, r3
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	70fb      	strb	r3, [r7, #3]
 8010e1e:	460b      	mov	r3, r1
 8010e20:	70bb      	strb	r3, [r7, #2]
 8010e22:	4613      	mov	r3, r2
 8010e24:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e26:	2300      	movs	r3, #0
 8010e28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010e34:	78bb      	ldrb	r3, [r7, #2]
 8010e36:	883a      	ldrh	r2, [r7, #0]
 8010e38:	78f9      	ldrb	r1, [r7, #3]
 8010e3a:	f7f5 fb8e 	bl	800655a <HAL_PCD_EP_Open>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e42:	7bfb      	ldrb	r3, [r7, #15]
 8010e44:	4618      	mov	r0, r3
 8010e46:	f000 f949 	bl	80110dc <USBD_Get_USB_Status>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e50:	4618      	mov	r0, r3
 8010e52:	3710      	adds	r7, #16
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}

08010e58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b084      	sub	sp, #16
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	460b      	mov	r3, r1
 8010e62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e64:	2300      	movs	r3, #0
 8010e66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e68:	2300      	movs	r3, #0
 8010e6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010e72:	78fa      	ldrb	r2, [r7, #3]
 8010e74:	4611      	mov	r1, r2
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7f5 fc36 	bl	80066e8 <HAL_PCD_EP_SetStall>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e80:	7bfb      	ldrb	r3, [r7, #15]
 8010e82:	4618      	mov	r0, r3
 8010e84:	f000 f92a 	bl	80110dc <USBD_Get_USB_Status>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3710      	adds	r7, #16
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}

08010e96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e96:	b580      	push	{r7, lr}
 8010e98:	b084      	sub	sp, #16
 8010e9a:	af00      	add	r7, sp, #0
 8010e9c:	6078      	str	r0, [r7, #4]
 8010e9e:	460b      	mov	r3, r1
 8010ea0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010eb0:	78fa      	ldrb	r2, [r7, #3]
 8010eb2:	4611      	mov	r1, r2
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f7f5 fc69 	bl	800678c <HAL_PCD_EP_ClrStall>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ebe:	7bfb      	ldrb	r3, [r7, #15]
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f000 f90b 	bl	80110dc <USBD_Get_USB_Status>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010eca:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3710      	adds	r7, #16
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ed4:	b480      	push	{r7}
 8010ed6:	b085      	sub	sp, #20
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	460b      	mov	r3, r1
 8010ede:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010ee6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010ee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	da0b      	bge.n	8010f08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010ef0:	78fb      	ldrb	r3, [r7, #3]
 8010ef2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010ef6:	68f9      	ldr	r1, [r7, #12]
 8010ef8:	4613      	mov	r3, r2
 8010efa:	009b      	lsls	r3, r3, #2
 8010efc:	4413      	add	r3, r2
 8010efe:	00db      	lsls	r3, r3, #3
 8010f00:	440b      	add	r3, r1
 8010f02:	3312      	adds	r3, #18
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	e00b      	b.n	8010f20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010f08:	78fb      	ldrb	r3, [r7, #3]
 8010f0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010f0e:	68f9      	ldr	r1, [r7, #12]
 8010f10:	4613      	mov	r3, r2
 8010f12:	009b      	lsls	r3, r3, #2
 8010f14:	4413      	add	r3, r2
 8010f16:	00db      	lsls	r3, r3, #3
 8010f18:	440b      	add	r3, r1
 8010f1a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010f1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	3714      	adds	r7, #20
 8010f24:	46bd      	mov	sp, r7
 8010f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2a:	4770      	bx	lr

08010f2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b084      	sub	sp, #16
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	460b      	mov	r3, r1
 8010f36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010f46:	78fa      	ldrb	r2, [r7, #3]
 8010f48:	4611      	mov	r1, r2
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7f5 fae1 	bl	8006512 <HAL_PCD_SetAddress>
 8010f50:	4603      	mov	r3, r0
 8010f52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f54:	7bfb      	ldrb	r3, [r7, #15]
 8010f56:	4618      	mov	r0, r3
 8010f58:	f000 f8c0 	bl	80110dc <USBD_Get_USB_Status>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f60:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	3710      	adds	r7, #16
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}

08010f6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010f6a:	b580      	push	{r7, lr}
 8010f6c:	b086      	sub	sp, #24
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	60f8      	str	r0, [r7, #12]
 8010f72:	607a      	str	r2, [r7, #4]
 8010f74:	603b      	str	r3, [r7, #0]
 8010f76:	460b      	mov	r3, r1
 8010f78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010f88:	7af9      	ldrb	r1, [r7, #11]
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	687a      	ldr	r2, [r7, #4]
 8010f8e:	f7f5 fb74 	bl	800667a <HAL_PCD_EP_Transmit>
 8010f92:	4603      	mov	r3, r0
 8010f94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f96:	7dfb      	ldrb	r3, [r7, #23]
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f000 f89f 	bl	80110dc <USBD_Get_USB_Status>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010fa2:	7dbb      	ldrb	r3, [r7, #22]
}
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3718      	adds	r7, #24
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}

08010fac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b086      	sub	sp, #24
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	607a      	str	r2, [r7, #4]
 8010fb6:	603b      	str	r3, [r7, #0]
 8010fb8:	460b      	mov	r3, r1
 8010fba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010fca:	7af9      	ldrb	r1, [r7, #11]
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	687a      	ldr	r2, [r7, #4]
 8010fd0:	f7f5 fb22 	bl	8006618 <HAL_PCD_EP_Receive>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fd8:	7dfb      	ldrb	r3, [r7, #23]
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f000 f87e 	bl	80110dc <USBD_Get_USB_Status>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010fe4:	7dbb      	ldrb	r3, [r7, #22]
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3718      	adds	r7, #24
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
	...

08010ff0 <USBD_LL_BatterryCharging>:
  * @brief
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatterryCharging(USBD_HandleTypeDef *pdev)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b082      	sub	sp, #8
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1) == GPIO_PIN_SET)
 8010ff8:	2102      	movs	r1, #2
 8010ffa:	480d      	ldr	r0, [pc, #52]	@ (8011030 <USBD_LL_BatterryCharging+0x40>)
 8010ffc:	f7f4 feee 	bl	8005ddc <HAL_GPIO_ReadPin>
 8011000:	4603      	mov	r3, r0
 8011002:	2b01      	cmp	r3, #1
 8011004:	d10f      	bne.n	8011026 <USBD_LL_BatterryCharging+0x36>
  {
    /*wait for bus stabilization*/
    HAL_Delay(450);
 8011006:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 801100a:	f7f3 f829 	bl	8004060 <HAL_Delay>
    /*Start BCD Detect*/
    HAL_PCDEx_ActivateBCD (pdev->pData);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011014:	4618      	mov	r0, r3
 8011016:	f7f6 fcdc 	bl	80079d2 <HAL_PCDEx_ActivateBCD>
    HAL_PCDEx_BCD_VBUSDetect(pdev->pData);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011020:	4618      	mov	r0, r3
 8011022:	f7f6 fd2c 	bl	8007a7e <HAL_PCDEx_BCD_VBUSDetect>
  }
  return USBD_OK;
 8011026:	2300      	movs	r3, #0
}
 8011028:	4618      	mov	r0, r3
 801102a:	3708      	adds	r7, #8
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}
 8011030:	48001400 	.word	0x48001400

08011034 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b082      	sub	sp, #8
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
 801103c:	460b      	mov	r3, r1
 801103e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011040:	78fb      	ldrb	r3, [r7, #3]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d002      	beq.n	801104c <HAL_PCDEx_LPM_Callback+0x18>
 8011046:	2b01      	cmp	r3, #1
 8011048:	d013      	beq.n	8011072 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801104a:	e023      	b.n	8011094 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	7a5b      	ldrb	r3, [r3, #9]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d007      	beq.n	8011064 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011054:	f000 f83c 	bl	80110d0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011058:	4b10      	ldr	r3, [pc, #64]	@ (801109c <HAL_PCDEx_LPM_Callback+0x68>)
 801105a:	691b      	ldr	r3, [r3, #16]
 801105c:	4a0f      	ldr	r2, [pc, #60]	@ (801109c <HAL_PCDEx_LPM_Callback+0x68>)
 801105e:	f023 0306 	bic.w	r3, r3, #6
 8011062:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801106a:	4618      	mov	r0, r3
 801106c:	f7fe fccf 	bl	800fa0e <USBD_LL_Resume>
    break;
 8011070:	e010      	b.n	8011094 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011078:	4618      	mov	r0, r3
 801107a:	f7fe fcb2 	bl	800f9e2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	7a5b      	ldrb	r3, [r3, #9]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d005      	beq.n	8011092 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011086:	4b05      	ldr	r3, [pc, #20]	@ (801109c <HAL_PCDEx_LPM_Callback+0x68>)
 8011088:	691b      	ldr	r3, [r3, #16]
 801108a:	4a04      	ldr	r2, [pc, #16]	@ (801109c <HAL_PCDEx_LPM_Callback+0x68>)
 801108c:	f043 0306 	orr.w	r3, r3, #6
 8011090:	6113      	str	r3, [r2, #16]
    break;
 8011092:	bf00      	nop
}
 8011094:	bf00      	nop
 8011096:	3708      	adds	r7, #8
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}
 801109c:	e000ed00 	.word	0xe000ed00

080110a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80110a0:	b480      	push	{r7}
 80110a2:	b083      	sub	sp, #12
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80110a8:	4b03      	ldr	r3, [pc, #12]	@ (80110b8 <USBD_static_malloc+0x18>)
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	370c      	adds	r7, #12
 80110ae:	46bd      	mov	sp, r7
 80110b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b4:	4770      	bx	lr
 80110b6:	bf00      	nop
 80110b8:	20001190 	.word	0x20001190

080110bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80110bc:	b480      	push	{r7}
 80110be:	b083      	sub	sp, #12
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]

}
 80110c4:	bf00      	nop
 80110c6:	370c      	adds	r7, #12
 80110c8:	46bd      	mov	sp, r7
 80110ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ce:	4770      	bx	lr

080110d0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80110d4:	f7f0 f9ea 	bl	80014ac <SystemClock_Config>
}
 80110d8:	bf00      	nop
 80110da:	bd80      	pop	{r7, pc}

080110dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80110dc:	b480      	push	{r7}
 80110de:	b085      	sub	sp, #20
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	4603      	mov	r3, r0
 80110e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110e6:	2300      	movs	r3, #0
 80110e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80110ea:	79fb      	ldrb	r3, [r7, #7]
 80110ec:	2b03      	cmp	r3, #3
 80110ee:	d817      	bhi.n	8011120 <USBD_Get_USB_Status+0x44>
 80110f0:	a201      	add	r2, pc, #4	@ (adr r2, 80110f8 <USBD_Get_USB_Status+0x1c>)
 80110f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110f6:	bf00      	nop
 80110f8:	08011109 	.word	0x08011109
 80110fc:	0801110f 	.word	0x0801110f
 8011100:	08011115 	.word	0x08011115
 8011104:	0801111b 	.word	0x0801111b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011108:	2300      	movs	r3, #0
 801110a:	73fb      	strb	r3, [r7, #15]
    break;
 801110c:	e00b      	b.n	8011126 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801110e:	2303      	movs	r3, #3
 8011110:	73fb      	strb	r3, [r7, #15]
    break;
 8011112:	e008      	b.n	8011126 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011114:	2301      	movs	r3, #1
 8011116:	73fb      	strb	r3, [r7, #15]
    break;
 8011118:	e005      	b.n	8011126 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801111a:	2303      	movs	r3, #3
 801111c:	73fb      	strb	r3, [r7, #15]
    break;
 801111e:	e002      	b.n	8011126 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011120:	2303      	movs	r3, #3
 8011122:	73fb      	strb	r3, [r7, #15]
    break;
 8011124:	bf00      	nop
  }
  return usb_status;
 8011126:	7bfb      	ldrb	r3, [r7, #15]
}
 8011128:	4618      	mov	r0, r3
 801112a:	3714      	adds	r7, #20
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr

08011134 <__cvt>:
 8011134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011138:	ec57 6b10 	vmov	r6, r7, d0
 801113c:	2f00      	cmp	r7, #0
 801113e:	460c      	mov	r4, r1
 8011140:	4619      	mov	r1, r3
 8011142:	463b      	mov	r3, r7
 8011144:	bfbb      	ittet	lt
 8011146:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801114a:	461f      	movlt	r7, r3
 801114c:	2300      	movge	r3, #0
 801114e:	232d      	movlt	r3, #45	@ 0x2d
 8011150:	700b      	strb	r3, [r1, #0]
 8011152:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011154:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011158:	4691      	mov	r9, r2
 801115a:	f023 0820 	bic.w	r8, r3, #32
 801115e:	bfbc      	itt	lt
 8011160:	4632      	movlt	r2, r6
 8011162:	4616      	movlt	r6, r2
 8011164:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011168:	d005      	beq.n	8011176 <__cvt+0x42>
 801116a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801116e:	d100      	bne.n	8011172 <__cvt+0x3e>
 8011170:	3401      	adds	r4, #1
 8011172:	2102      	movs	r1, #2
 8011174:	e000      	b.n	8011178 <__cvt+0x44>
 8011176:	2103      	movs	r1, #3
 8011178:	ab03      	add	r3, sp, #12
 801117a:	9301      	str	r3, [sp, #4]
 801117c:	ab02      	add	r3, sp, #8
 801117e:	9300      	str	r3, [sp, #0]
 8011180:	ec47 6b10 	vmov	d0, r6, r7
 8011184:	4653      	mov	r3, sl
 8011186:	4622      	mov	r2, r4
 8011188:	f000 fefe 	bl	8011f88 <_dtoa_r>
 801118c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011190:	4605      	mov	r5, r0
 8011192:	d119      	bne.n	80111c8 <__cvt+0x94>
 8011194:	f019 0f01 	tst.w	r9, #1
 8011198:	d00e      	beq.n	80111b8 <__cvt+0x84>
 801119a:	eb00 0904 	add.w	r9, r0, r4
 801119e:	2200      	movs	r2, #0
 80111a0:	2300      	movs	r3, #0
 80111a2:	4630      	mov	r0, r6
 80111a4:	4639      	mov	r1, r7
 80111a6:	f7ef fcb7 	bl	8000b18 <__aeabi_dcmpeq>
 80111aa:	b108      	cbz	r0, 80111b0 <__cvt+0x7c>
 80111ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80111b0:	2230      	movs	r2, #48	@ 0x30
 80111b2:	9b03      	ldr	r3, [sp, #12]
 80111b4:	454b      	cmp	r3, r9
 80111b6:	d31e      	bcc.n	80111f6 <__cvt+0xc2>
 80111b8:	9b03      	ldr	r3, [sp, #12]
 80111ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80111bc:	1b5b      	subs	r3, r3, r5
 80111be:	4628      	mov	r0, r5
 80111c0:	6013      	str	r3, [r2, #0]
 80111c2:	b004      	add	sp, #16
 80111c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80111cc:	eb00 0904 	add.w	r9, r0, r4
 80111d0:	d1e5      	bne.n	801119e <__cvt+0x6a>
 80111d2:	7803      	ldrb	r3, [r0, #0]
 80111d4:	2b30      	cmp	r3, #48	@ 0x30
 80111d6:	d10a      	bne.n	80111ee <__cvt+0xba>
 80111d8:	2200      	movs	r2, #0
 80111da:	2300      	movs	r3, #0
 80111dc:	4630      	mov	r0, r6
 80111de:	4639      	mov	r1, r7
 80111e0:	f7ef fc9a 	bl	8000b18 <__aeabi_dcmpeq>
 80111e4:	b918      	cbnz	r0, 80111ee <__cvt+0xba>
 80111e6:	f1c4 0401 	rsb	r4, r4, #1
 80111ea:	f8ca 4000 	str.w	r4, [sl]
 80111ee:	f8da 3000 	ldr.w	r3, [sl]
 80111f2:	4499      	add	r9, r3
 80111f4:	e7d3      	b.n	801119e <__cvt+0x6a>
 80111f6:	1c59      	adds	r1, r3, #1
 80111f8:	9103      	str	r1, [sp, #12]
 80111fa:	701a      	strb	r2, [r3, #0]
 80111fc:	e7d9      	b.n	80111b2 <__cvt+0x7e>

080111fe <__exponent>:
 80111fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011200:	2900      	cmp	r1, #0
 8011202:	bfba      	itte	lt
 8011204:	4249      	neglt	r1, r1
 8011206:	232d      	movlt	r3, #45	@ 0x2d
 8011208:	232b      	movge	r3, #43	@ 0x2b
 801120a:	2909      	cmp	r1, #9
 801120c:	7002      	strb	r2, [r0, #0]
 801120e:	7043      	strb	r3, [r0, #1]
 8011210:	dd29      	ble.n	8011266 <__exponent+0x68>
 8011212:	f10d 0307 	add.w	r3, sp, #7
 8011216:	461d      	mov	r5, r3
 8011218:	270a      	movs	r7, #10
 801121a:	461a      	mov	r2, r3
 801121c:	fbb1 f6f7 	udiv	r6, r1, r7
 8011220:	fb07 1416 	mls	r4, r7, r6, r1
 8011224:	3430      	adds	r4, #48	@ 0x30
 8011226:	f802 4c01 	strb.w	r4, [r2, #-1]
 801122a:	460c      	mov	r4, r1
 801122c:	2c63      	cmp	r4, #99	@ 0x63
 801122e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8011232:	4631      	mov	r1, r6
 8011234:	dcf1      	bgt.n	801121a <__exponent+0x1c>
 8011236:	3130      	adds	r1, #48	@ 0x30
 8011238:	1e94      	subs	r4, r2, #2
 801123a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801123e:	1c41      	adds	r1, r0, #1
 8011240:	4623      	mov	r3, r4
 8011242:	42ab      	cmp	r3, r5
 8011244:	d30a      	bcc.n	801125c <__exponent+0x5e>
 8011246:	f10d 0309 	add.w	r3, sp, #9
 801124a:	1a9b      	subs	r3, r3, r2
 801124c:	42ac      	cmp	r4, r5
 801124e:	bf88      	it	hi
 8011250:	2300      	movhi	r3, #0
 8011252:	3302      	adds	r3, #2
 8011254:	4403      	add	r3, r0
 8011256:	1a18      	subs	r0, r3, r0
 8011258:	b003      	add	sp, #12
 801125a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801125c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011260:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011264:	e7ed      	b.n	8011242 <__exponent+0x44>
 8011266:	2330      	movs	r3, #48	@ 0x30
 8011268:	3130      	adds	r1, #48	@ 0x30
 801126a:	7083      	strb	r3, [r0, #2]
 801126c:	70c1      	strb	r1, [r0, #3]
 801126e:	1d03      	adds	r3, r0, #4
 8011270:	e7f1      	b.n	8011256 <__exponent+0x58>
	...

08011274 <_printf_float>:
 8011274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011278:	b08d      	sub	sp, #52	@ 0x34
 801127a:	460c      	mov	r4, r1
 801127c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011280:	4616      	mov	r6, r2
 8011282:	461f      	mov	r7, r3
 8011284:	4605      	mov	r5, r0
 8011286:	f000 fd8b 	bl	8011da0 <_localeconv_r>
 801128a:	6803      	ldr	r3, [r0, #0]
 801128c:	9304      	str	r3, [sp, #16]
 801128e:	4618      	mov	r0, r3
 8011290:	f7ef f816 	bl	80002c0 <strlen>
 8011294:	2300      	movs	r3, #0
 8011296:	930a      	str	r3, [sp, #40]	@ 0x28
 8011298:	f8d8 3000 	ldr.w	r3, [r8]
 801129c:	9005      	str	r0, [sp, #20]
 801129e:	3307      	adds	r3, #7
 80112a0:	f023 0307 	bic.w	r3, r3, #7
 80112a4:	f103 0208 	add.w	r2, r3, #8
 80112a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80112ac:	f8d4 b000 	ldr.w	fp, [r4]
 80112b0:	f8c8 2000 	str.w	r2, [r8]
 80112b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80112b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80112bc:	9307      	str	r3, [sp, #28]
 80112be:	f8cd 8018 	str.w	r8, [sp, #24]
 80112c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80112c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80112ca:	4b9c      	ldr	r3, [pc, #624]	@ (801153c <_printf_float+0x2c8>)
 80112cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80112d0:	f7ef fc54 	bl	8000b7c <__aeabi_dcmpun>
 80112d4:	bb70      	cbnz	r0, 8011334 <_printf_float+0xc0>
 80112d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80112da:	4b98      	ldr	r3, [pc, #608]	@ (801153c <_printf_float+0x2c8>)
 80112dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80112e0:	f7ef fc2e 	bl	8000b40 <__aeabi_dcmple>
 80112e4:	bb30      	cbnz	r0, 8011334 <_printf_float+0xc0>
 80112e6:	2200      	movs	r2, #0
 80112e8:	2300      	movs	r3, #0
 80112ea:	4640      	mov	r0, r8
 80112ec:	4649      	mov	r1, r9
 80112ee:	f7ef fc1d 	bl	8000b2c <__aeabi_dcmplt>
 80112f2:	b110      	cbz	r0, 80112fa <_printf_float+0x86>
 80112f4:	232d      	movs	r3, #45	@ 0x2d
 80112f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80112fa:	4a91      	ldr	r2, [pc, #580]	@ (8011540 <_printf_float+0x2cc>)
 80112fc:	4b91      	ldr	r3, [pc, #580]	@ (8011544 <_printf_float+0x2d0>)
 80112fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011302:	bf94      	ite	ls
 8011304:	4690      	movls	r8, r2
 8011306:	4698      	movhi	r8, r3
 8011308:	2303      	movs	r3, #3
 801130a:	6123      	str	r3, [r4, #16]
 801130c:	f02b 0304 	bic.w	r3, fp, #4
 8011310:	6023      	str	r3, [r4, #0]
 8011312:	f04f 0900 	mov.w	r9, #0
 8011316:	9700      	str	r7, [sp, #0]
 8011318:	4633      	mov	r3, r6
 801131a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801131c:	4621      	mov	r1, r4
 801131e:	4628      	mov	r0, r5
 8011320:	f000 fa7c 	bl	801181c <_printf_common>
 8011324:	3001      	adds	r0, #1
 8011326:	f040 808d 	bne.w	8011444 <_printf_float+0x1d0>
 801132a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801132e:	b00d      	add	sp, #52	@ 0x34
 8011330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011334:	4642      	mov	r2, r8
 8011336:	464b      	mov	r3, r9
 8011338:	4640      	mov	r0, r8
 801133a:	4649      	mov	r1, r9
 801133c:	f7ef fc1e 	bl	8000b7c <__aeabi_dcmpun>
 8011340:	b140      	cbz	r0, 8011354 <_printf_float+0xe0>
 8011342:	464b      	mov	r3, r9
 8011344:	2b00      	cmp	r3, #0
 8011346:	bfbc      	itt	lt
 8011348:	232d      	movlt	r3, #45	@ 0x2d
 801134a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801134e:	4a7e      	ldr	r2, [pc, #504]	@ (8011548 <_printf_float+0x2d4>)
 8011350:	4b7e      	ldr	r3, [pc, #504]	@ (801154c <_printf_float+0x2d8>)
 8011352:	e7d4      	b.n	80112fe <_printf_float+0x8a>
 8011354:	6863      	ldr	r3, [r4, #4]
 8011356:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801135a:	9206      	str	r2, [sp, #24]
 801135c:	1c5a      	adds	r2, r3, #1
 801135e:	d13b      	bne.n	80113d8 <_printf_float+0x164>
 8011360:	2306      	movs	r3, #6
 8011362:	6063      	str	r3, [r4, #4]
 8011364:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011368:	2300      	movs	r3, #0
 801136a:	6022      	str	r2, [r4, #0]
 801136c:	9303      	str	r3, [sp, #12]
 801136e:	ab0a      	add	r3, sp, #40	@ 0x28
 8011370:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011374:	ab09      	add	r3, sp, #36	@ 0x24
 8011376:	9300      	str	r3, [sp, #0]
 8011378:	6861      	ldr	r1, [r4, #4]
 801137a:	ec49 8b10 	vmov	d0, r8, r9
 801137e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011382:	4628      	mov	r0, r5
 8011384:	f7ff fed6 	bl	8011134 <__cvt>
 8011388:	9b06      	ldr	r3, [sp, #24]
 801138a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801138c:	2b47      	cmp	r3, #71	@ 0x47
 801138e:	4680      	mov	r8, r0
 8011390:	d129      	bne.n	80113e6 <_printf_float+0x172>
 8011392:	1cc8      	adds	r0, r1, #3
 8011394:	db02      	blt.n	801139c <_printf_float+0x128>
 8011396:	6863      	ldr	r3, [r4, #4]
 8011398:	4299      	cmp	r1, r3
 801139a:	dd41      	ble.n	8011420 <_printf_float+0x1ac>
 801139c:	f1aa 0a02 	sub.w	sl, sl, #2
 80113a0:	fa5f fa8a 	uxtb.w	sl, sl
 80113a4:	3901      	subs	r1, #1
 80113a6:	4652      	mov	r2, sl
 80113a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80113ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80113ae:	f7ff ff26 	bl	80111fe <__exponent>
 80113b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80113b4:	1813      	adds	r3, r2, r0
 80113b6:	2a01      	cmp	r2, #1
 80113b8:	4681      	mov	r9, r0
 80113ba:	6123      	str	r3, [r4, #16]
 80113bc:	dc02      	bgt.n	80113c4 <_printf_float+0x150>
 80113be:	6822      	ldr	r2, [r4, #0]
 80113c0:	07d2      	lsls	r2, r2, #31
 80113c2:	d501      	bpl.n	80113c8 <_printf_float+0x154>
 80113c4:	3301      	adds	r3, #1
 80113c6:	6123      	str	r3, [r4, #16]
 80113c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d0a2      	beq.n	8011316 <_printf_float+0xa2>
 80113d0:	232d      	movs	r3, #45	@ 0x2d
 80113d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80113d6:	e79e      	b.n	8011316 <_printf_float+0xa2>
 80113d8:	9a06      	ldr	r2, [sp, #24]
 80113da:	2a47      	cmp	r2, #71	@ 0x47
 80113dc:	d1c2      	bne.n	8011364 <_printf_float+0xf0>
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d1c0      	bne.n	8011364 <_printf_float+0xf0>
 80113e2:	2301      	movs	r3, #1
 80113e4:	e7bd      	b.n	8011362 <_printf_float+0xee>
 80113e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80113ea:	d9db      	bls.n	80113a4 <_printf_float+0x130>
 80113ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80113f0:	d118      	bne.n	8011424 <_printf_float+0x1b0>
 80113f2:	2900      	cmp	r1, #0
 80113f4:	6863      	ldr	r3, [r4, #4]
 80113f6:	dd0b      	ble.n	8011410 <_printf_float+0x19c>
 80113f8:	6121      	str	r1, [r4, #16]
 80113fa:	b913      	cbnz	r3, 8011402 <_printf_float+0x18e>
 80113fc:	6822      	ldr	r2, [r4, #0]
 80113fe:	07d0      	lsls	r0, r2, #31
 8011400:	d502      	bpl.n	8011408 <_printf_float+0x194>
 8011402:	3301      	adds	r3, #1
 8011404:	440b      	add	r3, r1
 8011406:	6123      	str	r3, [r4, #16]
 8011408:	65a1      	str	r1, [r4, #88]	@ 0x58
 801140a:	f04f 0900 	mov.w	r9, #0
 801140e:	e7db      	b.n	80113c8 <_printf_float+0x154>
 8011410:	b913      	cbnz	r3, 8011418 <_printf_float+0x1a4>
 8011412:	6822      	ldr	r2, [r4, #0]
 8011414:	07d2      	lsls	r2, r2, #31
 8011416:	d501      	bpl.n	801141c <_printf_float+0x1a8>
 8011418:	3302      	adds	r3, #2
 801141a:	e7f4      	b.n	8011406 <_printf_float+0x192>
 801141c:	2301      	movs	r3, #1
 801141e:	e7f2      	b.n	8011406 <_printf_float+0x192>
 8011420:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011426:	4299      	cmp	r1, r3
 8011428:	db05      	blt.n	8011436 <_printf_float+0x1c2>
 801142a:	6823      	ldr	r3, [r4, #0]
 801142c:	6121      	str	r1, [r4, #16]
 801142e:	07d8      	lsls	r0, r3, #31
 8011430:	d5ea      	bpl.n	8011408 <_printf_float+0x194>
 8011432:	1c4b      	adds	r3, r1, #1
 8011434:	e7e7      	b.n	8011406 <_printf_float+0x192>
 8011436:	2900      	cmp	r1, #0
 8011438:	bfd4      	ite	le
 801143a:	f1c1 0202 	rsble	r2, r1, #2
 801143e:	2201      	movgt	r2, #1
 8011440:	4413      	add	r3, r2
 8011442:	e7e0      	b.n	8011406 <_printf_float+0x192>
 8011444:	6823      	ldr	r3, [r4, #0]
 8011446:	055a      	lsls	r2, r3, #21
 8011448:	d407      	bmi.n	801145a <_printf_float+0x1e6>
 801144a:	6923      	ldr	r3, [r4, #16]
 801144c:	4642      	mov	r2, r8
 801144e:	4631      	mov	r1, r6
 8011450:	4628      	mov	r0, r5
 8011452:	47b8      	blx	r7
 8011454:	3001      	adds	r0, #1
 8011456:	d12b      	bne.n	80114b0 <_printf_float+0x23c>
 8011458:	e767      	b.n	801132a <_printf_float+0xb6>
 801145a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801145e:	f240 80dd 	bls.w	801161c <_printf_float+0x3a8>
 8011462:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011466:	2200      	movs	r2, #0
 8011468:	2300      	movs	r3, #0
 801146a:	f7ef fb55 	bl	8000b18 <__aeabi_dcmpeq>
 801146e:	2800      	cmp	r0, #0
 8011470:	d033      	beq.n	80114da <_printf_float+0x266>
 8011472:	4a37      	ldr	r2, [pc, #220]	@ (8011550 <_printf_float+0x2dc>)
 8011474:	2301      	movs	r3, #1
 8011476:	4631      	mov	r1, r6
 8011478:	4628      	mov	r0, r5
 801147a:	47b8      	blx	r7
 801147c:	3001      	adds	r0, #1
 801147e:	f43f af54 	beq.w	801132a <_printf_float+0xb6>
 8011482:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011486:	4543      	cmp	r3, r8
 8011488:	db02      	blt.n	8011490 <_printf_float+0x21c>
 801148a:	6823      	ldr	r3, [r4, #0]
 801148c:	07d8      	lsls	r0, r3, #31
 801148e:	d50f      	bpl.n	80114b0 <_printf_float+0x23c>
 8011490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011494:	4631      	mov	r1, r6
 8011496:	4628      	mov	r0, r5
 8011498:	47b8      	blx	r7
 801149a:	3001      	adds	r0, #1
 801149c:	f43f af45 	beq.w	801132a <_printf_float+0xb6>
 80114a0:	f04f 0900 	mov.w	r9, #0
 80114a4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80114a8:	f104 0a1a 	add.w	sl, r4, #26
 80114ac:	45c8      	cmp	r8, r9
 80114ae:	dc09      	bgt.n	80114c4 <_printf_float+0x250>
 80114b0:	6823      	ldr	r3, [r4, #0]
 80114b2:	079b      	lsls	r3, r3, #30
 80114b4:	f100 8103 	bmi.w	80116be <_printf_float+0x44a>
 80114b8:	68e0      	ldr	r0, [r4, #12]
 80114ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80114bc:	4298      	cmp	r0, r3
 80114be:	bfb8      	it	lt
 80114c0:	4618      	movlt	r0, r3
 80114c2:	e734      	b.n	801132e <_printf_float+0xba>
 80114c4:	2301      	movs	r3, #1
 80114c6:	4652      	mov	r2, sl
 80114c8:	4631      	mov	r1, r6
 80114ca:	4628      	mov	r0, r5
 80114cc:	47b8      	blx	r7
 80114ce:	3001      	adds	r0, #1
 80114d0:	f43f af2b 	beq.w	801132a <_printf_float+0xb6>
 80114d4:	f109 0901 	add.w	r9, r9, #1
 80114d8:	e7e8      	b.n	80114ac <_printf_float+0x238>
 80114da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114dc:	2b00      	cmp	r3, #0
 80114de:	dc39      	bgt.n	8011554 <_printf_float+0x2e0>
 80114e0:	4a1b      	ldr	r2, [pc, #108]	@ (8011550 <_printf_float+0x2dc>)
 80114e2:	2301      	movs	r3, #1
 80114e4:	4631      	mov	r1, r6
 80114e6:	4628      	mov	r0, r5
 80114e8:	47b8      	blx	r7
 80114ea:	3001      	adds	r0, #1
 80114ec:	f43f af1d 	beq.w	801132a <_printf_float+0xb6>
 80114f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80114f4:	ea59 0303 	orrs.w	r3, r9, r3
 80114f8:	d102      	bne.n	8011500 <_printf_float+0x28c>
 80114fa:	6823      	ldr	r3, [r4, #0]
 80114fc:	07d9      	lsls	r1, r3, #31
 80114fe:	d5d7      	bpl.n	80114b0 <_printf_float+0x23c>
 8011500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011504:	4631      	mov	r1, r6
 8011506:	4628      	mov	r0, r5
 8011508:	47b8      	blx	r7
 801150a:	3001      	adds	r0, #1
 801150c:	f43f af0d 	beq.w	801132a <_printf_float+0xb6>
 8011510:	f04f 0a00 	mov.w	sl, #0
 8011514:	f104 0b1a 	add.w	fp, r4, #26
 8011518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801151a:	425b      	negs	r3, r3
 801151c:	4553      	cmp	r3, sl
 801151e:	dc01      	bgt.n	8011524 <_printf_float+0x2b0>
 8011520:	464b      	mov	r3, r9
 8011522:	e793      	b.n	801144c <_printf_float+0x1d8>
 8011524:	2301      	movs	r3, #1
 8011526:	465a      	mov	r2, fp
 8011528:	4631      	mov	r1, r6
 801152a:	4628      	mov	r0, r5
 801152c:	47b8      	blx	r7
 801152e:	3001      	adds	r0, #1
 8011530:	f43f aefb 	beq.w	801132a <_printf_float+0xb6>
 8011534:	f10a 0a01 	add.w	sl, sl, #1
 8011538:	e7ee      	b.n	8011518 <_printf_float+0x2a4>
 801153a:	bf00      	nop
 801153c:	7fefffff 	.word	0x7fefffff
 8011540:	08014030 	.word	0x08014030
 8011544:	08014034 	.word	0x08014034
 8011548:	08014038 	.word	0x08014038
 801154c:	0801403c 	.word	0x0801403c
 8011550:	08014040 	.word	0x08014040
 8011554:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011556:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801155a:	4553      	cmp	r3, sl
 801155c:	bfa8      	it	ge
 801155e:	4653      	movge	r3, sl
 8011560:	2b00      	cmp	r3, #0
 8011562:	4699      	mov	r9, r3
 8011564:	dc36      	bgt.n	80115d4 <_printf_float+0x360>
 8011566:	f04f 0b00 	mov.w	fp, #0
 801156a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801156e:	f104 021a 	add.w	r2, r4, #26
 8011572:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011574:	9306      	str	r3, [sp, #24]
 8011576:	eba3 0309 	sub.w	r3, r3, r9
 801157a:	455b      	cmp	r3, fp
 801157c:	dc31      	bgt.n	80115e2 <_printf_float+0x36e>
 801157e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011580:	459a      	cmp	sl, r3
 8011582:	dc3a      	bgt.n	80115fa <_printf_float+0x386>
 8011584:	6823      	ldr	r3, [r4, #0]
 8011586:	07da      	lsls	r2, r3, #31
 8011588:	d437      	bmi.n	80115fa <_printf_float+0x386>
 801158a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801158c:	ebaa 0903 	sub.w	r9, sl, r3
 8011590:	9b06      	ldr	r3, [sp, #24]
 8011592:	ebaa 0303 	sub.w	r3, sl, r3
 8011596:	4599      	cmp	r9, r3
 8011598:	bfa8      	it	ge
 801159a:	4699      	movge	r9, r3
 801159c:	f1b9 0f00 	cmp.w	r9, #0
 80115a0:	dc33      	bgt.n	801160a <_printf_float+0x396>
 80115a2:	f04f 0800 	mov.w	r8, #0
 80115a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80115aa:	f104 0b1a 	add.w	fp, r4, #26
 80115ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115b0:	ebaa 0303 	sub.w	r3, sl, r3
 80115b4:	eba3 0309 	sub.w	r3, r3, r9
 80115b8:	4543      	cmp	r3, r8
 80115ba:	f77f af79 	ble.w	80114b0 <_printf_float+0x23c>
 80115be:	2301      	movs	r3, #1
 80115c0:	465a      	mov	r2, fp
 80115c2:	4631      	mov	r1, r6
 80115c4:	4628      	mov	r0, r5
 80115c6:	47b8      	blx	r7
 80115c8:	3001      	adds	r0, #1
 80115ca:	f43f aeae 	beq.w	801132a <_printf_float+0xb6>
 80115ce:	f108 0801 	add.w	r8, r8, #1
 80115d2:	e7ec      	b.n	80115ae <_printf_float+0x33a>
 80115d4:	4642      	mov	r2, r8
 80115d6:	4631      	mov	r1, r6
 80115d8:	4628      	mov	r0, r5
 80115da:	47b8      	blx	r7
 80115dc:	3001      	adds	r0, #1
 80115de:	d1c2      	bne.n	8011566 <_printf_float+0x2f2>
 80115e0:	e6a3      	b.n	801132a <_printf_float+0xb6>
 80115e2:	2301      	movs	r3, #1
 80115e4:	4631      	mov	r1, r6
 80115e6:	4628      	mov	r0, r5
 80115e8:	9206      	str	r2, [sp, #24]
 80115ea:	47b8      	blx	r7
 80115ec:	3001      	adds	r0, #1
 80115ee:	f43f ae9c 	beq.w	801132a <_printf_float+0xb6>
 80115f2:	9a06      	ldr	r2, [sp, #24]
 80115f4:	f10b 0b01 	add.w	fp, fp, #1
 80115f8:	e7bb      	b.n	8011572 <_printf_float+0x2fe>
 80115fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80115fe:	4631      	mov	r1, r6
 8011600:	4628      	mov	r0, r5
 8011602:	47b8      	blx	r7
 8011604:	3001      	adds	r0, #1
 8011606:	d1c0      	bne.n	801158a <_printf_float+0x316>
 8011608:	e68f      	b.n	801132a <_printf_float+0xb6>
 801160a:	9a06      	ldr	r2, [sp, #24]
 801160c:	464b      	mov	r3, r9
 801160e:	4442      	add	r2, r8
 8011610:	4631      	mov	r1, r6
 8011612:	4628      	mov	r0, r5
 8011614:	47b8      	blx	r7
 8011616:	3001      	adds	r0, #1
 8011618:	d1c3      	bne.n	80115a2 <_printf_float+0x32e>
 801161a:	e686      	b.n	801132a <_printf_float+0xb6>
 801161c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011620:	f1ba 0f01 	cmp.w	sl, #1
 8011624:	dc01      	bgt.n	801162a <_printf_float+0x3b6>
 8011626:	07db      	lsls	r3, r3, #31
 8011628:	d536      	bpl.n	8011698 <_printf_float+0x424>
 801162a:	2301      	movs	r3, #1
 801162c:	4642      	mov	r2, r8
 801162e:	4631      	mov	r1, r6
 8011630:	4628      	mov	r0, r5
 8011632:	47b8      	blx	r7
 8011634:	3001      	adds	r0, #1
 8011636:	f43f ae78 	beq.w	801132a <_printf_float+0xb6>
 801163a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801163e:	4631      	mov	r1, r6
 8011640:	4628      	mov	r0, r5
 8011642:	47b8      	blx	r7
 8011644:	3001      	adds	r0, #1
 8011646:	f43f ae70 	beq.w	801132a <_printf_float+0xb6>
 801164a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801164e:	2200      	movs	r2, #0
 8011650:	2300      	movs	r3, #0
 8011652:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8011656:	f7ef fa5f 	bl	8000b18 <__aeabi_dcmpeq>
 801165a:	b9c0      	cbnz	r0, 801168e <_printf_float+0x41a>
 801165c:	4653      	mov	r3, sl
 801165e:	f108 0201 	add.w	r2, r8, #1
 8011662:	4631      	mov	r1, r6
 8011664:	4628      	mov	r0, r5
 8011666:	47b8      	blx	r7
 8011668:	3001      	adds	r0, #1
 801166a:	d10c      	bne.n	8011686 <_printf_float+0x412>
 801166c:	e65d      	b.n	801132a <_printf_float+0xb6>
 801166e:	2301      	movs	r3, #1
 8011670:	465a      	mov	r2, fp
 8011672:	4631      	mov	r1, r6
 8011674:	4628      	mov	r0, r5
 8011676:	47b8      	blx	r7
 8011678:	3001      	adds	r0, #1
 801167a:	f43f ae56 	beq.w	801132a <_printf_float+0xb6>
 801167e:	f108 0801 	add.w	r8, r8, #1
 8011682:	45d0      	cmp	r8, sl
 8011684:	dbf3      	blt.n	801166e <_printf_float+0x3fa>
 8011686:	464b      	mov	r3, r9
 8011688:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801168c:	e6df      	b.n	801144e <_printf_float+0x1da>
 801168e:	f04f 0800 	mov.w	r8, #0
 8011692:	f104 0b1a 	add.w	fp, r4, #26
 8011696:	e7f4      	b.n	8011682 <_printf_float+0x40e>
 8011698:	2301      	movs	r3, #1
 801169a:	4642      	mov	r2, r8
 801169c:	e7e1      	b.n	8011662 <_printf_float+0x3ee>
 801169e:	2301      	movs	r3, #1
 80116a0:	464a      	mov	r2, r9
 80116a2:	4631      	mov	r1, r6
 80116a4:	4628      	mov	r0, r5
 80116a6:	47b8      	blx	r7
 80116a8:	3001      	adds	r0, #1
 80116aa:	f43f ae3e 	beq.w	801132a <_printf_float+0xb6>
 80116ae:	f108 0801 	add.w	r8, r8, #1
 80116b2:	68e3      	ldr	r3, [r4, #12]
 80116b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80116b6:	1a5b      	subs	r3, r3, r1
 80116b8:	4543      	cmp	r3, r8
 80116ba:	dcf0      	bgt.n	801169e <_printf_float+0x42a>
 80116bc:	e6fc      	b.n	80114b8 <_printf_float+0x244>
 80116be:	f04f 0800 	mov.w	r8, #0
 80116c2:	f104 0919 	add.w	r9, r4, #25
 80116c6:	e7f4      	b.n	80116b2 <_printf_float+0x43e>

080116c8 <malloc>:
 80116c8:	4b02      	ldr	r3, [pc, #8]	@ (80116d4 <malloc+0xc>)
 80116ca:	4601      	mov	r1, r0
 80116cc:	6818      	ldr	r0, [r3, #0]
 80116ce:	f000 b825 	b.w	801171c <_malloc_r>
 80116d2:	bf00      	nop
 80116d4:	200000ec 	.word	0x200000ec

080116d8 <sbrk_aligned>:
 80116d8:	b570      	push	{r4, r5, r6, lr}
 80116da:	4e0f      	ldr	r6, [pc, #60]	@ (8011718 <sbrk_aligned+0x40>)
 80116dc:	460c      	mov	r4, r1
 80116de:	6831      	ldr	r1, [r6, #0]
 80116e0:	4605      	mov	r5, r0
 80116e2:	b911      	cbnz	r1, 80116ea <sbrk_aligned+0x12>
 80116e4:	f000 fb60 	bl	8011da8 <_sbrk_r>
 80116e8:	6030      	str	r0, [r6, #0]
 80116ea:	4621      	mov	r1, r4
 80116ec:	4628      	mov	r0, r5
 80116ee:	f000 fb5b 	bl	8011da8 <_sbrk_r>
 80116f2:	1c43      	adds	r3, r0, #1
 80116f4:	d103      	bne.n	80116fe <sbrk_aligned+0x26>
 80116f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80116fa:	4620      	mov	r0, r4
 80116fc:	bd70      	pop	{r4, r5, r6, pc}
 80116fe:	1cc4      	adds	r4, r0, #3
 8011700:	f024 0403 	bic.w	r4, r4, #3
 8011704:	42a0      	cmp	r0, r4
 8011706:	d0f8      	beq.n	80116fa <sbrk_aligned+0x22>
 8011708:	1a21      	subs	r1, r4, r0
 801170a:	4628      	mov	r0, r5
 801170c:	f000 fb4c 	bl	8011da8 <_sbrk_r>
 8011710:	3001      	adds	r0, #1
 8011712:	d1f2      	bne.n	80116fa <sbrk_aligned+0x22>
 8011714:	e7ef      	b.n	80116f6 <sbrk_aligned+0x1e>
 8011716:	bf00      	nop
 8011718:	200015b0 	.word	0x200015b0

0801171c <_malloc_r>:
 801171c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011720:	1ccd      	adds	r5, r1, #3
 8011722:	f025 0503 	bic.w	r5, r5, #3
 8011726:	3508      	adds	r5, #8
 8011728:	2d0c      	cmp	r5, #12
 801172a:	bf38      	it	cc
 801172c:	250c      	movcc	r5, #12
 801172e:	2d00      	cmp	r5, #0
 8011730:	4606      	mov	r6, r0
 8011732:	db01      	blt.n	8011738 <_malloc_r+0x1c>
 8011734:	42a9      	cmp	r1, r5
 8011736:	d904      	bls.n	8011742 <_malloc_r+0x26>
 8011738:	230c      	movs	r3, #12
 801173a:	6033      	str	r3, [r6, #0]
 801173c:	2000      	movs	r0, #0
 801173e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011742:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011818 <_malloc_r+0xfc>
 8011746:	f000 f9f7 	bl	8011b38 <__malloc_lock>
 801174a:	f8d8 3000 	ldr.w	r3, [r8]
 801174e:	461c      	mov	r4, r3
 8011750:	bb44      	cbnz	r4, 80117a4 <_malloc_r+0x88>
 8011752:	4629      	mov	r1, r5
 8011754:	4630      	mov	r0, r6
 8011756:	f7ff ffbf 	bl	80116d8 <sbrk_aligned>
 801175a:	1c43      	adds	r3, r0, #1
 801175c:	4604      	mov	r4, r0
 801175e:	d158      	bne.n	8011812 <_malloc_r+0xf6>
 8011760:	f8d8 4000 	ldr.w	r4, [r8]
 8011764:	4627      	mov	r7, r4
 8011766:	2f00      	cmp	r7, #0
 8011768:	d143      	bne.n	80117f2 <_malloc_r+0xd6>
 801176a:	2c00      	cmp	r4, #0
 801176c:	d04b      	beq.n	8011806 <_malloc_r+0xea>
 801176e:	6823      	ldr	r3, [r4, #0]
 8011770:	4639      	mov	r1, r7
 8011772:	4630      	mov	r0, r6
 8011774:	eb04 0903 	add.w	r9, r4, r3
 8011778:	f000 fb16 	bl	8011da8 <_sbrk_r>
 801177c:	4581      	cmp	r9, r0
 801177e:	d142      	bne.n	8011806 <_malloc_r+0xea>
 8011780:	6821      	ldr	r1, [r4, #0]
 8011782:	1a6d      	subs	r5, r5, r1
 8011784:	4629      	mov	r1, r5
 8011786:	4630      	mov	r0, r6
 8011788:	f7ff ffa6 	bl	80116d8 <sbrk_aligned>
 801178c:	3001      	adds	r0, #1
 801178e:	d03a      	beq.n	8011806 <_malloc_r+0xea>
 8011790:	6823      	ldr	r3, [r4, #0]
 8011792:	442b      	add	r3, r5
 8011794:	6023      	str	r3, [r4, #0]
 8011796:	f8d8 3000 	ldr.w	r3, [r8]
 801179a:	685a      	ldr	r2, [r3, #4]
 801179c:	bb62      	cbnz	r2, 80117f8 <_malloc_r+0xdc>
 801179e:	f8c8 7000 	str.w	r7, [r8]
 80117a2:	e00f      	b.n	80117c4 <_malloc_r+0xa8>
 80117a4:	6822      	ldr	r2, [r4, #0]
 80117a6:	1b52      	subs	r2, r2, r5
 80117a8:	d420      	bmi.n	80117ec <_malloc_r+0xd0>
 80117aa:	2a0b      	cmp	r2, #11
 80117ac:	d917      	bls.n	80117de <_malloc_r+0xc2>
 80117ae:	1961      	adds	r1, r4, r5
 80117b0:	42a3      	cmp	r3, r4
 80117b2:	6025      	str	r5, [r4, #0]
 80117b4:	bf18      	it	ne
 80117b6:	6059      	strne	r1, [r3, #4]
 80117b8:	6863      	ldr	r3, [r4, #4]
 80117ba:	bf08      	it	eq
 80117bc:	f8c8 1000 	streq.w	r1, [r8]
 80117c0:	5162      	str	r2, [r4, r5]
 80117c2:	604b      	str	r3, [r1, #4]
 80117c4:	4630      	mov	r0, r6
 80117c6:	f000 f9bd 	bl	8011b44 <__malloc_unlock>
 80117ca:	f104 000b 	add.w	r0, r4, #11
 80117ce:	1d23      	adds	r3, r4, #4
 80117d0:	f020 0007 	bic.w	r0, r0, #7
 80117d4:	1ac2      	subs	r2, r0, r3
 80117d6:	bf1c      	itt	ne
 80117d8:	1a1b      	subne	r3, r3, r0
 80117da:	50a3      	strne	r3, [r4, r2]
 80117dc:	e7af      	b.n	801173e <_malloc_r+0x22>
 80117de:	6862      	ldr	r2, [r4, #4]
 80117e0:	42a3      	cmp	r3, r4
 80117e2:	bf0c      	ite	eq
 80117e4:	f8c8 2000 	streq.w	r2, [r8]
 80117e8:	605a      	strne	r2, [r3, #4]
 80117ea:	e7eb      	b.n	80117c4 <_malloc_r+0xa8>
 80117ec:	4623      	mov	r3, r4
 80117ee:	6864      	ldr	r4, [r4, #4]
 80117f0:	e7ae      	b.n	8011750 <_malloc_r+0x34>
 80117f2:	463c      	mov	r4, r7
 80117f4:	687f      	ldr	r7, [r7, #4]
 80117f6:	e7b6      	b.n	8011766 <_malloc_r+0x4a>
 80117f8:	461a      	mov	r2, r3
 80117fa:	685b      	ldr	r3, [r3, #4]
 80117fc:	42a3      	cmp	r3, r4
 80117fe:	d1fb      	bne.n	80117f8 <_malloc_r+0xdc>
 8011800:	2300      	movs	r3, #0
 8011802:	6053      	str	r3, [r2, #4]
 8011804:	e7de      	b.n	80117c4 <_malloc_r+0xa8>
 8011806:	230c      	movs	r3, #12
 8011808:	6033      	str	r3, [r6, #0]
 801180a:	4630      	mov	r0, r6
 801180c:	f000 f99a 	bl	8011b44 <__malloc_unlock>
 8011810:	e794      	b.n	801173c <_malloc_r+0x20>
 8011812:	6005      	str	r5, [r0, #0]
 8011814:	e7d6      	b.n	80117c4 <_malloc_r+0xa8>
 8011816:	bf00      	nop
 8011818:	200015b4 	.word	0x200015b4

0801181c <_printf_common>:
 801181c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011820:	4616      	mov	r6, r2
 8011822:	4698      	mov	r8, r3
 8011824:	688a      	ldr	r2, [r1, #8]
 8011826:	690b      	ldr	r3, [r1, #16]
 8011828:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801182c:	4293      	cmp	r3, r2
 801182e:	bfb8      	it	lt
 8011830:	4613      	movlt	r3, r2
 8011832:	6033      	str	r3, [r6, #0]
 8011834:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011838:	4607      	mov	r7, r0
 801183a:	460c      	mov	r4, r1
 801183c:	b10a      	cbz	r2, 8011842 <_printf_common+0x26>
 801183e:	3301      	adds	r3, #1
 8011840:	6033      	str	r3, [r6, #0]
 8011842:	6823      	ldr	r3, [r4, #0]
 8011844:	0699      	lsls	r1, r3, #26
 8011846:	bf42      	ittt	mi
 8011848:	6833      	ldrmi	r3, [r6, #0]
 801184a:	3302      	addmi	r3, #2
 801184c:	6033      	strmi	r3, [r6, #0]
 801184e:	6825      	ldr	r5, [r4, #0]
 8011850:	f015 0506 	ands.w	r5, r5, #6
 8011854:	d106      	bne.n	8011864 <_printf_common+0x48>
 8011856:	f104 0a19 	add.w	sl, r4, #25
 801185a:	68e3      	ldr	r3, [r4, #12]
 801185c:	6832      	ldr	r2, [r6, #0]
 801185e:	1a9b      	subs	r3, r3, r2
 8011860:	42ab      	cmp	r3, r5
 8011862:	dc26      	bgt.n	80118b2 <_printf_common+0x96>
 8011864:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011868:	6822      	ldr	r2, [r4, #0]
 801186a:	3b00      	subs	r3, #0
 801186c:	bf18      	it	ne
 801186e:	2301      	movne	r3, #1
 8011870:	0692      	lsls	r2, r2, #26
 8011872:	d42b      	bmi.n	80118cc <_printf_common+0xb0>
 8011874:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011878:	4641      	mov	r1, r8
 801187a:	4638      	mov	r0, r7
 801187c:	47c8      	blx	r9
 801187e:	3001      	adds	r0, #1
 8011880:	d01e      	beq.n	80118c0 <_printf_common+0xa4>
 8011882:	6823      	ldr	r3, [r4, #0]
 8011884:	6922      	ldr	r2, [r4, #16]
 8011886:	f003 0306 	and.w	r3, r3, #6
 801188a:	2b04      	cmp	r3, #4
 801188c:	bf02      	ittt	eq
 801188e:	68e5      	ldreq	r5, [r4, #12]
 8011890:	6833      	ldreq	r3, [r6, #0]
 8011892:	1aed      	subeq	r5, r5, r3
 8011894:	68a3      	ldr	r3, [r4, #8]
 8011896:	bf0c      	ite	eq
 8011898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801189c:	2500      	movne	r5, #0
 801189e:	4293      	cmp	r3, r2
 80118a0:	bfc4      	itt	gt
 80118a2:	1a9b      	subgt	r3, r3, r2
 80118a4:	18ed      	addgt	r5, r5, r3
 80118a6:	2600      	movs	r6, #0
 80118a8:	341a      	adds	r4, #26
 80118aa:	42b5      	cmp	r5, r6
 80118ac:	d11a      	bne.n	80118e4 <_printf_common+0xc8>
 80118ae:	2000      	movs	r0, #0
 80118b0:	e008      	b.n	80118c4 <_printf_common+0xa8>
 80118b2:	2301      	movs	r3, #1
 80118b4:	4652      	mov	r2, sl
 80118b6:	4641      	mov	r1, r8
 80118b8:	4638      	mov	r0, r7
 80118ba:	47c8      	blx	r9
 80118bc:	3001      	adds	r0, #1
 80118be:	d103      	bne.n	80118c8 <_printf_common+0xac>
 80118c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80118c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118c8:	3501      	adds	r5, #1
 80118ca:	e7c6      	b.n	801185a <_printf_common+0x3e>
 80118cc:	18e1      	adds	r1, r4, r3
 80118ce:	1c5a      	adds	r2, r3, #1
 80118d0:	2030      	movs	r0, #48	@ 0x30
 80118d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80118d6:	4422      	add	r2, r4
 80118d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80118dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80118e0:	3302      	adds	r3, #2
 80118e2:	e7c7      	b.n	8011874 <_printf_common+0x58>
 80118e4:	2301      	movs	r3, #1
 80118e6:	4622      	mov	r2, r4
 80118e8:	4641      	mov	r1, r8
 80118ea:	4638      	mov	r0, r7
 80118ec:	47c8      	blx	r9
 80118ee:	3001      	adds	r0, #1
 80118f0:	d0e6      	beq.n	80118c0 <_printf_common+0xa4>
 80118f2:	3601      	adds	r6, #1
 80118f4:	e7d9      	b.n	80118aa <_printf_common+0x8e>
	...

080118f8 <_printf_i>:
 80118f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80118fc:	7e0f      	ldrb	r7, [r1, #24]
 80118fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011900:	2f78      	cmp	r7, #120	@ 0x78
 8011902:	4691      	mov	r9, r2
 8011904:	4680      	mov	r8, r0
 8011906:	460c      	mov	r4, r1
 8011908:	469a      	mov	sl, r3
 801190a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801190e:	d807      	bhi.n	8011920 <_printf_i+0x28>
 8011910:	2f62      	cmp	r7, #98	@ 0x62
 8011912:	d80a      	bhi.n	801192a <_printf_i+0x32>
 8011914:	2f00      	cmp	r7, #0
 8011916:	f000 80d2 	beq.w	8011abe <_printf_i+0x1c6>
 801191a:	2f58      	cmp	r7, #88	@ 0x58
 801191c:	f000 80b9 	beq.w	8011a92 <_printf_i+0x19a>
 8011920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011924:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011928:	e03a      	b.n	80119a0 <_printf_i+0xa8>
 801192a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801192e:	2b15      	cmp	r3, #21
 8011930:	d8f6      	bhi.n	8011920 <_printf_i+0x28>
 8011932:	a101      	add	r1, pc, #4	@ (adr r1, 8011938 <_printf_i+0x40>)
 8011934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011938:	08011991 	.word	0x08011991
 801193c:	080119a5 	.word	0x080119a5
 8011940:	08011921 	.word	0x08011921
 8011944:	08011921 	.word	0x08011921
 8011948:	08011921 	.word	0x08011921
 801194c:	08011921 	.word	0x08011921
 8011950:	080119a5 	.word	0x080119a5
 8011954:	08011921 	.word	0x08011921
 8011958:	08011921 	.word	0x08011921
 801195c:	08011921 	.word	0x08011921
 8011960:	08011921 	.word	0x08011921
 8011964:	08011aa5 	.word	0x08011aa5
 8011968:	080119cf 	.word	0x080119cf
 801196c:	08011a5f 	.word	0x08011a5f
 8011970:	08011921 	.word	0x08011921
 8011974:	08011921 	.word	0x08011921
 8011978:	08011ac7 	.word	0x08011ac7
 801197c:	08011921 	.word	0x08011921
 8011980:	080119cf 	.word	0x080119cf
 8011984:	08011921 	.word	0x08011921
 8011988:	08011921 	.word	0x08011921
 801198c:	08011a67 	.word	0x08011a67
 8011990:	6833      	ldr	r3, [r6, #0]
 8011992:	1d1a      	adds	r2, r3, #4
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	6032      	str	r2, [r6, #0]
 8011998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801199c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80119a0:	2301      	movs	r3, #1
 80119a2:	e09d      	b.n	8011ae0 <_printf_i+0x1e8>
 80119a4:	6833      	ldr	r3, [r6, #0]
 80119a6:	6820      	ldr	r0, [r4, #0]
 80119a8:	1d19      	adds	r1, r3, #4
 80119aa:	6031      	str	r1, [r6, #0]
 80119ac:	0606      	lsls	r6, r0, #24
 80119ae:	d501      	bpl.n	80119b4 <_printf_i+0xbc>
 80119b0:	681d      	ldr	r5, [r3, #0]
 80119b2:	e003      	b.n	80119bc <_printf_i+0xc4>
 80119b4:	0645      	lsls	r5, r0, #25
 80119b6:	d5fb      	bpl.n	80119b0 <_printf_i+0xb8>
 80119b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80119bc:	2d00      	cmp	r5, #0
 80119be:	da03      	bge.n	80119c8 <_printf_i+0xd0>
 80119c0:	232d      	movs	r3, #45	@ 0x2d
 80119c2:	426d      	negs	r5, r5
 80119c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80119c8:	4859      	ldr	r0, [pc, #356]	@ (8011b30 <_printf_i+0x238>)
 80119ca:	230a      	movs	r3, #10
 80119cc:	e011      	b.n	80119f2 <_printf_i+0xfa>
 80119ce:	6821      	ldr	r1, [r4, #0]
 80119d0:	6833      	ldr	r3, [r6, #0]
 80119d2:	0608      	lsls	r0, r1, #24
 80119d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80119d8:	d402      	bmi.n	80119e0 <_printf_i+0xe8>
 80119da:	0649      	lsls	r1, r1, #25
 80119dc:	bf48      	it	mi
 80119de:	b2ad      	uxthmi	r5, r5
 80119e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80119e2:	4853      	ldr	r0, [pc, #332]	@ (8011b30 <_printf_i+0x238>)
 80119e4:	6033      	str	r3, [r6, #0]
 80119e6:	bf14      	ite	ne
 80119e8:	230a      	movne	r3, #10
 80119ea:	2308      	moveq	r3, #8
 80119ec:	2100      	movs	r1, #0
 80119ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80119f2:	6866      	ldr	r6, [r4, #4]
 80119f4:	60a6      	str	r6, [r4, #8]
 80119f6:	2e00      	cmp	r6, #0
 80119f8:	bfa2      	ittt	ge
 80119fa:	6821      	ldrge	r1, [r4, #0]
 80119fc:	f021 0104 	bicge.w	r1, r1, #4
 8011a00:	6021      	strge	r1, [r4, #0]
 8011a02:	b90d      	cbnz	r5, 8011a08 <_printf_i+0x110>
 8011a04:	2e00      	cmp	r6, #0
 8011a06:	d04b      	beq.n	8011aa0 <_printf_i+0x1a8>
 8011a08:	4616      	mov	r6, r2
 8011a0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8011a0e:	fb03 5711 	mls	r7, r3, r1, r5
 8011a12:	5dc7      	ldrb	r7, [r0, r7]
 8011a14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011a18:	462f      	mov	r7, r5
 8011a1a:	42bb      	cmp	r3, r7
 8011a1c:	460d      	mov	r5, r1
 8011a1e:	d9f4      	bls.n	8011a0a <_printf_i+0x112>
 8011a20:	2b08      	cmp	r3, #8
 8011a22:	d10b      	bne.n	8011a3c <_printf_i+0x144>
 8011a24:	6823      	ldr	r3, [r4, #0]
 8011a26:	07df      	lsls	r7, r3, #31
 8011a28:	d508      	bpl.n	8011a3c <_printf_i+0x144>
 8011a2a:	6923      	ldr	r3, [r4, #16]
 8011a2c:	6861      	ldr	r1, [r4, #4]
 8011a2e:	4299      	cmp	r1, r3
 8011a30:	bfde      	ittt	le
 8011a32:	2330      	movle	r3, #48	@ 0x30
 8011a34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011a38:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011a3c:	1b92      	subs	r2, r2, r6
 8011a3e:	6122      	str	r2, [r4, #16]
 8011a40:	f8cd a000 	str.w	sl, [sp]
 8011a44:	464b      	mov	r3, r9
 8011a46:	aa03      	add	r2, sp, #12
 8011a48:	4621      	mov	r1, r4
 8011a4a:	4640      	mov	r0, r8
 8011a4c:	f7ff fee6 	bl	801181c <_printf_common>
 8011a50:	3001      	adds	r0, #1
 8011a52:	d14a      	bne.n	8011aea <_printf_i+0x1f2>
 8011a54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011a58:	b004      	add	sp, #16
 8011a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a5e:	6823      	ldr	r3, [r4, #0]
 8011a60:	f043 0320 	orr.w	r3, r3, #32
 8011a64:	6023      	str	r3, [r4, #0]
 8011a66:	4833      	ldr	r0, [pc, #204]	@ (8011b34 <_printf_i+0x23c>)
 8011a68:	2778      	movs	r7, #120	@ 0x78
 8011a6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011a6e:	6823      	ldr	r3, [r4, #0]
 8011a70:	6831      	ldr	r1, [r6, #0]
 8011a72:	061f      	lsls	r7, r3, #24
 8011a74:	f851 5b04 	ldr.w	r5, [r1], #4
 8011a78:	d402      	bmi.n	8011a80 <_printf_i+0x188>
 8011a7a:	065f      	lsls	r7, r3, #25
 8011a7c:	bf48      	it	mi
 8011a7e:	b2ad      	uxthmi	r5, r5
 8011a80:	6031      	str	r1, [r6, #0]
 8011a82:	07d9      	lsls	r1, r3, #31
 8011a84:	bf44      	itt	mi
 8011a86:	f043 0320 	orrmi.w	r3, r3, #32
 8011a8a:	6023      	strmi	r3, [r4, #0]
 8011a8c:	b11d      	cbz	r5, 8011a96 <_printf_i+0x19e>
 8011a8e:	2310      	movs	r3, #16
 8011a90:	e7ac      	b.n	80119ec <_printf_i+0xf4>
 8011a92:	4827      	ldr	r0, [pc, #156]	@ (8011b30 <_printf_i+0x238>)
 8011a94:	e7e9      	b.n	8011a6a <_printf_i+0x172>
 8011a96:	6823      	ldr	r3, [r4, #0]
 8011a98:	f023 0320 	bic.w	r3, r3, #32
 8011a9c:	6023      	str	r3, [r4, #0]
 8011a9e:	e7f6      	b.n	8011a8e <_printf_i+0x196>
 8011aa0:	4616      	mov	r6, r2
 8011aa2:	e7bd      	b.n	8011a20 <_printf_i+0x128>
 8011aa4:	6833      	ldr	r3, [r6, #0]
 8011aa6:	6825      	ldr	r5, [r4, #0]
 8011aa8:	6961      	ldr	r1, [r4, #20]
 8011aaa:	1d18      	adds	r0, r3, #4
 8011aac:	6030      	str	r0, [r6, #0]
 8011aae:	062e      	lsls	r6, r5, #24
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	d501      	bpl.n	8011ab8 <_printf_i+0x1c0>
 8011ab4:	6019      	str	r1, [r3, #0]
 8011ab6:	e002      	b.n	8011abe <_printf_i+0x1c6>
 8011ab8:	0668      	lsls	r0, r5, #25
 8011aba:	d5fb      	bpl.n	8011ab4 <_printf_i+0x1bc>
 8011abc:	8019      	strh	r1, [r3, #0]
 8011abe:	2300      	movs	r3, #0
 8011ac0:	6123      	str	r3, [r4, #16]
 8011ac2:	4616      	mov	r6, r2
 8011ac4:	e7bc      	b.n	8011a40 <_printf_i+0x148>
 8011ac6:	6833      	ldr	r3, [r6, #0]
 8011ac8:	1d1a      	adds	r2, r3, #4
 8011aca:	6032      	str	r2, [r6, #0]
 8011acc:	681e      	ldr	r6, [r3, #0]
 8011ace:	6862      	ldr	r2, [r4, #4]
 8011ad0:	2100      	movs	r1, #0
 8011ad2:	4630      	mov	r0, r6
 8011ad4:	f7ee fba4 	bl	8000220 <memchr>
 8011ad8:	b108      	cbz	r0, 8011ade <_printf_i+0x1e6>
 8011ada:	1b80      	subs	r0, r0, r6
 8011adc:	6060      	str	r0, [r4, #4]
 8011ade:	6863      	ldr	r3, [r4, #4]
 8011ae0:	6123      	str	r3, [r4, #16]
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011ae8:	e7aa      	b.n	8011a40 <_printf_i+0x148>
 8011aea:	6923      	ldr	r3, [r4, #16]
 8011aec:	4632      	mov	r2, r6
 8011aee:	4649      	mov	r1, r9
 8011af0:	4640      	mov	r0, r8
 8011af2:	47d0      	blx	sl
 8011af4:	3001      	adds	r0, #1
 8011af6:	d0ad      	beq.n	8011a54 <_printf_i+0x15c>
 8011af8:	6823      	ldr	r3, [r4, #0]
 8011afa:	079b      	lsls	r3, r3, #30
 8011afc:	d413      	bmi.n	8011b26 <_printf_i+0x22e>
 8011afe:	68e0      	ldr	r0, [r4, #12]
 8011b00:	9b03      	ldr	r3, [sp, #12]
 8011b02:	4298      	cmp	r0, r3
 8011b04:	bfb8      	it	lt
 8011b06:	4618      	movlt	r0, r3
 8011b08:	e7a6      	b.n	8011a58 <_printf_i+0x160>
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	4632      	mov	r2, r6
 8011b0e:	4649      	mov	r1, r9
 8011b10:	4640      	mov	r0, r8
 8011b12:	47d0      	blx	sl
 8011b14:	3001      	adds	r0, #1
 8011b16:	d09d      	beq.n	8011a54 <_printf_i+0x15c>
 8011b18:	3501      	adds	r5, #1
 8011b1a:	68e3      	ldr	r3, [r4, #12]
 8011b1c:	9903      	ldr	r1, [sp, #12]
 8011b1e:	1a5b      	subs	r3, r3, r1
 8011b20:	42ab      	cmp	r3, r5
 8011b22:	dcf2      	bgt.n	8011b0a <_printf_i+0x212>
 8011b24:	e7eb      	b.n	8011afe <_printf_i+0x206>
 8011b26:	2500      	movs	r5, #0
 8011b28:	f104 0619 	add.w	r6, r4, #25
 8011b2c:	e7f5      	b.n	8011b1a <_printf_i+0x222>
 8011b2e:	bf00      	nop
 8011b30:	08014042 	.word	0x08014042
 8011b34:	08014053 	.word	0x08014053

08011b38 <__malloc_lock>:
 8011b38:	4801      	ldr	r0, [pc, #4]	@ (8011b40 <__malloc_lock+0x8>)
 8011b3a:	f7f1 ba2c 	b.w	8002f96 <__retarget_lock_acquire_recursive>
 8011b3e:	bf00      	nop
 8011b40:	20000894 	.word	0x20000894

08011b44 <__malloc_unlock>:
 8011b44:	4801      	ldr	r0, [pc, #4]	@ (8011b4c <__malloc_unlock+0x8>)
 8011b46:	f7f1 ba3b 	b.w	8002fc0 <__retarget_lock_release_recursive>
 8011b4a:	bf00      	nop
 8011b4c:	20000894 	.word	0x20000894

08011b50 <siprintf>:
 8011b50:	b40e      	push	{r1, r2, r3}
 8011b52:	b500      	push	{lr}
 8011b54:	b09c      	sub	sp, #112	@ 0x70
 8011b56:	ab1d      	add	r3, sp, #116	@ 0x74
 8011b58:	9002      	str	r0, [sp, #8]
 8011b5a:	9006      	str	r0, [sp, #24]
 8011b5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011b60:	4809      	ldr	r0, [pc, #36]	@ (8011b88 <siprintf+0x38>)
 8011b62:	9107      	str	r1, [sp, #28]
 8011b64:	9104      	str	r1, [sp, #16]
 8011b66:	4909      	ldr	r1, [pc, #36]	@ (8011b8c <siprintf+0x3c>)
 8011b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b6c:	9105      	str	r1, [sp, #20]
 8011b6e:	6800      	ldr	r0, [r0, #0]
 8011b70:	9301      	str	r3, [sp, #4]
 8011b72:	a902      	add	r1, sp, #8
 8011b74:	f001 f872 	bl	8012c5c <_svfiprintf_r>
 8011b78:	9b02      	ldr	r3, [sp, #8]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	701a      	strb	r2, [r3, #0]
 8011b7e:	b01c      	add	sp, #112	@ 0x70
 8011b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b84:	b003      	add	sp, #12
 8011b86:	4770      	bx	lr
 8011b88:	200000ec 	.word	0x200000ec
 8011b8c:	ffff0208 	.word	0xffff0208

08011b90 <rand>:
 8011b90:	4b16      	ldr	r3, [pc, #88]	@ (8011bec <rand+0x5c>)
 8011b92:	b510      	push	{r4, lr}
 8011b94:	681c      	ldr	r4, [r3, #0]
 8011b96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011b98:	b9b3      	cbnz	r3, 8011bc8 <rand+0x38>
 8011b9a:	2018      	movs	r0, #24
 8011b9c:	f7ff fd94 	bl	80116c8 <malloc>
 8011ba0:	4602      	mov	r2, r0
 8011ba2:	6320      	str	r0, [r4, #48]	@ 0x30
 8011ba4:	b920      	cbnz	r0, 8011bb0 <rand+0x20>
 8011ba6:	4b12      	ldr	r3, [pc, #72]	@ (8011bf0 <rand+0x60>)
 8011ba8:	4812      	ldr	r0, [pc, #72]	@ (8011bf4 <rand+0x64>)
 8011baa:	2152      	movs	r1, #82	@ 0x52
 8011bac:	f000 f944 	bl	8011e38 <__assert_func>
 8011bb0:	4911      	ldr	r1, [pc, #68]	@ (8011bf8 <rand+0x68>)
 8011bb2:	4b12      	ldr	r3, [pc, #72]	@ (8011bfc <rand+0x6c>)
 8011bb4:	e9c0 1300 	strd	r1, r3, [r0]
 8011bb8:	4b11      	ldr	r3, [pc, #68]	@ (8011c00 <rand+0x70>)
 8011bba:	6083      	str	r3, [r0, #8]
 8011bbc:	230b      	movs	r3, #11
 8011bbe:	8183      	strh	r3, [r0, #12]
 8011bc0:	2100      	movs	r1, #0
 8011bc2:	2001      	movs	r0, #1
 8011bc4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011bc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011bca:	480e      	ldr	r0, [pc, #56]	@ (8011c04 <rand+0x74>)
 8011bcc:	690b      	ldr	r3, [r1, #16]
 8011bce:	694c      	ldr	r4, [r1, #20]
 8011bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8011c08 <rand+0x78>)
 8011bd2:	4358      	muls	r0, r3
 8011bd4:	fb02 0004 	mla	r0, r2, r4, r0
 8011bd8:	fba3 3202 	umull	r3, r2, r3, r2
 8011bdc:	3301      	adds	r3, #1
 8011bde:	eb40 0002 	adc.w	r0, r0, r2
 8011be2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011be6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8011bea:	bd10      	pop	{r4, pc}
 8011bec:	200000ec 	.word	0x200000ec
 8011bf0:	08014064 	.word	0x08014064
 8011bf4:	0801407b 	.word	0x0801407b
 8011bf8:	abcd330e 	.word	0xabcd330e
 8011bfc:	e66d1234 	.word	0xe66d1234
 8011c00:	0005deec 	.word	0x0005deec
 8011c04:	5851f42d 	.word	0x5851f42d
 8011c08:	4c957f2d 	.word	0x4c957f2d

08011c0c <std>:
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	b510      	push	{r4, lr}
 8011c10:	4604      	mov	r4, r0
 8011c12:	e9c0 3300 	strd	r3, r3, [r0]
 8011c16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c1a:	6083      	str	r3, [r0, #8]
 8011c1c:	8181      	strh	r1, [r0, #12]
 8011c1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011c20:	81c2      	strh	r2, [r0, #14]
 8011c22:	6183      	str	r3, [r0, #24]
 8011c24:	4619      	mov	r1, r3
 8011c26:	2208      	movs	r2, #8
 8011c28:	305c      	adds	r0, #92	@ 0x5c
 8011c2a:	f000 f8b1 	bl	8011d90 <memset>
 8011c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8011c64 <std+0x58>)
 8011c30:	6263      	str	r3, [r4, #36]	@ 0x24
 8011c32:	4b0d      	ldr	r3, [pc, #52]	@ (8011c68 <std+0x5c>)
 8011c34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011c36:	4b0d      	ldr	r3, [pc, #52]	@ (8011c6c <std+0x60>)
 8011c38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8011c70 <std+0x64>)
 8011c3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8011c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8011c74 <std+0x68>)
 8011c40:	6224      	str	r4, [r4, #32]
 8011c42:	429c      	cmp	r4, r3
 8011c44:	d006      	beq.n	8011c54 <std+0x48>
 8011c46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011c4a:	4294      	cmp	r4, r2
 8011c4c:	d002      	beq.n	8011c54 <std+0x48>
 8011c4e:	33d0      	adds	r3, #208	@ 0xd0
 8011c50:	429c      	cmp	r4, r3
 8011c52:	d105      	bne.n	8011c60 <std+0x54>
 8011c54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c5c:	f7f1 b974 	b.w	8002f48 <__retarget_lock_init_recursive>
 8011c60:	bd10      	pop	{r4, pc}
 8011c62:	bf00      	nop
 8011c64:	080136b1 	.word	0x080136b1
 8011c68:	080136d3 	.word	0x080136d3
 8011c6c:	0801370b 	.word	0x0801370b
 8011c70:	0801372f 	.word	0x0801372f
 8011c74:	200015b8 	.word	0x200015b8

08011c78 <stdio_exit_handler>:
 8011c78:	4a02      	ldr	r2, [pc, #8]	@ (8011c84 <stdio_exit_handler+0xc>)
 8011c7a:	4903      	ldr	r1, [pc, #12]	@ (8011c88 <stdio_exit_handler+0x10>)
 8011c7c:	4803      	ldr	r0, [pc, #12]	@ (8011c8c <stdio_exit_handler+0x14>)
 8011c7e:	f000 b869 	b.w	8011d54 <_fwalk_sglue>
 8011c82:	bf00      	nop
 8011c84:	200000e0 	.word	0x200000e0
 8011c88:	08012f5d 	.word	0x08012f5d
 8011c8c:	200000f0 	.word	0x200000f0

08011c90 <cleanup_stdio>:
 8011c90:	6841      	ldr	r1, [r0, #4]
 8011c92:	4b0c      	ldr	r3, [pc, #48]	@ (8011cc4 <cleanup_stdio+0x34>)
 8011c94:	4299      	cmp	r1, r3
 8011c96:	b510      	push	{r4, lr}
 8011c98:	4604      	mov	r4, r0
 8011c9a:	d001      	beq.n	8011ca0 <cleanup_stdio+0x10>
 8011c9c:	f001 f95e 	bl	8012f5c <_fflush_r>
 8011ca0:	68a1      	ldr	r1, [r4, #8]
 8011ca2:	4b09      	ldr	r3, [pc, #36]	@ (8011cc8 <cleanup_stdio+0x38>)
 8011ca4:	4299      	cmp	r1, r3
 8011ca6:	d002      	beq.n	8011cae <cleanup_stdio+0x1e>
 8011ca8:	4620      	mov	r0, r4
 8011caa:	f001 f957 	bl	8012f5c <_fflush_r>
 8011cae:	68e1      	ldr	r1, [r4, #12]
 8011cb0:	4b06      	ldr	r3, [pc, #24]	@ (8011ccc <cleanup_stdio+0x3c>)
 8011cb2:	4299      	cmp	r1, r3
 8011cb4:	d004      	beq.n	8011cc0 <cleanup_stdio+0x30>
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cbc:	f001 b94e 	b.w	8012f5c <_fflush_r>
 8011cc0:	bd10      	pop	{r4, pc}
 8011cc2:	bf00      	nop
 8011cc4:	200015b8 	.word	0x200015b8
 8011cc8:	20001620 	.word	0x20001620
 8011ccc:	20001688 	.word	0x20001688

08011cd0 <global_stdio_init.part.0>:
 8011cd0:	b510      	push	{r4, lr}
 8011cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8011d00 <global_stdio_init.part.0+0x30>)
 8011cd4:	4c0b      	ldr	r4, [pc, #44]	@ (8011d04 <global_stdio_init.part.0+0x34>)
 8011cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8011d08 <global_stdio_init.part.0+0x38>)
 8011cd8:	601a      	str	r2, [r3, #0]
 8011cda:	4620      	mov	r0, r4
 8011cdc:	2200      	movs	r2, #0
 8011cde:	2104      	movs	r1, #4
 8011ce0:	f7ff ff94 	bl	8011c0c <std>
 8011ce4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011ce8:	2201      	movs	r2, #1
 8011cea:	2109      	movs	r1, #9
 8011cec:	f7ff ff8e 	bl	8011c0c <std>
 8011cf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011cf4:	2202      	movs	r2, #2
 8011cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cfa:	2112      	movs	r1, #18
 8011cfc:	f7ff bf86 	b.w	8011c0c <std>
 8011d00:	200016f0 	.word	0x200016f0
 8011d04:	200015b8 	.word	0x200015b8
 8011d08:	08011c79 	.word	0x08011c79

08011d0c <__sfp_lock_acquire>:
 8011d0c:	4801      	ldr	r0, [pc, #4]	@ (8011d14 <__sfp_lock_acquire+0x8>)
 8011d0e:	f7f1 b942 	b.w	8002f96 <__retarget_lock_acquire_recursive>
 8011d12:	bf00      	nop
 8011d14:	20000890 	.word	0x20000890

08011d18 <__sfp_lock_release>:
 8011d18:	4801      	ldr	r0, [pc, #4]	@ (8011d20 <__sfp_lock_release+0x8>)
 8011d1a:	f7f1 b951 	b.w	8002fc0 <__retarget_lock_release_recursive>
 8011d1e:	bf00      	nop
 8011d20:	20000890 	.word	0x20000890

08011d24 <__sinit>:
 8011d24:	b510      	push	{r4, lr}
 8011d26:	4604      	mov	r4, r0
 8011d28:	f7ff fff0 	bl	8011d0c <__sfp_lock_acquire>
 8011d2c:	6a23      	ldr	r3, [r4, #32]
 8011d2e:	b11b      	cbz	r3, 8011d38 <__sinit+0x14>
 8011d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d34:	f7ff bff0 	b.w	8011d18 <__sfp_lock_release>
 8011d38:	4b04      	ldr	r3, [pc, #16]	@ (8011d4c <__sinit+0x28>)
 8011d3a:	6223      	str	r3, [r4, #32]
 8011d3c:	4b04      	ldr	r3, [pc, #16]	@ (8011d50 <__sinit+0x2c>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d1f5      	bne.n	8011d30 <__sinit+0xc>
 8011d44:	f7ff ffc4 	bl	8011cd0 <global_stdio_init.part.0>
 8011d48:	e7f2      	b.n	8011d30 <__sinit+0xc>
 8011d4a:	bf00      	nop
 8011d4c:	08011c91 	.word	0x08011c91
 8011d50:	200016f0 	.word	0x200016f0

08011d54 <_fwalk_sglue>:
 8011d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d58:	4607      	mov	r7, r0
 8011d5a:	4688      	mov	r8, r1
 8011d5c:	4614      	mov	r4, r2
 8011d5e:	2600      	movs	r6, #0
 8011d60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d64:	f1b9 0901 	subs.w	r9, r9, #1
 8011d68:	d505      	bpl.n	8011d76 <_fwalk_sglue+0x22>
 8011d6a:	6824      	ldr	r4, [r4, #0]
 8011d6c:	2c00      	cmp	r4, #0
 8011d6e:	d1f7      	bne.n	8011d60 <_fwalk_sglue+0xc>
 8011d70:	4630      	mov	r0, r6
 8011d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d76:	89ab      	ldrh	r3, [r5, #12]
 8011d78:	2b01      	cmp	r3, #1
 8011d7a:	d907      	bls.n	8011d8c <_fwalk_sglue+0x38>
 8011d7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d80:	3301      	adds	r3, #1
 8011d82:	d003      	beq.n	8011d8c <_fwalk_sglue+0x38>
 8011d84:	4629      	mov	r1, r5
 8011d86:	4638      	mov	r0, r7
 8011d88:	47c0      	blx	r8
 8011d8a:	4306      	orrs	r6, r0
 8011d8c:	3568      	adds	r5, #104	@ 0x68
 8011d8e:	e7e9      	b.n	8011d64 <_fwalk_sglue+0x10>

08011d90 <memset>:
 8011d90:	4402      	add	r2, r0
 8011d92:	4603      	mov	r3, r0
 8011d94:	4293      	cmp	r3, r2
 8011d96:	d100      	bne.n	8011d9a <memset+0xa>
 8011d98:	4770      	bx	lr
 8011d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8011d9e:	e7f9      	b.n	8011d94 <memset+0x4>

08011da0 <_localeconv_r>:
 8011da0:	4800      	ldr	r0, [pc, #0]	@ (8011da4 <_localeconv_r+0x4>)
 8011da2:	4770      	bx	lr
 8011da4:	2000022c 	.word	0x2000022c

08011da8 <_sbrk_r>:
 8011da8:	b538      	push	{r3, r4, r5, lr}
 8011daa:	4d06      	ldr	r5, [pc, #24]	@ (8011dc4 <_sbrk_r+0x1c>)
 8011dac:	2300      	movs	r3, #0
 8011dae:	4604      	mov	r4, r0
 8011db0:	4608      	mov	r0, r1
 8011db2:	602b      	str	r3, [r5, #0]
 8011db4:	f7f0 ffdc 	bl	8002d70 <_sbrk>
 8011db8:	1c43      	adds	r3, r0, #1
 8011dba:	d102      	bne.n	8011dc2 <_sbrk_r+0x1a>
 8011dbc:	682b      	ldr	r3, [r5, #0]
 8011dbe:	b103      	cbz	r3, 8011dc2 <_sbrk_r+0x1a>
 8011dc0:	6023      	str	r3, [r4, #0]
 8011dc2:	bd38      	pop	{r3, r4, r5, pc}
 8011dc4:	200016f4 	.word	0x200016f4

08011dc8 <__errno>:
 8011dc8:	4b01      	ldr	r3, [pc, #4]	@ (8011dd0 <__errno+0x8>)
 8011dca:	6818      	ldr	r0, [r3, #0]
 8011dcc:	4770      	bx	lr
 8011dce:	bf00      	nop
 8011dd0:	200000ec 	.word	0x200000ec

08011dd4 <__libc_init_array>:
 8011dd4:	b570      	push	{r4, r5, r6, lr}
 8011dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8011e0c <__libc_init_array+0x38>)
 8011dd8:	4c0d      	ldr	r4, [pc, #52]	@ (8011e10 <__libc_init_array+0x3c>)
 8011dda:	1b64      	subs	r4, r4, r5
 8011ddc:	10a4      	asrs	r4, r4, #2
 8011dde:	2600      	movs	r6, #0
 8011de0:	42a6      	cmp	r6, r4
 8011de2:	d109      	bne.n	8011df8 <__libc_init_array+0x24>
 8011de4:	4d0b      	ldr	r5, [pc, #44]	@ (8011e14 <__libc_init_array+0x40>)
 8011de6:	4c0c      	ldr	r4, [pc, #48]	@ (8011e18 <__libc_init_array+0x44>)
 8011de8:	f002 f826 	bl	8013e38 <_init>
 8011dec:	1b64      	subs	r4, r4, r5
 8011dee:	10a4      	asrs	r4, r4, #2
 8011df0:	2600      	movs	r6, #0
 8011df2:	42a6      	cmp	r6, r4
 8011df4:	d105      	bne.n	8011e02 <__libc_init_array+0x2e>
 8011df6:	bd70      	pop	{r4, r5, r6, pc}
 8011df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dfc:	4798      	blx	r3
 8011dfe:	3601      	adds	r6, #1
 8011e00:	e7ee      	b.n	8011de0 <__libc_init_array+0xc>
 8011e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e06:	4798      	blx	r3
 8011e08:	3601      	adds	r6, #1
 8011e0a:	e7f2      	b.n	8011df2 <__libc_init_array+0x1e>
 8011e0c:	08014404 	.word	0x08014404
 8011e10:	08014404 	.word	0x08014404
 8011e14:	08014404 	.word	0x08014404
 8011e18:	08014408 	.word	0x08014408

08011e1c <memcpy>:
 8011e1c:	440a      	add	r2, r1
 8011e1e:	4291      	cmp	r1, r2
 8011e20:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011e24:	d100      	bne.n	8011e28 <memcpy+0xc>
 8011e26:	4770      	bx	lr
 8011e28:	b510      	push	{r4, lr}
 8011e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e32:	4291      	cmp	r1, r2
 8011e34:	d1f9      	bne.n	8011e2a <memcpy+0xe>
 8011e36:	bd10      	pop	{r4, pc}

08011e38 <__assert_func>:
 8011e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e3a:	4614      	mov	r4, r2
 8011e3c:	461a      	mov	r2, r3
 8011e3e:	4b09      	ldr	r3, [pc, #36]	@ (8011e64 <__assert_func+0x2c>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	4605      	mov	r5, r0
 8011e44:	68d8      	ldr	r0, [r3, #12]
 8011e46:	b954      	cbnz	r4, 8011e5e <__assert_func+0x26>
 8011e48:	4b07      	ldr	r3, [pc, #28]	@ (8011e68 <__assert_func+0x30>)
 8011e4a:	461c      	mov	r4, r3
 8011e4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e50:	9100      	str	r1, [sp, #0]
 8011e52:	462b      	mov	r3, r5
 8011e54:	4905      	ldr	r1, [pc, #20]	@ (8011e6c <__assert_func+0x34>)
 8011e56:	f001 fc6f 	bl	8013738 <fiprintf>
 8011e5a:	f001 fd0d 	bl	8013878 <abort>
 8011e5e:	4b04      	ldr	r3, [pc, #16]	@ (8011e70 <__assert_func+0x38>)
 8011e60:	e7f4      	b.n	8011e4c <__assert_func+0x14>
 8011e62:	bf00      	nop
 8011e64:	200000ec 	.word	0x200000ec
 8011e68:	0801420f 	.word	0x0801420f
 8011e6c:	080141e1 	.word	0x080141e1
 8011e70:	080141d4 	.word	0x080141d4

08011e74 <quorem>:
 8011e74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e78:	6903      	ldr	r3, [r0, #16]
 8011e7a:	690c      	ldr	r4, [r1, #16]
 8011e7c:	42a3      	cmp	r3, r4
 8011e7e:	4607      	mov	r7, r0
 8011e80:	db7e      	blt.n	8011f80 <quorem+0x10c>
 8011e82:	3c01      	subs	r4, #1
 8011e84:	f101 0814 	add.w	r8, r1, #20
 8011e88:	00a3      	lsls	r3, r4, #2
 8011e8a:	f100 0514 	add.w	r5, r0, #20
 8011e8e:	9300      	str	r3, [sp, #0]
 8011e90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e94:	9301      	str	r3, [sp, #4]
 8011e96:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011e9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e9e:	3301      	adds	r3, #1
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011ea6:	fbb2 f6f3 	udiv	r6, r2, r3
 8011eaa:	d32e      	bcc.n	8011f0a <quorem+0x96>
 8011eac:	f04f 0a00 	mov.w	sl, #0
 8011eb0:	46c4      	mov	ip, r8
 8011eb2:	46ae      	mov	lr, r5
 8011eb4:	46d3      	mov	fp, sl
 8011eb6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011eba:	b298      	uxth	r0, r3
 8011ebc:	fb06 a000 	mla	r0, r6, r0, sl
 8011ec0:	0c02      	lsrs	r2, r0, #16
 8011ec2:	0c1b      	lsrs	r3, r3, #16
 8011ec4:	fb06 2303 	mla	r3, r6, r3, r2
 8011ec8:	f8de 2000 	ldr.w	r2, [lr]
 8011ecc:	b280      	uxth	r0, r0
 8011ece:	b292      	uxth	r2, r2
 8011ed0:	1a12      	subs	r2, r2, r0
 8011ed2:	445a      	add	r2, fp
 8011ed4:	f8de 0000 	ldr.w	r0, [lr]
 8011ed8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011edc:	b29b      	uxth	r3, r3
 8011ede:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011ee2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011ee6:	b292      	uxth	r2, r2
 8011ee8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011eec:	45e1      	cmp	r9, ip
 8011eee:	f84e 2b04 	str.w	r2, [lr], #4
 8011ef2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011ef6:	d2de      	bcs.n	8011eb6 <quorem+0x42>
 8011ef8:	9b00      	ldr	r3, [sp, #0]
 8011efa:	58eb      	ldr	r3, [r5, r3]
 8011efc:	b92b      	cbnz	r3, 8011f0a <quorem+0x96>
 8011efe:	9b01      	ldr	r3, [sp, #4]
 8011f00:	3b04      	subs	r3, #4
 8011f02:	429d      	cmp	r5, r3
 8011f04:	461a      	mov	r2, r3
 8011f06:	d32f      	bcc.n	8011f68 <quorem+0xf4>
 8011f08:	613c      	str	r4, [r7, #16]
 8011f0a:	4638      	mov	r0, r7
 8011f0c:	f001 fac8 	bl	80134a0 <__mcmp>
 8011f10:	2800      	cmp	r0, #0
 8011f12:	db25      	blt.n	8011f60 <quorem+0xec>
 8011f14:	4629      	mov	r1, r5
 8011f16:	2000      	movs	r0, #0
 8011f18:	f858 2b04 	ldr.w	r2, [r8], #4
 8011f1c:	f8d1 c000 	ldr.w	ip, [r1]
 8011f20:	fa1f fe82 	uxth.w	lr, r2
 8011f24:	fa1f f38c 	uxth.w	r3, ip
 8011f28:	eba3 030e 	sub.w	r3, r3, lr
 8011f2c:	4403      	add	r3, r0
 8011f2e:	0c12      	lsrs	r2, r2, #16
 8011f30:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011f34:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011f38:	b29b      	uxth	r3, r3
 8011f3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f3e:	45c1      	cmp	r9, r8
 8011f40:	f841 3b04 	str.w	r3, [r1], #4
 8011f44:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011f48:	d2e6      	bcs.n	8011f18 <quorem+0xa4>
 8011f4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f52:	b922      	cbnz	r2, 8011f5e <quorem+0xea>
 8011f54:	3b04      	subs	r3, #4
 8011f56:	429d      	cmp	r5, r3
 8011f58:	461a      	mov	r2, r3
 8011f5a:	d30b      	bcc.n	8011f74 <quorem+0x100>
 8011f5c:	613c      	str	r4, [r7, #16]
 8011f5e:	3601      	adds	r6, #1
 8011f60:	4630      	mov	r0, r6
 8011f62:	b003      	add	sp, #12
 8011f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f68:	6812      	ldr	r2, [r2, #0]
 8011f6a:	3b04      	subs	r3, #4
 8011f6c:	2a00      	cmp	r2, #0
 8011f6e:	d1cb      	bne.n	8011f08 <quorem+0x94>
 8011f70:	3c01      	subs	r4, #1
 8011f72:	e7c6      	b.n	8011f02 <quorem+0x8e>
 8011f74:	6812      	ldr	r2, [r2, #0]
 8011f76:	3b04      	subs	r3, #4
 8011f78:	2a00      	cmp	r2, #0
 8011f7a:	d1ef      	bne.n	8011f5c <quorem+0xe8>
 8011f7c:	3c01      	subs	r4, #1
 8011f7e:	e7ea      	b.n	8011f56 <quorem+0xe2>
 8011f80:	2000      	movs	r0, #0
 8011f82:	e7ee      	b.n	8011f62 <quorem+0xee>
 8011f84:	0000      	movs	r0, r0
	...

08011f88 <_dtoa_r>:
 8011f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f8c:	69c7      	ldr	r7, [r0, #28]
 8011f8e:	b099      	sub	sp, #100	@ 0x64
 8011f90:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011f94:	ec55 4b10 	vmov	r4, r5, d0
 8011f98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011f9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8011f9c:	4683      	mov	fp, r0
 8011f9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8011fa0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011fa2:	b97f      	cbnz	r7, 8011fc4 <_dtoa_r+0x3c>
 8011fa4:	2010      	movs	r0, #16
 8011fa6:	f7ff fb8f 	bl	80116c8 <malloc>
 8011faa:	4602      	mov	r2, r0
 8011fac:	f8cb 001c 	str.w	r0, [fp, #28]
 8011fb0:	b920      	cbnz	r0, 8011fbc <_dtoa_r+0x34>
 8011fb2:	4ba7      	ldr	r3, [pc, #668]	@ (8012250 <_dtoa_r+0x2c8>)
 8011fb4:	21ef      	movs	r1, #239	@ 0xef
 8011fb6:	48a7      	ldr	r0, [pc, #668]	@ (8012254 <_dtoa_r+0x2cc>)
 8011fb8:	f7ff ff3e 	bl	8011e38 <__assert_func>
 8011fbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011fc0:	6007      	str	r7, [r0, #0]
 8011fc2:	60c7      	str	r7, [r0, #12]
 8011fc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011fc8:	6819      	ldr	r1, [r3, #0]
 8011fca:	b159      	cbz	r1, 8011fe4 <_dtoa_r+0x5c>
 8011fcc:	685a      	ldr	r2, [r3, #4]
 8011fce:	604a      	str	r2, [r1, #4]
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	4093      	lsls	r3, r2
 8011fd4:	608b      	str	r3, [r1, #8]
 8011fd6:	4658      	mov	r0, fp
 8011fd8:	f001 f828 	bl	801302c <_Bfree>
 8011fdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	601a      	str	r2, [r3, #0]
 8011fe4:	1e2b      	subs	r3, r5, #0
 8011fe6:	bfb9      	ittee	lt
 8011fe8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011fec:	9303      	strlt	r3, [sp, #12]
 8011fee:	2300      	movge	r3, #0
 8011ff0:	6033      	strge	r3, [r6, #0]
 8011ff2:	9f03      	ldr	r7, [sp, #12]
 8011ff4:	4b98      	ldr	r3, [pc, #608]	@ (8012258 <_dtoa_r+0x2d0>)
 8011ff6:	bfbc      	itt	lt
 8011ff8:	2201      	movlt	r2, #1
 8011ffa:	6032      	strlt	r2, [r6, #0]
 8011ffc:	43bb      	bics	r3, r7
 8011ffe:	d112      	bne.n	8012026 <_dtoa_r+0x9e>
 8012000:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012002:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012006:	6013      	str	r3, [r2, #0]
 8012008:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801200c:	4323      	orrs	r3, r4
 801200e:	f000 854d 	beq.w	8012aac <_dtoa_r+0xb24>
 8012012:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012014:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801226c <_dtoa_r+0x2e4>
 8012018:	2b00      	cmp	r3, #0
 801201a:	f000 854f 	beq.w	8012abc <_dtoa_r+0xb34>
 801201e:	f10a 0303 	add.w	r3, sl, #3
 8012022:	f000 bd49 	b.w	8012ab8 <_dtoa_r+0xb30>
 8012026:	ed9d 7b02 	vldr	d7, [sp, #8]
 801202a:	2200      	movs	r2, #0
 801202c:	ec51 0b17 	vmov	r0, r1, d7
 8012030:	2300      	movs	r3, #0
 8012032:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012036:	f7ee fd6f 	bl	8000b18 <__aeabi_dcmpeq>
 801203a:	4680      	mov	r8, r0
 801203c:	b158      	cbz	r0, 8012056 <_dtoa_r+0xce>
 801203e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012040:	2301      	movs	r3, #1
 8012042:	6013      	str	r3, [r2, #0]
 8012044:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012046:	b113      	cbz	r3, 801204e <_dtoa_r+0xc6>
 8012048:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801204a:	4b84      	ldr	r3, [pc, #528]	@ (801225c <_dtoa_r+0x2d4>)
 801204c:	6013      	str	r3, [r2, #0]
 801204e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012270 <_dtoa_r+0x2e8>
 8012052:	f000 bd33 	b.w	8012abc <_dtoa_r+0xb34>
 8012056:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801205a:	aa16      	add	r2, sp, #88	@ 0x58
 801205c:	a917      	add	r1, sp, #92	@ 0x5c
 801205e:	4658      	mov	r0, fp
 8012060:	f001 face 	bl	8013600 <__d2b>
 8012064:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012068:	4681      	mov	r9, r0
 801206a:	2e00      	cmp	r6, #0
 801206c:	d077      	beq.n	801215e <_dtoa_r+0x1d6>
 801206e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012070:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012078:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801207c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012080:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012084:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012088:	4619      	mov	r1, r3
 801208a:	2200      	movs	r2, #0
 801208c:	4b74      	ldr	r3, [pc, #464]	@ (8012260 <_dtoa_r+0x2d8>)
 801208e:	f7ee f923 	bl	80002d8 <__aeabi_dsub>
 8012092:	a369      	add	r3, pc, #420	@ (adr r3, 8012238 <_dtoa_r+0x2b0>)
 8012094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012098:	f7ee fad6 	bl	8000648 <__aeabi_dmul>
 801209c:	a368      	add	r3, pc, #416	@ (adr r3, 8012240 <_dtoa_r+0x2b8>)
 801209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a2:	f7ee f91b 	bl	80002dc <__adddf3>
 80120a6:	4604      	mov	r4, r0
 80120a8:	4630      	mov	r0, r6
 80120aa:	460d      	mov	r5, r1
 80120ac:	f7ee fa62 	bl	8000574 <__aeabi_i2d>
 80120b0:	a365      	add	r3, pc, #404	@ (adr r3, 8012248 <_dtoa_r+0x2c0>)
 80120b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b6:	f7ee fac7 	bl	8000648 <__aeabi_dmul>
 80120ba:	4602      	mov	r2, r0
 80120bc:	460b      	mov	r3, r1
 80120be:	4620      	mov	r0, r4
 80120c0:	4629      	mov	r1, r5
 80120c2:	f7ee f90b 	bl	80002dc <__adddf3>
 80120c6:	4604      	mov	r4, r0
 80120c8:	460d      	mov	r5, r1
 80120ca:	f7ee fd6d 	bl	8000ba8 <__aeabi_d2iz>
 80120ce:	2200      	movs	r2, #0
 80120d0:	4607      	mov	r7, r0
 80120d2:	2300      	movs	r3, #0
 80120d4:	4620      	mov	r0, r4
 80120d6:	4629      	mov	r1, r5
 80120d8:	f7ee fd28 	bl	8000b2c <__aeabi_dcmplt>
 80120dc:	b140      	cbz	r0, 80120f0 <_dtoa_r+0x168>
 80120de:	4638      	mov	r0, r7
 80120e0:	f7ee fa48 	bl	8000574 <__aeabi_i2d>
 80120e4:	4622      	mov	r2, r4
 80120e6:	462b      	mov	r3, r5
 80120e8:	f7ee fd16 	bl	8000b18 <__aeabi_dcmpeq>
 80120ec:	b900      	cbnz	r0, 80120f0 <_dtoa_r+0x168>
 80120ee:	3f01      	subs	r7, #1
 80120f0:	2f16      	cmp	r7, #22
 80120f2:	d851      	bhi.n	8012198 <_dtoa_r+0x210>
 80120f4:	4b5b      	ldr	r3, [pc, #364]	@ (8012264 <_dtoa_r+0x2dc>)
 80120f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80120fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012102:	f7ee fd13 	bl	8000b2c <__aeabi_dcmplt>
 8012106:	2800      	cmp	r0, #0
 8012108:	d048      	beq.n	801219c <_dtoa_r+0x214>
 801210a:	3f01      	subs	r7, #1
 801210c:	2300      	movs	r3, #0
 801210e:	9312      	str	r3, [sp, #72]	@ 0x48
 8012110:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012112:	1b9b      	subs	r3, r3, r6
 8012114:	1e5a      	subs	r2, r3, #1
 8012116:	bf44      	itt	mi
 8012118:	f1c3 0801 	rsbmi	r8, r3, #1
 801211c:	2300      	movmi	r3, #0
 801211e:	9208      	str	r2, [sp, #32]
 8012120:	bf54      	ite	pl
 8012122:	f04f 0800 	movpl.w	r8, #0
 8012126:	9308      	strmi	r3, [sp, #32]
 8012128:	2f00      	cmp	r7, #0
 801212a:	db39      	blt.n	80121a0 <_dtoa_r+0x218>
 801212c:	9b08      	ldr	r3, [sp, #32]
 801212e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012130:	443b      	add	r3, r7
 8012132:	9308      	str	r3, [sp, #32]
 8012134:	2300      	movs	r3, #0
 8012136:	930a      	str	r3, [sp, #40]	@ 0x28
 8012138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801213a:	2b09      	cmp	r3, #9
 801213c:	d864      	bhi.n	8012208 <_dtoa_r+0x280>
 801213e:	2b05      	cmp	r3, #5
 8012140:	bfc4      	itt	gt
 8012142:	3b04      	subgt	r3, #4
 8012144:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012148:	f1a3 0302 	sub.w	r3, r3, #2
 801214c:	bfcc      	ite	gt
 801214e:	2400      	movgt	r4, #0
 8012150:	2401      	movle	r4, #1
 8012152:	2b03      	cmp	r3, #3
 8012154:	d863      	bhi.n	801221e <_dtoa_r+0x296>
 8012156:	e8df f003 	tbb	[pc, r3]
 801215a:	372a      	.short	0x372a
 801215c:	5535      	.short	0x5535
 801215e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012162:	441e      	add	r6, r3
 8012164:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012168:	2b20      	cmp	r3, #32
 801216a:	bfc1      	itttt	gt
 801216c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012170:	409f      	lslgt	r7, r3
 8012172:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012176:	fa24 f303 	lsrgt.w	r3, r4, r3
 801217a:	bfd6      	itet	le
 801217c:	f1c3 0320 	rsble	r3, r3, #32
 8012180:	ea47 0003 	orrgt.w	r0, r7, r3
 8012184:	fa04 f003 	lslle.w	r0, r4, r3
 8012188:	f7ee f9e4 	bl	8000554 <__aeabi_ui2d>
 801218c:	2201      	movs	r2, #1
 801218e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012192:	3e01      	subs	r6, #1
 8012194:	9214      	str	r2, [sp, #80]	@ 0x50
 8012196:	e777      	b.n	8012088 <_dtoa_r+0x100>
 8012198:	2301      	movs	r3, #1
 801219a:	e7b8      	b.n	801210e <_dtoa_r+0x186>
 801219c:	9012      	str	r0, [sp, #72]	@ 0x48
 801219e:	e7b7      	b.n	8012110 <_dtoa_r+0x188>
 80121a0:	427b      	negs	r3, r7
 80121a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80121a4:	2300      	movs	r3, #0
 80121a6:	eba8 0807 	sub.w	r8, r8, r7
 80121aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80121ac:	e7c4      	b.n	8012138 <_dtoa_r+0x1b0>
 80121ae:	2300      	movs	r3, #0
 80121b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80121b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	dc35      	bgt.n	8012224 <_dtoa_r+0x29c>
 80121b8:	2301      	movs	r3, #1
 80121ba:	9300      	str	r3, [sp, #0]
 80121bc:	9307      	str	r3, [sp, #28]
 80121be:	461a      	mov	r2, r3
 80121c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80121c2:	e00b      	b.n	80121dc <_dtoa_r+0x254>
 80121c4:	2301      	movs	r3, #1
 80121c6:	e7f3      	b.n	80121b0 <_dtoa_r+0x228>
 80121c8:	2300      	movs	r3, #0
 80121ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80121cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121ce:	18fb      	adds	r3, r7, r3
 80121d0:	9300      	str	r3, [sp, #0]
 80121d2:	3301      	adds	r3, #1
 80121d4:	2b01      	cmp	r3, #1
 80121d6:	9307      	str	r3, [sp, #28]
 80121d8:	bfb8      	it	lt
 80121da:	2301      	movlt	r3, #1
 80121dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80121e0:	2100      	movs	r1, #0
 80121e2:	2204      	movs	r2, #4
 80121e4:	f102 0514 	add.w	r5, r2, #20
 80121e8:	429d      	cmp	r5, r3
 80121ea:	d91f      	bls.n	801222c <_dtoa_r+0x2a4>
 80121ec:	6041      	str	r1, [r0, #4]
 80121ee:	4658      	mov	r0, fp
 80121f0:	f000 fedc 	bl	8012fac <_Balloc>
 80121f4:	4682      	mov	sl, r0
 80121f6:	2800      	cmp	r0, #0
 80121f8:	d13c      	bne.n	8012274 <_dtoa_r+0x2ec>
 80121fa:	4b1b      	ldr	r3, [pc, #108]	@ (8012268 <_dtoa_r+0x2e0>)
 80121fc:	4602      	mov	r2, r0
 80121fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8012202:	e6d8      	b.n	8011fb6 <_dtoa_r+0x2e>
 8012204:	2301      	movs	r3, #1
 8012206:	e7e0      	b.n	80121ca <_dtoa_r+0x242>
 8012208:	2401      	movs	r4, #1
 801220a:	2300      	movs	r3, #0
 801220c:	9309      	str	r3, [sp, #36]	@ 0x24
 801220e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012210:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012214:	9300      	str	r3, [sp, #0]
 8012216:	9307      	str	r3, [sp, #28]
 8012218:	2200      	movs	r2, #0
 801221a:	2312      	movs	r3, #18
 801221c:	e7d0      	b.n	80121c0 <_dtoa_r+0x238>
 801221e:	2301      	movs	r3, #1
 8012220:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012222:	e7f5      	b.n	8012210 <_dtoa_r+0x288>
 8012224:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012226:	9300      	str	r3, [sp, #0]
 8012228:	9307      	str	r3, [sp, #28]
 801222a:	e7d7      	b.n	80121dc <_dtoa_r+0x254>
 801222c:	3101      	adds	r1, #1
 801222e:	0052      	lsls	r2, r2, #1
 8012230:	e7d8      	b.n	80121e4 <_dtoa_r+0x25c>
 8012232:	bf00      	nop
 8012234:	f3af 8000 	nop.w
 8012238:	636f4361 	.word	0x636f4361
 801223c:	3fd287a7 	.word	0x3fd287a7
 8012240:	8b60c8b3 	.word	0x8b60c8b3
 8012244:	3fc68a28 	.word	0x3fc68a28
 8012248:	509f79fb 	.word	0x509f79fb
 801224c:	3fd34413 	.word	0x3fd34413
 8012250:	08014064 	.word	0x08014064
 8012254:	0801421d 	.word	0x0801421d
 8012258:	7ff00000 	.word	0x7ff00000
 801225c:	08014041 	.word	0x08014041
 8012260:	3ff80000 	.word	0x3ff80000
 8012264:	08014328 	.word	0x08014328
 8012268:	08014275 	.word	0x08014275
 801226c:	08014219 	.word	0x08014219
 8012270:	08014040 	.word	0x08014040
 8012274:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012278:	6018      	str	r0, [r3, #0]
 801227a:	9b07      	ldr	r3, [sp, #28]
 801227c:	2b0e      	cmp	r3, #14
 801227e:	f200 80a4 	bhi.w	80123ca <_dtoa_r+0x442>
 8012282:	2c00      	cmp	r4, #0
 8012284:	f000 80a1 	beq.w	80123ca <_dtoa_r+0x442>
 8012288:	2f00      	cmp	r7, #0
 801228a:	dd33      	ble.n	80122f4 <_dtoa_r+0x36c>
 801228c:	4bad      	ldr	r3, [pc, #692]	@ (8012544 <_dtoa_r+0x5bc>)
 801228e:	f007 020f 	and.w	r2, r7, #15
 8012292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012296:	ed93 7b00 	vldr	d7, [r3]
 801229a:	05f8      	lsls	r0, r7, #23
 801229c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80122a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80122a4:	d516      	bpl.n	80122d4 <_dtoa_r+0x34c>
 80122a6:	4ba8      	ldr	r3, [pc, #672]	@ (8012548 <_dtoa_r+0x5c0>)
 80122a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80122ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80122b0:	f7ee faf4 	bl	800089c <__aeabi_ddiv>
 80122b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122b8:	f004 040f 	and.w	r4, r4, #15
 80122bc:	2603      	movs	r6, #3
 80122be:	4da2      	ldr	r5, [pc, #648]	@ (8012548 <_dtoa_r+0x5c0>)
 80122c0:	b954      	cbnz	r4, 80122d8 <_dtoa_r+0x350>
 80122c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80122c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122ca:	f7ee fae7 	bl	800089c <__aeabi_ddiv>
 80122ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122d2:	e028      	b.n	8012326 <_dtoa_r+0x39e>
 80122d4:	2602      	movs	r6, #2
 80122d6:	e7f2      	b.n	80122be <_dtoa_r+0x336>
 80122d8:	07e1      	lsls	r1, r4, #31
 80122da:	d508      	bpl.n	80122ee <_dtoa_r+0x366>
 80122dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80122e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80122e4:	f7ee f9b0 	bl	8000648 <__aeabi_dmul>
 80122e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80122ec:	3601      	adds	r6, #1
 80122ee:	1064      	asrs	r4, r4, #1
 80122f0:	3508      	adds	r5, #8
 80122f2:	e7e5      	b.n	80122c0 <_dtoa_r+0x338>
 80122f4:	f000 80d2 	beq.w	801249c <_dtoa_r+0x514>
 80122f8:	427c      	negs	r4, r7
 80122fa:	4b92      	ldr	r3, [pc, #584]	@ (8012544 <_dtoa_r+0x5bc>)
 80122fc:	4d92      	ldr	r5, [pc, #584]	@ (8012548 <_dtoa_r+0x5c0>)
 80122fe:	f004 020f 	and.w	r2, r4, #15
 8012302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801230a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801230e:	f7ee f99b 	bl	8000648 <__aeabi_dmul>
 8012312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012316:	1124      	asrs	r4, r4, #4
 8012318:	2300      	movs	r3, #0
 801231a:	2602      	movs	r6, #2
 801231c:	2c00      	cmp	r4, #0
 801231e:	f040 80b2 	bne.w	8012486 <_dtoa_r+0x4fe>
 8012322:	2b00      	cmp	r3, #0
 8012324:	d1d3      	bne.n	80122ce <_dtoa_r+0x346>
 8012326:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012328:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801232c:	2b00      	cmp	r3, #0
 801232e:	f000 80b7 	beq.w	80124a0 <_dtoa_r+0x518>
 8012332:	4b86      	ldr	r3, [pc, #536]	@ (801254c <_dtoa_r+0x5c4>)
 8012334:	2200      	movs	r2, #0
 8012336:	4620      	mov	r0, r4
 8012338:	4629      	mov	r1, r5
 801233a:	f7ee fbf7 	bl	8000b2c <__aeabi_dcmplt>
 801233e:	2800      	cmp	r0, #0
 8012340:	f000 80ae 	beq.w	80124a0 <_dtoa_r+0x518>
 8012344:	9b07      	ldr	r3, [sp, #28]
 8012346:	2b00      	cmp	r3, #0
 8012348:	f000 80aa 	beq.w	80124a0 <_dtoa_r+0x518>
 801234c:	9b00      	ldr	r3, [sp, #0]
 801234e:	2b00      	cmp	r3, #0
 8012350:	dd37      	ble.n	80123c2 <_dtoa_r+0x43a>
 8012352:	1e7b      	subs	r3, r7, #1
 8012354:	9304      	str	r3, [sp, #16]
 8012356:	4620      	mov	r0, r4
 8012358:	4b7d      	ldr	r3, [pc, #500]	@ (8012550 <_dtoa_r+0x5c8>)
 801235a:	2200      	movs	r2, #0
 801235c:	4629      	mov	r1, r5
 801235e:	f7ee f973 	bl	8000648 <__aeabi_dmul>
 8012362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012366:	9c00      	ldr	r4, [sp, #0]
 8012368:	3601      	adds	r6, #1
 801236a:	4630      	mov	r0, r6
 801236c:	f7ee f902 	bl	8000574 <__aeabi_i2d>
 8012370:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012374:	f7ee f968 	bl	8000648 <__aeabi_dmul>
 8012378:	4b76      	ldr	r3, [pc, #472]	@ (8012554 <_dtoa_r+0x5cc>)
 801237a:	2200      	movs	r2, #0
 801237c:	f7ed ffae 	bl	80002dc <__adddf3>
 8012380:	4605      	mov	r5, r0
 8012382:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012386:	2c00      	cmp	r4, #0
 8012388:	f040 808d 	bne.w	80124a6 <_dtoa_r+0x51e>
 801238c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012390:	4b71      	ldr	r3, [pc, #452]	@ (8012558 <_dtoa_r+0x5d0>)
 8012392:	2200      	movs	r2, #0
 8012394:	f7ed ffa0 	bl	80002d8 <__aeabi_dsub>
 8012398:	4602      	mov	r2, r0
 801239a:	460b      	mov	r3, r1
 801239c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80123a0:	462a      	mov	r2, r5
 80123a2:	4633      	mov	r3, r6
 80123a4:	f7ee fbe0 	bl	8000b68 <__aeabi_dcmpgt>
 80123a8:	2800      	cmp	r0, #0
 80123aa:	f040 828b 	bne.w	80128c4 <_dtoa_r+0x93c>
 80123ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123b2:	462a      	mov	r2, r5
 80123b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80123b8:	f7ee fbb8 	bl	8000b2c <__aeabi_dcmplt>
 80123bc:	2800      	cmp	r0, #0
 80123be:	f040 8128 	bne.w	8012612 <_dtoa_r+0x68a>
 80123c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80123c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80123ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	f2c0 815a 	blt.w	8012686 <_dtoa_r+0x6fe>
 80123d2:	2f0e      	cmp	r7, #14
 80123d4:	f300 8157 	bgt.w	8012686 <_dtoa_r+0x6fe>
 80123d8:	4b5a      	ldr	r3, [pc, #360]	@ (8012544 <_dtoa_r+0x5bc>)
 80123da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80123de:	ed93 7b00 	vldr	d7, [r3]
 80123e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	ed8d 7b00 	vstr	d7, [sp]
 80123ea:	da03      	bge.n	80123f4 <_dtoa_r+0x46c>
 80123ec:	9b07      	ldr	r3, [sp, #28]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	f340 8101 	ble.w	80125f6 <_dtoa_r+0x66e>
 80123f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80123f8:	4656      	mov	r6, sl
 80123fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123fe:	4620      	mov	r0, r4
 8012400:	4629      	mov	r1, r5
 8012402:	f7ee fa4b 	bl	800089c <__aeabi_ddiv>
 8012406:	f7ee fbcf 	bl	8000ba8 <__aeabi_d2iz>
 801240a:	4680      	mov	r8, r0
 801240c:	f7ee f8b2 	bl	8000574 <__aeabi_i2d>
 8012410:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012414:	f7ee f918 	bl	8000648 <__aeabi_dmul>
 8012418:	4602      	mov	r2, r0
 801241a:	460b      	mov	r3, r1
 801241c:	4620      	mov	r0, r4
 801241e:	4629      	mov	r1, r5
 8012420:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012424:	f7ed ff58 	bl	80002d8 <__aeabi_dsub>
 8012428:	f806 4b01 	strb.w	r4, [r6], #1
 801242c:	9d07      	ldr	r5, [sp, #28]
 801242e:	eba6 040a 	sub.w	r4, r6, sl
 8012432:	42a5      	cmp	r5, r4
 8012434:	4602      	mov	r2, r0
 8012436:	460b      	mov	r3, r1
 8012438:	f040 8117 	bne.w	801266a <_dtoa_r+0x6e2>
 801243c:	f7ed ff4e 	bl	80002dc <__adddf3>
 8012440:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012444:	4604      	mov	r4, r0
 8012446:	460d      	mov	r5, r1
 8012448:	f7ee fb8e 	bl	8000b68 <__aeabi_dcmpgt>
 801244c:	2800      	cmp	r0, #0
 801244e:	f040 80f9 	bne.w	8012644 <_dtoa_r+0x6bc>
 8012452:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012456:	4620      	mov	r0, r4
 8012458:	4629      	mov	r1, r5
 801245a:	f7ee fb5d 	bl	8000b18 <__aeabi_dcmpeq>
 801245e:	b118      	cbz	r0, 8012468 <_dtoa_r+0x4e0>
 8012460:	f018 0f01 	tst.w	r8, #1
 8012464:	f040 80ee 	bne.w	8012644 <_dtoa_r+0x6bc>
 8012468:	4649      	mov	r1, r9
 801246a:	4658      	mov	r0, fp
 801246c:	f000 fdde 	bl	801302c <_Bfree>
 8012470:	2300      	movs	r3, #0
 8012472:	7033      	strb	r3, [r6, #0]
 8012474:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012476:	3701      	adds	r7, #1
 8012478:	601f      	str	r7, [r3, #0]
 801247a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801247c:	2b00      	cmp	r3, #0
 801247e:	f000 831d 	beq.w	8012abc <_dtoa_r+0xb34>
 8012482:	601e      	str	r6, [r3, #0]
 8012484:	e31a      	b.n	8012abc <_dtoa_r+0xb34>
 8012486:	07e2      	lsls	r2, r4, #31
 8012488:	d505      	bpl.n	8012496 <_dtoa_r+0x50e>
 801248a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801248e:	f7ee f8db 	bl	8000648 <__aeabi_dmul>
 8012492:	3601      	adds	r6, #1
 8012494:	2301      	movs	r3, #1
 8012496:	1064      	asrs	r4, r4, #1
 8012498:	3508      	adds	r5, #8
 801249a:	e73f      	b.n	801231c <_dtoa_r+0x394>
 801249c:	2602      	movs	r6, #2
 801249e:	e742      	b.n	8012326 <_dtoa_r+0x39e>
 80124a0:	9c07      	ldr	r4, [sp, #28]
 80124a2:	9704      	str	r7, [sp, #16]
 80124a4:	e761      	b.n	801236a <_dtoa_r+0x3e2>
 80124a6:	4b27      	ldr	r3, [pc, #156]	@ (8012544 <_dtoa_r+0x5bc>)
 80124a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80124aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80124ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80124b2:	4454      	add	r4, sl
 80124b4:	2900      	cmp	r1, #0
 80124b6:	d053      	beq.n	8012560 <_dtoa_r+0x5d8>
 80124b8:	4928      	ldr	r1, [pc, #160]	@ (801255c <_dtoa_r+0x5d4>)
 80124ba:	2000      	movs	r0, #0
 80124bc:	f7ee f9ee 	bl	800089c <__aeabi_ddiv>
 80124c0:	4633      	mov	r3, r6
 80124c2:	462a      	mov	r2, r5
 80124c4:	f7ed ff08 	bl	80002d8 <__aeabi_dsub>
 80124c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80124cc:	4656      	mov	r6, sl
 80124ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124d2:	f7ee fb69 	bl	8000ba8 <__aeabi_d2iz>
 80124d6:	4605      	mov	r5, r0
 80124d8:	f7ee f84c 	bl	8000574 <__aeabi_i2d>
 80124dc:	4602      	mov	r2, r0
 80124de:	460b      	mov	r3, r1
 80124e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124e4:	f7ed fef8 	bl	80002d8 <__aeabi_dsub>
 80124e8:	3530      	adds	r5, #48	@ 0x30
 80124ea:	4602      	mov	r2, r0
 80124ec:	460b      	mov	r3, r1
 80124ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80124f2:	f806 5b01 	strb.w	r5, [r6], #1
 80124f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80124fa:	f7ee fb17 	bl	8000b2c <__aeabi_dcmplt>
 80124fe:	2800      	cmp	r0, #0
 8012500:	d171      	bne.n	80125e6 <_dtoa_r+0x65e>
 8012502:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012506:	4911      	ldr	r1, [pc, #68]	@ (801254c <_dtoa_r+0x5c4>)
 8012508:	2000      	movs	r0, #0
 801250a:	f7ed fee5 	bl	80002d8 <__aeabi_dsub>
 801250e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012512:	f7ee fb0b 	bl	8000b2c <__aeabi_dcmplt>
 8012516:	2800      	cmp	r0, #0
 8012518:	f040 8095 	bne.w	8012646 <_dtoa_r+0x6be>
 801251c:	42a6      	cmp	r6, r4
 801251e:	f43f af50 	beq.w	80123c2 <_dtoa_r+0x43a>
 8012522:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012526:	4b0a      	ldr	r3, [pc, #40]	@ (8012550 <_dtoa_r+0x5c8>)
 8012528:	2200      	movs	r2, #0
 801252a:	f7ee f88d 	bl	8000648 <__aeabi_dmul>
 801252e:	4b08      	ldr	r3, [pc, #32]	@ (8012550 <_dtoa_r+0x5c8>)
 8012530:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012534:	2200      	movs	r2, #0
 8012536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801253a:	f7ee f885 	bl	8000648 <__aeabi_dmul>
 801253e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012542:	e7c4      	b.n	80124ce <_dtoa_r+0x546>
 8012544:	08014328 	.word	0x08014328
 8012548:	08014300 	.word	0x08014300
 801254c:	3ff00000 	.word	0x3ff00000
 8012550:	40240000 	.word	0x40240000
 8012554:	401c0000 	.word	0x401c0000
 8012558:	40140000 	.word	0x40140000
 801255c:	3fe00000 	.word	0x3fe00000
 8012560:	4631      	mov	r1, r6
 8012562:	4628      	mov	r0, r5
 8012564:	f7ee f870 	bl	8000648 <__aeabi_dmul>
 8012568:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801256c:	9415      	str	r4, [sp, #84]	@ 0x54
 801256e:	4656      	mov	r6, sl
 8012570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012574:	f7ee fb18 	bl	8000ba8 <__aeabi_d2iz>
 8012578:	4605      	mov	r5, r0
 801257a:	f7ed fffb 	bl	8000574 <__aeabi_i2d>
 801257e:	4602      	mov	r2, r0
 8012580:	460b      	mov	r3, r1
 8012582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012586:	f7ed fea7 	bl	80002d8 <__aeabi_dsub>
 801258a:	3530      	adds	r5, #48	@ 0x30
 801258c:	f806 5b01 	strb.w	r5, [r6], #1
 8012590:	4602      	mov	r2, r0
 8012592:	460b      	mov	r3, r1
 8012594:	42a6      	cmp	r6, r4
 8012596:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801259a:	f04f 0200 	mov.w	r2, #0
 801259e:	d124      	bne.n	80125ea <_dtoa_r+0x662>
 80125a0:	4bac      	ldr	r3, [pc, #688]	@ (8012854 <_dtoa_r+0x8cc>)
 80125a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80125a6:	f7ed fe99 	bl	80002dc <__adddf3>
 80125aa:	4602      	mov	r2, r0
 80125ac:	460b      	mov	r3, r1
 80125ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125b2:	f7ee fad9 	bl	8000b68 <__aeabi_dcmpgt>
 80125b6:	2800      	cmp	r0, #0
 80125b8:	d145      	bne.n	8012646 <_dtoa_r+0x6be>
 80125ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80125be:	49a5      	ldr	r1, [pc, #660]	@ (8012854 <_dtoa_r+0x8cc>)
 80125c0:	2000      	movs	r0, #0
 80125c2:	f7ed fe89 	bl	80002d8 <__aeabi_dsub>
 80125c6:	4602      	mov	r2, r0
 80125c8:	460b      	mov	r3, r1
 80125ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125ce:	f7ee faad 	bl	8000b2c <__aeabi_dcmplt>
 80125d2:	2800      	cmp	r0, #0
 80125d4:	f43f aef5 	beq.w	80123c2 <_dtoa_r+0x43a>
 80125d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80125da:	1e73      	subs	r3, r6, #1
 80125dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80125de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80125e2:	2b30      	cmp	r3, #48	@ 0x30
 80125e4:	d0f8      	beq.n	80125d8 <_dtoa_r+0x650>
 80125e6:	9f04      	ldr	r7, [sp, #16]
 80125e8:	e73e      	b.n	8012468 <_dtoa_r+0x4e0>
 80125ea:	4b9b      	ldr	r3, [pc, #620]	@ (8012858 <_dtoa_r+0x8d0>)
 80125ec:	f7ee f82c 	bl	8000648 <__aeabi_dmul>
 80125f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125f4:	e7bc      	b.n	8012570 <_dtoa_r+0x5e8>
 80125f6:	d10c      	bne.n	8012612 <_dtoa_r+0x68a>
 80125f8:	4b98      	ldr	r3, [pc, #608]	@ (801285c <_dtoa_r+0x8d4>)
 80125fa:	2200      	movs	r2, #0
 80125fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012600:	f7ee f822 	bl	8000648 <__aeabi_dmul>
 8012604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012608:	f7ee faa4 	bl	8000b54 <__aeabi_dcmpge>
 801260c:	2800      	cmp	r0, #0
 801260e:	f000 8157 	beq.w	80128c0 <_dtoa_r+0x938>
 8012612:	2400      	movs	r4, #0
 8012614:	4625      	mov	r5, r4
 8012616:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012618:	43db      	mvns	r3, r3
 801261a:	9304      	str	r3, [sp, #16]
 801261c:	4656      	mov	r6, sl
 801261e:	2700      	movs	r7, #0
 8012620:	4621      	mov	r1, r4
 8012622:	4658      	mov	r0, fp
 8012624:	f000 fd02 	bl	801302c <_Bfree>
 8012628:	2d00      	cmp	r5, #0
 801262a:	d0dc      	beq.n	80125e6 <_dtoa_r+0x65e>
 801262c:	b12f      	cbz	r7, 801263a <_dtoa_r+0x6b2>
 801262e:	42af      	cmp	r7, r5
 8012630:	d003      	beq.n	801263a <_dtoa_r+0x6b2>
 8012632:	4639      	mov	r1, r7
 8012634:	4658      	mov	r0, fp
 8012636:	f000 fcf9 	bl	801302c <_Bfree>
 801263a:	4629      	mov	r1, r5
 801263c:	4658      	mov	r0, fp
 801263e:	f000 fcf5 	bl	801302c <_Bfree>
 8012642:	e7d0      	b.n	80125e6 <_dtoa_r+0x65e>
 8012644:	9704      	str	r7, [sp, #16]
 8012646:	4633      	mov	r3, r6
 8012648:	461e      	mov	r6, r3
 801264a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801264e:	2a39      	cmp	r2, #57	@ 0x39
 8012650:	d107      	bne.n	8012662 <_dtoa_r+0x6da>
 8012652:	459a      	cmp	sl, r3
 8012654:	d1f8      	bne.n	8012648 <_dtoa_r+0x6c0>
 8012656:	9a04      	ldr	r2, [sp, #16]
 8012658:	3201      	adds	r2, #1
 801265a:	9204      	str	r2, [sp, #16]
 801265c:	2230      	movs	r2, #48	@ 0x30
 801265e:	f88a 2000 	strb.w	r2, [sl]
 8012662:	781a      	ldrb	r2, [r3, #0]
 8012664:	3201      	adds	r2, #1
 8012666:	701a      	strb	r2, [r3, #0]
 8012668:	e7bd      	b.n	80125e6 <_dtoa_r+0x65e>
 801266a:	4b7b      	ldr	r3, [pc, #492]	@ (8012858 <_dtoa_r+0x8d0>)
 801266c:	2200      	movs	r2, #0
 801266e:	f7ed ffeb 	bl	8000648 <__aeabi_dmul>
 8012672:	2200      	movs	r2, #0
 8012674:	2300      	movs	r3, #0
 8012676:	4604      	mov	r4, r0
 8012678:	460d      	mov	r5, r1
 801267a:	f7ee fa4d 	bl	8000b18 <__aeabi_dcmpeq>
 801267e:	2800      	cmp	r0, #0
 8012680:	f43f aebb 	beq.w	80123fa <_dtoa_r+0x472>
 8012684:	e6f0      	b.n	8012468 <_dtoa_r+0x4e0>
 8012686:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012688:	2a00      	cmp	r2, #0
 801268a:	f000 80db 	beq.w	8012844 <_dtoa_r+0x8bc>
 801268e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012690:	2a01      	cmp	r2, #1
 8012692:	f300 80bf 	bgt.w	8012814 <_dtoa_r+0x88c>
 8012696:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012698:	2a00      	cmp	r2, #0
 801269a:	f000 80b7 	beq.w	801280c <_dtoa_r+0x884>
 801269e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80126a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80126a4:	4646      	mov	r6, r8
 80126a6:	9a08      	ldr	r2, [sp, #32]
 80126a8:	2101      	movs	r1, #1
 80126aa:	441a      	add	r2, r3
 80126ac:	4658      	mov	r0, fp
 80126ae:	4498      	add	r8, r3
 80126b0:	9208      	str	r2, [sp, #32]
 80126b2:	f000 fd6f 	bl	8013194 <__i2b>
 80126b6:	4605      	mov	r5, r0
 80126b8:	b15e      	cbz	r6, 80126d2 <_dtoa_r+0x74a>
 80126ba:	9b08      	ldr	r3, [sp, #32]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	dd08      	ble.n	80126d2 <_dtoa_r+0x74a>
 80126c0:	42b3      	cmp	r3, r6
 80126c2:	9a08      	ldr	r2, [sp, #32]
 80126c4:	bfa8      	it	ge
 80126c6:	4633      	movge	r3, r6
 80126c8:	eba8 0803 	sub.w	r8, r8, r3
 80126cc:	1af6      	subs	r6, r6, r3
 80126ce:	1ad3      	subs	r3, r2, r3
 80126d0:	9308      	str	r3, [sp, #32]
 80126d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126d4:	b1f3      	cbz	r3, 8012714 <_dtoa_r+0x78c>
 80126d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80126d8:	2b00      	cmp	r3, #0
 80126da:	f000 80b7 	beq.w	801284c <_dtoa_r+0x8c4>
 80126de:	b18c      	cbz	r4, 8012704 <_dtoa_r+0x77c>
 80126e0:	4629      	mov	r1, r5
 80126e2:	4622      	mov	r2, r4
 80126e4:	4658      	mov	r0, fp
 80126e6:	f000 fe15 	bl	8013314 <__pow5mult>
 80126ea:	464a      	mov	r2, r9
 80126ec:	4601      	mov	r1, r0
 80126ee:	4605      	mov	r5, r0
 80126f0:	4658      	mov	r0, fp
 80126f2:	f000 fd65 	bl	80131c0 <__multiply>
 80126f6:	4649      	mov	r1, r9
 80126f8:	9004      	str	r0, [sp, #16]
 80126fa:	4658      	mov	r0, fp
 80126fc:	f000 fc96 	bl	801302c <_Bfree>
 8012700:	9b04      	ldr	r3, [sp, #16]
 8012702:	4699      	mov	r9, r3
 8012704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012706:	1b1a      	subs	r2, r3, r4
 8012708:	d004      	beq.n	8012714 <_dtoa_r+0x78c>
 801270a:	4649      	mov	r1, r9
 801270c:	4658      	mov	r0, fp
 801270e:	f000 fe01 	bl	8013314 <__pow5mult>
 8012712:	4681      	mov	r9, r0
 8012714:	2101      	movs	r1, #1
 8012716:	4658      	mov	r0, fp
 8012718:	f000 fd3c 	bl	8013194 <__i2b>
 801271c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801271e:	4604      	mov	r4, r0
 8012720:	2b00      	cmp	r3, #0
 8012722:	f000 81cf 	beq.w	8012ac4 <_dtoa_r+0xb3c>
 8012726:	461a      	mov	r2, r3
 8012728:	4601      	mov	r1, r0
 801272a:	4658      	mov	r0, fp
 801272c:	f000 fdf2 	bl	8013314 <__pow5mult>
 8012730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012732:	2b01      	cmp	r3, #1
 8012734:	4604      	mov	r4, r0
 8012736:	f300 8095 	bgt.w	8012864 <_dtoa_r+0x8dc>
 801273a:	9b02      	ldr	r3, [sp, #8]
 801273c:	2b00      	cmp	r3, #0
 801273e:	f040 8087 	bne.w	8012850 <_dtoa_r+0x8c8>
 8012742:	9b03      	ldr	r3, [sp, #12]
 8012744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012748:	2b00      	cmp	r3, #0
 801274a:	f040 8089 	bne.w	8012860 <_dtoa_r+0x8d8>
 801274e:	9b03      	ldr	r3, [sp, #12]
 8012750:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012754:	0d1b      	lsrs	r3, r3, #20
 8012756:	051b      	lsls	r3, r3, #20
 8012758:	b12b      	cbz	r3, 8012766 <_dtoa_r+0x7de>
 801275a:	9b08      	ldr	r3, [sp, #32]
 801275c:	3301      	adds	r3, #1
 801275e:	9308      	str	r3, [sp, #32]
 8012760:	f108 0801 	add.w	r8, r8, #1
 8012764:	2301      	movs	r3, #1
 8012766:	930a      	str	r3, [sp, #40]	@ 0x28
 8012768:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801276a:	2b00      	cmp	r3, #0
 801276c:	f000 81b0 	beq.w	8012ad0 <_dtoa_r+0xb48>
 8012770:	6923      	ldr	r3, [r4, #16]
 8012772:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012776:	6918      	ldr	r0, [r3, #16]
 8012778:	f000 fcc0 	bl	80130fc <__hi0bits>
 801277c:	f1c0 0020 	rsb	r0, r0, #32
 8012780:	9b08      	ldr	r3, [sp, #32]
 8012782:	4418      	add	r0, r3
 8012784:	f010 001f 	ands.w	r0, r0, #31
 8012788:	d077      	beq.n	801287a <_dtoa_r+0x8f2>
 801278a:	f1c0 0320 	rsb	r3, r0, #32
 801278e:	2b04      	cmp	r3, #4
 8012790:	dd6b      	ble.n	801286a <_dtoa_r+0x8e2>
 8012792:	9b08      	ldr	r3, [sp, #32]
 8012794:	f1c0 001c 	rsb	r0, r0, #28
 8012798:	4403      	add	r3, r0
 801279a:	4480      	add	r8, r0
 801279c:	4406      	add	r6, r0
 801279e:	9308      	str	r3, [sp, #32]
 80127a0:	f1b8 0f00 	cmp.w	r8, #0
 80127a4:	dd05      	ble.n	80127b2 <_dtoa_r+0x82a>
 80127a6:	4649      	mov	r1, r9
 80127a8:	4642      	mov	r2, r8
 80127aa:	4658      	mov	r0, fp
 80127ac:	f000 fe0c 	bl	80133c8 <__lshift>
 80127b0:	4681      	mov	r9, r0
 80127b2:	9b08      	ldr	r3, [sp, #32]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	dd05      	ble.n	80127c4 <_dtoa_r+0x83c>
 80127b8:	4621      	mov	r1, r4
 80127ba:	461a      	mov	r2, r3
 80127bc:	4658      	mov	r0, fp
 80127be:	f000 fe03 	bl	80133c8 <__lshift>
 80127c2:	4604      	mov	r4, r0
 80127c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d059      	beq.n	801287e <_dtoa_r+0x8f6>
 80127ca:	4621      	mov	r1, r4
 80127cc:	4648      	mov	r0, r9
 80127ce:	f000 fe67 	bl	80134a0 <__mcmp>
 80127d2:	2800      	cmp	r0, #0
 80127d4:	da53      	bge.n	801287e <_dtoa_r+0x8f6>
 80127d6:	1e7b      	subs	r3, r7, #1
 80127d8:	9304      	str	r3, [sp, #16]
 80127da:	4649      	mov	r1, r9
 80127dc:	2300      	movs	r3, #0
 80127de:	220a      	movs	r2, #10
 80127e0:	4658      	mov	r0, fp
 80127e2:	f000 fc45 	bl	8013070 <__multadd>
 80127e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80127e8:	4681      	mov	r9, r0
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	f000 8172 	beq.w	8012ad4 <_dtoa_r+0xb4c>
 80127f0:	2300      	movs	r3, #0
 80127f2:	4629      	mov	r1, r5
 80127f4:	220a      	movs	r2, #10
 80127f6:	4658      	mov	r0, fp
 80127f8:	f000 fc3a 	bl	8013070 <__multadd>
 80127fc:	9b00      	ldr	r3, [sp, #0]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	4605      	mov	r5, r0
 8012802:	dc67      	bgt.n	80128d4 <_dtoa_r+0x94c>
 8012804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012806:	2b02      	cmp	r3, #2
 8012808:	dc41      	bgt.n	801288e <_dtoa_r+0x906>
 801280a:	e063      	b.n	80128d4 <_dtoa_r+0x94c>
 801280c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801280e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012812:	e746      	b.n	80126a2 <_dtoa_r+0x71a>
 8012814:	9b07      	ldr	r3, [sp, #28]
 8012816:	1e5c      	subs	r4, r3, #1
 8012818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801281a:	42a3      	cmp	r3, r4
 801281c:	bfbf      	itttt	lt
 801281e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012820:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012822:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012824:	1ae3      	sublt	r3, r4, r3
 8012826:	bfb4      	ite	lt
 8012828:	18d2      	addlt	r2, r2, r3
 801282a:	1b1c      	subge	r4, r3, r4
 801282c:	9b07      	ldr	r3, [sp, #28]
 801282e:	bfbc      	itt	lt
 8012830:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012832:	2400      	movlt	r4, #0
 8012834:	2b00      	cmp	r3, #0
 8012836:	bfb5      	itete	lt
 8012838:	eba8 0603 	sublt.w	r6, r8, r3
 801283c:	9b07      	ldrge	r3, [sp, #28]
 801283e:	2300      	movlt	r3, #0
 8012840:	4646      	movge	r6, r8
 8012842:	e730      	b.n	80126a6 <_dtoa_r+0x71e>
 8012844:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012846:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012848:	4646      	mov	r6, r8
 801284a:	e735      	b.n	80126b8 <_dtoa_r+0x730>
 801284c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801284e:	e75c      	b.n	801270a <_dtoa_r+0x782>
 8012850:	2300      	movs	r3, #0
 8012852:	e788      	b.n	8012766 <_dtoa_r+0x7de>
 8012854:	3fe00000 	.word	0x3fe00000
 8012858:	40240000 	.word	0x40240000
 801285c:	40140000 	.word	0x40140000
 8012860:	9b02      	ldr	r3, [sp, #8]
 8012862:	e780      	b.n	8012766 <_dtoa_r+0x7de>
 8012864:	2300      	movs	r3, #0
 8012866:	930a      	str	r3, [sp, #40]	@ 0x28
 8012868:	e782      	b.n	8012770 <_dtoa_r+0x7e8>
 801286a:	d099      	beq.n	80127a0 <_dtoa_r+0x818>
 801286c:	9a08      	ldr	r2, [sp, #32]
 801286e:	331c      	adds	r3, #28
 8012870:	441a      	add	r2, r3
 8012872:	4498      	add	r8, r3
 8012874:	441e      	add	r6, r3
 8012876:	9208      	str	r2, [sp, #32]
 8012878:	e792      	b.n	80127a0 <_dtoa_r+0x818>
 801287a:	4603      	mov	r3, r0
 801287c:	e7f6      	b.n	801286c <_dtoa_r+0x8e4>
 801287e:	9b07      	ldr	r3, [sp, #28]
 8012880:	9704      	str	r7, [sp, #16]
 8012882:	2b00      	cmp	r3, #0
 8012884:	dc20      	bgt.n	80128c8 <_dtoa_r+0x940>
 8012886:	9300      	str	r3, [sp, #0]
 8012888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801288a:	2b02      	cmp	r3, #2
 801288c:	dd1e      	ble.n	80128cc <_dtoa_r+0x944>
 801288e:	9b00      	ldr	r3, [sp, #0]
 8012890:	2b00      	cmp	r3, #0
 8012892:	f47f aec0 	bne.w	8012616 <_dtoa_r+0x68e>
 8012896:	4621      	mov	r1, r4
 8012898:	2205      	movs	r2, #5
 801289a:	4658      	mov	r0, fp
 801289c:	f000 fbe8 	bl	8013070 <__multadd>
 80128a0:	4601      	mov	r1, r0
 80128a2:	4604      	mov	r4, r0
 80128a4:	4648      	mov	r0, r9
 80128a6:	f000 fdfb 	bl	80134a0 <__mcmp>
 80128aa:	2800      	cmp	r0, #0
 80128ac:	f77f aeb3 	ble.w	8012616 <_dtoa_r+0x68e>
 80128b0:	4656      	mov	r6, sl
 80128b2:	2331      	movs	r3, #49	@ 0x31
 80128b4:	f806 3b01 	strb.w	r3, [r6], #1
 80128b8:	9b04      	ldr	r3, [sp, #16]
 80128ba:	3301      	adds	r3, #1
 80128bc:	9304      	str	r3, [sp, #16]
 80128be:	e6ae      	b.n	801261e <_dtoa_r+0x696>
 80128c0:	9c07      	ldr	r4, [sp, #28]
 80128c2:	9704      	str	r7, [sp, #16]
 80128c4:	4625      	mov	r5, r4
 80128c6:	e7f3      	b.n	80128b0 <_dtoa_r+0x928>
 80128c8:	9b07      	ldr	r3, [sp, #28]
 80128ca:	9300      	str	r3, [sp, #0]
 80128cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	f000 8104 	beq.w	8012adc <_dtoa_r+0xb54>
 80128d4:	2e00      	cmp	r6, #0
 80128d6:	dd05      	ble.n	80128e4 <_dtoa_r+0x95c>
 80128d8:	4629      	mov	r1, r5
 80128da:	4632      	mov	r2, r6
 80128dc:	4658      	mov	r0, fp
 80128de:	f000 fd73 	bl	80133c8 <__lshift>
 80128e2:	4605      	mov	r5, r0
 80128e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d05a      	beq.n	80129a0 <_dtoa_r+0xa18>
 80128ea:	6869      	ldr	r1, [r5, #4]
 80128ec:	4658      	mov	r0, fp
 80128ee:	f000 fb5d 	bl	8012fac <_Balloc>
 80128f2:	4606      	mov	r6, r0
 80128f4:	b928      	cbnz	r0, 8012902 <_dtoa_r+0x97a>
 80128f6:	4b84      	ldr	r3, [pc, #528]	@ (8012b08 <_dtoa_r+0xb80>)
 80128f8:	4602      	mov	r2, r0
 80128fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80128fe:	f7ff bb5a 	b.w	8011fb6 <_dtoa_r+0x2e>
 8012902:	692a      	ldr	r2, [r5, #16]
 8012904:	3202      	adds	r2, #2
 8012906:	0092      	lsls	r2, r2, #2
 8012908:	f105 010c 	add.w	r1, r5, #12
 801290c:	300c      	adds	r0, #12
 801290e:	f7ff fa85 	bl	8011e1c <memcpy>
 8012912:	2201      	movs	r2, #1
 8012914:	4631      	mov	r1, r6
 8012916:	4658      	mov	r0, fp
 8012918:	f000 fd56 	bl	80133c8 <__lshift>
 801291c:	f10a 0301 	add.w	r3, sl, #1
 8012920:	9307      	str	r3, [sp, #28]
 8012922:	9b00      	ldr	r3, [sp, #0]
 8012924:	4453      	add	r3, sl
 8012926:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012928:	9b02      	ldr	r3, [sp, #8]
 801292a:	f003 0301 	and.w	r3, r3, #1
 801292e:	462f      	mov	r7, r5
 8012930:	930a      	str	r3, [sp, #40]	@ 0x28
 8012932:	4605      	mov	r5, r0
 8012934:	9b07      	ldr	r3, [sp, #28]
 8012936:	4621      	mov	r1, r4
 8012938:	3b01      	subs	r3, #1
 801293a:	4648      	mov	r0, r9
 801293c:	9300      	str	r3, [sp, #0]
 801293e:	f7ff fa99 	bl	8011e74 <quorem>
 8012942:	4639      	mov	r1, r7
 8012944:	9002      	str	r0, [sp, #8]
 8012946:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801294a:	4648      	mov	r0, r9
 801294c:	f000 fda8 	bl	80134a0 <__mcmp>
 8012950:	462a      	mov	r2, r5
 8012952:	9008      	str	r0, [sp, #32]
 8012954:	4621      	mov	r1, r4
 8012956:	4658      	mov	r0, fp
 8012958:	f000 fdbe 	bl	80134d8 <__mdiff>
 801295c:	68c2      	ldr	r2, [r0, #12]
 801295e:	4606      	mov	r6, r0
 8012960:	bb02      	cbnz	r2, 80129a4 <_dtoa_r+0xa1c>
 8012962:	4601      	mov	r1, r0
 8012964:	4648      	mov	r0, r9
 8012966:	f000 fd9b 	bl	80134a0 <__mcmp>
 801296a:	4602      	mov	r2, r0
 801296c:	4631      	mov	r1, r6
 801296e:	4658      	mov	r0, fp
 8012970:	920e      	str	r2, [sp, #56]	@ 0x38
 8012972:	f000 fb5b 	bl	801302c <_Bfree>
 8012976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012978:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801297a:	9e07      	ldr	r6, [sp, #28]
 801297c:	ea43 0102 	orr.w	r1, r3, r2
 8012980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012982:	4319      	orrs	r1, r3
 8012984:	d110      	bne.n	80129a8 <_dtoa_r+0xa20>
 8012986:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801298a:	d029      	beq.n	80129e0 <_dtoa_r+0xa58>
 801298c:	9b08      	ldr	r3, [sp, #32]
 801298e:	2b00      	cmp	r3, #0
 8012990:	dd02      	ble.n	8012998 <_dtoa_r+0xa10>
 8012992:	9b02      	ldr	r3, [sp, #8]
 8012994:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012998:	9b00      	ldr	r3, [sp, #0]
 801299a:	f883 8000 	strb.w	r8, [r3]
 801299e:	e63f      	b.n	8012620 <_dtoa_r+0x698>
 80129a0:	4628      	mov	r0, r5
 80129a2:	e7bb      	b.n	801291c <_dtoa_r+0x994>
 80129a4:	2201      	movs	r2, #1
 80129a6:	e7e1      	b.n	801296c <_dtoa_r+0x9e4>
 80129a8:	9b08      	ldr	r3, [sp, #32]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	db04      	blt.n	80129b8 <_dtoa_r+0xa30>
 80129ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80129b0:	430b      	orrs	r3, r1
 80129b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80129b4:	430b      	orrs	r3, r1
 80129b6:	d120      	bne.n	80129fa <_dtoa_r+0xa72>
 80129b8:	2a00      	cmp	r2, #0
 80129ba:	dded      	ble.n	8012998 <_dtoa_r+0xa10>
 80129bc:	4649      	mov	r1, r9
 80129be:	2201      	movs	r2, #1
 80129c0:	4658      	mov	r0, fp
 80129c2:	f000 fd01 	bl	80133c8 <__lshift>
 80129c6:	4621      	mov	r1, r4
 80129c8:	4681      	mov	r9, r0
 80129ca:	f000 fd69 	bl	80134a0 <__mcmp>
 80129ce:	2800      	cmp	r0, #0
 80129d0:	dc03      	bgt.n	80129da <_dtoa_r+0xa52>
 80129d2:	d1e1      	bne.n	8012998 <_dtoa_r+0xa10>
 80129d4:	f018 0f01 	tst.w	r8, #1
 80129d8:	d0de      	beq.n	8012998 <_dtoa_r+0xa10>
 80129da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80129de:	d1d8      	bne.n	8012992 <_dtoa_r+0xa0a>
 80129e0:	9a00      	ldr	r2, [sp, #0]
 80129e2:	2339      	movs	r3, #57	@ 0x39
 80129e4:	7013      	strb	r3, [r2, #0]
 80129e6:	4633      	mov	r3, r6
 80129e8:	461e      	mov	r6, r3
 80129ea:	3b01      	subs	r3, #1
 80129ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80129f0:	2a39      	cmp	r2, #57	@ 0x39
 80129f2:	d052      	beq.n	8012a9a <_dtoa_r+0xb12>
 80129f4:	3201      	adds	r2, #1
 80129f6:	701a      	strb	r2, [r3, #0]
 80129f8:	e612      	b.n	8012620 <_dtoa_r+0x698>
 80129fa:	2a00      	cmp	r2, #0
 80129fc:	dd07      	ble.n	8012a0e <_dtoa_r+0xa86>
 80129fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012a02:	d0ed      	beq.n	80129e0 <_dtoa_r+0xa58>
 8012a04:	9a00      	ldr	r2, [sp, #0]
 8012a06:	f108 0301 	add.w	r3, r8, #1
 8012a0a:	7013      	strb	r3, [r2, #0]
 8012a0c:	e608      	b.n	8012620 <_dtoa_r+0x698>
 8012a0e:	9b07      	ldr	r3, [sp, #28]
 8012a10:	9a07      	ldr	r2, [sp, #28]
 8012a12:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a18:	4293      	cmp	r3, r2
 8012a1a:	d028      	beq.n	8012a6e <_dtoa_r+0xae6>
 8012a1c:	4649      	mov	r1, r9
 8012a1e:	2300      	movs	r3, #0
 8012a20:	220a      	movs	r2, #10
 8012a22:	4658      	mov	r0, fp
 8012a24:	f000 fb24 	bl	8013070 <__multadd>
 8012a28:	42af      	cmp	r7, r5
 8012a2a:	4681      	mov	r9, r0
 8012a2c:	f04f 0300 	mov.w	r3, #0
 8012a30:	f04f 020a 	mov.w	r2, #10
 8012a34:	4639      	mov	r1, r7
 8012a36:	4658      	mov	r0, fp
 8012a38:	d107      	bne.n	8012a4a <_dtoa_r+0xac2>
 8012a3a:	f000 fb19 	bl	8013070 <__multadd>
 8012a3e:	4607      	mov	r7, r0
 8012a40:	4605      	mov	r5, r0
 8012a42:	9b07      	ldr	r3, [sp, #28]
 8012a44:	3301      	adds	r3, #1
 8012a46:	9307      	str	r3, [sp, #28]
 8012a48:	e774      	b.n	8012934 <_dtoa_r+0x9ac>
 8012a4a:	f000 fb11 	bl	8013070 <__multadd>
 8012a4e:	4629      	mov	r1, r5
 8012a50:	4607      	mov	r7, r0
 8012a52:	2300      	movs	r3, #0
 8012a54:	220a      	movs	r2, #10
 8012a56:	4658      	mov	r0, fp
 8012a58:	f000 fb0a 	bl	8013070 <__multadd>
 8012a5c:	4605      	mov	r5, r0
 8012a5e:	e7f0      	b.n	8012a42 <_dtoa_r+0xaba>
 8012a60:	9b00      	ldr	r3, [sp, #0]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	bfcc      	ite	gt
 8012a66:	461e      	movgt	r6, r3
 8012a68:	2601      	movle	r6, #1
 8012a6a:	4456      	add	r6, sl
 8012a6c:	2700      	movs	r7, #0
 8012a6e:	4649      	mov	r1, r9
 8012a70:	2201      	movs	r2, #1
 8012a72:	4658      	mov	r0, fp
 8012a74:	f000 fca8 	bl	80133c8 <__lshift>
 8012a78:	4621      	mov	r1, r4
 8012a7a:	4681      	mov	r9, r0
 8012a7c:	f000 fd10 	bl	80134a0 <__mcmp>
 8012a80:	2800      	cmp	r0, #0
 8012a82:	dcb0      	bgt.n	80129e6 <_dtoa_r+0xa5e>
 8012a84:	d102      	bne.n	8012a8c <_dtoa_r+0xb04>
 8012a86:	f018 0f01 	tst.w	r8, #1
 8012a8a:	d1ac      	bne.n	80129e6 <_dtoa_r+0xa5e>
 8012a8c:	4633      	mov	r3, r6
 8012a8e:	461e      	mov	r6, r3
 8012a90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012a94:	2a30      	cmp	r2, #48	@ 0x30
 8012a96:	d0fa      	beq.n	8012a8e <_dtoa_r+0xb06>
 8012a98:	e5c2      	b.n	8012620 <_dtoa_r+0x698>
 8012a9a:	459a      	cmp	sl, r3
 8012a9c:	d1a4      	bne.n	80129e8 <_dtoa_r+0xa60>
 8012a9e:	9b04      	ldr	r3, [sp, #16]
 8012aa0:	3301      	adds	r3, #1
 8012aa2:	9304      	str	r3, [sp, #16]
 8012aa4:	2331      	movs	r3, #49	@ 0x31
 8012aa6:	f88a 3000 	strb.w	r3, [sl]
 8012aaa:	e5b9      	b.n	8012620 <_dtoa_r+0x698>
 8012aac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012aae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012b0c <_dtoa_r+0xb84>
 8012ab2:	b11b      	cbz	r3, 8012abc <_dtoa_r+0xb34>
 8012ab4:	f10a 0308 	add.w	r3, sl, #8
 8012ab8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012aba:	6013      	str	r3, [r2, #0]
 8012abc:	4650      	mov	r0, sl
 8012abe:	b019      	add	sp, #100	@ 0x64
 8012ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ac6:	2b01      	cmp	r3, #1
 8012ac8:	f77f ae37 	ble.w	801273a <_dtoa_r+0x7b2>
 8012acc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ace:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ad0:	2001      	movs	r0, #1
 8012ad2:	e655      	b.n	8012780 <_dtoa_r+0x7f8>
 8012ad4:	9b00      	ldr	r3, [sp, #0]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	f77f aed6 	ble.w	8012888 <_dtoa_r+0x900>
 8012adc:	4656      	mov	r6, sl
 8012ade:	4621      	mov	r1, r4
 8012ae0:	4648      	mov	r0, r9
 8012ae2:	f7ff f9c7 	bl	8011e74 <quorem>
 8012ae6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012aea:	f806 8b01 	strb.w	r8, [r6], #1
 8012aee:	9b00      	ldr	r3, [sp, #0]
 8012af0:	eba6 020a 	sub.w	r2, r6, sl
 8012af4:	4293      	cmp	r3, r2
 8012af6:	ddb3      	ble.n	8012a60 <_dtoa_r+0xad8>
 8012af8:	4649      	mov	r1, r9
 8012afa:	2300      	movs	r3, #0
 8012afc:	220a      	movs	r2, #10
 8012afe:	4658      	mov	r0, fp
 8012b00:	f000 fab6 	bl	8013070 <__multadd>
 8012b04:	4681      	mov	r9, r0
 8012b06:	e7ea      	b.n	8012ade <_dtoa_r+0xb56>
 8012b08:	08014275 	.word	0x08014275
 8012b0c:	08014210 	.word	0x08014210

08012b10 <_free_r>:
 8012b10:	b538      	push	{r3, r4, r5, lr}
 8012b12:	4605      	mov	r5, r0
 8012b14:	2900      	cmp	r1, #0
 8012b16:	d041      	beq.n	8012b9c <_free_r+0x8c>
 8012b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b1c:	1f0c      	subs	r4, r1, #4
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	bfb8      	it	lt
 8012b22:	18e4      	addlt	r4, r4, r3
 8012b24:	f7ff f808 	bl	8011b38 <__malloc_lock>
 8012b28:	4a1d      	ldr	r2, [pc, #116]	@ (8012ba0 <_free_r+0x90>)
 8012b2a:	6813      	ldr	r3, [r2, #0]
 8012b2c:	b933      	cbnz	r3, 8012b3c <_free_r+0x2c>
 8012b2e:	6063      	str	r3, [r4, #4]
 8012b30:	6014      	str	r4, [r2, #0]
 8012b32:	4628      	mov	r0, r5
 8012b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b38:	f7ff b804 	b.w	8011b44 <__malloc_unlock>
 8012b3c:	42a3      	cmp	r3, r4
 8012b3e:	d908      	bls.n	8012b52 <_free_r+0x42>
 8012b40:	6820      	ldr	r0, [r4, #0]
 8012b42:	1821      	adds	r1, r4, r0
 8012b44:	428b      	cmp	r3, r1
 8012b46:	bf01      	itttt	eq
 8012b48:	6819      	ldreq	r1, [r3, #0]
 8012b4a:	685b      	ldreq	r3, [r3, #4]
 8012b4c:	1809      	addeq	r1, r1, r0
 8012b4e:	6021      	streq	r1, [r4, #0]
 8012b50:	e7ed      	b.n	8012b2e <_free_r+0x1e>
 8012b52:	461a      	mov	r2, r3
 8012b54:	685b      	ldr	r3, [r3, #4]
 8012b56:	b10b      	cbz	r3, 8012b5c <_free_r+0x4c>
 8012b58:	42a3      	cmp	r3, r4
 8012b5a:	d9fa      	bls.n	8012b52 <_free_r+0x42>
 8012b5c:	6811      	ldr	r1, [r2, #0]
 8012b5e:	1850      	adds	r0, r2, r1
 8012b60:	42a0      	cmp	r0, r4
 8012b62:	d10b      	bne.n	8012b7c <_free_r+0x6c>
 8012b64:	6820      	ldr	r0, [r4, #0]
 8012b66:	4401      	add	r1, r0
 8012b68:	1850      	adds	r0, r2, r1
 8012b6a:	4283      	cmp	r3, r0
 8012b6c:	6011      	str	r1, [r2, #0]
 8012b6e:	d1e0      	bne.n	8012b32 <_free_r+0x22>
 8012b70:	6818      	ldr	r0, [r3, #0]
 8012b72:	685b      	ldr	r3, [r3, #4]
 8012b74:	6053      	str	r3, [r2, #4]
 8012b76:	4408      	add	r0, r1
 8012b78:	6010      	str	r0, [r2, #0]
 8012b7a:	e7da      	b.n	8012b32 <_free_r+0x22>
 8012b7c:	d902      	bls.n	8012b84 <_free_r+0x74>
 8012b7e:	230c      	movs	r3, #12
 8012b80:	602b      	str	r3, [r5, #0]
 8012b82:	e7d6      	b.n	8012b32 <_free_r+0x22>
 8012b84:	6820      	ldr	r0, [r4, #0]
 8012b86:	1821      	adds	r1, r4, r0
 8012b88:	428b      	cmp	r3, r1
 8012b8a:	bf04      	itt	eq
 8012b8c:	6819      	ldreq	r1, [r3, #0]
 8012b8e:	685b      	ldreq	r3, [r3, #4]
 8012b90:	6063      	str	r3, [r4, #4]
 8012b92:	bf04      	itt	eq
 8012b94:	1809      	addeq	r1, r1, r0
 8012b96:	6021      	streq	r1, [r4, #0]
 8012b98:	6054      	str	r4, [r2, #4]
 8012b9a:	e7ca      	b.n	8012b32 <_free_r+0x22>
 8012b9c:	bd38      	pop	{r3, r4, r5, pc}
 8012b9e:	bf00      	nop
 8012ba0:	200015b4 	.word	0x200015b4

08012ba4 <__ssputs_r>:
 8012ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ba8:	688e      	ldr	r6, [r1, #8]
 8012baa:	461f      	mov	r7, r3
 8012bac:	42be      	cmp	r6, r7
 8012bae:	680b      	ldr	r3, [r1, #0]
 8012bb0:	4682      	mov	sl, r0
 8012bb2:	460c      	mov	r4, r1
 8012bb4:	4690      	mov	r8, r2
 8012bb6:	d82d      	bhi.n	8012c14 <__ssputs_r+0x70>
 8012bb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012bbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012bc0:	d026      	beq.n	8012c10 <__ssputs_r+0x6c>
 8012bc2:	6965      	ldr	r5, [r4, #20]
 8012bc4:	6909      	ldr	r1, [r1, #16]
 8012bc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012bca:	eba3 0901 	sub.w	r9, r3, r1
 8012bce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012bd2:	1c7b      	adds	r3, r7, #1
 8012bd4:	444b      	add	r3, r9
 8012bd6:	106d      	asrs	r5, r5, #1
 8012bd8:	429d      	cmp	r5, r3
 8012bda:	bf38      	it	cc
 8012bdc:	461d      	movcc	r5, r3
 8012bde:	0553      	lsls	r3, r2, #21
 8012be0:	d527      	bpl.n	8012c32 <__ssputs_r+0x8e>
 8012be2:	4629      	mov	r1, r5
 8012be4:	f7fe fd9a 	bl	801171c <_malloc_r>
 8012be8:	4606      	mov	r6, r0
 8012bea:	b360      	cbz	r0, 8012c46 <__ssputs_r+0xa2>
 8012bec:	6921      	ldr	r1, [r4, #16]
 8012bee:	464a      	mov	r2, r9
 8012bf0:	f7ff f914 	bl	8011e1c <memcpy>
 8012bf4:	89a3      	ldrh	r3, [r4, #12]
 8012bf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012bfe:	81a3      	strh	r3, [r4, #12]
 8012c00:	6126      	str	r6, [r4, #16]
 8012c02:	6165      	str	r5, [r4, #20]
 8012c04:	444e      	add	r6, r9
 8012c06:	eba5 0509 	sub.w	r5, r5, r9
 8012c0a:	6026      	str	r6, [r4, #0]
 8012c0c:	60a5      	str	r5, [r4, #8]
 8012c0e:	463e      	mov	r6, r7
 8012c10:	42be      	cmp	r6, r7
 8012c12:	d900      	bls.n	8012c16 <__ssputs_r+0x72>
 8012c14:	463e      	mov	r6, r7
 8012c16:	6820      	ldr	r0, [r4, #0]
 8012c18:	4632      	mov	r2, r6
 8012c1a:	4641      	mov	r1, r8
 8012c1c:	f000 fdcc 	bl	80137b8 <memmove>
 8012c20:	68a3      	ldr	r3, [r4, #8]
 8012c22:	1b9b      	subs	r3, r3, r6
 8012c24:	60a3      	str	r3, [r4, #8]
 8012c26:	6823      	ldr	r3, [r4, #0]
 8012c28:	4433      	add	r3, r6
 8012c2a:	6023      	str	r3, [r4, #0]
 8012c2c:	2000      	movs	r0, #0
 8012c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c32:	462a      	mov	r2, r5
 8012c34:	f000 fd92 	bl	801375c <_realloc_r>
 8012c38:	4606      	mov	r6, r0
 8012c3a:	2800      	cmp	r0, #0
 8012c3c:	d1e0      	bne.n	8012c00 <__ssputs_r+0x5c>
 8012c3e:	6921      	ldr	r1, [r4, #16]
 8012c40:	4650      	mov	r0, sl
 8012c42:	f7ff ff65 	bl	8012b10 <_free_r>
 8012c46:	230c      	movs	r3, #12
 8012c48:	f8ca 3000 	str.w	r3, [sl]
 8012c4c:	89a3      	ldrh	r3, [r4, #12]
 8012c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c52:	81a3      	strh	r3, [r4, #12]
 8012c54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c58:	e7e9      	b.n	8012c2e <__ssputs_r+0x8a>
	...

08012c5c <_svfiprintf_r>:
 8012c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c60:	4698      	mov	r8, r3
 8012c62:	898b      	ldrh	r3, [r1, #12]
 8012c64:	061b      	lsls	r3, r3, #24
 8012c66:	b09d      	sub	sp, #116	@ 0x74
 8012c68:	4607      	mov	r7, r0
 8012c6a:	460d      	mov	r5, r1
 8012c6c:	4614      	mov	r4, r2
 8012c6e:	d510      	bpl.n	8012c92 <_svfiprintf_r+0x36>
 8012c70:	690b      	ldr	r3, [r1, #16]
 8012c72:	b973      	cbnz	r3, 8012c92 <_svfiprintf_r+0x36>
 8012c74:	2140      	movs	r1, #64	@ 0x40
 8012c76:	f7fe fd51 	bl	801171c <_malloc_r>
 8012c7a:	6028      	str	r0, [r5, #0]
 8012c7c:	6128      	str	r0, [r5, #16]
 8012c7e:	b930      	cbnz	r0, 8012c8e <_svfiprintf_r+0x32>
 8012c80:	230c      	movs	r3, #12
 8012c82:	603b      	str	r3, [r7, #0]
 8012c84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c88:	b01d      	add	sp, #116	@ 0x74
 8012c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c8e:	2340      	movs	r3, #64	@ 0x40
 8012c90:	616b      	str	r3, [r5, #20]
 8012c92:	2300      	movs	r3, #0
 8012c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c96:	2320      	movs	r3, #32
 8012c98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ca0:	2330      	movs	r3, #48	@ 0x30
 8012ca2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012e40 <_svfiprintf_r+0x1e4>
 8012ca6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012caa:	f04f 0901 	mov.w	r9, #1
 8012cae:	4623      	mov	r3, r4
 8012cb0:	469a      	mov	sl, r3
 8012cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cb6:	b10a      	cbz	r2, 8012cbc <_svfiprintf_r+0x60>
 8012cb8:	2a25      	cmp	r2, #37	@ 0x25
 8012cba:	d1f9      	bne.n	8012cb0 <_svfiprintf_r+0x54>
 8012cbc:	ebba 0b04 	subs.w	fp, sl, r4
 8012cc0:	d00b      	beq.n	8012cda <_svfiprintf_r+0x7e>
 8012cc2:	465b      	mov	r3, fp
 8012cc4:	4622      	mov	r2, r4
 8012cc6:	4629      	mov	r1, r5
 8012cc8:	4638      	mov	r0, r7
 8012cca:	f7ff ff6b 	bl	8012ba4 <__ssputs_r>
 8012cce:	3001      	adds	r0, #1
 8012cd0:	f000 80a7 	beq.w	8012e22 <_svfiprintf_r+0x1c6>
 8012cd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012cd6:	445a      	add	r2, fp
 8012cd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8012cda:	f89a 3000 	ldrb.w	r3, [sl]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	f000 809f 	beq.w	8012e22 <_svfiprintf_r+0x1c6>
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012cee:	f10a 0a01 	add.w	sl, sl, #1
 8012cf2:	9304      	str	r3, [sp, #16]
 8012cf4:	9307      	str	r3, [sp, #28]
 8012cf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012cfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8012cfc:	4654      	mov	r4, sl
 8012cfe:	2205      	movs	r2, #5
 8012d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d04:	484e      	ldr	r0, [pc, #312]	@ (8012e40 <_svfiprintf_r+0x1e4>)
 8012d06:	f7ed fa8b 	bl	8000220 <memchr>
 8012d0a:	9a04      	ldr	r2, [sp, #16]
 8012d0c:	b9d8      	cbnz	r0, 8012d46 <_svfiprintf_r+0xea>
 8012d0e:	06d0      	lsls	r0, r2, #27
 8012d10:	bf44      	itt	mi
 8012d12:	2320      	movmi	r3, #32
 8012d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d18:	0711      	lsls	r1, r2, #28
 8012d1a:	bf44      	itt	mi
 8012d1c:	232b      	movmi	r3, #43	@ 0x2b
 8012d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d22:	f89a 3000 	ldrb.w	r3, [sl]
 8012d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d28:	d015      	beq.n	8012d56 <_svfiprintf_r+0xfa>
 8012d2a:	9a07      	ldr	r2, [sp, #28]
 8012d2c:	4654      	mov	r4, sl
 8012d2e:	2000      	movs	r0, #0
 8012d30:	f04f 0c0a 	mov.w	ip, #10
 8012d34:	4621      	mov	r1, r4
 8012d36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d3a:	3b30      	subs	r3, #48	@ 0x30
 8012d3c:	2b09      	cmp	r3, #9
 8012d3e:	d94b      	bls.n	8012dd8 <_svfiprintf_r+0x17c>
 8012d40:	b1b0      	cbz	r0, 8012d70 <_svfiprintf_r+0x114>
 8012d42:	9207      	str	r2, [sp, #28]
 8012d44:	e014      	b.n	8012d70 <_svfiprintf_r+0x114>
 8012d46:	eba0 0308 	sub.w	r3, r0, r8
 8012d4a:	fa09 f303 	lsl.w	r3, r9, r3
 8012d4e:	4313      	orrs	r3, r2
 8012d50:	9304      	str	r3, [sp, #16]
 8012d52:	46a2      	mov	sl, r4
 8012d54:	e7d2      	b.n	8012cfc <_svfiprintf_r+0xa0>
 8012d56:	9b03      	ldr	r3, [sp, #12]
 8012d58:	1d19      	adds	r1, r3, #4
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	9103      	str	r1, [sp, #12]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	bfbb      	ittet	lt
 8012d62:	425b      	neglt	r3, r3
 8012d64:	f042 0202 	orrlt.w	r2, r2, #2
 8012d68:	9307      	strge	r3, [sp, #28]
 8012d6a:	9307      	strlt	r3, [sp, #28]
 8012d6c:	bfb8      	it	lt
 8012d6e:	9204      	strlt	r2, [sp, #16]
 8012d70:	7823      	ldrb	r3, [r4, #0]
 8012d72:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d74:	d10a      	bne.n	8012d8c <_svfiprintf_r+0x130>
 8012d76:	7863      	ldrb	r3, [r4, #1]
 8012d78:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d7a:	d132      	bne.n	8012de2 <_svfiprintf_r+0x186>
 8012d7c:	9b03      	ldr	r3, [sp, #12]
 8012d7e:	1d1a      	adds	r2, r3, #4
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	9203      	str	r2, [sp, #12]
 8012d84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012d88:	3402      	adds	r4, #2
 8012d8a:	9305      	str	r3, [sp, #20]
 8012d8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012e50 <_svfiprintf_r+0x1f4>
 8012d90:	7821      	ldrb	r1, [r4, #0]
 8012d92:	2203      	movs	r2, #3
 8012d94:	4650      	mov	r0, sl
 8012d96:	f7ed fa43 	bl	8000220 <memchr>
 8012d9a:	b138      	cbz	r0, 8012dac <_svfiprintf_r+0x150>
 8012d9c:	9b04      	ldr	r3, [sp, #16]
 8012d9e:	eba0 000a 	sub.w	r0, r0, sl
 8012da2:	2240      	movs	r2, #64	@ 0x40
 8012da4:	4082      	lsls	r2, r0
 8012da6:	4313      	orrs	r3, r2
 8012da8:	3401      	adds	r4, #1
 8012daa:	9304      	str	r3, [sp, #16]
 8012dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012db0:	4824      	ldr	r0, [pc, #144]	@ (8012e44 <_svfiprintf_r+0x1e8>)
 8012db2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012db6:	2206      	movs	r2, #6
 8012db8:	f7ed fa32 	bl	8000220 <memchr>
 8012dbc:	2800      	cmp	r0, #0
 8012dbe:	d036      	beq.n	8012e2e <_svfiprintf_r+0x1d2>
 8012dc0:	4b21      	ldr	r3, [pc, #132]	@ (8012e48 <_svfiprintf_r+0x1ec>)
 8012dc2:	bb1b      	cbnz	r3, 8012e0c <_svfiprintf_r+0x1b0>
 8012dc4:	9b03      	ldr	r3, [sp, #12]
 8012dc6:	3307      	adds	r3, #7
 8012dc8:	f023 0307 	bic.w	r3, r3, #7
 8012dcc:	3308      	adds	r3, #8
 8012dce:	9303      	str	r3, [sp, #12]
 8012dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012dd2:	4433      	add	r3, r6
 8012dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012dd6:	e76a      	b.n	8012cae <_svfiprintf_r+0x52>
 8012dd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ddc:	460c      	mov	r4, r1
 8012dde:	2001      	movs	r0, #1
 8012de0:	e7a8      	b.n	8012d34 <_svfiprintf_r+0xd8>
 8012de2:	2300      	movs	r3, #0
 8012de4:	3401      	adds	r4, #1
 8012de6:	9305      	str	r3, [sp, #20]
 8012de8:	4619      	mov	r1, r3
 8012dea:	f04f 0c0a 	mov.w	ip, #10
 8012dee:	4620      	mov	r0, r4
 8012df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012df4:	3a30      	subs	r2, #48	@ 0x30
 8012df6:	2a09      	cmp	r2, #9
 8012df8:	d903      	bls.n	8012e02 <_svfiprintf_r+0x1a6>
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d0c6      	beq.n	8012d8c <_svfiprintf_r+0x130>
 8012dfe:	9105      	str	r1, [sp, #20]
 8012e00:	e7c4      	b.n	8012d8c <_svfiprintf_r+0x130>
 8012e02:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e06:	4604      	mov	r4, r0
 8012e08:	2301      	movs	r3, #1
 8012e0a:	e7f0      	b.n	8012dee <_svfiprintf_r+0x192>
 8012e0c:	ab03      	add	r3, sp, #12
 8012e0e:	9300      	str	r3, [sp, #0]
 8012e10:	462a      	mov	r2, r5
 8012e12:	4b0e      	ldr	r3, [pc, #56]	@ (8012e4c <_svfiprintf_r+0x1f0>)
 8012e14:	a904      	add	r1, sp, #16
 8012e16:	4638      	mov	r0, r7
 8012e18:	f7fe fa2c 	bl	8011274 <_printf_float>
 8012e1c:	1c42      	adds	r2, r0, #1
 8012e1e:	4606      	mov	r6, r0
 8012e20:	d1d6      	bne.n	8012dd0 <_svfiprintf_r+0x174>
 8012e22:	89ab      	ldrh	r3, [r5, #12]
 8012e24:	065b      	lsls	r3, r3, #25
 8012e26:	f53f af2d 	bmi.w	8012c84 <_svfiprintf_r+0x28>
 8012e2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012e2c:	e72c      	b.n	8012c88 <_svfiprintf_r+0x2c>
 8012e2e:	ab03      	add	r3, sp, #12
 8012e30:	9300      	str	r3, [sp, #0]
 8012e32:	462a      	mov	r2, r5
 8012e34:	4b05      	ldr	r3, [pc, #20]	@ (8012e4c <_svfiprintf_r+0x1f0>)
 8012e36:	a904      	add	r1, sp, #16
 8012e38:	4638      	mov	r0, r7
 8012e3a:	f7fe fd5d 	bl	80118f8 <_printf_i>
 8012e3e:	e7ed      	b.n	8012e1c <_svfiprintf_r+0x1c0>
 8012e40:	08014286 	.word	0x08014286
 8012e44:	08014290 	.word	0x08014290
 8012e48:	08011275 	.word	0x08011275
 8012e4c:	08012ba5 	.word	0x08012ba5
 8012e50:	0801428c 	.word	0x0801428c

08012e54 <__sflush_r>:
 8012e54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e5c:	0716      	lsls	r6, r2, #28
 8012e5e:	4605      	mov	r5, r0
 8012e60:	460c      	mov	r4, r1
 8012e62:	d454      	bmi.n	8012f0e <__sflush_r+0xba>
 8012e64:	684b      	ldr	r3, [r1, #4]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	dc02      	bgt.n	8012e70 <__sflush_r+0x1c>
 8012e6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	dd48      	ble.n	8012f02 <__sflush_r+0xae>
 8012e70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e72:	2e00      	cmp	r6, #0
 8012e74:	d045      	beq.n	8012f02 <__sflush_r+0xae>
 8012e76:	2300      	movs	r3, #0
 8012e78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012e7c:	682f      	ldr	r7, [r5, #0]
 8012e7e:	6a21      	ldr	r1, [r4, #32]
 8012e80:	602b      	str	r3, [r5, #0]
 8012e82:	d030      	beq.n	8012ee6 <__sflush_r+0x92>
 8012e84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012e86:	89a3      	ldrh	r3, [r4, #12]
 8012e88:	0759      	lsls	r1, r3, #29
 8012e8a:	d505      	bpl.n	8012e98 <__sflush_r+0x44>
 8012e8c:	6863      	ldr	r3, [r4, #4]
 8012e8e:	1ad2      	subs	r2, r2, r3
 8012e90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012e92:	b10b      	cbz	r3, 8012e98 <__sflush_r+0x44>
 8012e94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012e96:	1ad2      	subs	r2, r2, r3
 8012e98:	2300      	movs	r3, #0
 8012e9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e9c:	6a21      	ldr	r1, [r4, #32]
 8012e9e:	4628      	mov	r0, r5
 8012ea0:	47b0      	blx	r6
 8012ea2:	1c43      	adds	r3, r0, #1
 8012ea4:	89a3      	ldrh	r3, [r4, #12]
 8012ea6:	d106      	bne.n	8012eb6 <__sflush_r+0x62>
 8012ea8:	6829      	ldr	r1, [r5, #0]
 8012eaa:	291d      	cmp	r1, #29
 8012eac:	d82b      	bhi.n	8012f06 <__sflush_r+0xb2>
 8012eae:	4a2a      	ldr	r2, [pc, #168]	@ (8012f58 <__sflush_r+0x104>)
 8012eb0:	410a      	asrs	r2, r1
 8012eb2:	07d6      	lsls	r6, r2, #31
 8012eb4:	d427      	bmi.n	8012f06 <__sflush_r+0xb2>
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	6062      	str	r2, [r4, #4]
 8012eba:	04d9      	lsls	r1, r3, #19
 8012ebc:	6922      	ldr	r2, [r4, #16]
 8012ebe:	6022      	str	r2, [r4, #0]
 8012ec0:	d504      	bpl.n	8012ecc <__sflush_r+0x78>
 8012ec2:	1c42      	adds	r2, r0, #1
 8012ec4:	d101      	bne.n	8012eca <__sflush_r+0x76>
 8012ec6:	682b      	ldr	r3, [r5, #0]
 8012ec8:	b903      	cbnz	r3, 8012ecc <__sflush_r+0x78>
 8012eca:	6560      	str	r0, [r4, #84]	@ 0x54
 8012ecc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012ece:	602f      	str	r7, [r5, #0]
 8012ed0:	b1b9      	cbz	r1, 8012f02 <__sflush_r+0xae>
 8012ed2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012ed6:	4299      	cmp	r1, r3
 8012ed8:	d002      	beq.n	8012ee0 <__sflush_r+0x8c>
 8012eda:	4628      	mov	r0, r5
 8012edc:	f7ff fe18 	bl	8012b10 <_free_r>
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	6363      	str	r3, [r4, #52]	@ 0x34
 8012ee4:	e00d      	b.n	8012f02 <__sflush_r+0xae>
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	4628      	mov	r0, r5
 8012eea:	47b0      	blx	r6
 8012eec:	4602      	mov	r2, r0
 8012eee:	1c50      	adds	r0, r2, #1
 8012ef0:	d1c9      	bne.n	8012e86 <__sflush_r+0x32>
 8012ef2:	682b      	ldr	r3, [r5, #0]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d0c6      	beq.n	8012e86 <__sflush_r+0x32>
 8012ef8:	2b1d      	cmp	r3, #29
 8012efa:	d001      	beq.n	8012f00 <__sflush_r+0xac>
 8012efc:	2b16      	cmp	r3, #22
 8012efe:	d11e      	bne.n	8012f3e <__sflush_r+0xea>
 8012f00:	602f      	str	r7, [r5, #0]
 8012f02:	2000      	movs	r0, #0
 8012f04:	e022      	b.n	8012f4c <__sflush_r+0xf8>
 8012f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f0a:	b21b      	sxth	r3, r3
 8012f0c:	e01b      	b.n	8012f46 <__sflush_r+0xf2>
 8012f0e:	690f      	ldr	r7, [r1, #16]
 8012f10:	2f00      	cmp	r7, #0
 8012f12:	d0f6      	beq.n	8012f02 <__sflush_r+0xae>
 8012f14:	0793      	lsls	r3, r2, #30
 8012f16:	680e      	ldr	r6, [r1, #0]
 8012f18:	bf08      	it	eq
 8012f1a:	694b      	ldreq	r3, [r1, #20]
 8012f1c:	600f      	str	r7, [r1, #0]
 8012f1e:	bf18      	it	ne
 8012f20:	2300      	movne	r3, #0
 8012f22:	eba6 0807 	sub.w	r8, r6, r7
 8012f26:	608b      	str	r3, [r1, #8]
 8012f28:	f1b8 0f00 	cmp.w	r8, #0
 8012f2c:	dde9      	ble.n	8012f02 <__sflush_r+0xae>
 8012f2e:	6a21      	ldr	r1, [r4, #32]
 8012f30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012f32:	4643      	mov	r3, r8
 8012f34:	463a      	mov	r2, r7
 8012f36:	4628      	mov	r0, r5
 8012f38:	47b0      	blx	r6
 8012f3a:	2800      	cmp	r0, #0
 8012f3c:	dc08      	bgt.n	8012f50 <__sflush_r+0xfc>
 8012f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f46:	81a3      	strh	r3, [r4, #12]
 8012f48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f50:	4407      	add	r7, r0
 8012f52:	eba8 0800 	sub.w	r8, r8, r0
 8012f56:	e7e7      	b.n	8012f28 <__sflush_r+0xd4>
 8012f58:	dfbffffe 	.word	0xdfbffffe

08012f5c <_fflush_r>:
 8012f5c:	b538      	push	{r3, r4, r5, lr}
 8012f5e:	690b      	ldr	r3, [r1, #16]
 8012f60:	4605      	mov	r5, r0
 8012f62:	460c      	mov	r4, r1
 8012f64:	b913      	cbnz	r3, 8012f6c <_fflush_r+0x10>
 8012f66:	2500      	movs	r5, #0
 8012f68:	4628      	mov	r0, r5
 8012f6a:	bd38      	pop	{r3, r4, r5, pc}
 8012f6c:	b118      	cbz	r0, 8012f76 <_fflush_r+0x1a>
 8012f6e:	6a03      	ldr	r3, [r0, #32]
 8012f70:	b90b      	cbnz	r3, 8012f76 <_fflush_r+0x1a>
 8012f72:	f7fe fed7 	bl	8011d24 <__sinit>
 8012f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d0f3      	beq.n	8012f66 <_fflush_r+0xa>
 8012f7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012f80:	07d0      	lsls	r0, r2, #31
 8012f82:	d404      	bmi.n	8012f8e <_fflush_r+0x32>
 8012f84:	0599      	lsls	r1, r3, #22
 8012f86:	d402      	bmi.n	8012f8e <_fflush_r+0x32>
 8012f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f8a:	f7f0 f804 	bl	8002f96 <__retarget_lock_acquire_recursive>
 8012f8e:	4628      	mov	r0, r5
 8012f90:	4621      	mov	r1, r4
 8012f92:	f7ff ff5f 	bl	8012e54 <__sflush_r>
 8012f96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012f98:	07da      	lsls	r2, r3, #31
 8012f9a:	4605      	mov	r5, r0
 8012f9c:	d4e4      	bmi.n	8012f68 <_fflush_r+0xc>
 8012f9e:	89a3      	ldrh	r3, [r4, #12]
 8012fa0:	059b      	lsls	r3, r3, #22
 8012fa2:	d4e1      	bmi.n	8012f68 <_fflush_r+0xc>
 8012fa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012fa6:	f7f0 f80b 	bl	8002fc0 <__retarget_lock_release_recursive>
 8012faa:	e7dd      	b.n	8012f68 <_fflush_r+0xc>

08012fac <_Balloc>:
 8012fac:	b570      	push	{r4, r5, r6, lr}
 8012fae:	69c6      	ldr	r6, [r0, #28]
 8012fb0:	4604      	mov	r4, r0
 8012fb2:	460d      	mov	r5, r1
 8012fb4:	b976      	cbnz	r6, 8012fd4 <_Balloc+0x28>
 8012fb6:	2010      	movs	r0, #16
 8012fb8:	f7fe fb86 	bl	80116c8 <malloc>
 8012fbc:	4602      	mov	r2, r0
 8012fbe:	61e0      	str	r0, [r4, #28]
 8012fc0:	b920      	cbnz	r0, 8012fcc <_Balloc+0x20>
 8012fc2:	4b18      	ldr	r3, [pc, #96]	@ (8013024 <_Balloc+0x78>)
 8012fc4:	4818      	ldr	r0, [pc, #96]	@ (8013028 <_Balloc+0x7c>)
 8012fc6:	216b      	movs	r1, #107	@ 0x6b
 8012fc8:	f7fe ff36 	bl	8011e38 <__assert_func>
 8012fcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012fd0:	6006      	str	r6, [r0, #0]
 8012fd2:	60c6      	str	r6, [r0, #12]
 8012fd4:	69e6      	ldr	r6, [r4, #28]
 8012fd6:	68f3      	ldr	r3, [r6, #12]
 8012fd8:	b183      	cbz	r3, 8012ffc <_Balloc+0x50>
 8012fda:	69e3      	ldr	r3, [r4, #28]
 8012fdc:	68db      	ldr	r3, [r3, #12]
 8012fde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012fe2:	b9b8      	cbnz	r0, 8013014 <_Balloc+0x68>
 8012fe4:	2101      	movs	r1, #1
 8012fe6:	fa01 f605 	lsl.w	r6, r1, r5
 8012fea:	1d72      	adds	r2, r6, #5
 8012fec:	0092      	lsls	r2, r2, #2
 8012fee:	4620      	mov	r0, r4
 8012ff0:	f000 fc49 	bl	8013886 <_calloc_r>
 8012ff4:	b160      	cbz	r0, 8013010 <_Balloc+0x64>
 8012ff6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012ffa:	e00e      	b.n	801301a <_Balloc+0x6e>
 8012ffc:	2221      	movs	r2, #33	@ 0x21
 8012ffe:	2104      	movs	r1, #4
 8013000:	4620      	mov	r0, r4
 8013002:	f000 fc40 	bl	8013886 <_calloc_r>
 8013006:	69e3      	ldr	r3, [r4, #28]
 8013008:	60f0      	str	r0, [r6, #12]
 801300a:	68db      	ldr	r3, [r3, #12]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d1e4      	bne.n	8012fda <_Balloc+0x2e>
 8013010:	2000      	movs	r0, #0
 8013012:	bd70      	pop	{r4, r5, r6, pc}
 8013014:	6802      	ldr	r2, [r0, #0]
 8013016:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801301a:	2300      	movs	r3, #0
 801301c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013020:	e7f7      	b.n	8013012 <_Balloc+0x66>
 8013022:	bf00      	nop
 8013024:	08014064 	.word	0x08014064
 8013028:	08014297 	.word	0x08014297

0801302c <_Bfree>:
 801302c:	b570      	push	{r4, r5, r6, lr}
 801302e:	69c6      	ldr	r6, [r0, #28]
 8013030:	4605      	mov	r5, r0
 8013032:	460c      	mov	r4, r1
 8013034:	b976      	cbnz	r6, 8013054 <_Bfree+0x28>
 8013036:	2010      	movs	r0, #16
 8013038:	f7fe fb46 	bl	80116c8 <malloc>
 801303c:	4602      	mov	r2, r0
 801303e:	61e8      	str	r0, [r5, #28]
 8013040:	b920      	cbnz	r0, 801304c <_Bfree+0x20>
 8013042:	4b09      	ldr	r3, [pc, #36]	@ (8013068 <_Bfree+0x3c>)
 8013044:	4809      	ldr	r0, [pc, #36]	@ (801306c <_Bfree+0x40>)
 8013046:	218f      	movs	r1, #143	@ 0x8f
 8013048:	f7fe fef6 	bl	8011e38 <__assert_func>
 801304c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013050:	6006      	str	r6, [r0, #0]
 8013052:	60c6      	str	r6, [r0, #12]
 8013054:	b13c      	cbz	r4, 8013066 <_Bfree+0x3a>
 8013056:	69eb      	ldr	r3, [r5, #28]
 8013058:	6862      	ldr	r2, [r4, #4]
 801305a:	68db      	ldr	r3, [r3, #12]
 801305c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013060:	6021      	str	r1, [r4, #0]
 8013062:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013066:	bd70      	pop	{r4, r5, r6, pc}
 8013068:	08014064 	.word	0x08014064
 801306c:	08014297 	.word	0x08014297

08013070 <__multadd>:
 8013070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013074:	690d      	ldr	r5, [r1, #16]
 8013076:	4607      	mov	r7, r0
 8013078:	460c      	mov	r4, r1
 801307a:	461e      	mov	r6, r3
 801307c:	f101 0c14 	add.w	ip, r1, #20
 8013080:	2000      	movs	r0, #0
 8013082:	f8dc 3000 	ldr.w	r3, [ip]
 8013086:	b299      	uxth	r1, r3
 8013088:	fb02 6101 	mla	r1, r2, r1, r6
 801308c:	0c1e      	lsrs	r6, r3, #16
 801308e:	0c0b      	lsrs	r3, r1, #16
 8013090:	fb02 3306 	mla	r3, r2, r6, r3
 8013094:	b289      	uxth	r1, r1
 8013096:	3001      	adds	r0, #1
 8013098:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801309c:	4285      	cmp	r5, r0
 801309e:	f84c 1b04 	str.w	r1, [ip], #4
 80130a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80130a6:	dcec      	bgt.n	8013082 <__multadd+0x12>
 80130a8:	b30e      	cbz	r6, 80130ee <__multadd+0x7e>
 80130aa:	68a3      	ldr	r3, [r4, #8]
 80130ac:	42ab      	cmp	r3, r5
 80130ae:	dc19      	bgt.n	80130e4 <__multadd+0x74>
 80130b0:	6861      	ldr	r1, [r4, #4]
 80130b2:	4638      	mov	r0, r7
 80130b4:	3101      	adds	r1, #1
 80130b6:	f7ff ff79 	bl	8012fac <_Balloc>
 80130ba:	4680      	mov	r8, r0
 80130bc:	b928      	cbnz	r0, 80130ca <__multadd+0x5a>
 80130be:	4602      	mov	r2, r0
 80130c0:	4b0c      	ldr	r3, [pc, #48]	@ (80130f4 <__multadd+0x84>)
 80130c2:	480d      	ldr	r0, [pc, #52]	@ (80130f8 <__multadd+0x88>)
 80130c4:	21ba      	movs	r1, #186	@ 0xba
 80130c6:	f7fe feb7 	bl	8011e38 <__assert_func>
 80130ca:	6922      	ldr	r2, [r4, #16]
 80130cc:	3202      	adds	r2, #2
 80130ce:	f104 010c 	add.w	r1, r4, #12
 80130d2:	0092      	lsls	r2, r2, #2
 80130d4:	300c      	adds	r0, #12
 80130d6:	f7fe fea1 	bl	8011e1c <memcpy>
 80130da:	4621      	mov	r1, r4
 80130dc:	4638      	mov	r0, r7
 80130de:	f7ff ffa5 	bl	801302c <_Bfree>
 80130e2:	4644      	mov	r4, r8
 80130e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80130e8:	3501      	adds	r5, #1
 80130ea:	615e      	str	r6, [r3, #20]
 80130ec:	6125      	str	r5, [r4, #16]
 80130ee:	4620      	mov	r0, r4
 80130f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130f4:	08014275 	.word	0x08014275
 80130f8:	08014297 	.word	0x08014297

080130fc <__hi0bits>:
 80130fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013100:	4603      	mov	r3, r0
 8013102:	bf36      	itet	cc
 8013104:	0403      	lslcc	r3, r0, #16
 8013106:	2000      	movcs	r0, #0
 8013108:	2010      	movcc	r0, #16
 801310a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801310e:	bf3c      	itt	cc
 8013110:	021b      	lslcc	r3, r3, #8
 8013112:	3008      	addcc	r0, #8
 8013114:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013118:	bf3c      	itt	cc
 801311a:	011b      	lslcc	r3, r3, #4
 801311c:	3004      	addcc	r0, #4
 801311e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013122:	bf3c      	itt	cc
 8013124:	009b      	lslcc	r3, r3, #2
 8013126:	3002      	addcc	r0, #2
 8013128:	2b00      	cmp	r3, #0
 801312a:	db05      	blt.n	8013138 <__hi0bits+0x3c>
 801312c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013130:	f100 0001 	add.w	r0, r0, #1
 8013134:	bf08      	it	eq
 8013136:	2020      	moveq	r0, #32
 8013138:	4770      	bx	lr

0801313a <__lo0bits>:
 801313a:	6803      	ldr	r3, [r0, #0]
 801313c:	4602      	mov	r2, r0
 801313e:	f013 0007 	ands.w	r0, r3, #7
 8013142:	d00b      	beq.n	801315c <__lo0bits+0x22>
 8013144:	07d9      	lsls	r1, r3, #31
 8013146:	d421      	bmi.n	801318c <__lo0bits+0x52>
 8013148:	0798      	lsls	r0, r3, #30
 801314a:	bf49      	itett	mi
 801314c:	085b      	lsrmi	r3, r3, #1
 801314e:	089b      	lsrpl	r3, r3, #2
 8013150:	2001      	movmi	r0, #1
 8013152:	6013      	strmi	r3, [r2, #0]
 8013154:	bf5c      	itt	pl
 8013156:	6013      	strpl	r3, [r2, #0]
 8013158:	2002      	movpl	r0, #2
 801315a:	4770      	bx	lr
 801315c:	b299      	uxth	r1, r3
 801315e:	b909      	cbnz	r1, 8013164 <__lo0bits+0x2a>
 8013160:	0c1b      	lsrs	r3, r3, #16
 8013162:	2010      	movs	r0, #16
 8013164:	b2d9      	uxtb	r1, r3
 8013166:	b909      	cbnz	r1, 801316c <__lo0bits+0x32>
 8013168:	3008      	adds	r0, #8
 801316a:	0a1b      	lsrs	r3, r3, #8
 801316c:	0719      	lsls	r1, r3, #28
 801316e:	bf04      	itt	eq
 8013170:	091b      	lsreq	r3, r3, #4
 8013172:	3004      	addeq	r0, #4
 8013174:	0799      	lsls	r1, r3, #30
 8013176:	bf04      	itt	eq
 8013178:	089b      	lsreq	r3, r3, #2
 801317a:	3002      	addeq	r0, #2
 801317c:	07d9      	lsls	r1, r3, #31
 801317e:	d403      	bmi.n	8013188 <__lo0bits+0x4e>
 8013180:	085b      	lsrs	r3, r3, #1
 8013182:	f100 0001 	add.w	r0, r0, #1
 8013186:	d003      	beq.n	8013190 <__lo0bits+0x56>
 8013188:	6013      	str	r3, [r2, #0]
 801318a:	4770      	bx	lr
 801318c:	2000      	movs	r0, #0
 801318e:	4770      	bx	lr
 8013190:	2020      	movs	r0, #32
 8013192:	4770      	bx	lr

08013194 <__i2b>:
 8013194:	b510      	push	{r4, lr}
 8013196:	460c      	mov	r4, r1
 8013198:	2101      	movs	r1, #1
 801319a:	f7ff ff07 	bl	8012fac <_Balloc>
 801319e:	4602      	mov	r2, r0
 80131a0:	b928      	cbnz	r0, 80131ae <__i2b+0x1a>
 80131a2:	4b05      	ldr	r3, [pc, #20]	@ (80131b8 <__i2b+0x24>)
 80131a4:	4805      	ldr	r0, [pc, #20]	@ (80131bc <__i2b+0x28>)
 80131a6:	f240 1145 	movw	r1, #325	@ 0x145
 80131aa:	f7fe fe45 	bl	8011e38 <__assert_func>
 80131ae:	2301      	movs	r3, #1
 80131b0:	6144      	str	r4, [r0, #20]
 80131b2:	6103      	str	r3, [r0, #16]
 80131b4:	bd10      	pop	{r4, pc}
 80131b6:	bf00      	nop
 80131b8:	08014275 	.word	0x08014275
 80131bc:	08014297 	.word	0x08014297

080131c0 <__multiply>:
 80131c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c4:	4614      	mov	r4, r2
 80131c6:	690a      	ldr	r2, [r1, #16]
 80131c8:	6923      	ldr	r3, [r4, #16]
 80131ca:	429a      	cmp	r2, r3
 80131cc:	bfa8      	it	ge
 80131ce:	4623      	movge	r3, r4
 80131d0:	460f      	mov	r7, r1
 80131d2:	bfa4      	itt	ge
 80131d4:	460c      	movge	r4, r1
 80131d6:	461f      	movge	r7, r3
 80131d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80131dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80131e0:	68a3      	ldr	r3, [r4, #8]
 80131e2:	6861      	ldr	r1, [r4, #4]
 80131e4:	eb0a 0609 	add.w	r6, sl, r9
 80131e8:	42b3      	cmp	r3, r6
 80131ea:	b085      	sub	sp, #20
 80131ec:	bfb8      	it	lt
 80131ee:	3101      	addlt	r1, #1
 80131f0:	f7ff fedc 	bl	8012fac <_Balloc>
 80131f4:	b930      	cbnz	r0, 8013204 <__multiply+0x44>
 80131f6:	4602      	mov	r2, r0
 80131f8:	4b44      	ldr	r3, [pc, #272]	@ (801330c <__multiply+0x14c>)
 80131fa:	4845      	ldr	r0, [pc, #276]	@ (8013310 <__multiply+0x150>)
 80131fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013200:	f7fe fe1a 	bl	8011e38 <__assert_func>
 8013204:	f100 0514 	add.w	r5, r0, #20
 8013208:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801320c:	462b      	mov	r3, r5
 801320e:	2200      	movs	r2, #0
 8013210:	4543      	cmp	r3, r8
 8013212:	d321      	bcc.n	8013258 <__multiply+0x98>
 8013214:	f107 0114 	add.w	r1, r7, #20
 8013218:	f104 0214 	add.w	r2, r4, #20
 801321c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013220:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013224:	9302      	str	r3, [sp, #8]
 8013226:	1b13      	subs	r3, r2, r4
 8013228:	3b15      	subs	r3, #21
 801322a:	f023 0303 	bic.w	r3, r3, #3
 801322e:	3304      	adds	r3, #4
 8013230:	f104 0715 	add.w	r7, r4, #21
 8013234:	42ba      	cmp	r2, r7
 8013236:	bf38      	it	cc
 8013238:	2304      	movcc	r3, #4
 801323a:	9301      	str	r3, [sp, #4]
 801323c:	9b02      	ldr	r3, [sp, #8]
 801323e:	9103      	str	r1, [sp, #12]
 8013240:	428b      	cmp	r3, r1
 8013242:	d80c      	bhi.n	801325e <__multiply+0x9e>
 8013244:	2e00      	cmp	r6, #0
 8013246:	dd03      	ble.n	8013250 <__multiply+0x90>
 8013248:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801324c:	2b00      	cmp	r3, #0
 801324e:	d05b      	beq.n	8013308 <__multiply+0x148>
 8013250:	6106      	str	r6, [r0, #16]
 8013252:	b005      	add	sp, #20
 8013254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013258:	f843 2b04 	str.w	r2, [r3], #4
 801325c:	e7d8      	b.n	8013210 <__multiply+0x50>
 801325e:	f8b1 a000 	ldrh.w	sl, [r1]
 8013262:	f1ba 0f00 	cmp.w	sl, #0
 8013266:	d024      	beq.n	80132b2 <__multiply+0xf2>
 8013268:	f104 0e14 	add.w	lr, r4, #20
 801326c:	46a9      	mov	r9, r5
 801326e:	f04f 0c00 	mov.w	ip, #0
 8013272:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013276:	f8d9 3000 	ldr.w	r3, [r9]
 801327a:	fa1f fb87 	uxth.w	fp, r7
 801327e:	b29b      	uxth	r3, r3
 8013280:	fb0a 330b 	mla	r3, sl, fp, r3
 8013284:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013288:	f8d9 7000 	ldr.w	r7, [r9]
 801328c:	4463      	add	r3, ip
 801328e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013292:	fb0a c70b 	mla	r7, sl, fp, ip
 8013296:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801329a:	b29b      	uxth	r3, r3
 801329c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80132a0:	4572      	cmp	r2, lr
 80132a2:	f849 3b04 	str.w	r3, [r9], #4
 80132a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80132aa:	d8e2      	bhi.n	8013272 <__multiply+0xb2>
 80132ac:	9b01      	ldr	r3, [sp, #4]
 80132ae:	f845 c003 	str.w	ip, [r5, r3]
 80132b2:	9b03      	ldr	r3, [sp, #12]
 80132b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80132b8:	3104      	adds	r1, #4
 80132ba:	f1b9 0f00 	cmp.w	r9, #0
 80132be:	d021      	beq.n	8013304 <__multiply+0x144>
 80132c0:	682b      	ldr	r3, [r5, #0]
 80132c2:	f104 0c14 	add.w	ip, r4, #20
 80132c6:	46ae      	mov	lr, r5
 80132c8:	f04f 0a00 	mov.w	sl, #0
 80132cc:	f8bc b000 	ldrh.w	fp, [ip]
 80132d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80132d4:	fb09 770b 	mla	r7, r9, fp, r7
 80132d8:	4457      	add	r7, sl
 80132da:	b29b      	uxth	r3, r3
 80132dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80132e0:	f84e 3b04 	str.w	r3, [lr], #4
 80132e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80132e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80132ec:	f8be 3000 	ldrh.w	r3, [lr]
 80132f0:	fb09 330a 	mla	r3, r9, sl, r3
 80132f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80132f8:	4562      	cmp	r2, ip
 80132fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80132fe:	d8e5      	bhi.n	80132cc <__multiply+0x10c>
 8013300:	9f01      	ldr	r7, [sp, #4]
 8013302:	51eb      	str	r3, [r5, r7]
 8013304:	3504      	adds	r5, #4
 8013306:	e799      	b.n	801323c <__multiply+0x7c>
 8013308:	3e01      	subs	r6, #1
 801330a:	e79b      	b.n	8013244 <__multiply+0x84>
 801330c:	08014275 	.word	0x08014275
 8013310:	08014297 	.word	0x08014297

08013314 <__pow5mult>:
 8013314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013318:	4615      	mov	r5, r2
 801331a:	f012 0203 	ands.w	r2, r2, #3
 801331e:	4607      	mov	r7, r0
 8013320:	460e      	mov	r6, r1
 8013322:	d007      	beq.n	8013334 <__pow5mult+0x20>
 8013324:	4c25      	ldr	r4, [pc, #148]	@ (80133bc <__pow5mult+0xa8>)
 8013326:	3a01      	subs	r2, #1
 8013328:	2300      	movs	r3, #0
 801332a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801332e:	f7ff fe9f 	bl	8013070 <__multadd>
 8013332:	4606      	mov	r6, r0
 8013334:	10ad      	asrs	r5, r5, #2
 8013336:	d03d      	beq.n	80133b4 <__pow5mult+0xa0>
 8013338:	69fc      	ldr	r4, [r7, #28]
 801333a:	b97c      	cbnz	r4, 801335c <__pow5mult+0x48>
 801333c:	2010      	movs	r0, #16
 801333e:	f7fe f9c3 	bl	80116c8 <malloc>
 8013342:	4602      	mov	r2, r0
 8013344:	61f8      	str	r0, [r7, #28]
 8013346:	b928      	cbnz	r0, 8013354 <__pow5mult+0x40>
 8013348:	4b1d      	ldr	r3, [pc, #116]	@ (80133c0 <__pow5mult+0xac>)
 801334a:	481e      	ldr	r0, [pc, #120]	@ (80133c4 <__pow5mult+0xb0>)
 801334c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013350:	f7fe fd72 	bl	8011e38 <__assert_func>
 8013354:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013358:	6004      	str	r4, [r0, #0]
 801335a:	60c4      	str	r4, [r0, #12]
 801335c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013360:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013364:	b94c      	cbnz	r4, 801337a <__pow5mult+0x66>
 8013366:	f240 2171 	movw	r1, #625	@ 0x271
 801336a:	4638      	mov	r0, r7
 801336c:	f7ff ff12 	bl	8013194 <__i2b>
 8013370:	2300      	movs	r3, #0
 8013372:	f8c8 0008 	str.w	r0, [r8, #8]
 8013376:	4604      	mov	r4, r0
 8013378:	6003      	str	r3, [r0, #0]
 801337a:	f04f 0900 	mov.w	r9, #0
 801337e:	07eb      	lsls	r3, r5, #31
 8013380:	d50a      	bpl.n	8013398 <__pow5mult+0x84>
 8013382:	4631      	mov	r1, r6
 8013384:	4622      	mov	r2, r4
 8013386:	4638      	mov	r0, r7
 8013388:	f7ff ff1a 	bl	80131c0 <__multiply>
 801338c:	4631      	mov	r1, r6
 801338e:	4680      	mov	r8, r0
 8013390:	4638      	mov	r0, r7
 8013392:	f7ff fe4b 	bl	801302c <_Bfree>
 8013396:	4646      	mov	r6, r8
 8013398:	106d      	asrs	r5, r5, #1
 801339a:	d00b      	beq.n	80133b4 <__pow5mult+0xa0>
 801339c:	6820      	ldr	r0, [r4, #0]
 801339e:	b938      	cbnz	r0, 80133b0 <__pow5mult+0x9c>
 80133a0:	4622      	mov	r2, r4
 80133a2:	4621      	mov	r1, r4
 80133a4:	4638      	mov	r0, r7
 80133a6:	f7ff ff0b 	bl	80131c0 <__multiply>
 80133aa:	6020      	str	r0, [r4, #0]
 80133ac:	f8c0 9000 	str.w	r9, [r0]
 80133b0:	4604      	mov	r4, r0
 80133b2:	e7e4      	b.n	801337e <__pow5mult+0x6a>
 80133b4:	4630      	mov	r0, r6
 80133b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133ba:	bf00      	nop
 80133bc:	080142f0 	.word	0x080142f0
 80133c0:	08014064 	.word	0x08014064
 80133c4:	08014297 	.word	0x08014297

080133c8 <__lshift>:
 80133c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133cc:	460c      	mov	r4, r1
 80133ce:	6849      	ldr	r1, [r1, #4]
 80133d0:	6923      	ldr	r3, [r4, #16]
 80133d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80133d6:	68a3      	ldr	r3, [r4, #8]
 80133d8:	4607      	mov	r7, r0
 80133da:	4691      	mov	r9, r2
 80133dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80133e0:	f108 0601 	add.w	r6, r8, #1
 80133e4:	42b3      	cmp	r3, r6
 80133e6:	db0b      	blt.n	8013400 <__lshift+0x38>
 80133e8:	4638      	mov	r0, r7
 80133ea:	f7ff fddf 	bl	8012fac <_Balloc>
 80133ee:	4605      	mov	r5, r0
 80133f0:	b948      	cbnz	r0, 8013406 <__lshift+0x3e>
 80133f2:	4602      	mov	r2, r0
 80133f4:	4b28      	ldr	r3, [pc, #160]	@ (8013498 <__lshift+0xd0>)
 80133f6:	4829      	ldr	r0, [pc, #164]	@ (801349c <__lshift+0xd4>)
 80133f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80133fc:	f7fe fd1c 	bl	8011e38 <__assert_func>
 8013400:	3101      	adds	r1, #1
 8013402:	005b      	lsls	r3, r3, #1
 8013404:	e7ee      	b.n	80133e4 <__lshift+0x1c>
 8013406:	2300      	movs	r3, #0
 8013408:	f100 0114 	add.w	r1, r0, #20
 801340c:	f100 0210 	add.w	r2, r0, #16
 8013410:	4618      	mov	r0, r3
 8013412:	4553      	cmp	r3, sl
 8013414:	db33      	blt.n	801347e <__lshift+0xb6>
 8013416:	6920      	ldr	r0, [r4, #16]
 8013418:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801341c:	f104 0314 	add.w	r3, r4, #20
 8013420:	f019 091f 	ands.w	r9, r9, #31
 8013424:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013428:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801342c:	d02b      	beq.n	8013486 <__lshift+0xbe>
 801342e:	f1c9 0e20 	rsb	lr, r9, #32
 8013432:	468a      	mov	sl, r1
 8013434:	2200      	movs	r2, #0
 8013436:	6818      	ldr	r0, [r3, #0]
 8013438:	fa00 f009 	lsl.w	r0, r0, r9
 801343c:	4310      	orrs	r0, r2
 801343e:	f84a 0b04 	str.w	r0, [sl], #4
 8013442:	f853 2b04 	ldr.w	r2, [r3], #4
 8013446:	459c      	cmp	ip, r3
 8013448:	fa22 f20e 	lsr.w	r2, r2, lr
 801344c:	d8f3      	bhi.n	8013436 <__lshift+0x6e>
 801344e:	ebac 0304 	sub.w	r3, ip, r4
 8013452:	3b15      	subs	r3, #21
 8013454:	f023 0303 	bic.w	r3, r3, #3
 8013458:	3304      	adds	r3, #4
 801345a:	f104 0015 	add.w	r0, r4, #21
 801345e:	4584      	cmp	ip, r0
 8013460:	bf38      	it	cc
 8013462:	2304      	movcc	r3, #4
 8013464:	50ca      	str	r2, [r1, r3]
 8013466:	b10a      	cbz	r2, 801346c <__lshift+0xa4>
 8013468:	f108 0602 	add.w	r6, r8, #2
 801346c:	3e01      	subs	r6, #1
 801346e:	4638      	mov	r0, r7
 8013470:	612e      	str	r6, [r5, #16]
 8013472:	4621      	mov	r1, r4
 8013474:	f7ff fdda 	bl	801302c <_Bfree>
 8013478:	4628      	mov	r0, r5
 801347a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801347e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013482:	3301      	adds	r3, #1
 8013484:	e7c5      	b.n	8013412 <__lshift+0x4a>
 8013486:	3904      	subs	r1, #4
 8013488:	f853 2b04 	ldr.w	r2, [r3], #4
 801348c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013490:	459c      	cmp	ip, r3
 8013492:	d8f9      	bhi.n	8013488 <__lshift+0xc0>
 8013494:	e7ea      	b.n	801346c <__lshift+0xa4>
 8013496:	bf00      	nop
 8013498:	08014275 	.word	0x08014275
 801349c:	08014297 	.word	0x08014297

080134a0 <__mcmp>:
 80134a0:	690a      	ldr	r2, [r1, #16]
 80134a2:	4603      	mov	r3, r0
 80134a4:	6900      	ldr	r0, [r0, #16]
 80134a6:	1a80      	subs	r0, r0, r2
 80134a8:	b530      	push	{r4, r5, lr}
 80134aa:	d10e      	bne.n	80134ca <__mcmp+0x2a>
 80134ac:	3314      	adds	r3, #20
 80134ae:	3114      	adds	r1, #20
 80134b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80134b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80134b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80134bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80134c0:	4295      	cmp	r5, r2
 80134c2:	d003      	beq.n	80134cc <__mcmp+0x2c>
 80134c4:	d205      	bcs.n	80134d2 <__mcmp+0x32>
 80134c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80134ca:	bd30      	pop	{r4, r5, pc}
 80134cc:	42a3      	cmp	r3, r4
 80134ce:	d3f3      	bcc.n	80134b8 <__mcmp+0x18>
 80134d0:	e7fb      	b.n	80134ca <__mcmp+0x2a>
 80134d2:	2001      	movs	r0, #1
 80134d4:	e7f9      	b.n	80134ca <__mcmp+0x2a>
	...

080134d8 <__mdiff>:
 80134d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134dc:	4689      	mov	r9, r1
 80134de:	4606      	mov	r6, r0
 80134e0:	4611      	mov	r1, r2
 80134e2:	4648      	mov	r0, r9
 80134e4:	4614      	mov	r4, r2
 80134e6:	f7ff ffdb 	bl	80134a0 <__mcmp>
 80134ea:	1e05      	subs	r5, r0, #0
 80134ec:	d112      	bne.n	8013514 <__mdiff+0x3c>
 80134ee:	4629      	mov	r1, r5
 80134f0:	4630      	mov	r0, r6
 80134f2:	f7ff fd5b 	bl	8012fac <_Balloc>
 80134f6:	4602      	mov	r2, r0
 80134f8:	b928      	cbnz	r0, 8013506 <__mdiff+0x2e>
 80134fa:	4b3f      	ldr	r3, [pc, #252]	@ (80135f8 <__mdiff+0x120>)
 80134fc:	f240 2137 	movw	r1, #567	@ 0x237
 8013500:	483e      	ldr	r0, [pc, #248]	@ (80135fc <__mdiff+0x124>)
 8013502:	f7fe fc99 	bl	8011e38 <__assert_func>
 8013506:	2301      	movs	r3, #1
 8013508:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801350c:	4610      	mov	r0, r2
 801350e:	b003      	add	sp, #12
 8013510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013514:	bfbc      	itt	lt
 8013516:	464b      	movlt	r3, r9
 8013518:	46a1      	movlt	r9, r4
 801351a:	4630      	mov	r0, r6
 801351c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013520:	bfba      	itte	lt
 8013522:	461c      	movlt	r4, r3
 8013524:	2501      	movlt	r5, #1
 8013526:	2500      	movge	r5, #0
 8013528:	f7ff fd40 	bl	8012fac <_Balloc>
 801352c:	4602      	mov	r2, r0
 801352e:	b918      	cbnz	r0, 8013538 <__mdiff+0x60>
 8013530:	4b31      	ldr	r3, [pc, #196]	@ (80135f8 <__mdiff+0x120>)
 8013532:	f240 2145 	movw	r1, #581	@ 0x245
 8013536:	e7e3      	b.n	8013500 <__mdiff+0x28>
 8013538:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801353c:	6926      	ldr	r6, [r4, #16]
 801353e:	60c5      	str	r5, [r0, #12]
 8013540:	f109 0310 	add.w	r3, r9, #16
 8013544:	f109 0514 	add.w	r5, r9, #20
 8013548:	f104 0e14 	add.w	lr, r4, #20
 801354c:	f100 0b14 	add.w	fp, r0, #20
 8013550:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013554:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013558:	9301      	str	r3, [sp, #4]
 801355a:	46d9      	mov	r9, fp
 801355c:	f04f 0c00 	mov.w	ip, #0
 8013560:	9b01      	ldr	r3, [sp, #4]
 8013562:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013566:	f853 af04 	ldr.w	sl, [r3, #4]!
 801356a:	9301      	str	r3, [sp, #4]
 801356c:	fa1f f38a 	uxth.w	r3, sl
 8013570:	4619      	mov	r1, r3
 8013572:	b283      	uxth	r3, r0
 8013574:	1acb      	subs	r3, r1, r3
 8013576:	0c00      	lsrs	r0, r0, #16
 8013578:	4463      	add	r3, ip
 801357a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801357e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013582:	b29b      	uxth	r3, r3
 8013584:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013588:	4576      	cmp	r6, lr
 801358a:	f849 3b04 	str.w	r3, [r9], #4
 801358e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013592:	d8e5      	bhi.n	8013560 <__mdiff+0x88>
 8013594:	1b33      	subs	r3, r6, r4
 8013596:	3b15      	subs	r3, #21
 8013598:	f023 0303 	bic.w	r3, r3, #3
 801359c:	3415      	adds	r4, #21
 801359e:	3304      	adds	r3, #4
 80135a0:	42a6      	cmp	r6, r4
 80135a2:	bf38      	it	cc
 80135a4:	2304      	movcc	r3, #4
 80135a6:	441d      	add	r5, r3
 80135a8:	445b      	add	r3, fp
 80135aa:	461e      	mov	r6, r3
 80135ac:	462c      	mov	r4, r5
 80135ae:	4544      	cmp	r4, r8
 80135b0:	d30e      	bcc.n	80135d0 <__mdiff+0xf8>
 80135b2:	f108 0103 	add.w	r1, r8, #3
 80135b6:	1b49      	subs	r1, r1, r5
 80135b8:	f021 0103 	bic.w	r1, r1, #3
 80135bc:	3d03      	subs	r5, #3
 80135be:	45a8      	cmp	r8, r5
 80135c0:	bf38      	it	cc
 80135c2:	2100      	movcc	r1, #0
 80135c4:	440b      	add	r3, r1
 80135c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80135ca:	b191      	cbz	r1, 80135f2 <__mdiff+0x11a>
 80135cc:	6117      	str	r7, [r2, #16]
 80135ce:	e79d      	b.n	801350c <__mdiff+0x34>
 80135d0:	f854 1b04 	ldr.w	r1, [r4], #4
 80135d4:	46e6      	mov	lr, ip
 80135d6:	0c08      	lsrs	r0, r1, #16
 80135d8:	fa1c fc81 	uxtah	ip, ip, r1
 80135dc:	4471      	add	r1, lr
 80135de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80135e2:	b289      	uxth	r1, r1
 80135e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80135e8:	f846 1b04 	str.w	r1, [r6], #4
 80135ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80135f0:	e7dd      	b.n	80135ae <__mdiff+0xd6>
 80135f2:	3f01      	subs	r7, #1
 80135f4:	e7e7      	b.n	80135c6 <__mdiff+0xee>
 80135f6:	bf00      	nop
 80135f8:	08014275 	.word	0x08014275
 80135fc:	08014297 	.word	0x08014297

08013600 <__d2b>:
 8013600:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013604:	460f      	mov	r7, r1
 8013606:	2101      	movs	r1, #1
 8013608:	ec59 8b10 	vmov	r8, r9, d0
 801360c:	4616      	mov	r6, r2
 801360e:	f7ff fccd 	bl	8012fac <_Balloc>
 8013612:	4604      	mov	r4, r0
 8013614:	b930      	cbnz	r0, 8013624 <__d2b+0x24>
 8013616:	4602      	mov	r2, r0
 8013618:	4b23      	ldr	r3, [pc, #140]	@ (80136a8 <__d2b+0xa8>)
 801361a:	4824      	ldr	r0, [pc, #144]	@ (80136ac <__d2b+0xac>)
 801361c:	f240 310f 	movw	r1, #783	@ 0x30f
 8013620:	f7fe fc0a 	bl	8011e38 <__assert_func>
 8013624:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013628:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801362c:	b10d      	cbz	r5, 8013632 <__d2b+0x32>
 801362e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013632:	9301      	str	r3, [sp, #4]
 8013634:	f1b8 0300 	subs.w	r3, r8, #0
 8013638:	d023      	beq.n	8013682 <__d2b+0x82>
 801363a:	4668      	mov	r0, sp
 801363c:	9300      	str	r3, [sp, #0]
 801363e:	f7ff fd7c 	bl	801313a <__lo0bits>
 8013642:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013646:	b1d0      	cbz	r0, 801367e <__d2b+0x7e>
 8013648:	f1c0 0320 	rsb	r3, r0, #32
 801364c:	fa02 f303 	lsl.w	r3, r2, r3
 8013650:	430b      	orrs	r3, r1
 8013652:	40c2      	lsrs	r2, r0
 8013654:	6163      	str	r3, [r4, #20]
 8013656:	9201      	str	r2, [sp, #4]
 8013658:	9b01      	ldr	r3, [sp, #4]
 801365a:	61a3      	str	r3, [r4, #24]
 801365c:	2b00      	cmp	r3, #0
 801365e:	bf0c      	ite	eq
 8013660:	2201      	moveq	r2, #1
 8013662:	2202      	movne	r2, #2
 8013664:	6122      	str	r2, [r4, #16]
 8013666:	b1a5      	cbz	r5, 8013692 <__d2b+0x92>
 8013668:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801366c:	4405      	add	r5, r0
 801366e:	603d      	str	r5, [r7, #0]
 8013670:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013674:	6030      	str	r0, [r6, #0]
 8013676:	4620      	mov	r0, r4
 8013678:	b003      	add	sp, #12
 801367a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801367e:	6161      	str	r1, [r4, #20]
 8013680:	e7ea      	b.n	8013658 <__d2b+0x58>
 8013682:	a801      	add	r0, sp, #4
 8013684:	f7ff fd59 	bl	801313a <__lo0bits>
 8013688:	9b01      	ldr	r3, [sp, #4]
 801368a:	6163      	str	r3, [r4, #20]
 801368c:	3020      	adds	r0, #32
 801368e:	2201      	movs	r2, #1
 8013690:	e7e8      	b.n	8013664 <__d2b+0x64>
 8013692:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013696:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801369a:	6038      	str	r0, [r7, #0]
 801369c:	6918      	ldr	r0, [r3, #16]
 801369e:	f7ff fd2d 	bl	80130fc <__hi0bits>
 80136a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80136a6:	e7e5      	b.n	8013674 <__d2b+0x74>
 80136a8:	08014275 	.word	0x08014275
 80136ac:	08014297 	.word	0x08014297

080136b0 <__sread>:
 80136b0:	b510      	push	{r4, lr}
 80136b2:	460c      	mov	r4, r1
 80136b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136b8:	f000 f8ba 	bl	8013830 <_read_r>
 80136bc:	2800      	cmp	r0, #0
 80136be:	bfab      	itete	ge
 80136c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80136c2:	89a3      	ldrhlt	r3, [r4, #12]
 80136c4:	181b      	addge	r3, r3, r0
 80136c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80136ca:	bfac      	ite	ge
 80136cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80136ce:	81a3      	strhlt	r3, [r4, #12]
 80136d0:	bd10      	pop	{r4, pc}

080136d2 <__swrite>:
 80136d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136d6:	461f      	mov	r7, r3
 80136d8:	898b      	ldrh	r3, [r1, #12]
 80136da:	05db      	lsls	r3, r3, #23
 80136dc:	4605      	mov	r5, r0
 80136de:	460c      	mov	r4, r1
 80136e0:	4616      	mov	r6, r2
 80136e2:	d505      	bpl.n	80136f0 <__swrite+0x1e>
 80136e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136e8:	2302      	movs	r3, #2
 80136ea:	2200      	movs	r2, #0
 80136ec:	f000 f88e 	bl	801380c <_lseek_r>
 80136f0:	89a3      	ldrh	r3, [r4, #12]
 80136f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80136fa:	81a3      	strh	r3, [r4, #12]
 80136fc:	4632      	mov	r2, r6
 80136fe:	463b      	mov	r3, r7
 8013700:	4628      	mov	r0, r5
 8013702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013706:	f000 b8a5 	b.w	8013854 <_write_r>

0801370a <__sseek>:
 801370a:	b510      	push	{r4, lr}
 801370c:	460c      	mov	r4, r1
 801370e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013712:	f000 f87b 	bl	801380c <_lseek_r>
 8013716:	1c43      	adds	r3, r0, #1
 8013718:	89a3      	ldrh	r3, [r4, #12]
 801371a:	bf15      	itete	ne
 801371c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801371e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013722:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013726:	81a3      	strheq	r3, [r4, #12]
 8013728:	bf18      	it	ne
 801372a:	81a3      	strhne	r3, [r4, #12]
 801372c:	bd10      	pop	{r4, pc}

0801372e <__sclose>:
 801372e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013732:	f000 b85b 	b.w	80137ec <_close_r>
	...

08013738 <fiprintf>:
 8013738:	b40e      	push	{r1, r2, r3}
 801373a:	b503      	push	{r0, r1, lr}
 801373c:	4601      	mov	r1, r0
 801373e:	ab03      	add	r3, sp, #12
 8013740:	4805      	ldr	r0, [pc, #20]	@ (8013758 <fiprintf+0x20>)
 8013742:	f853 2b04 	ldr.w	r2, [r3], #4
 8013746:	6800      	ldr	r0, [r0, #0]
 8013748:	9301      	str	r3, [sp, #4]
 801374a:	f000 f8d9 	bl	8013900 <_vfiprintf_r>
 801374e:	b002      	add	sp, #8
 8013750:	f85d eb04 	ldr.w	lr, [sp], #4
 8013754:	b003      	add	sp, #12
 8013756:	4770      	bx	lr
 8013758:	200000ec 	.word	0x200000ec

0801375c <_realloc_r>:
 801375c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013760:	4680      	mov	r8, r0
 8013762:	4615      	mov	r5, r2
 8013764:	460c      	mov	r4, r1
 8013766:	b921      	cbnz	r1, 8013772 <_realloc_r+0x16>
 8013768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801376c:	4611      	mov	r1, r2
 801376e:	f7fd bfd5 	b.w	801171c <_malloc_r>
 8013772:	b92a      	cbnz	r2, 8013780 <_realloc_r+0x24>
 8013774:	f7ff f9cc 	bl	8012b10 <_free_r>
 8013778:	2400      	movs	r4, #0
 801377a:	4620      	mov	r0, r4
 801377c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013780:	f000 f9e8 	bl	8013b54 <_malloc_usable_size_r>
 8013784:	4285      	cmp	r5, r0
 8013786:	4606      	mov	r6, r0
 8013788:	d802      	bhi.n	8013790 <_realloc_r+0x34>
 801378a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801378e:	d8f4      	bhi.n	801377a <_realloc_r+0x1e>
 8013790:	4629      	mov	r1, r5
 8013792:	4640      	mov	r0, r8
 8013794:	f7fd ffc2 	bl	801171c <_malloc_r>
 8013798:	4607      	mov	r7, r0
 801379a:	2800      	cmp	r0, #0
 801379c:	d0ec      	beq.n	8013778 <_realloc_r+0x1c>
 801379e:	42b5      	cmp	r5, r6
 80137a0:	462a      	mov	r2, r5
 80137a2:	4621      	mov	r1, r4
 80137a4:	bf28      	it	cs
 80137a6:	4632      	movcs	r2, r6
 80137a8:	f7fe fb38 	bl	8011e1c <memcpy>
 80137ac:	4621      	mov	r1, r4
 80137ae:	4640      	mov	r0, r8
 80137b0:	f7ff f9ae 	bl	8012b10 <_free_r>
 80137b4:	463c      	mov	r4, r7
 80137b6:	e7e0      	b.n	801377a <_realloc_r+0x1e>

080137b8 <memmove>:
 80137b8:	4288      	cmp	r0, r1
 80137ba:	b510      	push	{r4, lr}
 80137bc:	eb01 0402 	add.w	r4, r1, r2
 80137c0:	d902      	bls.n	80137c8 <memmove+0x10>
 80137c2:	4284      	cmp	r4, r0
 80137c4:	4623      	mov	r3, r4
 80137c6:	d807      	bhi.n	80137d8 <memmove+0x20>
 80137c8:	1e43      	subs	r3, r0, #1
 80137ca:	42a1      	cmp	r1, r4
 80137cc:	d008      	beq.n	80137e0 <memmove+0x28>
 80137ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80137d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80137d6:	e7f8      	b.n	80137ca <memmove+0x12>
 80137d8:	4402      	add	r2, r0
 80137da:	4601      	mov	r1, r0
 80137dc:	428a      	cmp	r2, r1
 80137de:	d100      	bne.n	80137e2 <memmove+0x2a>
 80137e0:	bd10      	pop	{r4, pc}
 80137e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80137e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80137ea:	e7f7      	b.n	80137dc <memmove+0x24>

080137ec <_close_r>:
 80137ec:	b538      	push	{r3, r4, r5, lr}
 80137ee:	4d06      	ldr	r5, [pc, #24]	@ (8013808 <_close_r+0x1c>)
 80137f0:	2300      	movs	r3, #0
 80137f2:	4604      	mov	r4, r0
 80137f4:	4608      	mov	r0, r1
 80137f6:	602b      	str	r3, [r5, #0]
 80137f8:	f7ef fa86 	bl	8002d08 <_close>
 80137fc:	1c43      	adds	r3, r0, #1
 80137fe:	d102      	bne.n	8013806 <_close_r+0x1a>
 8013800:	682b      	ldr	r3, [r5, #0]
 8013802:	b103      	cbz	r3, 8013806 <_close_r+0x1a>
 8013804:	6023      	str	r3, [r4, #0]
 8013806:	bd38      	pop	{r3, r4, r5, pc}
 8013808:	200016f4 	.word	0x200016f4

0801380c <_lseek_r>:
 801380c:	b538      	push	{r3, r4, r5, lr}
 801380e:	4d07      	ldr	r5, [pc, #28]	@ (801382c <_lseek_r+0x20>)
 8013810:	4604      	mov	r4, r0
 8013812:	4608      	mov	r0, r1
 8013814:	4611      	mov	r1, r2
 8013816:	2200      	movs	r2, #0
 8013818:	602a      	str	r2, [r5, #0]
 801381a:	461a      	mov	r2, r3
 801381c:	f7ef fa9b 	bl	8002d56 <_lseek>
 8013820:	1c43      	adds	r3, r0, #1
 8013822:	d102      	bne.n	801382a <_lseek_r+0x1e>
 8013824:	682b      	ldr	r3, [r5, #0]
 8013826:	b103      	cbz	r3, 801382a <_lseek_r+0x1e>
 8013828:	6023      	str	r3, [r4, #0]
 801382a:	bd38      	pop	{r3, r4, r5, pc}
 801382c:	200016f4 	.word	0x200016f4

08013830 <_read_r>:
 8013830:	b538      	push	{r3, r4, r5, lr}
 8013832:	4d07      	ldr	r5, [pc, #28]	@ (8013850 <_read_r+0x20>)
 8013834:	4604      	mov	r4, r0
 8013836:	4608      	mov	r0, r1
 8013838:	4611      	mov	r1, r2
 801383a:	2200      	movs	r2, #0
 801383c:	602a      	str	r2, [r5, #0]
 801383e:	461a      	mov	r2, r3
 8013840:	f7ef fa45 	bl	8002cce <_read>
 8013844:	1c43      	adds	r3, r0, #1
 8013846:	d102      	bne.n	801384e <_read_r+0x1e>
 8013848:	682b      	ldr	r3, [r5, #0]
 801384a:	b103      	cbz	r3, 801384e <_read_r+0x1e>
 801384c:	6023      	str	r3, [r4, #0]
 801384e:	bd38      	pop	{r3, r4, r5, pc}
 8013850:	200016f4 	.word	0x200016f4

08013854 <_write_r>:
 8013854:	b538      	push	{r3, r4, r5, lr}
 8013856:	4d07      	ldr	r5, [pc, #28]	@ (8013874 <_write_r+0x20>)
 8013858:	4604      	mov	r4, r0
 801385a:	4608      	mov	r0, r1
 801385c:	4611      	mov	r1, r2
 801385e:	2200      	movs	r2, #0
 8013860:	602a      	str	r2, [r5, #0]
 8013862:	461a      	mov	r2, r3
 8013864:	f7ed fbf4 	bl	8001050 <_write>
 8013868:	1c43      	adds	r3, r0, #1
 801386a:	d102      	bne.n	8013872 <_write_r+0x1e>
 801386c:	682b      	ldr	r3, [r5, #0]
 801386e:	b103      	cbz	r3, 8013872 <_write_r+0x1e>
 8013870:	6023      	str	r3, [r4, #0]
 8013872:	bd38      	pop	{r3, r4, r5, pc}
 8013874:	200016f4 	.word	0x200016f4

08013878 <abort>:
 8013878:	b508      	push	{r3, lr}
 801387a:	2006      	movs	r0, #6
 801387c:	f000 fac0 	bl	8013e00 <raise>
 8013880:	2001      	movs	r0, #1
 8013882:	f7ef fa19 	bl	8002cb8 <_exit>

08013886 <_calloc_r>:
 8013886:	b570      	push	{r4, r5, r6, lr}
 8013888:	fba1 5402 	umull	r5, r4, r1, r2
 801388c:	b93c      	cbnz	r4, 801389e <_calloc_r+0x18>
 801388e:	4629      	mov	r1, r5
 8013890:	f7fd ff44 	bl	801171c <_malloc_r>
 8013894:	4606      	mov	r6, r0
 8013896:	b928      	cbnz	r0, 80138a4 <_calloc_r+0x1e>
 8013898:	2600      	movs	r6, #0
 801389a:	4630      	mov	r0, r6
 801389c:	bd70      	pop	{r4, r5, r6, pc}
 801389e:	220c      	movs	r2, #12
 80138a0:	6002      	str	r2, [r0, #0]
 80138a2:	e7f9      	b.n	8013898 <_calloc_r+0x12>
 80138a4:	462a      	mov	r2, r5
 80138a6:	4621      	mov	r1, r4
 80138a8:	f7fe fa72 	bl	8011d90 <memset>
 80138ac:	e7f5      	b.n	801389a <_calloc_r+0x14>

080138ae <__sfputc_r>:
 80138ae:	6893      	ldr	r3, [r2, #8]
 80138b0:	3b01      	subs	r3, #1
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	b410      	push	{r4}
 80138b6:	6093      	str	r3, [r2, #8]
 80138b8:	da08      	bge.n	80138cc <__sfputc_r+0x1e>
 80138ba:	6994      	ldr	r4, [r2, #24]
 80138bc:	42a3      	cmp	r3, r4
 80138be:	db01      	blt.n	80138c4 <__sfputc_r+0x16>
 80138c0:	290a      	cmp	r1, #10
 80138c2:	d103      	bne.n	80138cc <__sfputc_r+0x1e>
 80138c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138c8:	f000 b94c 	b.w	8013b64 <__swbuf_r>
 80138cc:	6813      	ldr	r3, [r2, #0]
 80138ce:	1c58      	adds	r0, r3, #1
 80138d0:	6010      	str	r0, [r2, #0]
 80138d2:	7019      	strb	r1, [r3, #0]
 80138d4:	4608      	mov	r0, r1
 80138d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138da:	4770      	bx	lr

080138dc <__sfputs_r>:
 80138dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138de:	4606      	mov	r6, r0
 80138e0:	460f      	mov	r7, r1
 80138e2:	4614      	mov	r4, r2
 80138e4:	18d5      	adds	r5, r2, r3
 80138e6:	42ac      	cmp	r4, r5
 80138e8:	d101      	bne.n	80138ee <__sfputs_r+0x12>
 80138ea:	2000      	movs	r0, #0
 80138ec:	e007      	b.n	80138fe <__sfputs_r+0x22>
 80138ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138f2:	463a      	mov	r2, r7
 80138f4:	4630      	mov	r0, r6
 80138f6:	f7ff ffda 	bl	80138ae <__sfputc_r>
 80138fa:	1c43      	adds	r3, r0, #1
 80138fc:	d1f3      	bne.n	80138e6 <__sfputs_r+0xa>
 80138fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013900 <_vfiprintf_r>:
 8013900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013904:	460d      	mov	r5, r1
 8013906:	b09d      	sub	sp, #116	@ 0x74
 8013908:	4614      	mov	r4, r2
 801390a:	4698      	mov	r8, r3
 801390c:	4606      	mov	r6, r0
 801390e:	b118      	cbz	r0, 8013918 <_vfiprintf_r+0x18>
 8013910:	6a03      	ldr	r3, [r0, #32]
 8013912:	b90b      	cbnz	r3, 8013918 <_vfiprintf_r+0x18>
 8013914:	f7fe fa06 	bl	8011d24 <__sinit>
 8013918:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801391a:	07d9      	lsls	r1, r3, #31
 801391c:	d405      	bmi.n	801392a <_vfiprintf_r+0x2a>
 801391e:	89ab      	ldrh	r3, [r5, #12]
 8013920:	059a      	lsls	r2, r3, #22
 8013922:	d402      	bmi.n	801392a <_vfiprintf_r+0x2a>
 8013924:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013926:	f7ef fb36 	bl	8002f96 <__retarget_lock_acquire_recursive>
 801392a:	89ab      	ldrh	r3, [r5, #12]
 801392c:	071b      	lsls	r3, r3, #28
 801392e:	d501      	bpl.n	8013934 <_vfiprintf_r+0x34>
 8013930:	692b      	ldr	r3, [r5, #16]
 8013932:	b99b      	cbnz	r3, 801395c <_vfiprintf_r+0x5c>
 8013934:	4629      	mov	r1, r5
 8013936:	4630      	mov	r0, r6
 8013938:	f000 f952 	bl	8013be0 <__swsetup_r>
 801393c:	b170      	cbz	r0, 801395c <_vfiprintf_r+0x5c>
 801393e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013940:	07dc      	lsls	r4, r3, #31
 8013942:	d504      	bpl.n	801394e <_vfiprintf_r+0x4e>
 8013944:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013948:	b01d      	add	sp, #116	@ 0x74
 801394a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801394e:	89ab      	ldrh	r3, [r5, #12]
 8013950:	0598      	lsls	r0, r3, #22
 8013952:	d4f7      	bmi.n	8013944 <_vfiprintf_r+0x44>
 8013954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013956:	f7ef fb33 	bl	8002fc0 <__retarget_lock_release_recursive>
 801395a:	e7f3      	b.n	8013944 <_vfiprintf_r+0x44>
 801395c:	2300      	movs	r3, #0
 801395e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013960:	2320      	movs	r3, #32
 8013962:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013966:	f8cd 800c 	str.w	r8, [sp, #12]
 801396a:	2330      	movs	r3, #48	@ 0x30
 801396c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013b1c <_vfiprintf_r+0x21c>
 8013970:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013974:	f04f 0901 	mov.w	r9, #1
 8013978:	4623      	mov	r3, r4
 801397a:	469a      	mov	sl, r3
 801397c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013980:	b10a      	cbz	r2, 8013986 <_vfiprintf_r+0x86>
 8013982:	2a25      	cmp	r2, #37	@ 0x25
 8013984:	d1f9      	bne.n	801397a <_vfiprintf_r+0x7a>
 8013986:	ebba 0b04 	subs.w	fp, sl, r4
 801398a:	d00b      	beq.n	80139a4 <_vfiprintf_r+0xa4>
 801398c:	465b      	mov	r3, fp
 801398e:	4622      	mov	r2, r4
 8013990:	4629      	mov	r1, r5
 8013992:	4630      	mov	r0, r6
 8013994:	f7ff ffa2 	bl	80138dc <__sfputs_r>
 8013998:	3001      	adds	r0, #1
 801399a:	f000 80a7 	beq.w	8013aec <_vfiprintf_r+0x1ec>
 801399e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80139a0:	445a      	add	r2, fp
 80139a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80139a4:	f89a 3000 	ldrb.w	r3, [sl]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	f000 809f 	beq.w	8013aec <_vfiprintf_r+0x1ec>
 80139ae:	2300      	movs	r3, #0
 80139b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80139b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80139b8:	f10a 0a01 	add.w	sl, sl, #1
 80139bc:	9304      	str	r3, [sp, #16]
 80139be:	9307      	str	r3, [sp, #28]
 80139c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80139c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80139c6:	4654      	mov	r4, sl
 80139c8:	2205      	movs	r2, #5
 80139ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139ce:	4853      	ldr	r0, [pc, #332]	@ (8013b1c <_vfiprintf_r+0x21c>)
 80139d0:	f7ec fc26 	bl	8000220 <memchr>
 80139d4:	9a04      	ldr	r2, [sp, #16]
 80139d6:	b9d8      	cbnz	r0, 8013a10 <_vfiprintf_r+0x110>
 80139d8:	06d1      	lsls	r1, r2, #27
 80139da:	bf44      	itt	mi
 80139dc:	2320      	movmi	r3, #32
 80139de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80139e2:	0713      	lsls	r3, r2, #28
 80139e4:	bf44      	itt	mi
 80139e6:	232b      	movmi	r3, #43	@ 0x2b
 80139e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80139ec:	f89a 3000 	ldrb.w	r3, [sl]
 80139f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80139f2:	d015      	beq.n	8013a20 <_vfiprintf_r+0x120>
 80139f4:	9a07      	ldr	r2, [sp, #28]
 80139f6:	4654      	mov	r4, sl
 80139f8:	2000      	movs	r0, #0
 80139fa:	f04f 0c0a 	mov.w	ip, #10
 80139fe:	4621      	mov	r1, r4
 8013a00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a04:	3b30      	subs	r3, #48	@ 0x30
 8013a06:	2b09      	cmp	r3, #9
 8013a08:	d94b      	bls.n	8013aa2 <_vfiprintf_r+0x1a2>
 8013a0a:	b1b0      	cbz	r0, 8013a3a <_vfiprintf_r+0x13a>
 8013a0c:	9207      	str	r2, [sp, #28]
 8013a0e:	e014      	b.n	8013a3a <_vfiprintf_r+0x13a>
 8013a10:	eba0 0308 	sub.w	r3, r0, r8
 8013a14:	fa09 f303 	lsl.w	r3, r9, r3
 8013a18:	4313      	orrs	r3, r2
 8013a1a:	9304      	str	r3, [sp, #16]
 8013a1c:	46a2      	mov	sl, r4
 8013a1e:	e7d2      	b.n	80139c6 <_vfiprintf_r+0xc6>
 8013a20:	9b03      	ldr	r3, [sp, #12]
 8013a22:	1d19      	adds	r1, r3, #4
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	9103      	str	r1, [sp, #12]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	bfbb      	ittet	lt
 8013a2c:	425b      	neglt	r3, r3
 8013a2e:	f042 0202 	orrlt.w	r2, r2, #2
 8013a32:	9307      	strge	r3, [sp, #28]
 8013a34:	9307      	strlt	r3, [sp, #28]
 8013a36:	bfb8      	it	lt
 8013a38:	9204      	strlt	r2, [sp, #16]
 8013a3a:	7823      	ldrb	r3, [r4, #0]
 8013a3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8013a3e:	d10a      	bne.n	8013a56 <_vfiprintf_r+0x156>
 8013a40:	7863      	ldrb	r3, [r4, #1]
 8013a42:	2b2a      	cmp	r3, #42	@ 0x2a
 8013a44:	d132      	bne.n	8013aac <_vfiprintf_r+0x1ac>
 8013a46:	9b03      	ldr	r3, [sp, #12]
 8013a48:	1d1a      	adds	r2, r3, #4
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	9203      	str	r2, [sp, #12]
 8013a4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013a52:	3402      	adds	r4, #2
 8013a54:	9305      	str	r3, [sp, #20]
 8013a56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013b2c <_vfiprintf_r+0x22c>
 8013a5a:	7821      	ldrb	r1, [r4, #0]
 8013a5c:	2203      	movs	r2, #3
 8013a5e:	4650      	mov	r0, sl
 8013a60:	f7ec fbde 	bl	8000220 <memchr>
 8013a64:	b138      	cbz	r0, 8013a76 <_vfiprintf_r+0x176>
 8013a66:	9b04      	ldr	r3, [sp, #16]
 8013a68:	eba0 000a 	sub.w	r0, r0, sl
 8013a6c:	2240      	movs	r2, #64	@ 0x40
 8013a6e:	4082      	lsls	r2, r0
 8013a70:	4313      	orrs	r3, r2
 8013a72:	3401      	adds	r4, #1
 8013a74:	9304      	str	r3, [sp, #16]
 8013a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a7a:	4829      	ldr	r0, [pc, #164]	@ (8013b20 <_vfiprintf_r+0x220>)
 8013a7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013a80:	2206      	movs	r2, #6
 8013a82:	f7ec fbcd 	bl	8000220 <memchr>
 8013a86:	2800      	cmp	r0, #0
 8013a88:	d03f      	beq.n	8013b0a <_vfiprintf_r+0x20a>
 8013a8a:	4b26      	ldr	r3, [pc, #152]	@ (8013b24 <_vfiprintf_r+0x224>)
 8013a8c:	bb1b      	cbnz	r3, 8013ad6 <_vfiprintf_r+0x1d6>
 8013a8e:	9b03      	ldr	r3, [sp, #12]
 8013a90:	3307      	adds	r3, #7
 8013a92:	f023 0307 	bic.w	r3, r3, #7
 8013a96:	3308      	adds	r3, #8
 8013a98:	9303      	str	r3, [sp, #12]
 8013a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a9c:	443b      	add	r3, r7
 8013a9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013aa0:	e76a      	b.n	8013978 <_vfiprintf_r+0x78>
 8013aa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8013aa6:	460c      	mov	r4, r1
 8013aa8:	2001      	movs	r0, #1
 8013aaa:	e7a8      	b.n	80139fe <_vfiprintf_r+0xfe>
 8013aac:	2300      	movs	r3, #0
 8013aae:	3401      	adds	r4, #1
 8013ab0:	9305      	str	r3, [sp, #20]
 8013ab2:	4619      	mov	r1, r3
 8013ab4:	f04f 0c0a 	mov.w	ip, #10
 8013ab8:	4620      	mov	r0, r4
 8013aba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013abe:	3a30      	subs	r2, #48	@ 0x30
 8013ac0:	2a09      	cmp	r2, #9
 8013ac2:	d903      	bls.n	8013acc <_vfiprintf_r+0x1cc>
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d0c6      	beq.n	8013a56 <_vfiprintf_r+0x156>
 8013ac8:	9105      	str	r1, [sp, #20]
 8013aca:	e7c4      	b.n	8013a56 <_vfiprintf_r+0x156>
 8013acc:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ad0:	4604      	mov	r4, r0
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	e7f0      	b.n	8013ab8 <_vfiprintf_r+0x1b8>
 8013ad6:	ab03      	add	r3, sp, #12
 8013ad8:	9300      	str	r3, [sp, #0]
 8013ada:	462a      	mov	r2, r5
 8013adc:	4b12      	ldr	r3, [pc, #72]	@ (8013b28 <_vfiprintf_r+0x228>)
 8013ade:	a904      	add	r1, sp, #16
 8013ae0:	4630      	mov	r0, r6
 8013ae2:	f7fd fbc7 	bl	8011274 <_printf_float>
 8013ae6:	4607      	mov	r7, r0
 8013ae8:	1c78      	adds	r0, r7, #1
 8013aea:	d1d6      	bne.n	8013a9a <_vfiprintf_r+0x19a>
 8013aec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013aee:	07d9      	lsls	r1, r3, #31
 8013af0:	d405      	bmi.n	8013afe <_vfiprintf_r+0x1fe>
 8013af2:	89ab      	ldrh	r3, [r5, #12]
 8013af4:	059a      	lsls	r2, r3, #22
 8013af6:	d402      	bmi.n	8013afe <_vfiprintf_r+0x1fe>
 8013af8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013afa:	f7ef fa61 	bl	8002fc0 <__retarget_lock_release_recursive>
 8013afe:	89ab      	ldrh	r3, [r5, #12]
 8013b00:	065b      	lsls	r3, r3, #25
 8013b02:	f53f af1f 	bmi.w	8013944 <_vfiprintf_r+0x44>
 8013b06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b08:	e71e      	b.n	8013948 <_vfiprintf_r+0x48>
 8013b0a:	ab03      	add	r3, sp, #12
 8013b0c:	9300      	str	r3, [sp, #0]
 8013b0e:	462a      	mov	r2, r5
 8013b10:	4b05      	ldr	r3, [pc, #20]	@ (8013b28 <_vfiprintf_r+0x228>)
 8013b12:	a904      	add	r1, sp, #16
 8013b14:	4630      	mov	r0, r6
 8013b16:	f7fd feef 	bl	80118f8 <_printf_i>
 8013b1a:	e7e4      	b.n	8013ae6 <_vfiprintf_r+0x1e6>
 8013b1c:	08014286 	.word	0x08014286
 8013b20:	08014290 	.word	0x08014290
 8013b24:	08011275 	.word	0x08011275
 8013b28:	080138dd 	.word	0x080138dd
 8013b2c:	0801428c 	.word	0x0801428c

08013b30 <__ascii_mbtowc>:
 8013b30:	b082      	sub	sp, #8
 8013b32:	b901      	cbnz	r1, 8013b36 <__ascii_mbtowc+0x6>
 8013b34:	a901      	add	r1, sp, #4
 8013b36:	b142      	cbz	r2, 8013b4a <__ascii_mbtowc+0x1a>
 8013b38:	b14b      	cbz	r3, 8013b4e <__ascii_mbtowc+0x1e>
 8013b3a:	7813      	ldrb	r3, [r2, #0]
 8013b3c:	600b      	str	r3, [r1, #0]
 8013b3e:	7812      	ldrb	r2, [r2, #0]
 8013b40:	1e10      	subs	r0, r2, #0
 8013b42:	bf18      	it	ne
 8013b44:	2001      	movne	r0, #1
 8013b46:	b002      	add	sp, #8
 8013b48:	4770      	bx	lr
 8013b4a:	4610      	mov	r0, r2
 8013b4c:	e7fb      	b.n	8013b46 <__ascii_mbtowc+0x16>
 8013b4e:	f06f 0001 	mvn.w	r0, #1
 8013b52:	e7f8      	b.n	8013b46 <__ascii_mbtowc+0x16>

08013b54 <_malloc_usable_size_r>:
 8013b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b58:	1f18      	subs	r0, r3, #4
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	bfbc      	itt	lt
 8013b5e:	580b      	ldrlt	r3, [r1, r0]
 8013b60:	18c0      	addlt	r0, r0, r3
 8013b62:	4770      	bx	lr

08013b64 <__swbuf_r>:
 8013b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b66:	460e      	mov	r6, r1
 8013b68:	4614      	mov	r4, r2
 8013b6a:	4605      	mov	r5, r0
 8013b6c:	b118      	cbz	r0, 8013b76 <__swbuf_r+0x12>
 8013b6e:	6a03      	ldr	r3, [r0, #32]
 8013b70:	b90b      	cbnz	r3, 8013b76 <__swbuf_r+0x12>
 8013b72:	f7fe f8d7 	bl	8011d24 <__sinit>
 8013b76:	69a3      	ldr	r3, [r4, #24]
 8013b78:	60a3      	str	r3, [r4, #8]
 8013b7a:	89a3      	ldrh	r3, [r4, #12]
 8013b7c:	071a      	lsls	r2, r3, #28
 8013b7e:	d501      	bpl.n	8013b84 <__swbuf_r+0x20>
 8013b80:	6923      	ldr	r3, [r4, #16]
 8013b82:	b943      	cbnz	r3, 8013b96 <__swbuf_r+0x32>
 8013b84:	4621      	mov	r1, r4
 8013b86:	4628      	mov	r0, r5
 8013b88:	f000 f82a 	bl	8013be0 <__swsetup_r>
 8013b8c:	b118      	cbz	r0, 8013b96 <__swbuf_r+0x32>
 8013b8e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013b92:	4638      	mov	r0, r7
 8013b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b96:	6823      	ldr	r3, [r4, #0]
 8013b98:	6922      	ldr	r2, [r4, #16]
 8013b9a:	1a98      	subs	r0, r3, r2
 8013b9c:	6963      	ldr	r3, [r4, #20]
 8013b9e:	b2f6      	uxtb	r6, r6
 8013ba0:	4283      	cmp	r3, r0
 8013ba2:	4637      	mov	r7, r6
 8013ba4:	dc05      	bgt.n	8013bb2 <__swbuf_r+0x4e>
 8013ba6:	4621      	mov	r1, r4
 8013ba8:	4628      	mov	r0, r5
 8013baa:	f7ff f9d7 	bl	8012f5c <_fflush_r>
 8013bae:	2800      	cmp	r0, #0
 8013bb0:	d1ed      	bne.n	8013b8e <__swbuf_r+0x2a>
 8013bb2:	68a3      	ldr	r3, [r4, #8]
 8013bb4:	3b01      	subs	r3, #1
 8013bb6:	60a3      	str	r3, [r4, #8]
 8013bb8:	6823      	ldr	r3, [r4, #0]
 8013bba:	1c5a      	adds	r2, r3, #1
 8013bbc:	6022      	str	r2, [r4, #0]
 8013bbe:	701e      	strb	r6, [r3, #0]
 8013bc0:	6962      	ldr	r2, [r4, #20]
 8013bc2:	1c43      	adds	r3, r0, #1
 8013bc4:	429a      	cmp	r2, r3
 8013bc6:	d004      	beq.n	8013bd2 <__swbuf_r+0x6e>
 8013bc8:	89a3      	ldrh	r3, [r4, #12]
 8013bca:	07db      	lsls	r3, r3, #31
 8013bcc:	d5e1      	bpl.n	8013b92 <__swbuf_r+0x2e>
 8013bce:	2e0a      	cmp	r6, #10
 8013bd0:	d1df      	bne.n	8013b92 <__swbuf_r+0x2e>
 8013bd2:	4621      	mov	r1, r4
 8013bd4:	4628      	mov	r0, r5
 8013bd6:	f7ff f9c1 	bl	8012f5c <_fflush_r>
 8013bda:	2800      	cmp	r0, #0
 8013bdc:	d0d9      	beq.n	8013b92 <__swbuf_r+0x2e>
 8013bde:	e7d6      	b.n	8013b8e <__swbuf_r+0x2a>

08013be0 <__swsetup_r>:
 8013be0:	b538      	push	{r3, r4, r5, lr}
 8013be2:	4b29      	ldr	r3, [pc, #164]	@ (8013c88 <__swsetup_r+0xa8>)
 8013be4:	4605      	mov	r5, r0
 8013be6:	6818      	ldr	r0, [r3, #0]
 8013be8:	460c      	mov	r4, r1
 8013bea:	b118      	cbz	r0, 8013bf4 <__swsetup_r+0x14>
 8013bec:	6a03      	ldr	r3, [r0, #32]
 8013bee:	b90b      	cbnz	r3, 8013bf4 <__swsetup_r+0x14>
 8013bf0:	f7fe f898 	bl	8011d24 <__sinit>
 8013bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bf8:	0719      	lsls	r1, r3, #28
 8013bfa:	d422      	bmi.n	8013c42 <__swsetup_r+0x62>
 8013bfc:	06da      	lsls	r2, r3, #27
 8013bfe:	d407      	bmi.n	8013c10 <__swsetup_r+0x30>
 8013c00:	2209      	movs	r2, #9
 8013c02:	602a      	str	r2, [r5, #0]
 8013c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c08:	81a3      	strh	r3, [r4, #12]
 8013c0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013c0e:	e033      	b.n	8013c78 <__swsetup_r+0x98>
 8013c10:	0758      	lsls	r0, r3, #29
 8013c12:	d512      	bpl.n	8013c3a <__swsetup_r+0x5a>
 8013c14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013c16:	b141      	cbz	r1, 8013c2a <__swsetup_r+0x4a>
 8013c18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013c1c:	4299      	cmp	r1, r3
 8013c1e:	d002      	beq.n	8013c26 <__swsetup_r+0x46>
 8013c20:	4628      	mov	r0, r5
 8013c22:	f7fe ff75 	bl	8012b10 <_free_r>
 8013c26:	2300      	movs	r3, #0
 8013c28:	6363      	str	r3, [r4, #52]	@ 0x34
 8013c2a:	89a3      	ldrh	r3, [r4, #12]
 8013c2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013c30:	81a3      	strh	r3, [r4, #12]
 8013c32:	2300      	movs	r3, #0
 8013c34:	6063      	str	r3, [r4, #4]
 8013c36:	6923      	ldr	r3, [r4, #16]
 8013c38:	6023      	str	r3, [r4, #0]
 8013c3a:	89a3      	ldrh	r3, [r4, #12]
 8013c3c:	f043 0308 	orr.w	r3, r3, #8
 8013c40:	81a3      	strh	r3, [r4, #12]
 8013c42:	6923      	ldr	r3, [r4, #16]
 8013c44:	b94b      	cbnz	r3, 8013c5a <__swsetup_r+0x7a>
 8013c46:	89a3      	ldrh	r3, [r4, #12]
 8013c48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013c50:	d003      	beq.n	8013c5a <__swsetup_r+0x7a>
 8013c52:	4621      	mov	r1, r4
 8013c54:	4628      	mov	r0, r5
 8013c56:	f000 f84c 	bl	8013cf2 <__smakebuf_r>
 8013c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c5e:	f013 0201 	ands.w	r2, r3, #1
 8013c62:	d00a      	beq.n	8013c7a <__swsetup_r+0x9a>
 8013c64:	2200      	movs	r2, #0
 8013c66:	60a2      	str	r2, [r4, #8]
 8013c68:	6962      	ldr	r2, [r4, #20]
 8013c6a:	4252      	negs	r2, r2
 8013c6c:	61a2      	str	r2, [r4, #24]
 8013c6e:	6922      	ldr	r2, [r4, #16]
 8013c70:	b942      	cbnz	r2, 8013c84 <__swsetup_r+0xa4>
 8013c72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013c76:	d1c5      	bne.n	8013c04 <__swsetup_r+0x24>
 8013c78:	bd38      	pop	{r3, r4, r5, pc}
 8013c7a:	0799      	lsls	r1, r3, #30
 8013c7c:	bf58      	it	pl
 8013c7e:	6962      	ldrpl	r2, [r4, #20]
 8013c80:	60a2      	str	r2, [r4, #8]
 8013c82:	e7f4      	b.n	8013c6e <__swsetup_r+0x8e>
 8013c84:	2000      	movs	r0, #0
 8013c86:	e7f7      	b.n	8013c78 <__swsetup_r+0x98>
 8013c88:	200000ec 	.word	0x200000ec

08013c8c <__ascii_wctomb>:
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	4608      	mov	r0, r1
 8013c90:	b141      	cbz	r1, 8013ca4 <__ascii_wctomb+0x18>
 8013c92:	2aff      	cmp	r2, #255	@ 0xff
 8013c94:	d904      	bls.n	8013ca0 <__ascii_wctomb+0x14>
 8013c96:	228a      	movs	r2, #138	@ 0x8a
 8013c98:	601a      	str	r2, [r3, #0]
 8013c9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013c9e:	4770      	bx	lr
 8013ca0:	700a      	strb	r2, [r1, #0]
 8013ca2:	2001      	movs	r0, #1
 8013ca4:	4770      	bx	lr

08013ca6 <__swhatbuf_r>:
 8013ca6:	b570      	push	{r4, r5, r6, lr}
 8013ca8:	460c      	mov	r4, r1
 8013caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013cae:	2900      	cmp	r1, #0
 8013cb0:	b096      	sub	sp, #88	@ 0x58
 8013cb2:	4615      	mov	r5, r2
 8013cb4:	461e      	mov	r6, r3
 8013cb6:	da0d      	bge.n	8013cd4 <__swhatbuf_r+0x2e>
 8013cb8:	89a3      	ldrh	r3, [r4, #12]
 8013cba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013cbe:	f04f 0100 	mov.w	r1, #0
 8013cc2:	bf14      	ite	ne
 8013cc4:	2340      	movne	r3, #64	@ 0x40
 8013cc6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013cca:	2000      	movs	r0, #0
 8013ccc:	6031      	str	r1, [r6, #0]
 8013cce:	602b      	str	r3, [r5, #0]
 8013cd0:	b016      	add	sp, #88	@ 0x58
 8013cd2:	bd70      	pop	{r4, r5, r6, pc}
 8013cd4:	466a      	mov	r2, sp
 8013cd6:	f000 f849 	bl	8013d6c <_fstat_r>
 8013cda:	2800      	cmp	r0, #0
 8013cdc:	dbec      	blt.n	8013cb8 <__swhatbuf_r+0x12>
 8013cde:	9901      	ldr	r1, [sp, #4]
 8013ce0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013ce4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013ce8:	4259      	negs	r1, r3
 8013cea:	4159      	adcs	r1, r3
 8013cec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013cf0:	e7eb      	b.n	8013cca <__swhatbuf_r+0x24>

08013cf2 <__smakebuf_r>:
 8013cf2:	898b      	ldrh	r3, [r1, #12]
 8013cf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013cf6:	079d      	lsls	r5, r3, #30
 8013cf8:	4606      	mov	r6, r0
 8013cfa:	460c      	mov	r4, r1
 8013cfc:	d507      	bpl.n	8013d0e <__smakebuf_r+0x1c>
 8013cfe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013d02:	6023      	str	r3, [r4, #0]
 8013d04:	6123      	str	r3, [r4, #16]
 8013d06:	2301      	movs	r3, #1
 8013d08:	6163      	str	r3, [r4, #20]
 8013d0a:	b003      	add	sp, #12
 8013d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d0e:	ab01      	add	r3, sp, #4
 8013d10:	466a      	mov	r2, sp
 8013d12:	f7ff ffc8 	bl	8013ca6 <__swhatbuf_r>
 8013d16:	9f00      	ldr	r7, [sp, #0]
 8013d18:	4605      	mov	r5, r0
 8013d1a:	4639      	mov	r1, r7
 8013d1c:	4630      	mov	r0, r6
 8013d1e:	f7fd fcfd 	bl	801171c <_malloc_r>
 8013d22:	b948      	cbnz	r0, 8013d38 <__smakebuf_r+0x46>
 8013d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d28:	059a      	lsls	r2, r3, #22
 8013d2a:	d4ee      	bmi.n	8013d0a <__smakebuf_r+0x18>
 8013d2c:	f023 0303 	bic.w	r3, r3, #3
 8013d30:	f043 0302 	orr.w	r3, r3, #2
 8013d34:	81a3      	strh	r3, [r4, #12]
 8013d36:	e7e2      	b.n	8013cfe <__smakebuf_r+0xc>
 8013d38:	89a3      	ldrh	r3, [r4, #12]
 8013d3a:	6020      	str	r0, [r4, #0]
 8013d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013d40:	81a3      	strh	r3, [r4, #12]
 8013d42:	9b01      	ldr	r3, [sp, #4]
 8013d44:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013d48:	b15b      	cbz	r3, 8013d62 <__smakebuf_r+0x70>
 8013d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d4e:	4630      	mov	r0, r6
 8013d50:	f000 f81e 	bl	8013d90 <_isatty_r>
 8013d54:	b128      	cbz	r0, 8013d62 <__smakebuf_r+0x70>
 8013d56:	89a3      	ldrh	r3, [r4, #12]
 8013d58:	f023 0303 	bic.w	r3, r3, #3
 8013d5c:	f043 0301 	orr.w	r3, r3, #1
 8013d60:	81a3      	strh	r3, [r4, #12]
 8013d62:	89a3      	ldrh	r3, [r4, #12]
 8013d64:	431d      	orrs	r5, r3
 8013d66:	81a5      	strh	r5, [r4, #12]
 8013d68:	e7cf      	b.n	8013d0a <__smakebuf_r+0x18>
	...

08013d6c <_fstat_r>:
 8013d6c:	b538      	push	{r3, r4, r5, lr}
 8013d6e:	4d07      	ldr	r5, [pc, #28]	@ (8013d8c <_fstat_r+0x20>)
 8013d70:	2300      	movs	r3, #0
 8013d72:	4604      	mov	r4, r0
 8013d74:	4608      	mov	r0, r1
 8013d76:	4611      	mov	r1, r2
 8013d78:	602b      	str	r3, [r5, #0]
 8013d7a:	f7ee ffd1 	bl	8002d20 <_fstat>
 8013d7e:	1c43      	adds	r3, r0, #1
 8013d80:	d102      	bne.n	8013d88 <_fstat_r+0x1c>
 8013d82:	682b      	ldr	r3, [r5, #0]
 8013d84:	b103      	cbz	r3, 8013d88 <_fstat_r+0x1c>
 8013d86:	6023      	str	r3, [r4, #0]
 8013d88:	bd38      	pop	{r3, r4, r5, pc}
 8013d8a:	bf00      	nop
 8013d8c:	200016f4 	.word	0x200016f4

08013d90 <_isatty_r>:
 8013d90:	b538      	push	{r3, r4, r5, lr}
 8013d92:	4d06      	ldr	r5, [pc, #24]	@ (8013dac <_isatty_r+0x1c>)
 8013d94:	2300      	movs	r3, #0
 8013d96:	4604      	mov	r4, r0
 8013d98:	4608      	mov	r0, r1
 8013d9a:	602b      	str	r3, [r5, #0]
 8013d9c:	f7ee ffd0 	bl	8002d40 <_isatty>
 8013da0:	1c43      	adds	r3, r0, #1
 8013da2:	d102      	bne.n	8013daa <_isatty_r+0x1a>
 8013da4:	682b      	ldr	r3, [r5, #0]
 8013da6:	b103      	cbz	r3, 8013daa <_isatty_r+0x1a>
 8013da8:	6023      	str	r3, [r4, #0]
 8013daa:	bd38      	pop	{r3, r4, r5, pc}
 8013dac:	200016f4 	.word	0x200016f4

08013db0 <_raise_r>:
 8013db0:	291f      	cmp	r1, #31
 8013db2:	b538      	push	{r3, r4, r5, lr}
 8013db4:	4605      	mov	r5, r0
 8013db6:	460c      	mov	r4, r1
 8013db8:	d904      	bls.n	8013dc4 <_raise_r+0x14>
 8013dba:	2316      	movs	r3, #22
 8013dbc:	6003      	str	r3, [r0, #0]
 8013dbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013dc2:	bd38      	pop	{r3, r4, r5, pc}
 8013dc4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013dc6:	b112      	cbz	r2, 8013dce <_raise_r+0x1e>
 8013dc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013dcc:	b94b      	cbnz	r3, 8013de2 <_raise_r+0x32>
 8013dce:	4628      	mov	r0, r5
 8013dd0:	f000 f830 	bl	8013e34 <_getpid_r>
 8013dd4:	4622      	mov	r2, r4
 8013dd6:	4601      	mov	r1, r0
 8013dd8:	4628      	mov	r0, r5
 8013dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013dde:	f000 b817 	b.w	8013e10 <_kill_r>
 8013de2:	2b01      	cmp	r3, #1
 8013de4:	d00a      	beq.n	8013dfc <_raise_r+0x4c>
 8013de6:	1c59      	adds	r1, r3, #1
 8013de8:	d103      	bne.n	8013df2 <_raise_r+0x42>
 8013dea:	2316      	movs	r3, #22
 8013dec:	6003      	str	r3, [r0, #0]
 8013dee:	2001      	movs	r0, #1
 8013df0:	e7e7      	b.n	8013dc2 <_raise_r+0x12>
 8013df2:	2100      	movs	r1, #0
 8013df4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013df8:	4620      	mov	r0, r4
 8013dfa:	4798      	blx	r3
 8013dfc:	2000      	movs	r0, #0
 8013dfe:	e7e0      	b.n	8013dc2 <_raise_r+0x12>

08013e00 <raise>:
 8013e00:	4b02      	ldr	r3, [pc, #8]	@ (8013e0c <raise+0xc>)
 8013e02:	4601      	mov	r1, r0
 8013e04:	6818      	ldr	r0, [r3, #0]
 8013e06:	f7ff bfd3 	b.w	8013db0 <_raise_r>
 8013e0a:	bf00      	nop
 8013e0c:	200000ec 	.word	0x200000ec

08013e10 <_kill_r>:
 8013e10:	b538      	push	{r3, r4, r5, lr}
 8013e12:	4d07      	ldr	r5, [pc, #28]	@ (8013e30 <_kill_r+0x20>)
 8013e14:	2300      	movs	r3, #0
 8013e16:	4604      	mov	r4, r0
 8013e18:	4608      	mov	r0, r1
 8013e1a:	4611      	mov	r1, r2
 8013e1c:	602b      	str	r3, [r5, #0]
 8013e1e:	f7ee ff3b 	bl	8002c98 <_kill>
 8013e22:	1c43      	adds	r3, r0, #1
 8013e24:	d102      	bne.n	8013e2c <_kill_r+0x1c>
 8013e26:	682b      	ldr	r3, [r5, #0]
 8013e28:	b103      	cbz	r3, 8013e2c <_kill_r+0x1c>
 8013e2a:	6023      	str	r3, [r4, #0]
 8013e2c:	bd38      	pop	{r3, r4, r5, pc}
 8013e2e:	bf00      	nop
 8013e30:	200016f4 	.word	0x200016f4

08013e34 <_getpid_r>:
 8013e34:	f7ee bf28 	b.w	8002c88 <_getpid>

08013e38 <_init>:
 8013e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e3a:	bf00      	nop
 8013e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e3e:	bc08      	pop	{r3}
 8013e40:	469e      	mov	lr, r3
 8013e42:	4770      	bx	lr

08013e44 <_fini>:
 8013e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e46:	bf00      	nop
 8013e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e4a:	bc08      	pop	{r3}
 8013e4c:	469e      	mov	lr, r3
 8013e4e:	4770      	bx	lr
